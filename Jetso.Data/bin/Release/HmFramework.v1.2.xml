<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DmFramework.v1.2</name>
    </assembly>
    <members>
        <member name="T:DmFramework.Collections.BinaryPredicate`1">
            <summary>
            The BinaryPredicate delegate type  encapsulates a method that takes two
            items of the same type, and returns a boolean value representating
            some relationship between them. For example, checking whether two
            items are equal or equivalent is one kind of binary predicate.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <returns>Whether item1 and item2 satisfy the relationship that the BinaryPredicate defines.</returns>
        </member>
        <member name="T:DmFramework.Collections.Algorithms">
            <summary>
            Algorithms contains a number of static methods that implement
            algorithms that work on collections. Most of the methods deal with
            the standard generic collection interfaces such as IEnumerable&lt;T&gt;,
            ICollection&lt;T&gt; and IList&lt;T&gt;.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Range``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Returns a view onto a sub-range of a list. Items from <paramref name="list"/> are not copied; the
            returned IList&lt;T&gt; is simply a different view onto the same underlying items. Changes to <paramref name="list"/>
            are reflected in the view, and vice versa. Insertions and deletions in the view change the size of the
            view, but insertions and deletions in the underlying list do not.
            </summary>
            <remarks>This method can be used to apply an algorithm to a portion of a list. For example:
            <code>Algorithms.ReverseInPlace(Algorithms.Range(list, 3, 6))</code>
            will reverse the 6 items beginning at index 3.</remarks>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to view.</param>
            <param name="start">The starting index of the view.</param>
            <param name="count">The number of items in the view.</param>
            <returns>A list that is a view onto the given sub-list. </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> + <paramref name="count"/> is greater than the
            size of <paramref name="list"/>.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Range``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns a view onto a sub-range of an array. Items from <paramref name="array"/> are not copied; the
            returned IList&lt;T&gt; is simply a different view onto the same underlying items. Changes to <paramref name="array"/>
            are reflected in the view, and vice versa. Insertions and deletions in the view change the size of the
            view. After an insertion, the last item in <paramref name="array"/> "falls off the end". After a deletion, the
            last item in array becomes the default value (0 or null).
            </summary>
            <remarks>This method can be used to apply an algorithm to a portion of a array. For example:
            <code>Algorithms.ReverseInPlace(Algorithms.Range(array, 3, 6))</code>
            will reverse the 6 items beginning at index 3.</remarks>
            <param name="array">The array to view.</param>
            <param name="start">The starting index of the view.</param>
            <param name="count">The number of items in the view.</param>
            <returns>A list that is a view onto the given sub-array. </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> + <paramref name="count"/> is greater than the
            size of <paramref name="array"/>.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReadOnly``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns a read-only view onto a collection. The returned ICollection&lt;T&gt; interface
            only allows operations that do not change the collection: GetEnumerator, Contains, CopyTo,
            Count. The ReadOnly property returns false, indicating that the collection is read-only. All other
            methods on the interface throw a NotSupportedException.
            </summary>
            <remarks>The data in the underlying collection is not copied. If the underlying
            collection is changed, then the read-only view also changes accordingly.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to wrap.</param>
            <returns>A read-only view onto <paramref name="collection"/>. If <paramref name="collection"/> is null, then null is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a read-only view onto a list. The returned IList&lt;T&gt; interface
            only allows operations that do not change the list: GetEnumerator, Contains, CopyTo,
            Count, IndexOf, and the get accessor of the indexer.
            The IsReadOnly property returns true, indicating that the list is read-only. All other
            methods on the interface throw a NotSupportedException.
            </summary>
            <remarks>The data in the underlying list is not copied. If the underlying
            list is changed, then the read-only view also changes accordingly.</remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to wrap.</param>
            <returns>A read-only view onto <paramref name="list"/>. Returns null if <paramref name="list"/> is null.
            If <paramref name="list"/> is already read-only, returns <paramref name="list"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only view onto a dictionary. The returned IDictionary&lt;TKey,TValue&gt; interface
            only allows operations that do not change the dictionary.
            The IsReadOnly property returns true, indicating that the dictionary is read-only. All other
            methods on the interface throw a NotSupportedException.
            </summary>
            <remarks>The data in the underlying dictionary is not copied. If the underlying
            dictionary is changed, then the read-only view also changes accordingly.</remarks>
            <param name="dictionary">The dictionary to wrap.</param>
            <returns>A read-only view onto <paramref name="dictionary"/>. Returns null if <paramref name="dictionary"/> is null.
            If <paramref name="dictionary"/> is already read-only, returns <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TypedAs``1(System.Collections.IEnumerable)">
            <summary>
            Given a non-generic IEnumerable interface, wrap a generic IEnumerable&lt;T&gt;
            interface around it. The generic interface will enumerate the same objects as the
            underlying non-generic collection, but can be used in places that require a generic interface.
            The underlying non-generic collection must contain only items that
            are of type <typeparamref name="T"/> or a type derived from it. This method is useful
            when interfacing older, non-generic collections to newer code that uses generic interfaces.
            </summary>
            <remarks>Some collections implement both generic and non-generic interfaces. For efficiency,
            this method will first attempt to cast <paramref name="untypedCollection"/> to IEnumerable&lt;T&gt;.
            If that succeeds, it is returned; otherwise, a wrapper object is created.</remarks>
            <typeparam name="T">The item type of the wrapper collection.</typeparam>
            <param name="untypedCollection">An untyped collection. This collection should only contain
            items of type <typeparamref name="T"/> or a type derived from it. </param>
            <returns>A generic IEnumerable&lt;T&gt; wrapper around <paramref name="untypedCollection"/>.
            If <paramref name="untypedCollection"/> is null, then null is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TypedAs``1(System.Collections.ICollection)">
            <summary>
            Given a non-generic ICollection interface, wrap a generic ICollection&lt;T&gt;
            interface around it. The generic interface will enumerate the same objects as the
            underlying non-generic collection, but can be used in places that require a generic interface.
            The underlying non-generic collection must contain only items that
            are of type <typeparamref  name="T"/> or a type derived from it. This method is useful
            when interfacing older, non-generic collections to newer code that uses generic interfaces.
            </summary>
            <remarks><para>Some collections implement both generic and non-generic interfaces. For efficiency,
            this method will first attempt to cast <paramref name="untypedCollection"/> to ICollection&lt;T&gt;.
            If that succeeds, it is returned; otherwise, a wrapper object is created.</para>
            <para>Unlike the generic interface, the non-generic ICollection interfaces does
            not contain methods for adding or removing items from the collection. For this reason,
            the returned ICollection&lt;T&gt; will be read-only.</para></remarks>
            <typeparam  name="T">The item type of the wrapper collection.</typeparam>
            <param name="untypedCollection">An untyped collection. This collection should only contain
            items of type <typeparamref  name="T"/> or a type derived from it. </param>
            <returns>A generic ICollection&lt;T&gt; wrapper around <paramref name="untypedCollection"/>.
            If <paramref name="untypedCollection"/> is null, then null is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TypedAs``1(System.Collections.IList)">
            <summary>
            Given a non-generic IList interface, wrap a generic IList&lt;T&gt;
            interface around it. The generic interface will enumerate the same objects as the
            underlying non-generic list, but can be used in places that require a generic interface.
            The underlying non-generic list must contain only items that
            are of type <typeparamref name="T"/> or a type derived from it. This method is useful
            when interfacing older, non-generic lists to newer code that uses generic interfaces.
            </summary>
            <remarks>Some collections implement both generic and non-generic interfaces. For efficiency,
            this method will first attempt to cast <paramref name="untypedList"/> to IList&lt;T&gt;.
            If that succeeds, it is returned; otherwise, a wrapper object is created.</remarks>
            <typeparam name="T">The item type of the wrapper list.</typeparam>
            <param name="untypedList">An untyped list. This list should only contain
            items of type <typeparamref name="T"/> or a type derived from it. </param>
            <returns>A generic IList&lt;T&gt; wrapper around <paramref name="untypedList"/>.
            If <paramref name="untypedList"/> is null, then null is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Untyped``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Given a generic ICollection&lt;T&gt; interface, wrap a non-generic (untyped)
            ICollection interface around it. The non-generic interface will contain the same objects as the
            underlying generic collection, but can be used in places that require a non-generic interface.
            This method is useful when interfacing generic interfaces with older code that uses non-generic interfaces.
            </summary>
            <remarks>Many generic collections already implement the non-generic interfaces directly. This
            method will first attempt to simply cast <paramref name="typedCollection"/> to ICollection. If that
            succeeds, it is returned; if it fails, then a wrapper object is created.</remarks>
            <typeparam name="T">The item type of the underlying collection.</typeparam>
            <param name="typedCollection">A typed collection to wrap.</param>
            <returns>A non-generic ICollection wrapper around <paramref name="typedCollection"/>.
            If <paramref name="typedCollection"/> is null, then null is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Untyped``1(System.Collections.Generic.IList{``0})">
            <summary>
            Given a generic IList&lt;T&gt; interface, wrap a non-generic (untyped)
            IList interface around it. The non-generic interface will contain the same objects as the
            underlying generic list, but can be used in places that require a non-generic interface.
            This method is useful when interfacing generic interfaces with older code that uses non-generic interfaces.
            </summary>
            <remarks>Many generic collections already implement the non-generic interfaces directly. This
            method will first attempt to simply cast <paramref name="typedList"/> to IList. If that
            succeeds, it is returned; if it fails, then a wrapper object is created.</remarks>
            <typeparam name="T">The item type of the underlying list.</typeparam>
            <param name="typedList">A typed list to wrap.</param>
            <returns>A non-generic IList wrapper around <paramref name="typedList"/>.
            If <paramref name="typedList"/> is null, then null is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReadWriteList``1(``0[])">
            <summary>
            <para>Creates a read-write IList&lt;T&gt; wrapper around an array. When an array is
            implicitely converted to an IList&lt;T&gt;, changes to the items in the array cannot
            be made through the interface. This method creates a read-write IList&lt;T&gt; wrapper
            on an array that can be used to make changes to the array. </para>
            <para>Use this method when you need to pass an array to an algorithms that takes an
            IList&lt;T&gt; and that tries to modify items in the list. Algorithms in this class generally do not
            need this method, since they have been design to operate on arrays even when they
            are passed as an IList&lt;T&gt;.</para>
            </summary>
            <remarks>Since arrays cannot be resized, inserting an item causes the last item in the array to be automatically
            removed. Removing an item causes the last item in the array to be replaced with a default value (0 or null). Clearing
            the list causes all the items to be replaced with a default value.</remarks>
            <param name="array">The array to wrap.</param>
            <returns>An IList&lt;T&gt; wrapper onto <paramref name="array"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>Replace all items in a collection equal to a particular value with another values, yielding another collection.</summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="collection">The collection to process.</param>
            <param name="itemFind">The value to find and replace within <paramref name="collection"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order,
            with the appropriate replacements made.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Replace all items in a collection equal to a particular value with another values, yielding another collection. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="collection">The collection to process.</param>
            <param name="itemFind">The value to find and replace within <paramref name="collection"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order,
            with the appropriate replacements made.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)">
            <summary>Replace all items in a collection that a predicate evalues at true with a value, yielding another collection. .</summary>
            <param name="collection">The collection to process.</param>
            <param name="predicate">The predicate used to evaluate items with the collection. If the predicate returns true for a particular
            item, the item is replaces with <paramref name="replaceWith"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order,
            with the appropriate replacements made.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReplaceInPlace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Replace all items in a list or array equal to a particular value with another value. The replacement is done in-place, changing
            the list.
            </summary>
            <remarks><para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to process.</param>
            <param name="itemFind">The value to find and replace within <paramtype name="T"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReplaceInPlace``1(System.Collections.Generic.IList{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Replace all items in a list or array equal to a particular value with another values.
            The replacement is done in-place, changing
            the list. A passed IEqualityComparer is used to determine equality.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to process.</param>
            <param name="itemFind">The value to find and replace within <paramtype name="T"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReplaceInPlace``1(System.Collections.Generic.IList{``0},System.Predicate{``0},``0)">
            <summary>
            Replace all items in a list or array that a predicate evaluates at true with a value. The replacement is done in-place, changing
            the list.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to process.</param>
            <param name="predicate">The predicate used to evaluate items with the collection. If the predicate returns true for a particular
            item, the item is replaces with <paramref name="replaceWith"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove consecutive equal items from a collection, yielding another collection. In each run of consecutive equal items
            in the collection, all items after the first item in the run are removed.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="collection">The collection to process.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order,
            with consecutive duplicates removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Remove consecutive equal items from a collection, yielding another collection. In each run of consecutive equal items
            in the collection, all items after the first item in the run are removed. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="collection">The collection to process.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order,
            with consecutive duplicates removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="equalityComparer"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0},DmFramework.Collections.BinaryPredicate{``0})">
            <summary>
            Remove consecutive "equal" items from a collection, yielding another collection. In each run of consecutive equal items
            in the collection, all items after the first item in the run are removed. The passed
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being removed need not be true equality. </remarks>
            <param name="collection">The collection to process.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". An item <c>current</c> is removed if <c>predicate(first, current)==true</c>, where
            <c>first</c> is the first item in the group of "duplicate" items.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order,
            with consecutive "duplicates" removed.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RemoveDuplicatesInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove consecutive equal items from a list or array. In each run of consecutive equal items
            in the list, all items after the first item in the run are removed. The removal is done in-place, changing
            the list.
            </summary>
            <remarks><para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to process.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RemoveDuplicatesInPlace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Remove subsequent consecutive equal items from a list or array. In each run of consecutive equal items
            in the list, all items after the first item in the run are removed.
            The replacement is done in-place, changing
            the list. A passed IEqualityComparer is used to determine equality.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to process.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RemoveDuplicatesInPlace``1(System.Collections.Generic.IList{``0},DmFramework.Collections.BinaryPredicate{``0})">
            <summary>
            Remove consecutive "equal" items from a list or array. In each run of consecutive equal items
            in the list, all items after the first item in the run are removed. The replacement is done in-place, changing
            the list. The passed BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks><para>Since an arbitrary BinaryPredicate is passed to this function, what is being tested for need not be true equality. </para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to process.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FirstConsecutiveEqual``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Finds the first occurence of <paramref name="count"/> consecutive equal items in the
            list.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to examine.</param>
            <param name="count">The number of consecutive equal items to look for. The count must be at least 1.</param>
            <returns>The index of the first item in the first run of <paramref name="count"/> consecutive equal items, or -1 if no such run exists..</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FirstConsecutiveEqual``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the first occurence of <paramref name="count"/> consecutive equal items in the
            list. A passed IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to examine.</param>
            <param name="count">The number of consecutive equal items to look for. The count must be at least 1.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>The index of the first item in the first run of <paramref name="count"/> consecutive equal items, or -1 if no such run exists.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FirstConsecutiveEqual``1(System.Collections.Generic.IList{``0},System.Int32,DmFramework.Collections.BinaryPredicate{``0})">
            <summary>
            Finds the first occurence of <paramref name="count"/> consecutive "equal" items in the
            list. The passed BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being tested for need not be true equality. </remarks>
            <param name="list">The list to examine.</param>
            <param name="count">The number of consecutive equal items to look for. The count must be at least 1.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
            <returns>The index of the first item in the first run of <paramref name="count"/> consecutive equal items, or -1 if no such run exists.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FirstConsecutiveWhere``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Finds the first occurence of <paramref name="count"/> consecutive items in the
            list for which a given predicate returns true.
            </summary>
            <param name="list">The list to examine.</param>
            <param name="count">The number of consecutive items to look for. The count must be at least 1.</param>
            <param name="predicate">The predicate used to test each item.</param>
            <returns>The index of the first item in the first run of <paramref name="count"/> items where <paramref name="predicate"/>
            returns true for all items in the run, or -1 if no such run exists.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FindFirstWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Finds the first item in a collection that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <remarks>If the default value for T could be present in the collection, and
            would be matched by the predicate, then this method is inappropriate, because
            you cannot disguish whether the default value for T was actually present in the collection,
            or no items matched the predicate. In this case, use TryFindFirstWhere.</remarks>
            <param name="collection">The collection to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The first item in the collection that matches the condition, or the default value for T (0 or null) if no
            item that matches the condition is found.</returns>
            <seealso cref="M:DmFramework.Collections.Algorithms.TryFindFirstWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)"/>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TryFindFirstWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            Finds the first item in a collection that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="collection">The collection to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="foundItem">Outputs the first item in the collection that matches the condition, if the method returns true.</param>
            <returns>True if an item satisfying the condition was found. False if no such item exists in the collection.</returns>
            <seealso cref="M:DmFramework.Collections.Algorithms.FindFirstWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})"/>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FindLastWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Finds the last item in a collection that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <remarks><para>If the collection implements IList&lt;T&gt;, then the list is scanned in reverse until a
            matching item is found. Otherwise, the entire collection is iterated in the forward direction.</para>
            <para>If the default value for T could be present in the collection, and
            would be matched by the predicate, then this method is inappropriate, because
            you cannot disguish whether the default value for T was actually present in the collection,
            or no items matched the predicate. In this case, use TryFindFirstWhere.</para></remarks>
            <param name="collection">The collection to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The last item in the collection that matches the condition, or the default value for T (0 or null) if no
            item that matches the condition is found.</returns>
            <seealso cref="M:DmFramework.Collections.Algorithms.TryFindLastWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)"/>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TryFindLastWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            Finds the last item in a collection that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <remarks>If the collection implements IList&lt;T&gt;, then the list is scanned in reverse until a
            matching item is found. Otherwise, the entire collection is iterated in the forward direction.</remarks>
            <param name="collection">The collection to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="foundItem">Outputs the last item in the collection that matches the condition, if the method returns true.</param>
            <returns>True if an item satisfying the condition was found. False if no such item exists in the collection.</returns>
            <seealso cref="M:DmFramework.Collections.Algorithms.FindLastWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})"/>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FindWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Enumerates all the items in <paramref name="collection"/> that satisfy the condition defined
            by <paramref name="predicate"/>.
            </summary>
            <param name="collection">The collection to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the items that satisfy the condition.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FindFirstIndexWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Finds the index of the first item in a list that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="list">The list to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The index of the first item satisfying the condition. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FindLastIndexWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Finds the index of the last item in a list that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="list">The list to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The index of the last item satisfying the condition. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FindIndicesWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Enumerates the indices of all the items in <paramref name="list"/> that satisfy the condition defined
            by <paramref name="predicate"/>.
            </summary>
            <param name="list">The list to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items that satisfy the condition.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FirstIndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Finds the index of the first item in a list equal to a given item.</summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <returns>The index of the first item equal to <paramref name="item"/>. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FirstIndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the index of the first item in a list equal to a given item. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>The index of the first item equal to <paramref name="item"/>. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.LastIndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Finds the index of the last item in a list equal to a given item.</summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <returns>The index of the last item equal to <paramref name="item"/>. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.LastIndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the index of the last item in a list equal to a given item. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>The index of the last item equal to <paramref name="item"/>. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndicesOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Enumerates the indices of all the items in a list equal to a given item.</summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items equal to <paramref name="item"/>. </returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndicesOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Enumerates the indices of all the items in a list equal to a given item. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items equal to <paramref name="item"/>. </returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FirstIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Finds the index of the first item in a list equal to one of several given items.</summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <returns>The index of the first item equal to any of the items in the collection <paramref name="itemsToLookFor"/>.
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FirstIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the index of the first item in a list equal to one of several given items. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.
            Only the Equals and GetHashCode methods will be called.</param>
            <returns>The index of the first item equal to any of the items in the collection <paramref name="itemsToLookFor"/>.
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FirstIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},DmFramework.Collections.BinaryPredicate{``0})">
            <summary>
            Finds the index of the first item in a list "equal" to one of several given items. The passed
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being removed need not be true equality. This methods finds
            first item X which satisfies BinaryPredicate(X,Y), where Y is one of the items in <paramref name="itemsToLookFor"/></remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
            <returns>The index of the first item "equal" to any of the items in the collection <paramref name="itemsToLookFor"/>, using
            <paramtype name="BinaryPredicate{T}"/> as the test for equality.
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.LastIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Finds the index of the last item in a list equal to one of several given items.</summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <returns>The index of the last item equal to any of the items in the collection <paramref name="itemsToLookFor"/>.
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.LastIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the index of the last item in a list equal to one of several given items. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.</param>
            <returns>The index of the last item equal to any of the items in the collection <paramref name="itemsToLookFor"/>.
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.LastIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},DmFramework.Collections.BinaryPredicate{``0})">
            <summary>
            Finds the index of the last item in a list "equal" to one of several given items. The passed
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being removed need not be true equality. This methods finds
            last item X which satisfies BinaryPredicate(X,Y), where Y is one of the items in <paramref name="itemsToLookFor"/></remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
            <returns>The index of the last item "equal" to any of the items in the collection <paramref name="itemsToLookFor"/>, using
            <paramtype name="BinaryPredicate"/> as the test for equality.
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndicesOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Enumerates the indices of all the items in a list equal to one of several given items.</summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">A collection of items to search for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items equal to
            any of the items in the collection <paramref name="itemsToLookFor"/>. </returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndicesOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Enumerates the indices of all the items in a list equal to one of several given items. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">A collection of items to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. </param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items equal to
            any of the items in the collection <paramref name="itemsToLookFor"/>. </returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndicesOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},DmFramework.Collections.BinaryPredicate{``0})">
            <summary>
            Enumerates the indices of all the items in a list equal to one of several given items. The passed
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being removed need not be true equality. This methods finds
            last item X which satisfies BinaryPredicate(X,Y), where Y is one of the items in <paramref name="itemsToLookFor"/></remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">A collection of items to search for.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items "equal" to any of the items
            in the collection <paramref name="itemsToLookFor"/>, using
            <paramtest name="BinaryPredicate"/> as the test for equality. </returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SearchForSubsequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Searchs a list for a sub-sequence of items that match a particular pattern. A subsequence
            of <paramref name="list"/> matches pattern at index i if list[i] is equal to the first item
            in <paramref name="pattern"/>, list[i+1] is equal to the second item in <paramref name="pattern"/>,
            and so forth for all the items in <paramref name="pattern"/>.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="pattern">The sequence of items to search for.</param>
            <returns>The first index with <paramref name="list"/> that matches the items in <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SearchForSubsequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},DmFramework.Collections.BinaryPredicate{``0})">
            <summary>
            Searchs a list for a sub-sequence of items that match a particular pattern. A subsequence
            of <paramref name="list"/> matches pattern at index i if list[i] is "equal" to the first item
            in <paramref name="pattern"/>, list[i+1] is "equal" to the second item in <paramref name="pattern"/>,
            and so forth for all the items in <paramref name="pattern"/>. The passed
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being tested
            for in the pattern need not be equality. </remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="pattern">The sequence of items to search for.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
            <returns>The first index with <paramref name="list"/> that matches the items in <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SearchForSubsequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Searchs a list for a sub-sequence of items that match a particular pattern. A subsequence
            of <paramref name="list"/> matches pattern at index i if list[i] is equal to the first item
            in <paramref name="pattern"/>, list[i+1] is equal to the second item in <paramref name="pattern"/>,
            and so forth for all the items in <paramref name="pattern"/>. The passed
            instance of IEqualityComparer&lt;T&gt; is used for determining if two items are equal.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="pattern">The sequence of items to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>The first index with <paramref name="list"/> that matches the items in <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if one collection is a subset of another, considered as sets. The first set is a subset
            of the second set if every item in the first set also occurs in the second set. If an item appears X times in the first set,
            it must appear at least X times in the second set.
            </summary>
            <remarks>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsSubsetOf method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <returns>True if <paramref name="collection1"/> is a subset of <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if one collection is a subset of another, considered as sets. The first set is a subset
            of the second set if every item in the first set also occurs in the second set. If an item appears X times in the first set,
            it must appear at least X times in the second set.
            </summary>
            <remarks>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsSubsetOf method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.</param>
            <returns>True if <paramref name="collection1"/> is a subset of <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if one collection is a proper subset of another, considered as sets. The first set is a proper subset
            of the second set if every item in the first set also occurs in the second set, and the first set is strictly smaller than
            the second set. If an item appears X times in the first set,
            it must appear at least X times in the second set.
            </summary>
            <remarks>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsSubsetOf method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <returns>True if <paramref name="collection1"/> is a subset of <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if one collection is a proper subset of another, considered as sets. The first set is a proper subset
            of the second set if every item in the first set also occurs in the second set, and the first set is strictly smaller than
            the second set. If an item appears X times in the first set,
            it must appear at least X times in the second set.
            </summary>
            <remarks>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsSubsetOf method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>True if <paramref name="collection1"/> is a proper subset of <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.DisjointSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if two collections are disjoint, considered as sets. Two sets are disjoint if they
            have no common items.
            </summary>
            <remarks>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsDisjoint method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <returns>True if <paramref name="collection1"/> are <paramref name="collection2"/> are disjoint, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.DisjointSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if two collections are disjoint, considered as sets. Two sets are disjoint if they
            have no common items.
            </summary>
            <remarks>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsDisjoint method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <param name="equalityComparer">The IEqualityComparerComparer&lt;T&gt; used to compare items for equality.
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>True if <paramref name="collection1"/> are <paramref name="collection2"/> are disjoint, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.EqualSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if two collections are equal, considered as sets. Two sets are equal if they
            have have the same items, with order not being significant.
            </summary>
            <remarks>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the EqualTo method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <returns>True if <paramref name="collection1"/> are <paramref name="collection2"/> are equal, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.EqualSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if two collections are equal, considered as sets. Two sets are equal if they
            have have the same items, with order not being significant.
            </summary>
            <remarks>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the EqualTo method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>True if <paramref name="collection1"/> are <paramref name="collection2"/> are equal, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SetIntersection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the set-theoretic intersection of two collections. The intersection of two sets
            is all items that appear in both of the sets. If an item appears X times in one set,
            and Y times in the other set, the intersection contains the item Minimum(X,Y) times.
            The source collections are not changed.
            A new collection is created with the intersection of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the Intersection or IntersectionWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to intersect.</param>
            <param name="collection2">The second collection to intersect.</param>
            <returns>The intersection of the two collections, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SetIntersection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Computes the set-theoretic intersection of two collections. The intersection of two sets
            is all items that appear in both of the sets. If an item appears X times in one set,
            and Y times in the other set, the intersection contains the item Minimum(X,Y) times.
            The source collections are not changed.
            A new collection is created with the intersection of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the Intersection or IntersectionWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to intersect.</param>
            <param name="collection2">The second collection to intersect.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>The intersection of the two collections, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SetUnion``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the set-theoretic union of two collections. The union of two sets
            is all items that appear in either of the sets. If an item appears X times in one set,
            and Y times in the other set, the union contains the item Maximum(X,Y) times.
            The source collections are not changed.
            A new collection is created with the union of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the Union or UnionWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to union.</param>
            <param name="collection2">The second collection to union.</param>
            <returns>The union of the two collections, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SetUnion``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Computes the set-theoretic union of two collections. The union of two sets
            is all items that appear in either of the sets. If an item appears X times in one set,
            and Y times in the other set, the union contains the item Maximum(X,Y) times.
            The source collections are not changed.
            A new collection is created with the union of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the union or unionWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to union.</param>
            <param name="collection2">The second collection to union.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>The union of the two collections, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SetDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the set-theoretic difference of two collections. The difference of two sets
            is all items that appear in the first set, but not in the second. If an item appears X times in the first set,
            and Y times in the second set, the difference contains the item X - Y times (0 times if X &lt; Y).
            The source collections are not changed.
            A new collection is created with the difference of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the Difference or DifferenceWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to difference.</param>
            <param name="collection2">The second collection to difference.</param>
            <returns>The difference of <paramref name="collection1"/> and <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SetDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Computes the set-theoretic difference of two collections. The difference of two sets
            is all items that appear in the first set, but not in the second. If an item appears X times in the first set,
            and Y times in the second set, the difference contains the item X - Y times (0 times if X &lt; Y).
            The source collections are not changed.
            A new collection is created with the difference of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the difference or differenceWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to difference.</param>
            <param name="collection2">The second collection to difference.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>The difference of <paramref name="collection1"/> and <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SetSymmetricDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the set-theoretic symmetric difference of two collections. The symmetric difference of two sets
            is all items that appear in the one of the sets, but not in the other. If an item appears X times in the one set,
            and Y times in the other set, the symmetric difference contains the item AbsoluteValue(X - Y) times.
            The source collections are not changed.
            A new collection is created with the symmetric difference of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the SymmetricDifference or SymmetricDifferenceWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to symmetric difference.</param>
            <param name="collection2">The second collection to symmetric difference.</param>
            <returns>The symmetric difference of <paramref name="collection1"/> and <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SetSymmetricDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Computes the set-theoretic symmetric difference of two collections. The symmetric difference of two sets
            is all items that appear in the one of the sets, but not in the other. If an item appears X times in the one set,
            and Y times in the other set, the symmetric difference contains the item AbsoluteValue(X - Y) times.
            The source collections are not changed.
            A new collection is created with the symmetric difference of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the symmetric difference or symmetric differenceWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to symmetric difference.</param>
            <param name="collection2">The second collection to symmetric difference.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>The symmetric difference of <paramref name="collection1"/> and <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.CartesianProduct``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Computes the cartestian product of two collections: all possible pairs of items, with the first item taken from the first collection and
            the second item taken from the second collection. If the first collection has N items, and the second collection has M items, the cartesian
            product will have N * M pairs.
            </summary>
            <typeparam name="TFirst">The type of items in the first collection.</typeparam>
            <typeparam name="TSecond">The type of items in the second collection.</typeparam>
            <param name="first">The first collection.</param>
            <param name="second">The second collection.</param>
            <returns>An IEnumerable&lt;Pair&lt;TFirst, TSecond&gt;&gt; that enumerates the cartesian product of the two collections.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a String representation of the elements in the collection.
            The String representation starts with "{", has a list of items separated
            by commas (","), and ends with "}". Each item in the collection is
            converted to a String by calling its ToString method (null is represented by "null").
            Contained collections (except strings) are recursively converted to strings by this method.
            </summary>
            <param name="collection">A collection to get the String representation of.</param>
            <returns>The String representation of the collection. If <paramref name="collection"/> is null, then the String "null" is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.String,System.String,System.String)">
            <summary>
            Gets a String representation of the elements in the collection.
            The String to used at the beginning and end, and to separate items,
            and supplied by parameters. Each item in the collection is
            converted to a String by calling its ToString method (null is represented by "null").
            </summary>
            <param name="collection">A collection to get the String representation of.</param>
            <param name="recursive">If true, contained collections (except strings) are converted to strings by a recursive call to this method, instead
            of by calling ToString.</param>
            <param name="start">The String to appear at the beginning of the output String.</param>
            <param name="separator">The String to appear between each item in the String.</param>
            <param name="end">The String to appear at the end of the output String.</param>
            <returns>The String representation of the collection. If <paramref name="collection"/> is null, then the String "null" is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="start"/>, <paramref name="separator"/>, or <paramref name="end"/>
             is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ToString``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Gets a String representation of the mappings in a dictionary.
            The String representation starts with "{", has a list of mappings separated
            by commas (", "), and ends with "}". Each mapping is represented
            by "key->value". Each key and value in the dictionary is
            converted to a String by calling its ToString method (null is represented by "null").
            Contained collections (except strings) are recursively converted to strings by this method.
            </summary>
            <param name="dictionary">A dictionary to get the String representation of.</param>
            <returns>The String representation of the collection, or "null"
            if <paramref name="dictionary"/> is null.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetRandomGenerator">
            <summary>
            Return a private random number generator to use if the user
            doesn't supply one.
            </summary>
            <returns>The private random number generator. Only one is ever created
            and is always returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RandomShuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Randomly shuffles the items in a collection, yielding a new collection.</summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to shuffle.</param>
            <returns>An array with the same size and items as <paramref name="collection"/>, but the items in a randomly chosen order.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RandomShuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>Randomly shuffles the items in a collection, yielding a new collection.</summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to shuffle.</param>
            <param name="randomGenerator">The random number generator to use to select the random order.</param>
            <returns>An array with the same size and items as <paramref name="collection"/>, but the items in a randomly chosen order.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RandomShuffleInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>Randomly shuffles the items in a list or array, in place.</summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to shuffle.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RandomShuffleInPlace``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>Randomly shuffles the items in a list or array, in place.</summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to shuffle.</param>
            <param name="randomGenerator">The random number generator to use to select the random order.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Picks a random subset of <paramref name="count"/> items from <paramref name="collection"/>, and places
            those items into a random order. No item is selected more than once.
            </summary>
            <remarks>If the collection implements IList&lt;T&gt;, then this method takes time O(<paramref name="count"/>).
            Otherwise, this method takes time O(N), where N is the number of items in the collection.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection of items to select from. This collection is not changed.</param>
            <param name="count">The number of items in the subset to choose.</param>
            <returns>An array of <paramref name="count"/> items, selected at random from <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or greater than <paramref name="collection"/>.Count.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Picks a random subset of <paramref name="count"/> items from <paramref name="collection"/>, and places
            those items into a random order. No item is selected more than once.
            </summary>
            <remarks>If the collection implements IList&lt;T&gt;, then this method takes time O(<paramref name="count"/>).
            Otherwise, this method takes time O(N), where N is the number of items in the collection.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection of items to select from. This collection is not changed.</param>
            <param name="count">The number of items in the subset to choose.</param>
            <param name="randomGenerator">The random number generates used to make the selection.</param>
            <returns>An array of <paramref name="count"/> items, selected at random from <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or greater than <paramref name="collection"/>.Count.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="randomGenerator"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GeneratePermutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates all the possible permutations of the items in <paramref name="collection"/>. If <paramref name="collection"/>
            has N items, then N factorial permutations will be generated. This method does not compare the items to determine if
            any of them are equal. If some items are equal, the same permutation may be generated more than once. For example,
            if the collections contains the three items A, A, and B, then this method will generate the six permutations, AAB, AAB,
            ABA, ABA, BAA, BAA (not necessarily in that order). To take equal items into account, use the GenerateSortedPermutations
            method.
            </summary>
            <typeparam name="T">The type of items to permute.</typeparam>
            <param name="collection">The collection of items to permute.</param>
            <returns>An IEnumerable&lt;T[]&gt; that enumerations all the possible permutations of the
            items in <paramref name="collection"/>. Each permutations is returned as an array. The items in the array
            should be copied if they need to be used after the next permutation is generated; each permutation may
            reuse the same array instance.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GenerateSortedPermutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates all the possible permutations of the items in <paramref name="collection"/>, in lexicographical order.
            Even if some items are equal, the same permutation will not be generated more than once. For example,
            if the collections contains the three items A, A, and B, then this method will generate only the three permutations, AAB, ABA,
            BAA.
            </summary>
            <typeparam name="T">The type of items to permute.</typeparam>
            <param name="collection">The collection of items to permute.</param>
            <returns>An IEnumerable&lt;T[]&gt; that enumerations all the possible permutations of the
            items in <paramref name="collection"/>. Each permutations is returned as an array. The items in the array
            should be copied if they need to be used after the next permutation is generated; each permutation may
            reuse the same array instance.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GenerateSortedPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Generates all the possible permutations of the items in <paramref name="collection"/>, in lexicographical order. A
            supplied IComparer&lt;T&gt; instance is used to compare the items.
            Even if some items are equal, the same permutation will not be generated more than once. For example,
            if the collections contains the three items A, A, and B, then this method will generate only the three permutations, AAB, ABA,
            BAA.
            </summary>
            <typeparam name="T">The type of items to permute.</typeparam>
            <param name="collection">The collection of items to permute.</param>
            <param name="comparer">The IComparer&lt;T&gt; used to compare the items.</param>
            <returns>An IEnumerable&lt;T[]&gt; that enumerations all the possible permutations of the
            items in <paramref name="collection"/>. Each permutations is returned as an array. The items in the array
            should be copied if they need to be used after the next permutation is generated; each permutation may
            reuse the same array instance.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GenerateSortedPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Generates all the possible permutations of the items in <paramref name="collection"/>, in lexicographical order. A
            supplied Comparison&lt;T&gt; delegate is used to compare the items.
            Even if some items are equal, the same permutation will not be generated more than once. For example,
            if the collections contains the three items A, A, and B, then this method will generate only the three permutations, AAB, ABA,
            BAA.
            </summary>
            <typeparam name="T">The type of items to permute.</typeparam>
            <param name="collection">The collection of items to permute.</param>
            <param name="comparison">The Comparison&lt;T&gt; delegate used to compare the items.</param>
            <returns>An IEnumerable&lt;T[]&gt; that enumerations all the possible permutations of the
            items in <paramref name="collection"/>. Each permutations is returned as an array. The items in the array
            should be copied if they need to be used after the next permutation is generated; each permutation may
            reuse the same array instance.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Finds the maximum value in a collection.</summary>
            <remarks>Values in the collection are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <returns>The largest item in the collection. </returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Finds the maximum value in a collection. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparer">The comparer instance used to compare items in the collection.</param>
            <returns>The largest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Finds the maximum value in a collection. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparison">The comparison used to compare items in the collection.</param>
            <returns>The largest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Finds the minimum value in a collection.</summary>
            <remarks>Values in the collection are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <returns>The smallest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Finds the minimum value in a collection. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparer">The comparer instance used to compare items in the collection.</param>
            <returns>The smallest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Finds the minimum value in a collection. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparison">The comparison used to compare items in the collection.</param>
            <returns>The smallest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndexOfMaximum``1(System.Collections.Generic.IList{``0})">
            <summary>Finds the index of the maximum value in a list.</summary>
            <remarks>Values in the list are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>The index of the largest item in the list. If the maximum value appears
            multiple times, the index of the first appearance is used. If the list is empty, -1 is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndexOfMaximum``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Finds the index of the maximum value in a list. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer instance used to compare items in the collection.</param>
            <returns>The index of the largest item in the list. If the maximum value appears
            multiple times, the index of the first appearance is used. If the list is empty, -1 is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndexOfMaximum``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Finds the index of the maximum value in a list. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison used to compare items in the collection.</param>
            <returns>The index of the largest item in the list. If the maximum value appears
            multiple times, the index of the first appearance is used. If the list is empty, -1 is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> or <paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndexOfMinimum``1(System.Collections.Generic.IList{``0})">
            <summary>Finds the index of the minimum value in a list.</summary>
            <remarks>Values in the list are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>The index of the smallest item in the list. If the minimum value appears
            multiple times, the index of the first appearance is used.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndexOfMinimum``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Finds the index of the minimum value in a list. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer instance used to compare items in the collection.</param>
            <returns>The index of the smallest item in the list. If the minimum value appears
            multiple times, the index of the first appearance is used.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.IndexOfMinimum``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Finds the index of the minimum value in a list. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
            <returns>The index of the smallest item in the list. If the minimum value appears
            multiple times, the index of the first appearance is used.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> or <paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Sort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a sorted version of a collection.</summary>
            <remarks>Values are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <param name="collection">The collection to sort.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a sorted version of a collection. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection.
            </summary>
            <param name="collection">The collection to sort.</param>
            <param name="comparer">The comparer instance used to compare items in the collection. Only
            the Compare method is used.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Creates a sorted version of a collection. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <param name="collection">The collection to sort.</param>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SortInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>Sorts a list or array in place.</summary>
            <remarks><para>The Quicksort algorithms is used to sort the items. In virtually all cases,
            this takes time O(N log N), where N is the number of items in the list.</para>
            <para>Values are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to sort.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SortInPlace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a list or array in place. A supplied IComparer&lt;T&gt; is used
            to compare the items in the list.
            </summary>
            <remarks><para>The Quicksort algorithms is used to sort the items. In virtually all cases,
            this takes time O(N log N), where N is the number of items in the list.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to sort.</param>
            <param name="comparer">The comparer instance used to compare items in the collection. Only
            the Compare method is used.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.SortInPlace``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts a list or array in place. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the list.
            </summary>
            <remarks><para>The Quicksort algorithms is used to sort the items. In virtually all cases,
            this takes time O(N log N), where N is the number of items in the list.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to sort.</param>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.StableSort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a sorted version of a collection. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection.
            </summary>
            <remarks>Values are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <param name="collection">The collection to sort.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.StableSort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a sorted version of a collection. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection.
            </summary>
            <param name="collection">The collection to sort.</param>
            <param name="comparer">The comparer instance used to compare items in the collection. Only
            the Compare method is used.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.StableSort``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Creates a sorted version of a collection. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection.
            A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <remarks>Values are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <param name="collection">The collection to sort.</param>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.StableSortInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sorts a list or array in place. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection.
            </summary>
            <remarks><para>Values are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to sort.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.StableSortInPlace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a list or array in place. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection.
            A supplied IComparer&lt;T&gt; is used
            to compare the items in the list.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to sort.</param>
            <param name="comparer">The comparer instance used to compare items in the collection. Only
            the Compare method is used.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.StableSortInPlace``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts a list or array in place. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection.
            A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the list.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to sort.</param>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Int32@)">
            <summary>
            Searches a sorted list for an item via binary search. The list must be sorted
            by the natural ordering of the type (it's implementation of IComparable&lt;T&gt;).
            </summary>
            <param name="list">The sorted list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="index">Returns the first index at which the item can be found. If the return
            value is zero, indicating that <paramref name="item"/> was not present in the list, then this
            returns the index at which <paramref name="item"/> could be inserted to maintain the sorted
            order of the list.</param>
            <returns>The number of items equal to <paramref name="item"/> that appear in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0},System.Int32@)">
            <summary>
            Searches a sorted list for an item via binary search. The list must be sorted
            by the ordering in the passed instance of IComparer&lt;T&gt;.
            </summary>
            <param name="list">The sorted list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="comparer">The comparer instance used to sort the list. Only
            the Compare method is used.</param>
            <param name="index">Returns the first index at which the item can be found. If the return
            value is zero, indicating that <paramref name="item"/> was not present in the list, then this
            returns the index at which <paramref name="item"/> could be inserted to maintain the sorted
            order of the list.</param>
            <returns>
            The number of items equal to <paramref name="item"/> that appear in the list.
            </returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0},System.Int32@)">
            <summary>
            Searches a sorted list for an item via binary search. The list must be sorted
            by the ordering in the passed Comparison&lt;T&gt; delegate.
            </summary>
            <param name="list">The sorted list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="comparison">The comparison delegate used to sort the list.</param>
            <param name="index">Returns the first index at which the item can be found. If the return
            value is zero, indicating that <paramref name="item"/> was not present in the list, then this
            returns the index at which <paramref name="item"/> could be inserted to maintain the sorted
            order of the list.</param>
            <returns>The number of items equal to <paramref name="item"/> that appear in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.MergeSorted``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Merge several sorted collections into a single sorted collection. Each input collection must be sorted
            by the natural ordering of the type (it's implementation of IComparable&lt;T&gt;). The merging
            is stable; equal items maintain their ordering, and equal items in different collections are placed
            in the order of the collections.
            </summary>
            <param name="collections">The set of collections to merge. In many languages, this parameter
            can be specified as several individual parameters.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates all the items in all the collections
            in sorted order. </returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.MergeSorted``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Merge several sorted collections into a single sorted collection. Each input collection must be sorted
            by the ordering in the passed instance of IComparer&lt;T&gt;. The merging
            is stable; equal items maintain their ordering, and equal items in different collections are placed
            in the order of the collections.
            </summary>
            <param name="collections">The set of collections to merge. In many languages, this parameter
            can be specified as several individual parameters.</param>
            <param name="comparer">The comparer instance used to sort the list. Only
            the Compare method is used.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates all the items in all the collections
            in sorted order. </returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.MergeSorted``1(System.Comparison{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Merge several sorted collections into a single sorted collection. Each input collection must be sorted
            by the ordering in the passed Comparison&lt;T&gt; delegate. The merging
            is stable; equal items maintain their ordering, and equal items in different collections are placed
            in the order of the collections.
            </summary>
            <param name="collections">The set of collections to merge. In many languages, this parameter
            can be specified as several individual parameters.</param>
            <param name="comparison">The comparison delegate used to sort the collections.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates all the items in all the collections
            in sorted order. </returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.LexicographicalCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs a lexicographical comparison of two sequences of values. A lexicographical comparison compares corresponding
            pairs of elements from two sequences in order. If the first element of sequence1 is less than the first element of sequence2,
            then the comparison ends and the first sequence is lexicographically less than the second. If the first elements of each sequence
            are equal, then the comparison proceeds to the second element of each sequence. If one sequence is shorter than the other,
            but corresponding elements are all equal, then the shorter sequence is considered less than the longer one.
            </summary>
            <remarks>T must implement either IComparable&lt;T&gt; and this implementation is used
            to compare the items. </remarks>
            <typeparam name="T">Types of items to compare. This type must implement IComparable&lt;T&gt; to allow
            items to be compared.</typeparam>
            <param name="sequence1">The first sequence to compare.</param>
            <param name="sequence2">The second sequence to compare.</param>
            <returns>Less than zero if <paramref name="sequence1"/> is lexicographically less than <paramref name="sequence2"/>.
            Greater than zero if <paramref name="sequence1"/> is lexicographically greater than <paramref name="sequence2"/>.
            Zero if <paramref name="sequence1"/> is equal to <paramref name="sequence2"/>.</returns>
            <exception cref="T:System.NotSupportedException">T does not implement IComparable&lt;T&gt; or IComparable.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.LexicographicalCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Performs a lexicographical comparison of two sequences of values, using a supplied comparison delegate. A lexicographical comparison compares corresponding
            pairs of elements from two sequences in order. If the first element of sequence1 is less than the first element of sequence2,
            then the comparison ends and the first sequence is lexicographically less than the second. If the first elements of each sequence
            are equal, then the comparison proceeds to the second element of each sequence. If one sequence is shorter than the other,
            but corresponding elements are all equal, then the shorter sequence is considered less than the longer one.
            </summary>
            <typeparam name="T">Types of items to compare.</typeparam>
            <param name="sequence1">The first sequence to compare.</param>
            <param name="sequence2">The second sequence to compare.</param>
            <param name="comparison">The IComparison&lt;T&gt; delegate to compare items.
            Only the Compare member function of this interface is called.</param>
            <returns>Less than zero if <paramref name="sequence1"/> is lexicographically less than <paramref name="sequence2"/>.
            Greater than zero if <paramref name="sequence1"/> is lexicographically greater than <paramref name="sequence2"/>.
            Zero if <paramref name="sequence1"/> is equal to <paramref name="sequence2"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.LexicographicalCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a lexicographical comparison of two sequences of values, using a supplied comparer interface. A lexicographical comparison compares corresponding
            pairs of elements from two sequences in order. If the first element of sequence1 is less than the first element of sequence2,
            then the comparison ends and the first sequence is lexicographically less than the second. If the first elements of each sequence
            are equal, then the comparison proceeds to the second element of each sequence. If one sequence is shorter than the other,
            but corresponding elements are all equal, then the shorter sequence is considered less than the longer one.
            </summary>
            <typeparam name="T">Types of items to compare.</typeparam>
            <param name="sequence1">The first sequence to compare.</param>
            <param name="sequence2">The second sequence to compare.</param>
            <param name="comparer">The IComparer&lt;T&gt; used to compare items.
            Only the Compare member function of this interface is called.</param>
            <returns>Less than zero if <paramref name="sequence1"/> is lexicographically less than <paramref name="sequence2"/>.
            Greater than zero if <paramref name="sequence1"/> is lexicographically greater than <paramref name="sequence2"/>.
            Zero if <paramref name="sequence1"/> is equal to <paramref name="sequence2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence1"/>, <paramref name="sequence2"/>, or
            <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetLexicographicalComparer``1">
            <summary>
            Creates an IComparer instance that can be used for comparing ordered
            sequences of type T; that is IEnumerable&lt;Tgt;. This comparer can be used
            for collections or algorithms that use sequences of T as an item type. The Lexicographical
            ordered of sequences is for comparison.
            </summary>
            <remarks>T must implement either IComparable&lt;T&gt; and this implementation is used
            to compare the items. </remarks>
            <returns>At IComparer&lt;IEnumerable&lt;T&gt;&gt; that compares sequences of T.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetLexicographicalComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates an IComparer instance that can be used for comparing ordered
            sequences of type T; that is IEnumerable&lt;Tgt;. This comparer can be uses
            for collections or algorithms that use sequences of T as an item type. The Lexicographics
            ordered of sequences is for comparison.
            </summary>
            <param name="comparer">A comparer instance used to compare individual items of type T.</param>
            <returns>At IComparer&lt;IEnumerable&lt;T&gt;&gt; that compares sequences of T.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetLexicographicalComparer``1(System.Comparison{``0})">
            <summary>
            Creates an IComparer instance that can be used for comparing ordered
            sequences of type T; that is IEnumerable&lt;Tgt;. This comparer can be uses
            for collections or algorithms that use sequences of T as an item type. The Lexicographics
            ordered of sequences is for comparison.
            </summary>
            <param name="comparison">A comparison delegate used to compare individual items of type T.</param>
            <returns>At IComparer&lt;IEnumerable&lt;T&gt;&gt; that compares sequences of T.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetReverseComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Reverses the order of comparison of an IComparer&lt;T&gt;. The resulting comparer can be used,
            for example, to sort a collection in descending order. Equality and hash codes are unchanged.
            </summary>
            <typeparam name="T">The type of items thta are being compared.</typeparam>
            <param name="comparer">The comparer to reverse.</param>
            <returns>An IComparer&lt;T&gt; that compares items in the reverse order of <paramref name="comparer"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetIdentityComparer``1">
            <summary>
            Gets an IEqualityComparer&lt;T&gt; instance that can be used to compare objects
            of type T for object identity only. Two objects compare equal only if they
            are references to the same object.
            </summary>
            <returns>An IEqualityComparer&lt;T&gt; instance for identity comparison.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetReverseComparison``1(System.Comparison{``0})">
            <summary>
            Reverses the order of comparison of an Comparison&lt;T&gt;. The resulting comparison can be used,
            for example, to sort a collection in descending order.
            </summary>
            <typeparam name="T">The type of items that are being compared.</typeparam>
            <param name="comparison">The comparison to reverse.</param>
            <returns>A Comparison&lt;T&gt; that compares items in the reverse order of <paramref name="comparison"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetComparerFromComparison``1(System.Comparison{``0})">
            <summary>
            Given a comparison delegate that compares two items of type T, gets an
            IComparer&lt;T&gt; instance that performs the same comparison.
            </summary>
            <param name="comparison">The comparison delegate to use.</param>
            <returns>An IComparer&lt;T&gt; that performs the same comparing operation
            as <paramref name="comparison"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetComparisonFromComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Given in IComparer&lt;T&gt; instenace that comparers two items from type T,
            gets a Comparison delegate that performs the same comparison.
            </summary>
            <param name="comparer">The IComparer&lt;T&gt; instance to use.</param>
            <returns>A Comparison&lt;T&gt; delegate that performans the same comparing
            operation as <paramref name="comparer"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetCollectionEqualityComparer``1">
            <summary>
            Gets an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation
            that can be used to compare collections of elements (of type T). Two collections
            of T's are equal if they have the same number of items, and corresponding
            items are equal, considered in order. This is the same notion of equality as
            in Algorithms.EqualCollections, but encapsulated in an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation.
            </summary>
            <example>
            The following code creates a Dictionary where the keys are a collection of strings.
            <code>
                Dictionary&lt;IEnumerable&lt;String&gt;, Int32&gt; =
                    new Dictionary&lt;IEnumerable&lt;String&gt;, Int32&gt;(Algorithms.GetCollectionEqualityComparer&lt;String&gt;());
            </code>
            </example>
            <returns>IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation suitable for
            comparing collections of T for equality.</returns>
            <seealso cref="M:DmFramework.Collections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetCollectionEqualityComparer``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            <para>Gets an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation
            that can be used to compare collections of elements (of type T). Two collections
            of T's are equal if they have the same number of items, and corresponding
            items are equal, considered in order. This is the same notion of equality as
            in Algorithms.EqualCollections, but encapsulated in an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation.</para>
            <para>An IEqualityComparer&lt;T&gt; is used to determine if individual T's are equal</para>
            </summary>
            <example>
            The following code creates a Dictionary where the keys are a collection of strings, compared in a case-insensitive way
            <code>
                Dictionary&lt;IEnumerable&lt;String&gt;, Int32&gt; =
                    new Dictionary&lt;IEnumerable&lt;String&gt;, Int32&gt;(Algorithms.GetCollectionEqualityComparer&lt;String&gt;(StringComparer.CurrentCultureIgnoreCase));
            </code>
            </example>
            <param name="equalityComparer">An IEqualityComparer&lt;T&gt; implementation used to compare individual T's.</param>
            <returns>IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation suitable for
            comparing collections of T for equality.</returns>
            <seealso cref="M:DmFramework.Collections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetSetEqualityComparer``1">
            <summary>
            <para>Gets an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation
            that can be used to compare collections of elements (of type T). Two collections
            of T's are equal if they have the same number of items, and corresponding
            items are equal, without regard to order. This is the same notion of equality as
            in Algorithms.EqualSets, but encapsulated in an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation.</para>
            <para>An IEqualityComparer&lt;T&gt; is used to determine if individual T's are equal</para>
            </summary>
            <example>
            The following code creates a Dictionary where the keys are a set of strings, without regard to order
            <code>
                Dictionary&lt;IEnumerable&lt;String&gt;, Int32&gt; =
                    new Dictionary&lt;IEnumerable&lt;String&gt;, Int32&gt;(Algorithms.GetSetEqualityComparer&lt;String&gt;(StringComparer.CurrentCultureIgnoreCase));
            </code>
            </example>
            <returns>IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation suitable for
            comparing collections of T for equality, without regard to order.</returns>
            <seealso cref="M:DmFramework.Collections.Algorithms.EqualSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetSetEqualityComparer``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation
            that can be used to compare collections of elements (of type T). Two collections
            of T's are equal if they have the same number of items, and corresponding
            items are equal, without regard to order. This is the same notion of equality as
            in Algorithms.EqualSets, but encapsulated in an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation.
            </summary>
            <example>
            The following code creates a Dictionary where the keys are a set of strings, without regard to order
            <code>
                Dictionary&lt;IEnumerable&lt;String&gt;, Int32&gt; =
                    new Dictionary&lt;IEnumerable&lt;String&gt;, Int32&gt;(Algorithms.GetSetEqualityComparer&lt;String&gt;());
            </code>
            </example>
            <param name="equalityComparer">An IEqualityComparer&lt;T&gt; implementation used to compare individual T's.</param>
            <returns>IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation suitable for
            comparing collections of T for equality, without regard to order.</returns>
            <seealso cref="M:DmFramework.Collections.Algorithms.EqualSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines if a collection contains any item that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="collection">The collection to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if the collection contains one or more items that satisfy the condition
            defined by <paramref name="predicate"/>. False if the collection does not contain
            an item that satisfies <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="collection">The collection to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>, or if the collection is empty. False if one or more items
            in the collection do not satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.CountWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Counts the number of items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="collection">The collection to count items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>The number of items in the collection that satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Removes all the items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <remarks>If the collection if an array or implements IList&lt;T&gt;, an efficient algorithm that
            compacts items is used. If not, then ICollection&lt;T&gt;.Remove is used
            to remove items from the collection. If the collection is an array or fixed-size list,
            the non-removed elements are placed, in order, at the beginning of
            the list, and the remaining list items are filled with a default value (0 or null).</remarks>
            <param name="collection">The collection to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>Returns a collection of the items that were removed. This collection contains the
            items in the same order that they orginally appeared in <paramref name="collection"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Convert a collection of items by applying a delegate to each item in the collection. The resulting collection
            contains the result of applying <paramref name="converter"/> to each item in <paramref name="sourceCollection"/>, in
            order.
            </summary>
            <typeparam name="TSource">The type of items in the collection to convert.</typeparam>
            <typeparam name="TDest">The type each item is being converted to.</typeparam>
            <param name="sourceCollection">The collection of item being converted.</param>
            <param name="converter">A delegate to the method to call, passing each item in <paramref name="sourceCollection"/>.</param>
            <returns>The resulting collection from applying <paramref name="converter"/> to each item in <paramref name="sourceCollection"/>, in
            order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceCollection"/> or <paramref name="converter"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetDictionaryConverter``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a delegate that converts keys to values by used a dictionary to map values. Keys
            that a not present in the dictionary are converted to the default value (zero or null).
            </summary>
            <remarks>This delegate can be used as a parameter in Convert or ConvertAll methods to convert
            entire collections.</remarks>
            <param name="dictionary">The dictionary used to perform the conversion.</param>
            <returns>A delegate to a method that converts keys to values. </returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.GetDictionaryConverter``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            Creates a delegate that converts keys to values by used a dictionary to map values. Keys
            that a not present in the dictionary are converted to a supplied default value.
            </summary>
            <remarks>This delegate can be used as a parameter in Convert or ConvertAll methods to convert
            entire collections.</remarks>
            <param name="dictionary">The dictionary used to perform the conversion.</param>
            <param name="defaultValue">The result of the conversion for keys that are not present in the dictionary.</param>
            <returns>A delegate to a method that converts keys to values. </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Performs the specified action on each item in a collection.</summary>
            <param name="collection">The collection to process.</param>
            <param name="action">An Action delegate which is invoked for each item in <paramref name="collection"/>.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Partition``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Partition a list or array based on a predicate. After partitioning, all items for which
            the predicate returned true precede all items for which the predicate returned false.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to partition.</param>
            <param name="predicate">A delegate that defines the partitioning condition.</param>
            <returns>The index of the first item in the second half of the partition; i.e., the first item for
            which <paramref name="predicate"/> returned false. If the predicate was true for all items
            in the list, list.Count is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.StablePartition``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Partition a list or array based on a predicate. After partitioning, all items for which
            the predicate returned true precede all items for which the predicate returned false.
            The partition is stable, which means that if items X and Y have the same result from
            the predicate, and X precedes Y in the original list, X will precede Y in the
            partitioned list.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to partition.</param>
            <param name="predicate">A delegate that defines the partitioning condition.</param>
            <returns>The index of the first item in the second half of the partition; i.e., the first item for
            which <paramref name="predicate"/> returned false. If the predicate was true for all items
            in the list, list.Count is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Concatenate``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Concatenates all the items from several collections. The collections need not be of the same type, but
            must have the same item type.
            </summary>
            <param name="collections">The set of collections to concatenate. In many languages, this parameter
            can be specified as several individual parameters.</param>
            <returns>An IEnumerable that enumerates all the items in each of the collections, in order.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if the two collections contain equal items in the same order. The two collections do not need
            to be of the same type; it is permissible to compare an array and an OrderedBag, for instance.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <typeparam name="T">The type of items in the collections.</typeparam>
            <param name="collection1">The first collection to compare.</param>
            <param name="collection2">The second collection to compare.</param>
            <returns>True if the collections have equal items in the same order. If both collections are empty, true is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the two collections contain equal items in the same order. The passed
            instance of IEqualityComparer&lt;T&gt; is used for determining if two items are equal.
            </summary>
            <typeparam name="T">The type of items in the collections.</typeparam>
            <param name="collection1">The first collection to compare.</param>
            <param name="collection2">The second collection to compare.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.
            Only the Equals member function of this interface is called.</param>
            <returns>True if the collections have equal items in the same order. If both collections are empty, true is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/>, <paramref name="collection2"/>, or
            <paramref name="equalityComparer"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},DmFramework.Collections.BinaryPredicate{``0})">
            <summary>
            Determines if the two collections contain "equal" items in the same order. The passed
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being tested
            for need not be equality. For example, the following code determines if each integer in
            list1 is less than or equal to the corresponding integer in list2.
            <code>
            List&lt;Int32&gt; list1, list2;
            if (EqualCollections(list1, list2, delegate(Int32 x, Int32 y) { return x &lt;= y; }) {
                // the check is true...
            }
            </code>
            </remarks>
            <typeparam name="T">The type of items in the collections.</typeparam>
            <param name="collection1">The first collection to compare.</param>
            <param name="collection2">The second collection to compare.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality".
            This predicate can compute any relation between two items; it need not represent equality or an equivalence relation.</param>
            <returns>True if <paramref name="predicate"/>returns true for each corresponding pair of
            items in the two collections. If both collections are empty, true is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/>, <paramref name="collection2"/>, or
            <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Create an array with the items in a collection.</summary>
            <remarks>If <paramref name="collection"/> implements ICollection&lt;T&gt;T, then
            ICollection&lt;T&gt;.CopyTo() is used to fill the array. Otherwise, the IEnumerable&lt;T&gt;.GetEnumerator()
            is used to fill the array.</remarks>
            <typeparam name="T">Element type of the collection.</typeparam>
            <param name="collection">Collection to create array from.</param>
            <returns>An array with the items from the collection, in enumeration order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Count the number of items in an IEnumerable&lt;T&gt; collection. If
            a more specific collection type is being used, it is more efficient to use
            the Count property, if one is provided.
            </summary>
            <remarks>If the collection implements ICollection&lt;T&gt;, this method
            simply returns ICollection&lt;T&gt;.Count. Otherwise, it enumerates all items
            and counts them.</remarks>
            <param name="collection">The collection to count items in.</param>
            <returns>The number of items in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.CountEqual``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Counts the number of items in the collection that are equal to <paramref name="find"/>.</summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="collection">The collection to count items in.</param>
            <param name="find">The item to compare to.</param>
            <returns>The number of items in the collection that are equal to <paramref name="find"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.CountEqual``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Counts the number of items in the collection that are equal to <paramref name="find"/>.</summary>
            <param name="collection">The collection to count items in.</param>
            <param name="find">The item to compare to.</param>
            <param name="equalityComparer">The comparer to use to determine if two items are equal. Only the Equals
            member function will be called.</param>
            <returns>The number of items in the collection that are equal to <paramref name="find"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/> or <paramref name="equalityComparer"/>
            is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.NCopiesOf``1(System.Int32,``0)">
            <summary>Creates an IEnumerator that enumerates a given item <paramref name="n"/> times.</summary>
            <example>
            The following creates a list consisting of 1000 copies of the Double 1.0.
            <code>
            List&lt;Double&gt; list = new List&lt;Double&gt;(Algorithms.NCopiesOf(1000, 1.0));
            </code></example>
            <param name="n">The number of times to enumerate the item.</param>
            <param name="item">The item that should occur in the enumeration.</param>
            <returns>An IEnumerable&lt;T&gt; that yields <paramref name="n"/> copies
            of <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument <paramref name="n"/> is less than zero.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Fill``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Replaces each item in a list with a given value. The list does not change in size.</summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to modify.</param>
            <param name="value">The value to fill with.</param>
            <exception cref="T:System.ArgumentException"><paramref name="list"/> is a read-only list.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Fill``1(``0[],``0)">
            <summary>Replaces each item in a array with a given value.</summary>
            <param name="array">The array to modify.</param>
            <param name="value">The value to fill with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FillRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>Replaces each item in a part of a list with a given value.</summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to modify.</param>
            <param name="start">The index at which to start filling. The first index in the list has index 0.</param>
            <param name="count">The number of items to fill.</param>
            <param name="value">The value to fill with.</param>
            <exception cref="T:System.ArgumentException"><paramref name="list"/> is a read-only list.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative, or
            <paramref name="start"/> + <paramref name="count"/> is greater than <paramref name="list"/>.Count.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.FillRange``1(``0[],System.Int32,System.Int32,``0)">
            <summary>Replaces each item in a part of a array with a given value.</summary>
            <param name="array">The array to modify.</param>
            <param name="start">The index at which to start filling. The first index in the array has index 0.</param>
            <param name="count">The number of items to fill.</param>
            <param name="value">The value to fill with.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative, or
            <paramref name="start"/> + <paramref name="count"/> is greater than <paramref name="array"/>.Length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Copies all of the items from the collection <paramref name="source"/> to the list <paramref name="dest"/>, starting
            at the index <paramref name="destIndex"/>. If necessary, the size of the destination list is expanded.
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="dest">The list to store the items into.</param>
            <param name="destIndex">The index to begin copying items to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or
            greater than <paramref name="dest"/>.Count.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32)">
            <summary>
            Copies all of the items from the collection <paramref name="source"/> to the array <paramref name="dest"/>, starting
            at the index <paramref name="destIndex"/>.
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="dest">The array to store the items into.</param>
            <param name="destIndex">The index to begin copying items to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or
            greater than <paramref name="dest"/>.Length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The collection has more items than will fit into the array. In this case, the array
            has been filled with as many items as fit before the exception is thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Copies at most <paramref name="count"/> items from the collection <paramref name="source"/> to the list <paramref name="dest"/>, starting
            at the index <paramref name="destIndex"/>. If necessary, the size of the destination list is expanded. The source collection must not be
            the destination list or part thereof.
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="dest">The list to store the items into.</param>
            <param name="destIndex">The index to begin copying items to.</param>
            <param name="count">The maximum number of items to copy.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or
            greater than <paramref name="dest"/>.Count</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32,System.Int32)">
            <summary>
            Copies at most <paramref name="count"/> items from the collection <paramref name="source"/> to the array <paramref name="dest"/>, starting
            at the index <paramref name="destIndex"/>. The source collection must not be
            the destination array or part thereof.
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="dest">The array to store the items into.</param>
            <param name="destIndex">The index to begin copying items to.</param>
            <param name="count">The maximum number of items to copy. The array must be large enought to fit this number of items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or
            greater than <paramref name="dest"/>.Length.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or <paramref name="destIndex"/> + <paramref name="count"/>
            is greater than <paramref name="dest"/>.Length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Copy``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count"/> items from the list <paramref name="source"/>, starting at the index <paramref name="sourceIndex"/>,
            to the list <paramref name="dest"/>, starting at the index <paramref name="destIndex"/>. If necessary, the size of the destination list is expanded.
            The source and destination lists may be the same.
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="sourceIndex">The index within <paramref name="source"/>to begin copying items from.</param>
            <param name="dest">The list to store the items into.</param>
            <param name="destIndex">The index within <paramref name="dest"/>to begin copying items to.</param>
            <param name="count">The maximum number of items to copy.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> is negative or
            greater than <paramref name="source"/>.Count</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or
            greater than <paramref name="dest"/>.Count</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or too large.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Copy``1(System.Collections.Generic.IList{``0},System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count"/> items from the list or array <paramref name="source"/>, starting at the index <paramref name="sourceIndex"/>,
            to the array <paramref name="dest"/>, starting at the index <paramref name="destIndex"/>.
            The source may be the same as the destination array.
            </summary>
            <param name="source">The list or array that provide the source items. </param>
            <param name="sourceIndex">The index within <paramref name="source"/>to begin copying items from.</param>
            <param name="dest">The array to store the items into.</param>
            <param name="destIndex">The index within <paramref name="dest"/>to begin copying items to.</param>
            <param name="count">The maximum number of items to copy. The destination array must be large enough to hold this many items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> is negative or
            greater than <paramref name="source"/>.Count</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or
            greater than <paramref name="dest"/>.Length</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or too large.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>Reverses a list and returns the reversed list, without changing the source list.</summary>
            <param name="source">The list to reverse.</param>
            <returns>A collection that contains the items from <paramref name="source"/> in reverse order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReverseInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>Reverses a list or array in place.</summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to reverse.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="list"/> is read only.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.Rotate``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Rotates a list and returns the rotated list, without changing the source list.</summary>
            <param name="source">The list to rotate.</param>
            <param name="amountToRotate">The number of elements to rotate. This value can be positive or negative.
            For example, rotating by positive 3 means that source[3] is the first item in the returned collection.
            Rotating by negative 3 means that source[source.Count - 3] is the first item in the returned collection.</param>
            <returns>A collection that contains the items from <paramref name="source"/> in rotated order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.RotateInPlace``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Rotates a list or array in place.</summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to rotate.</param>
            <param name="amountToRotate">The number of elements to rotate. This value can be positive or negative.
            For example, rotating by positive 3 means that list[3] is the first item in the resulting list.
            Rotating by negative 3 means that list[list.Count - 3] is the first item in the resulting list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.ListRange`1">
            <summary>
            The class that is used to implement IList&lt;T&gt; to view a sub-range
            of a list. The object stores a wrapped list, and a start/count indicating
            a sub-range of the list. Insertion/deletions through the sub-range view
            cause the count to change also; insertions and deletions directly on
            the wrapped list do not.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.PowerListBase`1">
            <summary>
            ListBase is an abstract class that can be used as a base class for a read-write collection that needs 
            to implement the generic IList&lt;T&gt; and non-generic IList collections. The derived class needs
            to override the following methods: Count, Clear, Insert, RemoveAt, and the indexer. The implementation
            of all the other methods in IList&lt;T&gt; and IList are handled by ListBase.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DmFramework.Collections.CollectionBase`1">
            <summary>
            CollectionBase is a base class that can be used to more easily implement the
            generic ICollection&lt;T&gt; and non-generic ICollection interfaces.
            </summary>
            <remarks>
            <para>To use CollectionBase as a base class, the derived class must override
            the Count, GetEnumerator, Add, Clear, and Remove methods. </para>
            <para>ICollection&lt;T&gt;.Contains need not be implemented by the
            derived class, but it should be strongly considered, because the CollectionBase implementation
            may not be very efficient.</para>
            </remarks>
            <typeparam name="T">The item type of the collection.</typeparam>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.ToString">
            <summary>
            Shows the String representation of the collection. The String representation contains
            a list of the items in the collection. Contained collections (except String) are expanded
            recursively.
            </summary>
            <returns>The String representation of the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.Add(`0)">
             <summary>Must be overridden to allow adding items to this collection.</summary>
             <remarks><p>This method is not abstract, although derived classes should always
             override it. It is not abstract because some derived classes may wish to reimplement
             Add with a different return type (typically Boolean). In C#, this can be accomplished
             with code like the following:</p>
             <code>
                 public class MyCollection&lt;T&gt;: CollectionBase&lt;T&gt;, ICollection&lt;T&gt;
                 {
                     public new Boolean Add(T item) {
                         /* Add the item */
                     }
            
                     void ICollection&lt;T&gt;.Add(T item) {
                         Add(item);
                     }
                 }
             </code>
             </remarks>
             <param name="item">Item to be added to the collection.</param>
             <exception cref="T:System.NotImplementedException">Always throws this exception to indicated
             that the method must be overridden or re-implemented in the derived class.</exception>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.Clear">
            <summary>Must be overridden to allow clearing this collection.</summary>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.Remove(`0)">
            <summary>Must be overridden to allow removing items from this collection.</summary>
            <returns>True if <paramref name="item"/> existed in the collection and
            was removed. False if <paramref name="item"/> did not exist in the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.Contains(`0)">
            <summary>
            Determines if the collection contains a particular item. This default implementation
            iterates all of the items in the collection via GetEnumerator, testing each item
            against <paramref name="item"/> using IComparable&lt;T&gt;.Equals or
            Object.Equals.
            </summary>
            <remarks>You should strongly consider overriding this method to provide
            a more efficient implementation, or if the default equality comparison
            is inappropriate.</remarks>
            <param name="item">The item to check for in the collection.</param>
            <returns>True if the collection contains <paramref name="item"/>, false otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all the items in the collection into an array. Implemented by
            using the enumerator returned from GetEnumerator to get all the items
            and copy them to the provided array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Starting index in <paramref name="array"/> to copy to.</param>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.ToArray">
            <summary>
            Creates an array of the correct size, and copies all the items in the
            collection into the array, by calling CopyTo.
            </summary>
            <returns>An array containing all the elements in the collection, in order.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.AsReadOnly">
            <summary>
            Provides a read-only view of this collection. The returned ICollection&lt;T&gt; provides
            a view of the collection that prevents modifications to the collection. Use the method to provide
            access to the collection without allowing changes. Since the returned object is just a view,
            changes to the collection will be reflected in the view.
            </summary>
            <returns>An ICollection&lt;T&gt; that provides read-only access to the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.Exists(System.Predicate{`0})">
            <summary>
            Determines if the collection contains any item that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if the collection contains one or more items that satisfy the condition
            defined by <paramref name="predicate"/>. False if the collection does not contain
            an item that satisfies <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>, or if the collection is empty. False if one or more items
            in the collection do not satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.CountWhere(System.Predicate{`0})">
            <summary>
            Counts the number of items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>The number of items in the collection that satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.FindAll(System.Predicate{`0})">
            <summary>
            Enumerates the items in the collection that satisfy the condition defined
            by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the items that satisfy the condition.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>Returns a collection of the items that were removed, in sorted order.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.ForEach(System.Action{`0})">
            <summary>Performs the specified action on each item in this collection.</summary>
            <param name="action">An Action delegate which is invoked for each item in this collection.</param>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Convert this collection of items by applying a delegate to each item in the collection. The resulting enumeration
            contains the result of applying <paramref name="converter"/> to each item in this collection, in
            order.
            </summary>
            <typeparam name="TOutput">The type each item is being converted to.</typeparam>
            <param name="converter">A delegate to the method to call, passing each item in this collection.</param>
            <returns>An IEnumerable&lt;TOutput^gt; that enumerates the resulting collection from applying <paramref name="converter"/> to each item in this collection in
            order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.GetEnumerator">
            <summary>Must be overridden to enumerate all the members of the collection.</summary>
            <returns>A generic IEnumerator&lt;T&gt; that can be used
            to enumerate all the items in the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the items in the collection into an array. Implemented by
            using the enumerator returned from GetEnumerator to get all the items
            and copy them to the provided array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="index">Starting index in <paramref name="array"/> to copy to.</param>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provides an IEnumerator that can be used to iterate all the members of the
            collection. This implementation uses the IEnumerator&lt;T&gt; that was overridden
            by the derived classes to enumerate the members of the collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.CollectionBase`1.DebuggerDisplayString">
            <summary>
            Display the contents of the collection in the debugger. This is intentionally private, it is called
            only from the debugger due to the presence of the DebuggerDisplay attribute. It is similar
            format to ToString(), but is limited to 250-300 characters or so, so as not to overload the debugger.
            </summary>
            <returns>The String representation of the items in the collection, similar in format to ToString().</returns>
        </member>
        <member name="P:DmFramework.Collections.CollectionBase`1.Count">
            <summary>Must be overridden to provide the number of items in the collection.</summary>
            <value>The number of items in the collection.</value>
        </member>
        <member name="P:DmFramework.Collections.CollectionBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>Indicates whether the collection is read-only. Always returns false.</summary>
            <value>Always returns false.</value>
        </member>
        <member name="P:DmFramework.Collections.CollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>Indicates whether the collection is synchronized.</summary>
            <value>Always returns false, indicating that the collection is not synchronized.</value>
        </member>
        <member name="P:DmFramework.Collections.CollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>Indicates the synchronization object for this collection.</summary>
            <value>Always returns this.</value>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.Clear">
            <summary>
            This method must be overridden by the derived class to empty the list
            of all items.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.Insert(System.Int32,`0)">
            <summary>
            This method must be overridden by the derived class to insert a new
            item at the given index. 
            </summary>
            <param name="index">The index in the list to insert the item at. After the
            insertion, the inserted item is located at this index. The
            first item in the list has index 0.</param>
            <param name="item">The item to insert at the given index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than Count.</exception>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.RemoveAt(System.Int32)">
            <summary>
            This method must be overridden by the derived class to remove the
            item at the given index. 
            </summary>
            <param name="index">The index in the list to remove the item at. The
            first item in the list has index 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.GetEnumerator">
            <summary>
            Enumerates all of the items in the list, in order. The item at index 0
            is enumerated first, then the item at index 1, and so on.
            </summary>
            <remarks>The enumerator does not check for changes made
            to the structure of the list. Thus, changes to the list during
            enumeration may cause incorrect enumeration or out of range
            exceptions. Consider overriding this method and adding checks
            for structural changes.</remarks>
            <returns>An IEnumerator&lt;T&gt; that enumerates all the
            items in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.Contains(`0)">
            <summary>
            Determines if the list contains any item that compares equal to <paramref name="item"/>.
            The implementation simply checks whether IndexOf(item) returns a non-negative value.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the list contains an item that compares equal to <paramref name="item"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.Add(`0)">
            <summary>
            Adds an item to the end of the list. This method is equivalent to calling: 
            <code>Insert(Count, item)</code>
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.Remove(`0)">
            <summary>
            Searches the list for the first item that compares equal to <paramref name="item"/>.
            If one is found, it is removed. Otherwise, the list is unchanged.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="item">The item to remove from the list.</param>
            <returns>True if an item was found and removed that compared equal to
            <paramref name="item"/>. False if no such item was in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.CopyTo(`0[])">
            <summary>
            Copies all the items in the list, in order, to <paramref name="array"/>,
            starting at index 0.
            </summary>
            <param name="array">The array to copy to. This array must have a size
            that is greater than or equal to Count.</param>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the list to <paramref name="array"/>,
            starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="index">The starting index in the source list of the range to copy.</param>
            <param name="array">The array to copy to. This array must have a size
            that is greater than or equal to Count + arrayIndex.</param>
            <param name="arrayIndex">The starting index in <paramref name="array"/>
            to copy to.</param>
            <param name="count">The number of items to copy.</param>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.AsReadOnly">
            <summary>
            Provides a read-only view of this list. The returned IList&lt;T&gt; provides
            a view of the list that prevents modifications to the list. Use the method to provide
            access to the list without allowing changes. Since the returned object is just a view,
            changes to the list will be reflected in the view.
            </summary>
            <returns>An IList&lt;T&gt; that provides read-only access to the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.Find(System.Predicate{`0})">
            <summary>
            Finds the first item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, than
            the default value for T (null or all-zero) is returned.
            </summary>
            <remarks>If the default value for T (null or all-zero) matches the condition defined by <paramref name="predicate"/>,
            and the list might contain the default value, then it is impossible to distinguish the different between finding
            the default value and not finding any item. To distinguish these cases, use <see cref="M:DmFramework.Collections.PowerListBase`1.TryFind(System.Predicate{`0},`0@)"/>.</remarks>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The first item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, the default value for T is returned.</returns>
            <seealso cref="M:DmFramework.Collections.PowerListBase`1.TryFind(System.Predicate{`0},`0@)"/>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.TryFind(System.Predicate{`0},`0@)">
            <summary>
            Finds the first item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. 
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <param name="foundItem">If true is returned, this parameter receives the first item in the list
            that satifies the condition defined by <paramref name="predicate"/>.</param>
            <returns>True if an item that  satisfies the condition <paramref name="predicate"/> was found. False 
            if no item in the list satisfies that condition.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.FindLast(System.Predicate{`0})">
            <summary>
            Finds the last item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, than
            the default value for T (null or all-zero) is returned.
            </summary>
            <remarks>If the default value for T (null or all-zero) matches the condition defined by <paramref name="predicate"/>,
            and the list might contain the default value, then it is impossible to distinguish the different between finding
            the default value and not finding any item. To distinguish these cases, use <see cref="M:DmFramework.Collections.PowerListBase`1.TryFindLast(System.Predicate{`0},`0@)"/>.</remarks>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The last item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, the default value for T is returned.</returns>
            <seealso cref="M:DmFramework.Collections.PowerListBase`1.TryFindLast(System.Predicate{`0},`0@)"/>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.TryFindLast(System.Predicate{`0},`0@)">
            <summary>
            Finds the last item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. 
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <param name="foundItem">If true is returned, this parameter receives the last item in the list
            that satifies the condition defined by <paramref name="predicate"/>.</param>
            <returns>True if an item that  satisfies the condition <paramref name="predicate"/> was found. False 
            if no item in the list satisfies that condition.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.FindIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the first item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The index of the first item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the first item, in the range of items extending from <paramref name="index"/> to the end, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The starting index of the range to check.</param>
            <returns>The index of the first item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the first item, in the range of <paramref name="count"/> items starting from <paramref name="index"/>, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The starting index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the first item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the last item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The index of the last item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the last item, in the range of items extending from the beginning
            of the list to <paramref name="index"/>, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The ending index of the range to check.</param>
            <returns>The index of the last item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the last item, in the range of <paramref name="count"/> items ending at <paramref name="index"/>, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The ending index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the last item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.IndexOf(`0)">
            <summary>Finds the index of the first item in the list that is equal to <paramref name="item"/>.</summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <returns>The index of the first item in the list that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.IndexOf(`0,System.Int32)">
            <summary>
            Finds the index of the first item, in the range of items extending from <paramref name="index"/> to the end,  
            that is equal to <paramref name="item"/>. 
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <param name="index">The starting index of the range to check.</param>
            <returns>The index of the first item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Finds the index of the first item, in the range of <paramref name="count"/> items starting from <paramref name="index"/>,  
            that is equal to <paramref name="item"/>. 
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <param name="index">The starting index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the first item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.LastIndexOf(`0)">
            <summary>Finds the index of the last item in the list that is equal to <paramref name="item"/>.</summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <returns>The index of the last item in the list that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Finds the index of the last item, in the range of items extending from the beginning
            of the list to <paramref name="index"/>, that is equal to <paramref name="item"/>. 
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <param name="index">The ending index of the range to check.</param>
            <returns>The index of the last item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Finds the index of the last item, in the range of <paramref name="count"/> items ending at <paramref name="index"/>, 
            that is equal to <paramref name="item"/>. 
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search for.</param>
            <param name="index">The ending index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the last item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.Range(System.Int32,System.Int32)">
            <summary>
            Returns a view onto a sub-range of this list. Items are not copied; the
            returned IList&lt;T&gt; is simply a different view onto the same underlying items. Changes to this list
            are reflected in the view, and vice versa. Insertions and deletions in the view change the size of the 
            view, but insertions and deletions in the underlying list do not.
            </summary>
            <remarks>
            <para>This method can be used to apply an algorithm to a portion of a list. For example:</para>
            <code>Algorithms.ReverseInPlace(deque.Range(3, 6))</code>
            will reverse the 6 items beginning at index 3.</remarks>
            <param name="start">The starting index of the view.</param>
            <param name="count">The number of items in the view.</param>
            <returns>A list that is a view onto the given sub-part of this list. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> + <paramref name="count"/> is greater than the
            size of the list.</exception>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.ConvertToItemType(System.String,System.Object)">
            <summary>
            Convert the given parameter to T. Throw an ArgumentException
            if it isn't.
            </summary>
            <param name="name">parameter name</param>
            <param name="value">parameter value</param>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the end of the list. This method is equivalent to calling: 
            <code>Insert(Count, item)</code>
            </summary>
            <param name="value">The item to add to the list.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> cannot be converted to T.</exception>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.System#Collections#IList#Clear">
            <summary>Removes all the items from the list, resulting in an empty list.</summary>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.System#Collections#IList#Contains(System.Object)">
            <summary>Determines if the list contains any item that compares equal to <paramref name="value"/>.</summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="value">The item to search for.</param>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Find the first occurrence of an item equal to <paramref name="value"/>
            in the list, and returns the index of that item.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="value">The item to search for.</param>
            <returns>The index of <paramref name="value"/>, or -1 if no item in the 
            list compares equal to <paramref name="value"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Insert a new
            item at the given index. 
            </summary>
            <param name="index">The index in the list to insert the item at. After the
            insertion, the inserted item is located at this index. The
            first item in the list has index 0.</param>
            <param name="value">The item to insert at the given index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than Count.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> cannot be converted to T.</exception>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Searches the list for the first item that compares equal to <paramref name="value"/>.
            If one is found, it is removed. Otherwise, the list is unchanged.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="value">The item to remove from the list.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> cannot be converted to T.</exception>
        </member>
        <member name="M:DmFramework.Collections.PowerListBase`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the
            item at the given index. 
            </summary>
            <param name="index">The index in the list to remove the item at. The
            first item in the list has index 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="P:DmFramework.Collections.PowerListBase`1.Count">
            <summary>
            The property must be overridden by the derived class to return the number of 
            items in the list.
            </summary>
            <value>The number of items in the list.</value>
        </member>
        <member name="P:DmFramework.Collections.PowerListBase`1.Item(System.Int32)">
            <summary>
            The indexer must be overridden by the derived class to get and set
            values of the list at a particular index.
            </summary>
            <param name="index">The index in the list to get or set an item at. The
            first item in the list has index 0, and the last has index Count-1.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="P:DmFramework.Collections.PowerListBase`1.System#Collections#IList#IsFixedSize">
            <summary>Returns whether the list is a fixed size. This implementation always returns false.</summary>
            <value>Alway false, indicating that the list is not fixed size.</value>
        </member>
        <member name="P:DmFramework.Collections.PowerListBase`1.System#Collections#IList#IsReadOnly">
            <summary>
            Returns whether the list is read only. This implementation returns the value
            from ICollection&lt;T&gt;.IsReadOnly, which is by default, false.
            </summary>
            <value>By default, false, indicating that the list is not read only.</value>
        </member>
        <member name="P:DmFramework.Collections.PowerListBase`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the
            value at a particular index in the list.
            </summary>
            <param name="index">The index in the list to get or set an item at. The
            first item in the list has index 0, and the last has index Count-1.</param>
            <value>The item at the given index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> cannot be converted to T.</exception>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ListRange`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Create a sub-range view object on the indicate part
            of the list.
            </summary>
            <param name="wrappedList">List to wrap.</param>
            <param name="start">The start index of the view in the wrapped list.</param>
            <param name="count">The number of items in the view.</param>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.ArrayRange`1">
            <summary>
            The class that is used to implement IList&lt;T&gt; to view a sub-range
            of an array. The object stores a wrapped array, and a start/count indicating
            a sub-range of the array. Insertion/deletions through the sub-range view
            cause the count to change up to the size of the underlying array. Elements
            fall off the end of the underlying array.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ArrayRange`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Create a sub-range view object on the indicate part
            of the array.
            </summary>
            <param name="wrappedArray">Array to wrap.</param>
            <param name="start">The start index of the view in the wrapped list.</param>
            <param name="count">The number of items in the view.</param>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.ReadOnlyCollection`1">
            <summary>
            The read-only ICollection&lt;T&gt; implementation that is used by the ReadOnly method.
            Methods that modify the collection throw a NotSupportedException, methods that don't
            modify are fowarded through to the wrapped collection.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>Create a ReadOnlyCollection wrapped around the given collection.</summary>
            <param name="wrappedCollection">Collection to wrap.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReadOnlyCollection`1.MethodModifiesCollection">
            <summary>Throws an NotSupportedException stating that this collection cannot be modified.</summary>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.ReadOnlyList`1">
            <summary>
            The read-only IList&lt;T&gt; implementation that is used by the ReadOnly method.
            Methods that modify the list throw a NotSupportedException, methods that don't
            modify are fowarded through to the wrapped list.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>Create a ReadOnlyList wrapped around the given list.</summary>
            <param name="wrappedList">List to wrap.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReadOnlyList`1.MethodModifiesCollection">
            <summary>Throws an NotSupportedException stating that this collection cannot be modified.</summary>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.ReadOnlyDictionary`2">
            <summary>
            The private class that implements a read-only wrapped for
            IDictionary &lt;TKey,TValue&gt;.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Create a read-only dictionary wrapped around the given dictionary.</summary>
            <param name="wrappedDictionary">The IDictionary&lt;TKey,TValue&gt; to wrap.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReadOnlyDictionary`2.MethodModifiesCollection">
            <summary>Throws an NotSupportedException stating that this collection cannot be modified.</summary>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.TypedEnumerator`1">
            <summary>
             The class that provides a typed IEnumerator&lt;T&gt;
            view onto an untyped IEnumerator interface.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TypedEnumerator`1.#ctor(System.Collections.IEnumerator)">
            <summary>
            Create a typed IEnumerator&lt;T&gt;
            view onto an untyped IEnumerator interface
            </summary>
            <param name="wrappedEnumerator">IEnumerator to wrap.</param>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.TypedEnumerable`1">
            <summary>
            The class that provides a typed IEnumerable&lt;T&gt; view
            onto an untyped IEnumerable interface.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TypedEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create a typed IEnumerable&lt;T&gt; view
            onto an untyped IEnumerable interface.
            </summary>
            <param name="wrappedEnumerable">IEnumerable interface to wrap.</param>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.TypedCollection`1">
            <summary>
            The class that provides a typed ICollection&lt;T&gt; view
            onto an untyped ICollection interface. The ICollection&lt;T&gt;
            is read-only.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TypedCollection`1.#ctor(System.Collections.ICollection)">
            <summary>
            Create a typed ICollection&lt;T&gt; view
            onto an untyped ICollection interface.
            </summary>
            <param name="wrappedCollection">ICollection interface to wrap.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TypedCollection`1.MethodModifiesCollection">
            <summary>Throws an NotSupportedException stating that this collection cannot be modified.</summary>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.TypedList`1">
            <summary>
            The class used to create a typed IList&lt;T&gt; view onto
            an untype IList interface.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.TypedList`1.#ctor(System.Collections.IList)">
            <summary>
            Create a typed IList&lt;T&gt; view onto
            an untype IList interface.
            </summary>
            <param name="wrappedList">The IList to wrap.</param>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.UntypedCollection`1">
            <summary>
            The class that is used to provide an untyped ICollection
            view onto a typed ICollection&lt;T&gt; interface.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.UntypedCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Create an untyped ICollection
            view onto a typed ICollection&lt;T&gt; interface.
            </summary>
            <param name="wrappedCollection">The ICollection&lt;T&gt; to wrap.</param>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.UntypedList`1">
            <summary>
            The class that implements a non-generic IList wrapper
            around a generic IList&lt;T&gt; interface.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.UntypedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Create a non-generic IList wrapper
            around a generic IList&lt;T&gt; interface.
            </summary>
            <param name="wrappedList">The IList&lt;T&gt; interface to wrap.</param>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.UntypedList`1.ConvertToItemType(System.String,System.Object)">
            <summary>
            Convert the given parameter to T. Throw an ArgumentException
            if it isn't.
            </summary>
            <param name="name">parameter name</param>
            <param name="value">parameter value</param>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.ArrayWrapper`1">
            <summary>
            The class that is used to implement IList&lt;T&gt; to view an array
            in a read-write way. Insertions cause the last item in the array
            to fall off, deletions replace the last item with the default value.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ArrayWrapper`1.#ctor(`0[])">
            <summary>Create a list wrapper object on an array.</summary>
            <param name="wrappedArray">Array to wrap.</param>
        </member>
        <member name="P:DmFramework.Collections.Algorithms.ArrayWrapper`1.System#Collections#IList#IsFixedSize">
            <summary>Return true, to indicate that the list is fixed size.</summary>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.LexicographicalComparerClass`1">
            <summary>
            A private class used by the LexicographicalComparer method to compare sequences
            (IEnumerable) of T by there Lexicographical ordering.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.LexicographicalComparerClass`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new instance that comparer sequences of T by their lexicographical
            ordered.
            </summary>
            <param name="itemComparer">The IComparer used to compare individual items of type T.</param>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.ReverseComparerClass`1">
            <summary>
            An IComparer instance that can be used to reverse the sense of
            a wrapped IComparer instance.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Algorithms.ReverseComparerClass`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            </summary>
            <param name="comparer">The comparer to reverse.</param>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.IdentityComparer`1">
            <summary>
            A class, implementing IEqualityComparer&lt;T&gt;, that compares objects
            for object identity only. Only Equals and GetHashCode can be used;
            this implementation is not appropriate for ordering.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.CollectionEqualityComparer`1">
            <summary>
            A private class used to implement GetCollectionEqualityComparer(). This
            class implements IEqualityComparer&lt;IEnumerable&lt;T&gt;gt; to compare
            two enumerables for equality, where order is significant.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.Algorithms.SetEqualityComparer`1">
            <summary>
            A private class used to implement GetSetEqualityComparer(). This
            class implements IEqualityComparer&lt;IEnumerable&lt;T&gt;gt; to compare
            two enumerables for equality, where order is not significant.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.Bag`1">
             <summary>
             Bag&lt;T&gt; is a collection that contains items of type T.
             Unlike a Set, duplicate items (items that compare equal to each other) are allowed in an Bag.
             </summary>
             <remarks>
             <p>The items are compared in one of two ways. If T implements IComparable&lt;T&gt;
             then the Equals method of that interface will be used to compare items, otherwise the Equals
             method from Object will be used. Alternatively, an instance of IComparer&lt;T&gt; can be passed
             to the constructor to use to compare items.</p>
             <p>Bag is implemented as a hash table. Inserting, deleting, and looking up an
             an element all are done in approximately constant time, regardless of the number of items in the bag.</p>
             <p>When multiple equal items are stored in the bag, they are stored as a representative item and a count.
             If equal items can be distinguished, this may be noticable. For example, if a case-insensitive
             comparer is used with a Bag&lt;String&gt;, and both "hello", and "HELLO" are added to the bag, then the
             bag will appear to contain two copies of "hello" (the representative item).</p>
             <p><see cref="T:DmFramework.Collections.OrderedBag`1"/> is similar, but uses comparison instead of hashing, maintain
             the items in sorted order, and stores distinct copies of items that compare equal.</p>
            </remarks>
            <seealso cref="T:DmFramework.Collections.OrderedBag`1"/>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.NewPair(`0,System.Int32)">
            <summary>Helper function to create a new KeyValuePair struct with an item and a count.</summary>
            <param name="item">The item.</param>
            <param name="count">The number of appearances.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.NewPair(`0)">
            <summary>Helper function to create a new KeyValuePair struct with a count of zero.</summary>
            <param name="item">The item.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.#ctor">
             <summary>Creates a new Bag.</summary>
            <remarks>
             Items that are null are permitted.
            </remarks>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new Bag. The Equals and GetHashCode methods of the passed comparison object
            will be used to compare items in this bag for equality.
            </summary>
            <param name="equalityComparer">An instance of IEqualityComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Creates a new Bag. The bag is
             initialized with all the items in the given collection.
             </summary>
            <remarks>
             Items that are null are permitted.
            </remarks>
             <param name="collection">A collection with items to be placed into the Bag.</param>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new Bag. The Equals and GetHashCode methods of the passed comparison object
            will be used to compare items in this bag. The bag is
            initialized with all the items in the given collection.
            </summary>
            <param name="collection">A collection with items to be placed into the Bag.</param>
            <param name="equalityComparer">An instance of IEqualityComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.#ctor(System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{`0,System.Int32}},System.Collections.Generic.IEqualityComparer{`0},DmFramework.Collections.Hash{System.Collections.Generic.KeyValuePair{`0,System.Int32}},System.Int32)">
            <summary>
            Creates a new Bag given a comparer and a hash that contains the data. Used
            internally for Clone.
            </summary>
            <param name="equalityComparer">IEqualityComparer for the bag.</param>
            <param name="keyEqualityComparer">IEqualityComparer for the key.</param>
            <param name="hash">Data for the bag.</param>
            <param name="count">Size of the bag.</param>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.System#ICloneable#Clone">
            <summary>
            Makes a shallow clone of this bag; i.e., if items of the
            bag are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the bag takes time O(N), where N is the number of items in the bag.</remarks>
            <returns>The cloned bag.</returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.Clone">
            <summary>
            Makes a shallow clone of this bag; i.e., if items of the
            bag are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the bag takes time O(N), where N is the number of unquie items in the bag.</remarks>
            <returns>The cloned bag.</returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.CloneContents">
            <summary>
            Makes a deep clone of this bag. A new bag is created with a clone of
            each element of this bag, by calling ICloneable.Clone on each element. If T is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If T is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the bag takes time O(N log N), where N is the number of items in the bag.</para></remarks>
            <returns>The cloned bag.</returns>
            <exception cref="T:System.InvalidOperationException">T is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.NumberOfCopies(`0)">
            <summary>Returns the number of copies of <paramref name="item"/> in the bag.</summary>
            <remarks>NumberOfCopies() takes approximately constant time, no matter how many items
            are stored in the bag.</remarks>
            <param name="item">The item to search for in the bag.</param>
            <returns>The number of items in the bag that compare equal to <paramref name="item"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.GetRepresentativeItem(`0,`0@)">
            <summary>
            Returns the representative item stored in the bag that is equal to
            the provided item. Also returns the number of copies of the item in the bag.
            </summary>
            <param name="item">Item to find in the bag.</param>
            <param name="representative">If one or more items equal to <paramref name="item"/> are present in the
            bag, returns the representative item. If no items equal to <paramref name="item"/> are stored in the bag,
            returns <paramref name="item"/>.</param>
            <returns>The number of items equal to <paramref name="item"/> stored in the bag.</returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the items in the bag.
            If an item is present multiple times in the bag, the representative item is yielded by the
            enumerator multiple times. The order of enumeration is haphazard and may change.
            </summary>
            <remarks>
            <p>Typically, this method is not called directly. Instead the "foreach" statement is used
            to enumerate the items, which uses this method implicitly.</p>
            <p>If an item is added to or deleted from the bag while it is being enumerated, then
            the enumeration will end with an InvalidOperationException.</p>
            <p>Enumeration all the items in the bag takes time O(N), where N is the number
            of items in the bag.</p>
            </remarks>
            <returns>An enumerator for enumerating all the items in the Bag.</returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.Contains(`0)">
            <summary>
            Determines if this bag contains an item equal to <paramref name="item"/>. The bag
            is not changed.
            </summary>
            <remarks>Searching the bag for an item takes time O(log N), where N is the number of items in the bag.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the bag contains <paramref name="item"/>. False if the bag does not contain <paramref name="item"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.DistinctItems">
            <summary>
            Enumerates all the items in the bag, but enumerates equal items
            just once, even if they occur multiple times in the bag.
            </summary>
            <remarks>If the bag is changed while items are being enumerated, the
            enumeration will terminate with an InvalidOperationException.</remarks>
            <returns>An IEnumerable&lt;T&gt; that enumerates the unique items.</returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.Add(`0)">
            <summary>
            Adds a new item to the bag. Since bags can contain duplicate items, the item
            is added even if the bag already contains an item equal to <paramref name="item"/>. In
            this case, the count of items for the representative item is increased by one, but the existing
            represetative item is unchanged.
            </summary>
            <remarks>
            <para>Adding an item takes approximately constant time, regardless of the number of items in the bag.</para></remarks>
            <param name="item">The item to add to the bag.</param>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.AddRepresentative(`0)">
            <summary>
            Adds a new item to the bag. Since bags can contain duplicate items, the item
            is added even if the bag already contains an item equal to <paramref name="item"/>. In
            this case (unlike Add), the new item becomes the representative item.
            </summary>
            <remarks>
            <para>Adding an item takes approximately constant time, regardless of the number of items in the bag.</para></remarks>
            <param name="item">The item to add to the bag.</param>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.ChangeNumberOfCopies(`0,System.Int32)">
            <summary>
            Changes the number of copies of an existing item in the bag, or adds the indicated number
            of copies of the item to the bag.
            </summary>
            <remarks>
            <para>Changing the number of copies takes approximately constant time, regardless of the number of items in the bag.</para></remarks>
            <param name="item">The item to change the number of copies of. This may or may not already be present in the bag.</param>
            <param name="numCopies">The new number of copies of the item.</param>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds all the items in <paramref name="collection"/> to the bag.</summary>
            <remarks>
            <para>Adding the collection takes time O(M log N), where N is the number of items in the bag, and M is the
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to add to the bag.</param>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.Remove(`0)">
            <summary>
            Searches the bag for one item equal to <paramref name="item"/>, and if found,
            removes it from the bag. If not found, the bag is unchanged.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the bag.</para>
            <para>Removing an item from the bag takes approximated constant time,
            regardless of the number of items in the bag.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>True if <paramref name="item"/> was found and removed. False if <paramref name="item"/> was not in the bag.</returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.RemoveAllCopies(`0)">
            <summary>
            Searches the bag for all items equal to <paramref name="item"/>, and
            removes all of them from the bag. If not found, the bag is unchanged.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparer instance used
            to create the bag.</para>
            <para>RemoveAllCopies() takes time O(M log N), where N is the total number of items in the bag, and M is
            the number of items equal to <paramref name="item"/>.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>The number of copies of <paramref name="item"/> that were found and removed. </returns>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all the items in <paramref name="collection"/> from the bag. Items that
            are not present in the bag are ignored.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparer instance used
            to create the bag.</para>
            <para>Removing the collection takes time O(M), where M is the
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to remove from the bag.</param>
            <returns>The number of items removed from the bag.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.Clear">
            <summary>Removes all items from the bag.</summary>
            <remarks>Clearing the bag takes a constant amount of time, regardless of the number of items in it.</remarks>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.CheckConsistentComparison(DmFramework.Collections.Bag{`0})">
            <summary>
            Check that this bag and another bag were created with the same comparison
            mechanism. Throws exception if not compatible.
            </summary>
            <param name="otherBag">Other bag to check comparision mechanism.</param>
            <exception cref="T:System.InvalidOperationException">If otherBag and this bag don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.IsEqualTo(DmFramework.Collections.Bag{`0})">
            <summary>
            Determines if this bag is equal to another bag. This bag is equal to
            <paramref name="otherBag"/> if they contain the same number of
            of copies of equal elements.
            </summary>
            <remarks>IsSupersetOf is computed in time O(N), where N is the number of unique items in
            this bag.</remarks>
            <param name="otherBag">Bag to compare to</param>
            <returns>True if this bag is equal to <paramref name="otherBag"/>, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.IsSupersetOf(DmFramework.Collections.Bag{`0})">
            <summary>
            Determines if this bag is a superset of another bag. Neither bag is modified.
            This bag is a superset of <paramref name="otherBag"/> if every element in
            <paramref name="otherBag"/> is also in this bag, at least the same number of
            times.
            </summary>
            <remarks>IsSupersetOf is computed in time O(M), where M is the number of unique items in
            <paramref name="otherBag"/>.</remarks>
            <param name="otherBag">Bag to compare to.</param>
            <returns>True if this is a superset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.IsProperSupersetOf(DmFramework.Collections.Bag{`0})">
            <summary>
            Determines if this bag is a proper superset of another bag. Neither bag is modified.
            This bag is a proper superset of <paramref name="otherBag"/> if every element in
            <paramref name="otherBag"/> is also in this bag, at least the same number of
            times. Additional, this bag must have strictly more items than <paramref name="otherBag"/>.
            </summary>
            <remarks>IsProperSupersetOf is computed in time O(M), where M is the number of unique items in
            <paramref name="otherBag"/>.</remarks>
            <param name="otherBag">Set to compare to.</param>
            <returns>True if this is a proper superset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.IsSubsetOf(DmFramework.Collections.Bag{`0})">
            <summary>Determines if this bag is a subset of another ba11 items in this bag.</summary>
            <param name="otherBag">Bag to compare to.</param>
            <returns>True if this is a subset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.IsProperSubsetOf(DmFramework.Collections.Bag{`0})">
            <summary>
            Determines if this bag is a proper subset of another bag. Neither bag is modified.
            This bag is a subset of <paramref name="otherBag"/> if every element in this bag
            is also in <paramref name="otherBag"/>, at least the same number of
            times. Additional, this bag must have strictly fewer items than <paramref name="otherBag"/>.
            </summary>
            <remarks>IsProperSubsetOf is computed in time O(N), where N is the number of unique items in this bag.</remarks>
            <param name="otherBag">Bag to compare to.</param>
            <returns>True if this is a proper subset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.IsDisjointFrom(DmFramework.Collections.Bag{`0})">
            <summary>
            Determines if this bag is disjoint from another bag. Two bags are disjoint
            if no item from one set is equal to any item in the other bag.
            </summary>
            <remarks>
            <para>The answer is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherBag">Bag to check disjointness with.</param>
            <returns>True if the two bags are disjoint, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.UnionWith(DmFramework.Collections.Bag{`0})">
            <summary>
            Computes the union of this bag with another bag. The union of two bags
            is all items from both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the union contains the item Maximum(X,Y) times. This bag receives
            the union of the two bags, the other bag is unchanged.
            </summary>
            <remarks>
            <para>The union of two bags is computed in time O(M+N), where M and N are the size of the
            two bags.</para>
            </remarks>
            <param name="otherBag">Bag to union with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.Union(DmFramework.Collections.Bag{`0})">
            <summary>
            Computes the union of this bag with another bag. The union of two bags
            is all items from both of the bags.  If an item appears X times in one bag,
            and Y times in the other bag, the union contains the item Maximum(X,Y) times. A new bag is
            created with the union of the bags and is returned. This bag and the other bag
            are unchanged.
            </summary>
            <remarks>
            <para>The union of two bags is computed in time O(M+N), where M and N are the size of the two bags.</para>
            </remarks>
            <param name="otherBag">Bag to union with.</param>
            <returns>The union of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.SumWith(DmFramework.Collections.Bag{`0})">
            <summary>
            Computes the sum of this bag with another bag. The sum of two bags
            is all items from both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the sum contains the item (X+Y) times. This bag receives
            the sum of the two bags, the other bag is unchanged.
            </summary>
            <remarks>
            <para>The sum of two bags is computed in time O(M), where M is the size of the
            other bag..</para>
            </remarks>
            <param name="otherBag">Bag to sum with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.Sum(DmFramework.Collections.Bag{`0})">
            <summary>
            Computes the sum of this bag with another bag. he sum of two bags
            is all items from both of the bags.  If an item appears X times in one bag,
            and Y times in the other bag, the sum contains the item (X+Y) times. A new bag is
            created with the sum of the bags and is returned. This bag and the other bag
            are unchanged.
            </summary>
            <remarks>
            <para>The sum of two bags is computed in time O(M + N log M), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to sum with.</param>
            <returns>The sum of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.IntersectionWith(DmFramework.Collections.Bag{`0})">
            <summary>
            Computes the intersection of this bag with another bag. The intersection of two bags
            is all items that appear in both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the sum contains the item Minimum(X,Y) times. This bag receives
            the intersection of the two bags, the other bag is unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both bags, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two bags is computed in time O(N), where N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to intersection with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.Intersection(DmFramework.Collections.Bag{`0})">
            <summary>
            Computes the intersection of this bag with another bag. The intersection of two bags
            is all items that appear in both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the intersection contains the item Minimum(X,Y) times. A new bag is
            created with the intersection of the bags and is returned. This bag and the other bag
            are unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both bags, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two bags is computed in time O(N), where N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to intersection with.</param>
            <returns>The intersection of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.DifferenceWith(DmFramework.Collections.Bag{`0})">
            <summary>
            Computes the difference of this bag with another bag. The difference of these two bags
            is all items that appear in this bag, but not in <paramref name="otherBag"/>. If an item appears X times in this bag,
            and Y times in the other bag, the difference contains the item X - Y times (zero times if Y &gt;= X). This bag receives
            the difference of the two bags; the other bag is unchanged.
            </summary>
            <remarks>
            <para>The difference of two bags is computed in time O(M), where M is the size of the
            other bag.</para>
            </remarks>
            <param name="otherBag">Bag to difference with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.Difference(DmFramework.Collections.Bag{`0})">
            <summary>
            Computes the difference of this bag with another bag. The difference of these two bags
            is all items that appear in this bag, but not in <paramref name="otherBag"/>. If an item appears X times in this bag,
            and Y times in the other bag, the difference contains the item X - Y times (zero times if Y &gt;= X).  A new bag is
            created with the difference of the bags and is returned. This bag and the other bag
            are unchanged.
            </summary>
            <remarks>
            <para>The difference of two bags is computed in time O(M + N), where M and N are the size
            of the two bags.</para>
            </remarks>
            <param name="otherBag">Bag to difference with.</param>
            <returns>The difference of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.SymmetricDifferenceWith(DmFramework.Collections.Bag{`0})">
            <summary>
            Computes the symmetric difference of this bag with another bag. The symmetric difference of two bags
            is all items that appear in either of the bags, but not both. If an item appears X times in one bag,
            and Y times in the other bag, the symmetric difference contains the item AbsoluteValue(X - Y) times. This bag receives
            the symmetric difference of the two bags; the other bag is unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two bags is computed in time O(M + N), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to symmetric difference with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Bag`1.SymmetricDifference(DmFramework.Collections.Bag{`0})">
            <summary>
            Computes the symmetric difference of this bag with another bag. The symmetric difference of two bags
            is all items that appear in either of the bags, but not both. If an item appears X times in one bag,
            and Y times in the other bag, the symmetric difference contains the item AbsoluteValue(X - Y) times. A new bag is
            created with the symmetric difference of the bags and is returned. This bag and the other bag
            are unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two bags is computed in time O(M + N), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to symmetric difference with.</param>
            <returns>The symmetric difference of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="P:DmFramework.Collections.Bag`1.Comparer">
            <summary>Returns the IEqualityComparer&lt;T&gt; used to compare items in this bag.</summary>
            <value>If the bag was created using a comparer, that comparer is returned. Otherwise
            the default comparer for T (EqualityComparer&lt;T&gt;.Default) is returned.</value>
        </member>
        <member name="P:DmFramework.Collections.Bag`1.Count">
            <summary>Returns the number of items in the bag.</summary>
            <remarks>The size of the bag is returned in constant time.</remarks>
            <value>The number of items in the bag.</value>
        </member>
        <member name="T:DmFramework.Collections.BigList`1">
            <summary>
            BigList&lt;T&gt; provides a list of items, in order, with indices of the items ranging from 0 to one less
            than the count of items in the collection. BigList&lt;T&gt; is optimized for efficient operations on large (&gt;100 items)
            lists, especially for insertions, deletions, copies, and concatinations.
            </summary>
            <remarks>
            <para>BigList&lt;T&gt; class is similar in functionality to the standard List&lt;T&gt; class. Both classes
            provide a collection that stores an set of items in order, with indices of the items ranging from 0 to one less
            than the count of items in the collection. Both classes provide the ability to add and remove items from any index,
            and the get or set the item at any index.</para>
            <para>BigList&lt;T&gt; differs significantly from List&lt;T&gt; in the performance of various operations,
            especially when the lists become large (several hundred items or more). With List&lt;T&gt;, inserting or removing
            elements from anywhere in a large list except the end is very inefficient -- every item after the point of inserting
            or deletion has to be moved in the list. The BigList&lt;T&gt; class, however, allows for fast insertions
            and deletions anywhere in the list. Furthermore, BigList&lt;T&gt; allows copies of a list, sub-parts
            of a list, and concatinations of two lists to be very fast. When a copy is made of part or all of a BigList,
            two lists shared storage for the parts of the lists that are the same. Only when one of the lists is changed is additional
            memory allocated to store the distinct parts of the lists.</para>
            <para>Of course, there is a small price to pay for this extra flexibility. Although still quite efficient, using an
            index to get or change one element of a BigList, while still reasonably efficient, is significantly slower than using
            a plain List. Because of this, if you want to process every element of a BigList, using a foreach loop is a lot
            more efficient than using a for loop and indexing the list.</para>
            <para>In general, use a List when the only operations you are using are Add (to the end), foreach,
            or indexing, or you are very sure the list will always remain small (less than 100 items). For large (&gt;100 items) lists
            that do insertions, removals, copies, concatinations, or sub-ranges, BigList will be more efficient than List.
            In almost all cases, BigList is more efficient and easier to use than LinkedList.</para>
            </remarks>
            <typeparam name="T">The type of items to store in the BigList.</typeparam>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.#ctor">
            <summary>Creates a new BigList. The BigList is initially empty.</summary>
            <remarks>Creating a empty BigList takes constant time and consumes a very small amount of memory.</remarks>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Creates a new BigList initialized with the items from <paramref name="collection"/>, in order.</summary>
            <remarks>Initializing the tree list with the elements of collection takes time O(N), where N is the number of
            items in <paramref name="collection"/>.</remarks>
            <param name="collection">The collection used to initialize the BigList. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>Creates a new BigList initialized with a given number of copies of the items from <paramref name="collection"/>, in order.</summary>
            <remarks>Initializing the tree list with the elements of collection takes time O(N + log K), where N is the number of
            items in <paramref name="collection"/>, and K is the number of copies.</remarks>
            <param name="copies">Number of copies of the collection to use.</param>
            <param name="collection">The collection used to initialize the BigList. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="copies"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.#ctor(DmFramework.Collections.BigList{`0})">
            <summary>Creates a new BigList that is a copy of <paramref name="list"/>.</summary>
            <remarks>Copying a BigList takes constant time, and little
            additional memory, since the storage for the items of the two lists is shared. However, changing
            either list will take additional time and memory. Portions of the list are copied when they are changed.</remarks>
            <param name="list">The BigList to copy. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.#ctor(DmFramework.Collections.BigList{`0},System.Int32)">
            <summary>Creates a new BigList that is several copies of <paramref name="list"/>.</summary>
            <remarks>Creating K copies of a BigList takes time O(log K), and O(log K)
            additional memory, since the storage for the items of the two lists is shared. However, changing
            either list will take additional time and memory. Portions of the list are copied when they are changed.</remarks>
            <param name="copies">Number of copies of the collection to use.</param>
            <param name="list">The BigList to copy. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.#ctor(DmFramework.Collections.BigList{`0}.Node)">
            <summary>Creates a new BigList from the indicated Node.</summary>
            <param name="node">Node that becomes the new root. If null, the new BigList is empty.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Clear">
            <summary>Removes all of the items from the BigList.</summary>
            <remarks>Clearing a BigList takes constant time.</remarks>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a new item at the given index in the BigList. All items at indexes
            equal to or greater than <paramref name="index"/> move up one index.
            </summary>
            <remarks>The amount of time to insert an item is O(log N), no matter where
            in the list the insertion occurs. Inserting an item at the beginning or end of the
            list is O(N).
            </remarks>
            <param name="index">The index to insert the item at. After the
            insertion, the inserted item is located at this index. The
            first item has index 0.</param>
            <param name="item">The item to insert at the given index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than Count.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of items at the given index in the BigList. All items at indexes
            equal to or greater than <paramref name="index"/> increase their indices
            by the number of items inserted.
            </summary>
            <remarks>The amount of time to insert an arbitrary collection in the BigList is O(M + log N),
            where M is the number of items inserted, and N is the number of items in the list.
            </remarks>
            <param name="index">The index to insert the collection at. After the
            insertion, the first item of the inserted collection is located at this index. The
            first item has index 0.</param>
            <param name="collection">The collection of items to insert at the given index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than Count.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.InsertRange(System.Int32,DmFramework.Collections.BigList{`0})">
            <summary>
            Inserts a BigList of items at the given index in the BigList. All items at indexes
            equal to or greater than <paramref name="index"/> increase their indices
            by the number of items inserted.
            </summary>
            <remarks>The amount of time to insert another BigList is O(log N),
            where N is the number of items in the list, regardless of the number of items in the
            inserted list. Storage is shared between the two lists until one of them is changed.
            </remarks>
            <param name="index">The index to insert the collection at. After the
            insertion, the first item of the inserted collection is located at this index. The
            first item has index 0.</param>
            <param name="list">The BigList of items to insert at the given index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than Count.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index in the BigList. All items at indexes
            greater than <paramref name="index"/> move down one index.
            </summary>
            <remarks>The amount of time to delete an item in the BigList is O(log N),
            where N is the number of items in the list.
            </remarks>
            <param name="index">The index in the list to remove the item at. The
            first item in the list has index 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items at the given index in the Deque. All items at indexes
            greater than <paramref name="index"/> move down <paramref name="count"/> indices
            in the Deque.
            </summary>
            <remarks>The amount of time to delete <paramref name="count"/> items in the Deque is proportional
            to the distance of index from the closest end of the Deque, plus <paramref name="count"/>:
            O(count + Min(<paramref name="index"/>, Count - 1 - <paramref name="index"/>)).
            </remarks>
            <param name="index">The index in the list to remove the range at. The
            first item in the list has index 0.</param>
            <param name="count">The number of items to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count, or <paramref name="count"/> is less than zero
            or too large.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Add(`0)">
            <summary>
            Adds an item to the end of the BigList. The indices of all existing items
            in the Deque are unchanged.
            </summary>
            <remarks>Adding an item takes, on average, constant time.</remarks>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.AddToFront(`0)">
            <summary>
            Adds an item to the beginning of the BigList. The indices of all existing items
            in the Deque are increased by one, and the new item has index zero.
            </summary>
            <remarks>Adding an item takes, on average, constant time.</remarks>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items to the end of BigList. The indices of all existing items
            are unchanged. The last item in the added collection becomes the
            last item in the BigList.
            </summary>
            <remarks>This method takes time O(M + log N), where M is the number of items in the
            <paramref name="collection"/>, and N is the size of the BigList.</remarks>
            <param name="collection">The collection of items to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.AddRange(DmFramework.Collections.BigList{`0})">
            <summary>
            Adds a BigList of items to the end of BigList. The indices of all existing items
            are unchanged. The last item in <paramref name="list"/> becomes the
            last item in this list. The added list <paramref name="list"/> is unchanged.
            </summary>
            <remarks>This method takes, on average, constant time, regardless of the size
            of either list. Although conceptually all of the items in <paramref name="list"/> are
            copied, storage is shared between the two lists until changes are made to the
            shared sections.</remarks>
            <param name="list">The list of items to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.AddRangeToFront(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items to the front of BigList. The indices of all existing items
            in the are increased by the number of items in <paramref name="collection"/>.
            The first item in the added collection becomes the first item in the BigList.
            </summary>
            <remarks>This method takes time O(M + log N), where M is the number of items in the
            <paramref name="collection"/>, and N is the size of the BigList.</remarks>
            <param name="collection">The collection of items to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.AddRangeToFront(DmFramework.Collections.BigList{`0})">
            <summary>
            Adds a BigList of items to the front of BigList. The indices of all existing items
            are increased by the number of items in <paramref name="list"/>. The first item in <paramref name="list"/>
            becomes the first item in this list. The added list <paramref name="list"/> is unchanged.
            </summary>
            <remarks>This method takes, on average, constant time, regardless of the size
            of either list. Although conceptually all of the items in <paramref name="list"/> are
            copied, storage is shared between the two lists until changes are made to the
            shared sections.</remarks>
            <param name="list">The list of items to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Clone">
            <summary>Creates a new BigList that is a copy of this list.</summary>
            <remarks>Copying a BigList takes constant time, and little
            additional memory, since the storage for the items of the two lists is shared. However, changing
            either list will take additional time and memory. Portions of the list are copied when they are changed.</remarks>
            <returns>A copy of the current list</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.System#ICloneable#Clone">
            <summary>Creates a new BigList that is a copy of this list.</summary>
            <remarks>Copying a BigList takes constant time, and little
            additional memory, since the storage for the items of the two lists is shared. However, changing
            either list will take additional time and memory. Portions of the list are copied when they are changed.</remarks>
            <returns>A copy of the current list</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.CloneContents">
            <summary>
            Makes a deep clone of this BigList. A new BigList is created with a clone of
            each element of this set, by calling ICloneable.Clone on each element. If T is
            a value type, then this method is the same as Clone.
            </summary>
            <remarks><para>If T is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>If T is a reference type, cloning the list takes time approximate O(N), where N is the number of items in the list.</para></remarks>
            <returns>The cloned set.</returns>
            <exception cref="T:System.InvalidOperationException">T is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.op_Addition(DmFramework.Collections.BigList{`0},DmFramework.Collections.BigList{`0})">
            <summary>
            Concatenates two lists together to create a new list. Both lists being concatenated
            are unchanged. The resulting list contains all the items in <paramref name="first"/>, followed
            by all the items in <paramref name="second"/>.
            </summary>
            <remarks>This method takes, on average, constant time, regardless of the size
            of either list. Although conceptually all of the items in both lists are
            copied, storage is shared until changes are made to the
            shared sections.</remarks>
            <param name="first">The first list to concatenate.</param>
            <param name="second">The second list to concatenate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a new list that contains a subrange of elements from this list. The
            current list is unchanged.
            </summary>
            <remarks>This method takes take O(log N), where N is the size of the current list. Although
            the sub-range is conceptually copied, storage is shared between the two lists until a change
            is made to the shared items.</remarks>
            <remarks>If a view of a sub-range is desired, instead of a copy, use the
            more efficient <see cref="M:DmFramework.Collections.BigList`1.Range(System.Int32,System.Int32)"/> method, which provides a view onto a sub-range of items.</remarks>
            <param name="index">The starting index of the sub-range.</param>
            <param name="count">The number of items in the sub-range. If this is zero,
            the returned list is empty.</param>
            <returns>A new list with the <paramref name="count"/> items that start at <paramref name="index"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Range(System.Int32,System.Int32)">
            <summary>
            Returns a view onto a sub-range of this list. Items are not copied; the
            returned IList&lt;T&gt; is simply a different view onto the same underlying items. Changes to this list
            are reflected in the view, and vice versa. Insertions and deletions in the view change the size of the
            view, but insertions and deletions in the underlying list do not.
            </summary>
            <remarks>
            <para>If a copy of the sub-range is desired, use the <see cref="M:DmFramework.Collections.BigList`1.GetRange(System.Int32,System.Int32)"/> method instead.</para>
            <para>This method can be used to apply an algorithm to a portion of a list. For example:</para>
            <code>Algorithms.ReverseInPlace(list.Range(3, 6))</code>
            will reverse the 6 items beginning at index 3.</remarks>
            <param name="index">The starting index of the view.</param>
            <param name="count">The number of items in the view.</param>
            <returns>A list that is a view onto the given sub-list. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> + <paramref name="count"/> is greater than the
            size of this list.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.GetEnumerator">
            <summary>
            Enumerates all of the items in the list, in order. The item at index 0
            is enumerated first, then the item at index 1, and so on. Usually, the
            foreach statement is used to call this method implicitly.
            </summary>
            <remarks>Enumerating all of the items in the list take time O(N), where
            N is the number of items in the list. Using GetEnumerator() or foreach
            is much more efficient than accessing all items by index.</remarks>
            <returns>An IEnumerator&lt;T&gt; that enumerates all the
            items in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Convert the list to a new list by applying a delegate to each item in the collection. The resulting list
            contains the result of applying <paramref name="converter"/> to each item in the list, in
            order. The current list is unchanged.
            </summary>
            <typeparam name="TDest">The type each item is being converted to.</typeparam>
            <param name="converter">A delegate to the method to call, passing each item in <type name="BigList&lt;T&gt;"/>.</param>
            <returns>The resulting BigList from applying <paramref name="converter"/> to each item in this list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Reverse">
            <summary>Reverses the current list in place.</summary>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Reverse(System.Int32,System.Int32)">
            <summary>Reverses the items in the range of <paramref name="count"/> items starting from <paramref name="start"/>, in place.</summary>
            <param name="start">The starting index of the range to reverse.</param>
            <param name="count">The number of items in range to reverse.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Sort">
            <summary>Sorts the list in place.</summary>
            <remarks><para>The Quicksort algorithm is used to sort the items. In virtually all cases,
            this takes time O(N log N), where N is the number of items in the list.</para>
            <para>Values are compared by using the IComparable or IComparable&lt;T&gt;
            interface implementation on the type T.</para></remarks>
            <exception cref="T:System.InvalidOperationException">The type T does not implement either the IComparable or
            IComparable&lt;T&gt; interfaces.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the list in place. A supplied IComparer&lt;T&gt; is used
            to compare the items in the list.
            </summary>
            <remarks>The Quicksort algorithms is used to sort the items. In virtually all cases,
            this takes time O(N log N), where N is the number of items in the list.</remarks>
            <param name="comparer">The comparer instance used to compare items in the collection. Only
            the Compare method is used.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the list in place. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the list.
            </summary>
            <remarks>The Quicksort algorithms is used to sort the items. In virtually all cases,
            this takes time O(N log N), where N is the number of items in the list.</remarks>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.BinarySearch(`0)">
            <summary>
            Searches a sorted list for an item via binary search. The list must be sorted
            in the order defined by the default ordering of the item type; otherwise,
            incorrect results will be returned.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>Returns the index of the first occurence of <paramref name="item"/> in the list. If the item does not occur
            in the list, the bitwise complement of the first item larger than <paramref name="item"/> in the list is returned. If no item is
            larger than <paramref name="item"/>, the bitwise complement of Count is returned.</returns>
            <exception cref="T:System.InvalidOperationException">The type T does not implement either the IComparable or
            IComparable&lt;T&gt; interfaces.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a sorted list for an item via binary search. The list must be sorted
            by the ordering defined by the passed IComparer&lt;T&gt; interface; otherwise,
            incorrect results will be returned.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="comparer">The IComparer&lt;T&gt; interface used to sort the list.</param>
            <returns>Returns the index of the first occurence of <paramref name="item"/> in the list. If the item does not occur
            in the list, the bitwise complement of the first item larger than <paramref name="item"/> in the list is returned. If no item is
            larger than <paramref name="item"/>, the bitwise complement of Count is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.BinarySearch(`0,System.Comparison{`0})">
            <summary>
            Searches a sorted list for an item via binary search. The list must be sorted
            by the ordering defined by the passed Comparison&lt;T&gt; delegate; otherwise,
            incorrect results will be returned.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="comparison">The comparison delegate used to sort the list.</param>
            <returns>Returns the index of the first occurence of <paramref name="item"/> in the list. If the item does not occur
            in the list, the bitwise complement of the first item larger than <paramref name="item"/> in the list is returned. If no item is
            larger than <paramref name="item"/>, the bitwise complement of Count is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Rebalance">
            <summary>
            Rebalance the current tree. Once rebalanced, the depth of the current tree is no more than
            two levels from fully balanced, where fully balanced is defined as having Fibonacci(N+2) or more items
            in a tree of depth N.
            </summary>
            <remarks>The rebalancing algorithm is from "Ropes: an Alternative to Strings", by
            Boehm, Atkinson, and Plass, in SOFTWARE--PRACTICE AND EXPERIENCE, VOL. 25(12), 1315–1330 (DECEMBER 1995).
            </remarks>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.StopEnumerations">
            <summary>
            Must be called whenever there is a structural change in the tree. Causes
            changeStamp to be changed, which causes any in-progress enumerations
            to throw exceptions.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.CheckEnumerationStamp(System.Int32)">
            <summary>
            Checks the given stamp against the current change stamp. If different, the
            collection has changed during enumeration and an InvalidOperationException
            must be thrown
            </summary>
            <param name="startStamp">changeStamp at the start of the enumeration.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.GetEnumerator(System.Int32,System.Int32)">
            <summary>
            Enumerates a range of the items in the list, in order. The item at <paramref name="start"/>
            is enumerated first, then the next item at index 1, and so on. At most <paramref name="maxItems"/>
            items are enumerated.
            </summary>
            <remarks>Enumerating all of the items in the list take time O(N), where
            N is the number of items being enumerated. Using GetEnumerator() or foreach
            is much more efficient than accessing all items by index.</remarks>
            <param name="start">Index to start enumerating at.</param>
            <param name="maxItems">Max number of items to enumerate.</param>
            <returns>An IEnumerator&lt;T&gt; that enumerates all the
            items in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.NodeFromEnumerable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Given an IEnumerable&lt;T&gt;, create a new Node with all of the
            items in the enumerable. Returns null if the enumerable has no items.
            </summary>
            <param name="collection">The collection to copy.</param>
            <returns>Returns a Node, not shared or with any shared children,
            with the items from the collection. If the collection was empty,
            null is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafFromEnumerator(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Consumes up to MAXLEAF items from an Enumerator and places them in a leaf
            node. If the enumerator is at the end, null is returned.
            </summary>
            <param name="enumerator">The enumerator to take items from.</param>
            <returns>A LeafNode with items taken from the enumerator. </returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.NCopiesOfNode(System.Int32,DmFramework.Collections.BigList{`0}.Node)">
            <summary>Create a node that has N copies of the given node.</summary>
            <param name="copies">Number of copies. Must be non-negative.</param>
            <param name="node">Node to make copies of.</param>
            <returns>null if node is null or copies is 0. Otherwise, a node consisting of <paramref name="copies"/> copies
            of node.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">copies is negative.</exception>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.CheckBalance">
            <summary>
            Check the balance of the current tree and rebalance it if it is more than BALANCEFACTOR
            levels away from fully balanced. Note that rebalancing a tree may leave it two levels away from
            fully balanced.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.AddNodeToRebalanceArray(DmFramework.Collections.BigList{`0}.Node[],DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Part of the rebalancing algorithm. Adds a node to the rebalance array. If it is already balanced, add it directly, otherwise
            add its children.
            </summary>
            <param name="rebalanceArray">Rebalance array to insert into.</param>
            <param name="node">Node to add.</param>
            <param name="shared">If true, mark the node as shared before adding, because one
            of its parents was shared.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.AddBalancedNodeToRebalanceArray(DmFramework.Collections.BigList{`0}.Node[],DmFramework.Collections.BigList{`0}.Node)">
            <summary>Part of the rebalancing algorithm. Adds a balanced node to the rebalance array.</summary>
            <param name="rebalanceArray">Rebalance array to insert into.</param>
            <param name="balancedNode">Node to add.</param>
        </member>
        <member name="P:DmFramework.Collections.BigList`1.Count">
            <summary>
            Gets the number of items stored in the BigList. The indices of the items
            range from 0 to Count-1.
            </summary>
            <remarks>Getting the number of items in the BigList takes constant time.</remarks>
            <value>The number of items in the BigList.</value>
        </member>
        <member name="P:DmFramework.Collections.BigList`1.Item(System.Int32)">
            <summary>Gets or sets an item in the list, by index.</summary>
            <remarks><para> Gettingor setting an item takes time O(log N), where N is the number of items
            in the list.</para>
            <para>To process each of the items in the list, using GetEnumerator() or a foreach loop is more efficient
            that accessing each of the elements by index.</para></remarks>
            <param name="index">The index of the item to get or set. The first item in the list
            has index 0, the last item has index Count-1.</param>
            <returns>The value of the item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or
            greater than or equal to Count.</exception>
        </member>
        <member name="T:DmFramework.Collections.BigList`1.Node">
            <summary>
            The base class for the two kinds of nodes in the tree: Concat nodes
            and Leaf nodes.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.MarkShared">
            <summary>Marks this node as shared by setting the shared variable.</summary>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.GetAt(System.Int32)">
            <summary>Returns the items at the given index in this node.</summary>
            <param name="index">0-based index, relative to this node.</param>
            <returns>Item at that index.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.Subrange(System.Int32,System.Int32)">
            <summary>
            Returns a node that has a sub-range of items from this node. The
            sub-range may not be empty, but may extend outside the node.
            In other words, first might be less than zero or last might be greater
            than count. But, last can't be less than zero and first can't be
            greater than count. Also, last must be greater than or equal to last.
            </summary>
            <param name="first">Inclusive first element, relative to this node.</param>
            <param name="last">Inclusize last element, relative to this node.</param>
            <returns>Node with the given sub-range.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.SetAt(System.Int32,`0)">
            <summary>
            Changes the item at the given index. Never changes this node,
            but always returns a new node with the given item changed.
            </summary>
            <param name="index">Index, relative to this node, to change.</param>
            <param name="item">New item to place at the given index.</param>
            <returns>A new node with the given item changed.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.SetAtInPlace(System.Int32,`0)">
            <summary>
            Changes the item at the given index. May change this node,
            or return a new node with the given item changed.
            </summary>
            <param name="index">Index, relative to this node, to change.</param>
            <param name="item">New item to place at the given index.</param>
            <returns>A node with the give item changed. If it can be done in place
            then "this" is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.Append(DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Append a node after this node. Never changes this node, but returns
            a new node with the given appending done.
            </summary>
            <param name="node">Node to append.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A new node with the give node appended to this node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.AppendInPlace(DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Append a node after this node. May change this node, or return
            a new node.
            </summary>
            <param name="node">Node to append.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A node with the give node appended to this node. May be a new
            node or the current node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.AppendInPlace(`0)">
            <summary>
            Append a item after this node. May change this node, or return
            a new node. Equivalent to AppendInPlace(new LeafNode(item), true), but
            may be more efficient because a new LeafNode might not be allocated.
            </summary>
            <param name="item">Item to append.</param>
            <returns>A node with the given item appended to this node. May be a new
            node or the current node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of items from this node. Never changes this node, but returns
            a new node with the removing done. The
            sub-range may not be empty, but may extend outside the node.
            In other words, first might be less than zero or last might be greater
            than count. But, last can't be less than zero and first can't be
            greater than count. Also, last must be greater than or equal to last.
            </summary>
            <param name="first">Inclusive index of first item in sub-range, relative
            to this node.</param>
            <param name="last">Inclusize index of last item in sub-range, relative
            to this node.</param>
            <returns>A new node with the sub-range removed.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.RemoveRangeInPlace(System.Int32,System.Int32)">
            <summary>
            Remove a range of items from this node. May change this node, or returns
            a new node with the given appending done. The
            sub-range may not be empty, but may extend outside the node.
            In other words, first might be less than zero or last might be greater
            than count. But, last can't be less than zero and first can't be
            greater than count. Also, last must be greater than or equal to last.
            </summary>
            <param name="first">Inclusive index of first item in sub-range, relative
            to this node.</param>
            <param name="last">Inclusize index of last item in sub-range, relative
            to this node.</param>
            <returns>A node with the sub-range removed. If done in-place, returns
            "this".</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.Insert(System.Int32,DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Inserts a node inside this node. Never changes this node, but returns
            a new node with the given appending done.
            </summary>
            <param name="index">Index, relative to this node, to insert at. Must
            be in bounds.</param>
            <param name="node">Node to insert.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A new node with the give node inserted.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.InsertInPlace(System.Int32,`0)">
            <summary>
            Inserts an item inside this node. May change this node, or return
            a new node with the given appending done. Equivalent to
            InsertInPlace(new LeafNode(item), true), but may be more efficient.
            </summary>
            <param name="index">Index, relative to this node, to insert at. Must
            be in bounds.</param>
            <param name="item">Item to insert.</param>
            <returns>A node with the give item inserted. If done in-place, returns
            "this".</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.InsertInPlace(System.Int32,DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Inserts a node inside this node. May change this node, or return
            a new node with the given appending done.
            </summary>
            <param name="index">Index, relative to this node, to insert at. Must
            be in bounds.</param>
            <param name="node">Node to insert.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A node with the given item inserted. If done in-place, returns
            "this".</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.Prepend(DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Prefpend a node before this node. Never changes this node, but returns
            a new node with the given prepending done.
            </summary>
            <param name="node">Node to prepend.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A new node with the give node prepended to this node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.PrependInPlace(DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Prepend a node before this node. May change this node, or return
            a new node.
            </summary>
            <param name="node">Node to prepend.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A node with the give node prepended to this node. May be a new
            node or the current node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.PrependInPlace(`0)">
            <summary>
            Prepend a item before this node. May change this node, or return
            a new node. Equivalent to PrependInPlace(new LeafNode(item), true), but
            may be more efficient because a new LeafNode might not be allocated.
            </summary>
            <param name="item">Item to prepend.</param>
            <returns>A node with the given item prepended to this node. May be a new
            node or the current node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.IsBalanced">
            <summary>
            Determine if this node is balanced. A node is balanced if the number
            of items is greater than
            Fibonacci(Depth+2). Balanced nodes are never rebalanced unless
            they go out of balance again.
            </summary>
            <returns>True if the node is balanced by this definition.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.Node.IsAlmostBalanced">
            <summary>
            Determine if this node is almost balanced. A node is almost balanced if t
            its depth is at most one greater than a fully balanced node with the same count.
            </summary>
            <returns>True if the node is almost balanced by this definition.</returns>
        </member>
        <member name="P:DmFramework.Collections.BigList`1.Node.Count">
            <summary>The number of items stored in the node (or below it).</summary>
            <value>The number of items in the node or below.</value>
        </member>
        <member name="P:DmFramework.Collections.BigList`1.Node.Shared">
            <summary>
            Is this node shared by more that one list (or within a single)
            lists. If true, indicates that this node, and any nodes below it,
            may never be modified. Never becomes false after being set to
            true.
            </summary>
            <value></value>
        </member>
        <member name="P:DmFramework.Collections.BigList`1.Node.Depth">
            <summary>
            Gets the depth of this node. A leaf node has depth 0,
            a concat node with two leaf children has depth 1, etc.
            </summary>
            <value>The depth of this node.</value>
        </member>
        <member name="T:DmFramework.Collections.BigList`1.LeafNode">
            <summary>
            The LeafNode class is the type of node that lives at the leaf of a tree and holds
            the actual items stored in the list. Each leaf holds at least 1, and at most MAXLEAF
            items in the items array. The number of items stored is found in "count", which may
            be less than "items.Length".
            </summary>
        </member>
        <member name="F:DmFramework.Collections.BigList`1.LeafNode.items">
            <summary>
            Array that stores the items in the nodes. Always has a least "count" elements,
            but may have more as padding.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.#ctor(`0)">
            <summary>Creates a LeafNode that holds a single item.</summary>
            <param name="item">Item to place into the leaf node.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.#ctor(System.Int32,`0[])">
            <summary>Creates a new leaf node with the indicates count of item and the</summary>
            <param name="count">Number of items. Can't be zero.</param>
            <param name="newItems">The array of items. The LeafNode takes
            possession of this array.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.GetAt(System.Int32)">
            <summary>Returns the items at the given index in this node.</summary>
            <param name="index">0-based index, relative to this node.</param>
            <returns>Item at that index.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.SetAtInPlace(System.Int32,`0)">
            <summary>
            Changes the item at the given index. May change this node,
            or return a new node with the given item changed.
            </summary>
            <param name="index">Index, relative to this node, to change.</param>
            <param name="item">New item to place at the given index.</param>
            <returns>A node with the give item changed. If it can be done in place
            then "this" is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.SetAt(System.Int32,`0)">
            <summary>
            Changes the item at the given index. Never changes this node,
            but always returns a new node with the given item changed.
            </summary>
            <param name="index">Index, relative to this node, to change.</param>
            <param name="item">New item to place at the given index.</param>
            <returns>A new node with the given item changed.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.MergeLeafInPlace(DmFramework.Collections.BigList{`0}.Node)">
            <summary>
            If other is a leaf node, and the resulting size would be less than MAXLEAF, merge
            the other leaf node into this one (after this one) and return true.
            </summary>
            <param name="other">Other node to possible merge.</param>
            <returns>If <paramref name="other"/> could be merged into this node, returns
            true. Otherwise returns false and the current node is unchanged.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.MergeLeaf(DmFramework.Collections.BigList{`0}.Node)">
            <summary>
            If other is a leaf node, and the resulting size would be less than MAXLEAF, merge
            the other leaf node with this one (after this one) and return a new node with
            the merged items. Does not modify this.
            If no merging, return null.
            </summary>
            <param name="other">Other node to possible merge.</param>
            <returns>If the nodes could be merged, returns the new node. Otherwise
            returns null.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.PrependInPlace(`0)">
            <summary>
            Prepend a item before this node. May change this node, or return
            a new node. Equivalent to PrependInPlace(new LeafNode(item), true), but
            may be more efficient because a new LeafNode might not be allocated.
            </summary>
            <param name="item">Item to prepend.</param>
            <returns>A node with the given item prepended to this node. May be a new
            node or the current node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.AppendInPlace(`0)">
            <summary>
            Append a item after this node. May change this node, or return
            a new node. Equivalent to AppendInPlace(new LeafNode(item), true), but
            may be more efficient because a new LeafNode might not be allocated.
            </summary>
            <param name="item">Item to append.</param>
            <returns>A node with the given item appended to this node. May be a new
            node or the current node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.AppendInPlace(DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Append a node after this node. May change this node, or return
            a new node.
            </summary>
            <param name="node">Node to append.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A node with the give node appended to this node. May be a new
            node or the current node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.InsertInPlace(System.Int32,`0)">
            <summary>
            Inserts an item inside this node. May change this node, or return
            a new node with the given appending done. Equivalent to
            InsertInPlace(new LeafNode(item), true), but may be more efficient.
            </summary>
            <param name="index">Index, relative to this node, to insert at. Must
            be in bounds.</param>
            <param name="item">Item to insert.</param>
            <returns>A node with the give item inserted. If done in-place, returns
            "this".</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.InsertInPlace(System.Int32,DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Inserts a node inside this node. May change this node, or return
            a new node with the given appending done.
            </summary>
            <param name="index">Index, relative to this node, to insert at. Must
            be in bounds.</param>
            <param name="node">Node to insert.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A node with the given item inserted. If done in-place, returns
            "this".</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.Insert(System.Int32,DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Inserts a node inside this node. Never changes this node, but returns
            a new node with the given appending done.
            </summary>
            <param name="index">Index, relative to this node, to insert at. Must
            be in bounds.</param>
            <param name="node">Node to insert.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A new node with the give node inserted.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.RemoveRangeInPlace(System.Int32,System.Int32)">
            <summary>
            Remove a range of items from this node. May change this node, or returns
            a new node with the given appending done. The
            sub-range may not be empty, but may extend outside the node.
            In other words, first might be less than zero or last might be greater
            than count. But, last can't be less than zero and first can't be
            greater than count. Also, last must be greater than or equal to last.
            </summary>
            <param name="first">Inclusive index of first item in sub-range, relative
            to this node.</param>
            <param name="last">Inclusize index of last item in sub-range, relative
            to this node.</param>
            <returns>A node with the sub-range removed. If done in-place, returns
            "this".</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of items from this node. Never changes this node, but returns
            a new node with the removing done. The
            sub-range may not be empty, but may extend outside the node.
            In other words, first might be less than zero or last might be greater
            than count. But, last can't be less than zero and first can't be
            greater than count. Also, last must be greater than or equal to last.
            </summary>
            <param name="first">Inclusive index of first item in sub-range, relative
            to this node.</param>
            <param name="last">Inclusize index of last item in sub-range, relative
            to this node.</param>
            <returns>A new node with the sub-range removed.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.LeafNode.Subrange(System.Int32,System.Int32)">
            <summary>
            Returns a node that has a sub-range of items from this node. The
            sub-range may not be empty, but may extend outside the node.
            In other words, first might be less than zero or last might be greater
            than count. But, last can't be less than zero and first can't be
            greater than count. Also, last must be greater than or equal to last.
            </summary>
            <param name="first">Inclusive first element, relative to this node.</param>
            <param name="last">Inclusize last element, relative to this node.</param>
            <returns>Node with the given sub-range.</returns>
        </member>
        <member name="T:DmFramework.Collections.BigList`1.ConcatNode">
            <summary>
            A ConcatNode is an interior (non-leaf) node that represents the concatination of
            the left and right child nodes. Both children must always be non-null.
            </summary>
        </member>
        <member name="F:DmFramework.Collections.BigList`1.ConcatNode.left">
            <summary>The left and right child nodes. They are never null.</summary>
        </member>
        <member name="F:DmFramework.Collections.BigList`1.ConcatNode.right">
            <summary>The left and right child nodes. They are never null.</summary>
        </member>
        <member name="F:DmFramework.Collections.BigList`1.ConcatNode.depth">
            <summary>
            The depth of this node -- the maximum length path to
            a leaf. If this node has two children that are leaves, the
            depth in 1.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.#ctor(DmFramework.Collections.BigList{`0}.Node,DmFramework.Collections.BigList{`0}.Node)">
            <summary>Create a new ConcatNode with the given children.</summary>
            <param name="left">The left child. May not be null.</param>
            <param name="right">The right child. May not be null.</param>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.NewNode(DmFramework.Collections.BigList{`0}.Node,DmFramework.Collections.BigList{`0}.Node)">
            <summary>
            Create a new node with the given children. Mark unchanged
            children as shared. There are four
            possible cases:
            1. If one of the new children is null, the other new child is returned.
            2. If neither child has changed, then this is marked as shared as returned.
            3. If one child has changed, the other child is marked shared an a new node is returned.
            4. If both children have changed, a new node is returned.
            </summary>
            <param name="newLeft">New left child.</param>
            <param name="newRight">New right child.</param>
            <returns>New node with the given children. Returns null if and only if both
            new children are null.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.NewNodeInPlace(DmFramework.Collections.BigList{`0}.Node,DmFramework.Collections.BigList{`0}.Node)">
            <summary>
            Updates a node with the given new children. If one of the new children is
            null, the other is returned. If both are null, null is returned.
            </summary>
            <param name="newLeft">New left child.</param>
            <param name="newRight">New right child.</param>
            <returns>Node with the given children. Usually, but not always, this. Returns
            null if and only if both new children are null.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.GetAt(System.Int32)">
            <summary>Returns the items at the given index in this node.</summary>
            <param name="index">0-based index, relative to this node.</param>
            <returns>Item at that index.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.SetAtInPlace(System.Int32,`0)">
            <summary>
            Changes the item at the given index. May change this node,
            or return a new node with the given item changed.
            </summary>
            <param name="index">Index, relative to this node, to change.</param>
            <param name="item">New item to place at the given index.</param>
            <returns>A node with the give item changed. If it can be done in place
            then "this" is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.SetAt(System.Int32,`0)">
            <summary>
            Changes the item at the given index. Never changes this node,
            but always returns a new node with the given item changed.
            </summary>
            <param name="index">Index, relative to this node, to change.</param>
            <param name="item">New item to place at the given index.</param>
            <returns>A new node with the given item changed.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.PrependInPlace(`0)">
            <summary>
            Prepend a item before this node. May change this node, or return
            a new node. Equivalent to PrependInPlace(new LeafNode(item), true), but
            may be more efficient because a new LeafNode might not be allocated.
            </summary>
            <param name="item">Item to prepend.</param>
            <returns>A node with the given item prepended to this node. May be a new
            node or the current node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.AppendInPlace(`0)">
            <summary>
            Append a item after this node. May change this node, or return
            a new node. Equivalent to AppendInPlace(new LeafNode(item), true), but
            may be more efficient because a new LeafNode might not be allocated.
            </summary>
            <param name="item">Item to append.</param>
            <returns>A node with the given item appended to this node. May be a new
            node or the current node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.AppendInPlace(DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Append a node after this node. May change this node, or return
            a new node.
            </summary>
            <param name="node">Node to append.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A node with the give node appended to this node. May be a new
            node or the current node.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.InsertInPlace(System.Int32,`0)">
            <summary>
            Inserts an item inside this node. May change this node, or return
            a new node with the given appending done. Equivalent to
            InsertInPlace(new LeafNode(item), true), but may be more efficient.
            </summary>
            <param name="index">Index, relative to this node, to insert at. Must
            be in bounds.</param>
            <param name="item">Item to insert.</param>
            <returns>A node with the give item inserted. If done in-place, returns
            "this".</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.InsertInPlace(System.Int32,DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Inserts a node inside this node. May change this node, or return
            a new node with the given appending done.
            </summary>
            <param name="index">Index, relative to this node, to insert at. Must
            be in bounds.</param>
            <param name="node">Node to insert.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A node with the given item inserted. If done in-place, returns
            "this".</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.Insert(System.Int32,DmFramework.Collections.BigList{`0}.Node,System.Boolean)">
            <summary>
            Inserts a node inside this node. Never changes this node, but returns
            a new node with the given appending done.
            </summary>
            <param name="index">Index, relative to this node, to insert at. Must
            be in bounds.</param>
            <param name="node">Node to insert.</param>
            <param name="nodeIsUnused">If true, the given node is not used
            in any current list, so it may be change, overwritten, or destroyed
            if convenient. If false, the given node is in use. It should be marked
            as shared if is is used within the return value.</param>
            <returns>A new node with the give node inserted.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.RemoveRangeInPlace(System.Int32,System.Int32)">
            <summary>
            Remove a range of items from this node. May change this node, or returns
            a new node with the given appending done. The
            sub-range may not be empty, but may extend outside the node.
            In other words, first might be less than zero or last might be greater
            than count. But, last can't be less than zero and first can't be
            greater than count. Also, last must be greater than or equal to last.
            </summary>
            <param name="first">Inclusive index of first item in sub-range, relative
            to this node.</param>
            <param name="last">Inclusize index of last item in sub-range, relative
            to this node.</param>
            <returns>A node with the sub-range removed. If done in-place, returns
            "this".</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of items from this node. Never changes this node, but returns
            a new node with the removing done. The
            sub-range may not be empty, but may extend outside the node.
            In other words, first might be less than zero or last might be greater
            than count. But, last can't be less than zero and first can't be
            greater than count. Also, last must be greater than or equal to last.
            </summary>
            <param name="first">Inclusive index of first item in sub-range, relative
            to this node.</param>
            <param name="last">Inclusize index of last item in sub-range, relative
            to this node.</param>
            <returns>A new node with the sub-range removed.</returns>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.ConcatNode.Subrange(System.Int32,System.Int32)">
            <summary>
            Returns a node that has a sub-range of items from this node. The
            sub-range may not be empty, but may extend outside the node.
            In other words, first might be less than zero or last might be greater
            than count. But, last can't be less than zero and first can't be
            greater than count. Also, last must be greater than or equal to last.
            </summary>
            <param name="first">Inclusive first element, relative to this node.</param>
            <param name="last">Inclusize last element, relative to this node.</param>
            <returns>Node with the given sub-range.</returns>
        </member>
        <member name="P:DmFramework.Collections.BigList`1.ConcatNode.Depth">
            <summary>
            The depth of this node -- the maximum length path to
            a leaf. If this node has two children that are leaves, the
            depth in 1.
            </summary>
            <value>The depth of this node.</value>
        </member>
        <member name="T:DmFramework.Collections.BigList`1.BigListRange">
            <summary>
            The class that is used to implement IList&lt;T&gt; to view a sub-range
            of a BigList. The object stores a wrapped list, and a start/count indicating
            a sub-range of the list. Insertion/deletions through the sub-range view
            cause the count to change also; insertions and deletions directly on
            the wrapped list do not.
            </summary>
            <remarks>This is different from Algorithms.Range in a very few respects:
            it is specialized to only wrap BigList, and it is a lot more efficient in enumeration.</remarks>
        </member>
        <member name="M:DmFramework.Collections.BigList`1.BigListRange.#ctor(DmFramework.Collections.BigList{`0},System.Int32,System.Int32)">
            <summary>
            Create a sub-range view object on the indicate part
            of the list.
            </summary>
            <param name="wrappedList">List to wrap.</param>
            <param name="start">The start index of the view in the wrapped list.</param>
            <param name="count">The number of items in the view.</param>
        </member>
        <member name="T:DmFramework.Collections.Comparers">
            <summary>A collection of methods to create IComparer and IEqualityComparer instances in various ways.</summary>
        </member>
        <member name="M:DmFramework.Collections.Comparers.ComparerFromComparison``1(System.Comparison{``0})">
            <summary>Given an Comparison on a type, returns an IComparer on that type.</summary>
            <typeparam name="T">T to compare.</typeparam>
            <param name="comparison">Comparison delegate on T</param>
            <returns>IComparer that uses the comparison.</returns>
        </member>
        <member name="M:DmFramework.Collections.Comparers.ComparerKeyValueFromComparerKey``2(System.Collections.Generic.IComparer{``0})">
            <summary>
            Given an IComparer on TKey, returns an IComparer on
            key-value Pairs.
            </summary>
            <typeparam name="TKey">TKey of the pairs</typeparam>
            <typeparam name="TValue">TValue of the apris</typeparam>
            <param name="keyComparer">IComparer on TKey</param>
            <returns>IComparer for comparing key-value pairs.</returns>
        </member>
        <member name="M:DmFramework.Collections.Comparers.EqualityComparerKeyValueFromComparerKey``2(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Given an IEqualityComparer on TKey, returns an IEqualityComparer on
            key-value Pairs.
            </summary>
            <typeparam name="TKey">TKey of the pairs</typeparam>
            <typeparam name="TValue">TValue of the apris</typeparam>
            <param name="keyEqualityComparer">IComparer on TKey</param>
            <returns>IEqualityComparer for comparing key-value pairs.</returns>
        </member>
        <member name="M:DmFramework.Collections.Comparers.ComparerPairFromKeyValueComparers``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IComparer{``1})">
            <summary>
            Given an IComparer on TKey and TValue, returns an IComparer on
            key-value Pairs of TKey and TValue, comparing first keys, then values.
            </summary>
            <typeparam name="TKey">TKey of the pairs</typeparam>
            <typeparam name="TValue">TValue of the apris</typeparam>
            <param name="keyComparer">IComparer on TKey</param>
            <param name="valueComparer">IComparer on TValue</param>
            <returns>IComparer for comparing key-value pairs.</returns>
        </member>
        <member name="M:DmFramework.Collections.Comparers.ComparerKeyValueFromComparisonKey``2(System.Comparison{``0})">
            <summary>
            Given an Comparison on TKey, returns an IComparer on
            key-value Pairs.
            </summary>
            <typeparam name="TKey">TKey of the pairs</typeparam>
            <typeparam name="TValue">TValue of the apris</typeparam>
            <param name="keyComparison">Comparison delegate on TKey</param>
            <returns>IComparer for comparing key-value pairs.</returns>
        </member>
        <member name="M:DmFramework.Collections.Comparers.DefaultComparer``1">
            <summary>
            Given an element type, check that it implements IComparable&lt;T&gt; or IComparable, then returns
            a IComparer that can be used to compare elements of that type.
            </summary>
            <returns>The IComparer&lt;T&gt; instance.</returns>
            <exception cref="T:System.InvalidOperationException">T does not implement IComparable&lt;T&gt;.</exception>
        </member>
        <member name="M:DmFramework.Collections.Comparers.DefaultKeyValueComparer``2">
            <summary>
            Given an key and value type, check that TKey implements IComparable&lt;T&gt; or IComparable, then returns
            a IComparer that can be used to compare KeyValuePairs of those types.
            </summary>
            <returns>The IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; instance.</returns>
            <exception cref="T:System.InvalidOperationException">TKey does not implement IComparable&lt;T&gt;.</exception>
        </member>
        <member name="T:DmFramework.Collections.Comparers.KeyValueEqualityComparer`2">
            <summary>
            Class to change an IEqualityComparer&lt;TKey&gt; to an IEqualityComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;
            Only the keys are compared.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.Comparers.KeyValueComparer`2">
            <summary>
            Class to change an IComparer&lt;TKey&gt; to an IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;
            Only the keys are compared.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.Comparers.PairComparer`2">
            <summary>
            Class to change an IComparer&lt;TKey&gt; and IComparer&lt;TValue&gt; to an IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;
            Keys are compared, followed by values.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.Comparers.ComparisonComparer`1">
            <summary>Class to change an Comparison&lt;T&gt; to an IComparer&lt;T&gt;.</summary>
        </member>
        <member name="T:DmFramework.Collections.Comparers.ComparisonKeyValueComparer`2">
            <summary>
            Class to change an Comparison&lt;TKey&gt; to an IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.
            GetHashCode cannot be used on this class.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.Deque`1">
            <summary>
            <para>The Deque class implements a type of list known as a Double Ended Queue. A Deque
            is quite similar to a List, in that items have indices (starting at 0), and the item at any
            index can be efficiently retrieved. The difference between a List and a Deque lies in the
            efficiency of inserting elements at the beginning. In a List, items can be efficiently added
            to the end, but inserting an item at the beginning of the List is slow, taking time
            proportional to the size of the List. In a Deque, items can be added to the beginning
            or end equally efficiently, regardless of the number of items in the Deque. As a trade-off
            for this increased flexibility, Deque is somewhat slower than List (but still constant time) when
            being indexed to get or retrieve elements. </para>
            </summary>
            <remarks>
            <para>The Deque class can also be used as a more flexible alternative to the Queue
            and Stack classes. Deque is as efficient as Queue and Stack for adding or removing items,
            but is more flexible: it allows access
            to all items in the queue, and allows adding or removing from either end.</para>
            <para>Deque is implemented as a ring buffer, which is grown as necessary. The size
            of the buffer is doubled whenever the existing capacity is too small to hold all the
            elements.</para>
            </remarks>
            <typeparam name="T">The type of items stored in the Deque.</typeparam>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.#ctor">
            <summary>Create a new Deque that is initially empty.</summary>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new Deque initialized with the items from the passed collection,
            in order.
            </summary>
            <param name="collection">A collection of items to initialize the Deque with.</param>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>Copies all the items in the Deque into an array.</summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Starting index in <paramref name="array"/> to copy to.</param>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.TrimToSize">
            <summary>
            Trims the amount of memory used by the Deque by changing
            the Capacity to be equal to Count. If no more items will be added
            to the Deque, calling TrimToSize will reduce the amount of memory
            used by the Deque.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.Clear">
            <summary>Removes all items from the Deque.</summary>
            <remarks>Clearing the Deque takes a small constant amount of time, regardless of
            how many items are currently in the Deque.</remarks>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.GetEnumerator">
            <summary>
            Enumerates all of the items in the list, in order. The item at index 0
            is enumerated first, then the item at index 1, and so on. If the items
            are added to or removed from the Deque during enumeration, the
            enumeration ends with an InvalidOperationException.
            </summary>
            <returns>An IEnumerator&lt;T&gt; that enumerates all the
            items in the list.</returns>
            <exception cref="T:System.InvalidOperationException">The Deque has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a new item at the given index in the Deque. All items at indexes
            equal to or greater than <paramref name="index"/> move up one index
            in the Deque.
            </summary>
            <remarks>The amount of time to insert an item in the Deque is proportional
            to the distance of index from the closest end of the Deque:
            O(Min(<paramref name="index"/>, Count - <paramref name="index"/>)).
            Thus, inserting an item at the front or end of the Deque is always fast; the middle of
            of the Deque is the slowest place to insert.
            </remarks>
            <param name="index">The index in the Deque to insert the item at. After the
            insertion, the inserted item is located at this index. The
            front item in the Deque has index 0.</param>
            <param name="item">The item to insert at the given index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than Count.</exception>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of items at the given index in the Deque. All items at indexes
            equal to or greater than <paramref name="index"/> increase their indices in the Deque
            by the number of items inserted.
            </summary>
            <remarks>The amount of time to insert a collection in the Deque is proportional
            to the distance of index from the closest end of the Deque, plus the number of items
            inserted (M):
            O(M + Min(<paramref name="index"/>, Count - <paramref name="index"/>)).
            </remarks>
            <param name="index">The index in the Deque to insert the collection at. After the
            insertion, the first item of the inserted collection is located at this index. The
            front item in the Deque has index 0.</param>
            <param name="collection">The collection of items to insert at the given index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than Count.</exception>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index in the Deque. All items at indexes
            greater than <paramref name="index"/> move down one index
            in the Deque.
            </summary>
            <remarks>The amount of time to delete an item in the Deque is proportional
            to the distance of index from the closest end of the Deque:
            O(Min(<paramref name="index"/>, Count - 1 - <paramref name="index"/>)).
            Thus, deleting an item at the front or end of the Deque is always fast; the middle of
            of the Deque is the slowest place to delete.
            </remarks>
            <param name="index">The index in the list to remove the item at. The
            first item in the list has index 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items at the given index in the Deque. All items at indexes
            greater than <paramref name="index"/> move down <paramref name="count"/> indices
            in the Deque.
            </summary>
            <remarks>The amount of time to delete <paramref name="count"/> items in the Deque is proportional
            to the distance to the closest end of the Deque:
            O(Min(<paramref name="index"/>, Count - <paramref name="index"/> - <paramref name="count"/>)).
            </remarks>
            <param name="index">The index in the list to remove the range at. The
            first item in the list has index 0.</param>
            <param name="count">The number of items to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count, or <paramref name="count"/> is less than zero
            or too large.</exception>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.AddToFront(`0)">
            <summary>
            Adds an item to the front of the Deque. The indices of all existing items
            in the Deque are increased by 1. This method is
            equivalent to <c>Insert(0, item)</c> but is a little more
            efficient.
            </summary>
            <remarks>Adding an item to the front of the Deque takes
            a small constant amount of time, regardless of how many items are in the Deque.</remarks>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.AddManyToFront(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items to the front of the Deque. The indices of all existing items
            in the Deque are increased by the number of items inserted. The first item in the added collection becomes the
            first item in the Deque.
            </summary>
            <remarks>This method takes time O(M), where M is the number of items in the
            <paramref name="collection"/>.</remarks>
            <param name="collection">The collection of items to add.</param>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.AddToBack(`0)">
            <summary>
            Adds an item to the back of the Deque. The indices of all existing items
            in the Deque are unchanged. This method is
            equivalent to <c>Insert(Count, item)</c> but is a little more
            efficient.
            </summary>
            <remarks>Adding an item to the back of the Deque takes
            a small constant amount of time, regardless of how many items are in the Deque.</remarks>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.Add(`0)">
            <summary>
            Adds an item to the back of the Deque. The indices of all existing items
            in the Deque are unchanged. This method is
            equivalent to <c>AddToBack(item)</c>.
            </summary>
            <remarks>Adding an item to the back of the Deque takes
            a small constant amount of time, regardless of how many items are in the Deque.</remarks>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.AddManyToBack(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items to the back of the Deque. The indices of all existing items
            in the Deque are unchanged. The last item in the added collection becomes the
            last item in the Deque.
            </summary>
            <remarks>This method takes time O(M), where M is the number of items in the
            <paramref name="collection"/>.</remarks>
            <param name="collection">The collection of item to add.</param>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.RemoveFromFront">
            <summary>
            Removes an item from the front of the Deque. The indices of all existing items
            in the Deque are decreased by 1. This method is
            equivalent to <c>RemoveAt(0)</c> but is a little more
            efficient.
            </summary>
            <remarks>Removing an item from the front of the Deque takes
            a small constant amount of time, regardless of how many items are in the Deque.</remarks>
            <returns>The item that was removed.</returns>
            <exception cref="T:System.InvalidOperationException">The Deque is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.RemoveFromBack">
            <summary>
            Removes an item from the back of the Deque. The indices of all existing items
            in the Deque are unchanged. This method is
            equivalent to <c>RemoveAt(Count-1)</c> but is a little more
            efficient.
            </summary>
            <remarks>Removing an item from the back of the Deque takes
            a small constant amount of time, regardless of how many items are in the Deque.</remarks>
            <exception cref="T:System.InvalidOperationException">The Deque is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.GetAtFront">
            <summary>
            Retreives the item currently at the front of the Deque. The Deque is
            unchanged. This method is
            equivalent to <c>deque[0]</c> (except that a different exception is thrown).
            </summary>
            <remarks>Retreiving the item at the front of the Deque takes
            a small constant amount of time, regardless of how many items are in the Deque.</remarks>
            <returns>The item at the front of the Deque.</returns>
            <exception cref="T:System.InvalidOperationException">The Deque is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.GetAtBack">
            <summary>
            Retreives the item currently at the back of the Deque. The Deque is
            unchanged. This method is
            equivalent to <c>deque[deque.Count - 1]</c> (except that a different exception is thrown).
            </summary>
            <remarks>Retreiving the item at the back of the Deque takes
            a small constant amount of time, regardless of how many items are in the Deque.</remarks>
            <returns>The item at the back of the Deque.</returns>
            <exception cref="T:System.InvalidOperationException">The Deque is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.Clone">
            <summary>Creates a new Deque that is a copy of this one.</summary>
            <remarks>Copying a Deque takes O(N) time, where N is the number of items in this Deque..</remarks>
            <returns>A copy of the current deque.</returns>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.System#ICloneable#Clone">
            <summary>Creates a new Deque that is a copy of this one.</summary>
            <remarks>Copying a Deque takes O(N) time, where N is the number of items in this Deque..</remarks>
            <returns>A copy of the current deque.</returns>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.CloneContents">
            <summary>
            Makes a deep clone of this Deque. A new Deque is created with a clone of
            each element of this set, by calling ICloneable.Clone on each element. If T is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If T is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the Deque takes time O(N), where N is the number of items in the Deque.</para></remarks>
            <returns>The cloned Deque.</returns>
            <exception cref="T:System.InvalidOperationException">T is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.StopEnumerations">
            <summary>
            Must be called whenever there is a structural change in the tree. Causes
            changeStamp to be changed, which causes any in-progress enumerations
            to throw exceptions.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.CheckEnumerationStamp(System.Int32)">
            <summary>
            Checks the given stamp against the current change stamp. If different, the
            collection has changed during enumeration and an InvalidOperationException
            must be thrown
            </summary>
            <param name="startStamp">changeStamp at the start of the enumeration.</param>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.CreateInitialBuffer(`0)">
            <summary>
            Creates the initial buffer and initialized the Deque to contain one initial
            item.
            </summary>
            <param name="firstItem">First and only item for the Deque.</param>
        </member>
        <member name="M:DmFramework.Collections.Deque`1.IncreaseBuffer">
            <summary>
            Increase the amount of buffer space. When calling this method, the Deque
            must not be empty. If start and end are equal, that indicates a completely
            full Deque.
            </summary>
        </member>
        <member name="P:DmFramework.Collections.Deque`1.Count">
            <summary>
            Gets the number of items currently stored in the Deque. The last item
            in the Deque has index Count-1.
            </summary>
            <remarks>Getting the count of items in the Deque takes a small constant
            amount of time.</remarks>
            <value>The number of items stored in this Deque.</value>
        </member>
        <member name="P:DmFramework.Collections.Deque`1.Capacity">
            <summary>
            Gets or sets the capacity of the Deque. The Capacity is the number of
            items that this Deque can hold without expanding its internal buffer. Since
            Deque will automatically expand its buffer when necessary, in almost all cases
            it is unnecessary to worry about the capacity. However, if it is known that a
            Deque will contain exactly 1000 items eventually, it can slightly improve
            efficiency to set the capacity to 1000 up front, so that the Deque does not
            have to expand automatically.
            </summary>
            <value>The number of items that this Deque can hold without expanding its
            internal buffer.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The capacity is being set
            to less than Count, or to too large a value.</exception>
        </member>
        <member name="P:DmFramework.Collections.Deque`1.Item(System.Int32)">
            <summary>Gets or sets an item at a particular index in the Deque.</summary>
            <remarks>Getting or setting the item at a particular index takes a small constant amount
            of time, no matter what index is used.</remarks>
            <param name="index">The index of the item to retrieve or change. The front item has index 0, and
            the back item has index Count-1.</param>
            <returns>The value at the indicated index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is less than zero or greater than or equal
            to Count.</exception>
        </member>
        <member name="T:DmFramework.Collections.DictionaryBase`2">
            <summary>
            DictionaryBase is a base class that can be used to more easily implement the
            generic IDictionary&lt;T&gt; and non-generic IDictionary interfaces.
            </summary>
            <remarks>
            <para>To use DictionaryBase as a base class, the derived class must override
            Count, GetEnumerator, TryGetValue, Clear, Remove, and the indexer set accessor. </para>
            </remarks>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.Clear">
            <summary>Clears the dictionary. This method must be overridden in the derived class.</summary>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.Remove(`0)">
            <summary>Removes a key from the dictionary. This method must be overridden in the derived class.</summary>
            <param name="key">Key to remove from the dictionary.</param>
            <returns>True if the key was found, false otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. If so, the value
            associated with that key is returned through the value parameter. This method must be
            overridden by the derived class.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="value">Returns the value associated with key, if true was returned.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.Add(`0,`1)">
            <summary>Adds a new key-value pair to the dictionary.</summary>
            <remarks>The default implementation of this method
            checks to see if the key already exists using 
            ContainsKey, then calls the indexer setter if the key doesn't
            already exist. </remarks>
            <param name="key">Key to add.</param>
            <param name="value">Value to associated with the key.</param>
            <exception cref="T:System.ArgumentException">key is already present in the dictionary</exception>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.ContainsKey(`0)">
            <summary>
            Determines whether a given key is found
            in the dictionary.
            </summary>
            <remarks>The default implementation simply calls TryGetValue and returns
            what it returns.</remarks>
            <param name="key">Key to look for in the dictionary.</param>
            <returns>True if the key is present in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.ToString">
            <summary>
            Shows the String representation of the dictionary. The String representation contains
            a list of the mappings in the dictionary.
            </summary>
            <returns>The String representation of the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.AsReadOnly">
            <summary>
            Provides a read-only view of this dictionary. The returned IDictionary&lt;TKey,TValue&gt; provides
            a view of the dictionary that prevents modifications to the dictionary. Use the method to provide
            access to the dictionary without allowing changes. Since the returned object is just a view,
            changes to the dictionary will be reflected in the view.
            </summary>
            <returns>An IIDictionary&lt;TKey,TValue&gt; that provides read-only access to the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a key-value pair to the collection. This implementation calls the Add method
            with the Key and Value from the item.
            </summary>
            <param name="item">A KeyValuePair contains the Key and Value to add.</param>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if a dictionary contains a given KeyValuePair. This implementation checks to see if the
            dictionary contains the given key, and if the value associated with the key is equal to (via object.Equals)
            the value.
            </summary>
            <param name="item">A KeyValuePair containing the Key and Value to check for.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if a dictionary contains a given KeyValuePair, and if so, removes it. This implementation checks to see if the
            dictionary contains the given key, and if the value associated with the key is equal to (via object.Equals)
            the value. If so, the key-value pair is removed.
            </summary>
            <param name="item">A KeyValuePair containing the Key and Value to check for.</param>
            <returns>True if the item was found and removed. False otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.CheckGenericType``1(System.String,System.Object)">
            <summary>
            Check that the given parameter is of the expected generic type. Throw an ArgumentException
            if it isn't.
            </summary>
            <typeparam name="ExpectedType">Expected type of the parameter</typeparam>
            <param name="name">parameter name</param>
            <param name="value">parameter value</param>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds a key-value pair to the collection. If key or value are not of the expected types, an
            ArgumentException is thrown. If both key and value are of the expected types, the (overridden)
            Add method is called with the key and value to add.
            </summary>
            <param name="key">Key to add to the dictionary.</param>
            <param name="value">Value to add to the dictionary.</param>
            <exception cref="T:System.ArgumentException">key or value are not of the expected type for this dictionary.</exception>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.System#Collections#IDictionary#Clear">
            <summary>Clears this dictionary. Calls the (overridden) Clear method.</summary>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. The dictionary
            is not changed. Calls the (overridden) ContainsKey method. If key is not of the correct
            TKey for the dictionary, false is returned.
            </summary>
            <param name="key">The key to search for.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the key (and associated value) from the collection that is equal to the passed in key. If
            no key in the dictionary is equal to the passed key, the 
            dictionary is unchanged. Calls the (overridden) Remove method. If key is not of the correct
            TKey for the dictionary, the dictionary is unchanged.
            </summary>
            <param name="key">The key to remove.</param>
            <exception cref="T:System.ArgumentException">key could not be converted to TKey.</exception>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the entries in the dictionary. Each entry is 
            returned as a DictionaryEntry.
            The entries are enumerated in the same orders as the (overridden) GetEnumerator
            method.
            </summary>
            <returns>An enumerator for enumerating all the elements in the OrderedDictionary.</returns>		
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the entries in the dictionary. Each entry is 
            returned as a DictionaryEntry.
            The entries are enumerated in the same orders as the (overridden) GetEnumerator
            method.
            </summary>
            <returns>An enumerator for enumerating all the elements in the OrderedDictionary.</returns>		
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.DebuggerDisplayString">
            <summary>
            Display the contents of the dictionary in the debugger. This is intentionally private, it is called
            only from the debugger due to the presence of the DebuggerDisplay attribute. It is similar
            format to ToString(), but is limited to 250-300 characters or so, so as not to overload the debugger.
            </summary>
            <returns>The String representation of the items in the collection, similar in format to ToString().</returns>
        </member>
        <member name="P:DmFramework.Collections.DictionaryBase`2.Item(`0)">
            <summary>
            The indexer of the dictionary. This is used to store keys and values and
            retrieve values from the dictionary. The setter
            accessor must be overridden in the derived class.
            </summary>
            <param name="key">Key to find in the dictionary.</param>
            <returns>The value associated with the key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown from the get accessor if the key
            was not found in the dictionary.</exception>
        </member>
        <member name="P:DmFramework.Collections.DictionaryBase`2.Keys">
            <summary>Returns a collection of the keys in this dictionary.</summary>
            <value>A read-only collection of the keys in this dictionary.</value>
        </member>
        <member name="P:DmFramework.Collections.DictionaryBase`2.Values">
            <summary>
            Returns a collection of the values in this dictionary. The ordering of 
            values in this collection is the same as that in the Keys collection.
            </summary>
            <value>A read-only collection of the values in this dictionary.</value>
        </member>
        <member name="P:DmFramework.Collections.DictionaryBase`2.System#Collections#IDictionary#IsFixedSize">
            <summary>Returns whether this dictionary is fixed size. This implemented always returns false.</summary>
            <value>Always returns false.</value>
        </member>
        <member name="P:DmFramework.Collections.DictionaryBase`2.System#Collections#IDictionary#IsReadOnly">
            <summary>Returns if this dictionary is read-only. This implementation always returns false.</summary>
            <value>Always returns false.</value>
        </member>
        <member name="P:DmFramework.Collections.DictionaryBase`2.System#Collections#IDictionary#Keys">
            <summary>
            Returns a collection of all the keys in the dictionary. The values in this collection will
            be enumerated in the same order as the (overridden) GetEnumerator method.
            </summary>
            <value>The collection of keys.</value>
        </member>
        <member name="P:DmFramework.Collections.DictionaryBase`2.System#Collections#IDictionary#Values">
            <summary>
            Returns a collection of all the values in the dictionary. The values in this collection will
            be enumerated in the same order as the (overridden) GetEnumerator method.
            </summary>
            <value>The collection of values.</value>
        </member>
        <member name="P:DmFramework.Collections.DictionaryBase`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with a given key. When getting a value, if this
            key is not found in the collection, then null is returned. When setting
            a value, the value replaces any existing value in the dictionary. If either the key or value
            are not of the correct type for this dictionary, an ArgumentException is thrown.
            </summary>
            <value>The value associated with the key, or null if the key was not present.</value>
            <exception cref="T:System.ArgumentException">key could not be converted to TKey, or value could not be converted to TValue.</exception>
        </member>
        <member name="T:DmFramework.Collections.DictionaryBase`2.KeysCollection">
            <summary>
            A private class that implements ICollection&lt;TKey&gt; and ICollection for the
            Keys collection. The collection is read-only.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyCollectionBase`1">
            <summary>
            ReadOnlyCollectionBase is a base class that can be used to more easily implement the
            generic ICollection&lt;T&gt; and non-generic ICollection interfaces for a read-only collection:
            a collection that does not allow adding or removing elements.
            </summary>
            <remarks>
            <para>To use ReadOnlyCollectionBase as a base class, the derived class must override
            the Count and GetEnumerator methods. </para>
            <para>ICollection&lt;T&gt;.Contains need not be implemented by the
            derived class, but it should be strongly considered, because the ReadOnlyCollectionBase implementation
            may not be very efficient.</para>
            </remarks>
            <typeparam name="T">The item type of the collection.</typeparam>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.MethodModifiesCollection">
            <summary>Throws an NotSupportedException stating that this collection cannot be modified.</summary>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.ToString">
            <summary>
            Shows the String representation of the collection. The String representation contains
            a list of the items in the collection.
            </summary>
            <returns>The String representation of the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.Exists(System.Predicate{`0})">
            <summary>
            Determines if the collection contains any item that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if the collection contains one or more items that satisfy the condition
            defined by <paramref name="predicate"/>. False if the collection does not contain
            an item that satisfies <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>, or if the collection is empty. False if one or more items
            in the collection do not satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.CountWhere(System.Predicate{`0})">
            <summary>
            Counts the number of items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>The number of items in the collection that satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.FindAll(System.Predicate{`0})">
            <summary>
            Enumerates the items in the collection that satisfy the condition defined
            by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the items that satisfy the condition.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.ForEach(System.Action{`0})">
            <summary>Performs the specified action on each item in this collection.</summary>
            <param name="action">An Action delegate which is invoked for each item in this collection.</param>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Convert this collection of items by applying a delegate to each item in the collection. The resulting enumeration
            contains the result of applying <paramref name="converter"/> to each item in this collection, in
            order.
            </summary>
            <typeparam name="TOutput">The type each item is being converted to.</typeparam>
            <param name="converter">A delegate to the method to call, passing each item in this collection.</param>
            <returns>An IEnumerable&lt;TOutput^gt; that enumerates the resulting collection from applying <paramref name="converter"/> to each item in this collection in
            order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            This method throws an NotSupportedException
            stating the collection is read-only.
            </summary>
            <param name="item">Item to be added to the collection.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            This method throws an NotSupportedException
            stating the collection is read-only.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            This method throws an NotSupportedException
            stating the collection is read-only.
            </summary>
            <param name="item">Item to be removed from the collection.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.Contains(`0)">
            <summary>
            Determines if the collection contains a particular item. This default implementation
            iterates all of the items in the collection via GetEnumerator, testing each item
            against <paramref name="item"/> using IComparable&lt;T&gt;.Equals or
            Object.Equals.
            </summary>
            <remarks>You should strongly consider overriding this method to provide
            a more efficient implementation.</remarks>
            <param name="item">The item to check for in the collection.</param>
            <returns>True if the collection contains <paramref name="item"/>, false otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all the items in the collection into an array. Implemented by
            using the enumerator returned from GetEnumerator to get all the items
            and copy them to the provided array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Starting index in <paramref name="array"/> to copy to.</param>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.ToArray">
            <summary>
            Creates an array of the correct size, and copies all the items in the
            collection into the array, by calling CopyTo.
            </summary>
            <returns>An array containing all the elements in the collection, in order.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.GetEnumerator">
            <summary>Must be overridden to enumerate all the members of the collection.</summary>
            <returns>A generic IEnumerator&lt;T&gt; that can be used
            to enumerate all the items in the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the items in the collection into an array. Implemented by
            using the enumerator returned from GetEnumerator to get all the items
            and copy them to the provided array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="index">Starting index in <paramref name="array"/> to copy to.</param>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provides an IEnumerator that can be used to iterate all the members of the
            collection. This implementation uses the IEnumerator&lt;T&gt; that was overridden
            by the derived classes to enumerate the members of the collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate the collection.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyCollectionBase`1.DebuggerDisplayString">
            <summary>
            Display the contents of the collection in the debugger. This is intentionally private, it is called
            only from the debugger due to the presence of the DebuggerDisplay attribute. It is similar
            format to ToString(), but is limited to 250-300 characters or so, so as not to overload the debugger.
            </summary>
            <returns>The String representation of the items in the collection, similar in format to ToString().</returns>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyCollectionBase`1.Count">
            <summary>Must be overridden to provide the number of items in the collection.</summary>
            <value>The number of items in the collection.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Indicates whether the collection is read-only. Returns the value
            of readOnly that was provided to the constructor.
            </summary>
            <value>Always true.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyCollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>Indicates whether the collection is synchronized.</summary>
            <value>Always returns false, indicating that the collection is not synchronized.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyCollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>Indicates the synchronization object for this collection.</summary>
            <value>Always returns this.</value>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.KeysCollection.#ctor(DmFramework.Collections.DictionaryBase{`0,`1})">
            <summary>Constructor.</summary>
            <param name="myDictionary">The dictionary this is associated with.</param>
        </member>
        <member name="T:DmFramework.Collections.DictionaryBase`2.ValuesCollection">
            <summary>
            A private class that implements ICollection&lt;TValue&gt; and ICollection for the
            Values collection. The collection is read-only.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.DictionaryBase`2.DictionaryEnumeratorWrapper">
            <summary>
            A class that wraps a IDictionaryEnumerator around an IEnumerator that
            enumerates KeyValuePairs. This is useful in implementing IDictionary, because
            IEnumerator can be implemented with an iterator, but IDictionaryEnumerator cannot.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.DictionaryBase`2.DictionaryEnumeratorWrapper.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Constructor.</summary>
            <param name="enumerator">The enumerator of KeyValuePairs that is being wrapped.</param>
        </member>
        <member name="T:DmFramework.Collections.Hash`1">
             <summary>
             The base implementation for various collections classes that use hash tables
             as part of their implementation. This class should not (and can not) be
             used directly by end users; it's only for internal use by the collections package. The Hash
             does not handle duplicate values.
             </summary>
             <remarks>
             The Hash manages items of type T, and uses a IComparer&lt;ItemTYpe&gt; that
             hashes compares items to hash items into the table.
            </remarks>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Constructor. Create a new hash table.</summary>
            <param name="equalityComparer">The comparer to use to compare items. </param>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.GetEnumerationStamp">
            <summary>
            Gets the current enumeration stamp. Call CheckEnumerationStamp later
            with this value to throw an exception if the hash table is changed.
            </summary>
            <returns>The current enumeration stamp.</returns>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.StopEnumerations">
            <summary>
            Must be called whenever there is a structural change in the tree. Causes
            changeStamp to be changed, which causes any in-progress enumerations
            to throw exceptions.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.CheckEnumerationStamp(System.Int32)">
            <summary>
            Checks the given stamp against the current change stamp. If different, the
            collection has changed during enumeration and an InvalidOperationException
            must be thrown
            </summary>
            <param name="startStamp">changeStamp at the start of the enumeration.</param>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.Insert(`0,System.Boolean,`0@)">
            <summary>
            Insert a new item into the hash table. If a duplicate item exists, can replace or
            do nothing.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="replaceOnDuplicate">If true, duplicate items are replaced. If false, nothing
            is done if a duplicate already exists.</param>
            <param name="previous">If a duplicate was found, returns it (whether replaced or not).</param>
            <returns>True if no duplicate existed, false if a duplicate was found.</returns>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.Delete(`0,`0@)">
            <summary>Deletes an item from the hash table.</summary>
            <param name="item">Item to search for and delete.</param>
            <param name="itemDeleted">If true returned, the actual item stored in the hash table (must be
            equal to <paramref name="item"/>, but may not be identical.</param>
            <returns>True if item was found and deleted, false if item wasn't found.</returns>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.Find(`0,System.Boolean,`0@)">
            <summary>
            Find an item in the hash table. If found, optionally replace it with the
            finding item.
            </summary>
            <param name="find">Item to find.</param>
            <param name="replace">If true, replaces the equal item in the hash table
            with <paramref name="item"/>.</param>
            <param name="item">Returns the equal item found in the table, if true was returned.</param>
            <returns>True if the item was found, false otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.GetEnumerator">
            <summary>
            Enumerate all of the items in the hash table. The items
            are enumerated in a haphazard, unpredictable order.
            </summary>
            <returns>An IEnumerator&lt;T&gt; that enumerates the items
            in the hash table.</returns>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all of the items in the hash table. The items
            are enumerated in a haphazard, unpredictable order.
            </summary>
            <returns>An IEnumerator that enumerates the items
            in the hash table.</returns>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.Clone(System.Converter{`0,`0})">
            <summary>Creates a clone of this hash table.</summary>
            <param name="cloneItem">If non-null, this function is applied to each item when cloning. It must be the
            case that this function does not modify the hash code or equality function.</param>
            <returns>A shallow clone that contains the same items.</returns>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.GetFullHash(`0)">
            <summary>Gets the full hash code for an item.</summary>
            <param name="item">Item to get hash code for.</param>
            <returns>The full hash code. It is never zero.</returns>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.GetHashValuesFromFullHash(System.Int32,System.Int32@,System.Int32@)">
            <summary>Get the initial bucket number and skip amount from the full hash value.</summary>
            <param name="hash">The full hash value.</param>
            <param name="initialBucket">Returns the initial bucket. Always in the range 0..(totalSlots - 1).</param>
            <param name="skip">Returns the skip values. Always odd in the range 0..(totalSlots - 1).</param>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.GetHashValues(`0,System.Int32@,System.Int32@)">
            <summary>Gets the full hash value, initial bucket number, and skip amount for an item.</summary>
            <param name="item">Item to get hash value of.</param>
            <param name="initialBucket">Returns the initial bucket. Always in the range 0..(totalSlots - 1).</param>
            <param name="skip">Returns the skip values. Always odd in the range 0..(totalSlots - 1).</param>
            <returns>The full hash value. This is never zero.</returns>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.EnsureEnoughSlots(System.Int32)">
            <summary>
            Make sure there are enough slots in the hash table that <paramref name="additionalItems"/>
            items can be inserted into the table.
            </summary>
            <param name="additionalItems">Number of additional items we are inserting.</param>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.ShrinkIfNeeded">
            <summary>
            Check if the number of items in the table is small enough that
            we should shrink the table again.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.GetSecondaryShift(System.Int32)">
            <summary>
            Given the size of a hash table, compute the "secondary shift" value -- the shift
            that is used to determine the skip amount for collision resolution.
            </summary>
            <param name="newSize">The new size of the table.</param>
            <returns>The secondary skip amount.</returns>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.ResizeTable(System.Int32)">
            <summary>
            Resize the hash table to the given new size, moving all items into the
            new hash table.
            </summary>
            <param name="newSize">The new size of the hash table. Must be a power
            of two.</param>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Serialize the hash table. Called from the serialization infrastructure.</summary>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called on deserialization. We cannot deserialize now, because hash codes
            might not be correct now. We do real deserialization in the OnDeserialization call.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Deserialize the hash table. Called from the serialization infrastructure when
            the object graph has finished deserializing.
            </summary>
        </member>
        <member name="P:DmFramework.Collections.Hash`1.ElementCount">
            <summary>Get the number of items in the hash table.</summary>
            <value>The number of items stored in the hash table.</value>
        </member>
        <member name="P:DmFramework.Collections.Hash`1.SlotCount">
            <summary>
            Get the number of slots in the hash table. Exposed internally
            for testing purposes.
            </summary>
            <value>The number of slots in the hash table.</value>
        </member>
        <member name="P:DmFramework.Collections.Hash`1.LoadFactor">
            <summary>
            Get or change the load factor. Changing the load factor may cause
            the size of the table to grow or shrink accordingly.
            </summary>
            <value></value>
        </member>
        <member name="T:DmFramework.Collections.Hash`1.Slot">
            <summary>
            The structure that has each slot in the hash table. Each slot has three parts:
            1. The collision bit. Indicates whether some item visited this slot but had to
            keep looking because the slot was full.
            2. 31-bit full hash value of the item. If zero, the slot is empty.
            3. The item itself.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.Hash`1.Slot.Clear">
            <summary>Clear this slot, leaving the collision bit alone.</summary>
        </member>
        <member name="P:DmFramework.Collections.Hash`1.Slot.HashValue">
            <summary>
            The full hash value associated with the value in this slot, or zero
            if the slot is empty.
            </summary>
        </member>
        <member name="P:DmFramework.Collections.Hash`1.Slot.Empty">
            <summary>Is this slot empty?</summary>
        </member>
        <member name="P:DmFramework.Collections.Hash`1.Slot.Collision">
            <summary>
            The "Collision" bit indicates that some value hit this slot and
            collided, so had to try another slot.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.HotSwapDictionary`2">
            <summary>
            Dictionary implementing the hot swap model. Is a completely thread safe collection
            with lock-less read and very slow write operations.
            </summary>
            [DebuggerStepThrough]
        </member>
        <member name="M:DmFramework.Collections.HotSwapDictionary`2.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapDictionary`2.AddRange(`0[],`1[])">
            <summary>Slow, performs a *hot swap*.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapDictionary`2.TryAddValue(`0,`1)">
            <summary>
            Custom operation, performs a result able add.
            Will return false if the key is already added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.HotSwapDictionary`2.GetOrAdd(`0,`1)">
            <summary>Will try to get the value with this key, or if it does not exist, add the newly provided value.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapDictionary`2.Add(`0,`1)">
            <summary>Slow, performs a *hot swap*.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapDictionary`2.Remove(`0)">
            <summary>Slow, performs a *hot swap*.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Slow, performs a *hot swap*.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Slow, performs a *hot swap*.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapDictionary`2.Clear">
            <summary>Slow, performs a *hot swap*.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>*Not implemented.</summary>
        </member>
        <member name="P:DmFramework.Collections.HotSwapDictionary`2.Item(`0)">
            <summary>Set is *slow*, performs a *hot swap*.</summary>
        </member>
        <member name="T:DmFramework.Collections.HotSwapList`1">
            <summary>
            Hot swapping.
            To evade locking - when adding new items, simply replace the list with a new one.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapList`1.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapList`1.AsReadOnly">
            <summary>
            This allows to quickly capture a read only version of the
            collection that can be further used as needed in any scenario.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.HotSwapList`1.AddUnique(`0)">
            <summary>Add item only if it does not already exist.</summary>
            <param name="item"></param>
            <returns>True if the add was performed, or false if it already exists.</returns>
        </member>
        <member name="M:DmFramework.Collections.HotSwapList`1.TryGetValue(System.Int32,`0@)">
            <summary>Try to obtain a value with this index, return false if we fail and no modification to value done.</summary>
            <param name="index">The index of the item retrieved.</param>
            <param name="value">The resulting retrieve value.</param>
            <returns>True if the value was retrieved, otherwise false.</returns>
        </member>
        <member name="M:DmFramework.Collections.HotSwapList`1.EnumerableToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Helper, converts enumerable items collection into an array of the same.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapList`1.Sort">
            <summary>Sort the items in the collection (must implement IComparable).</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapList`1.SetToRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Clear all items and add the current badge.</summary>
        </member>
        <member name="M:DmFramework.Collections.HotSwapList`1.RemoveAll(`0)">
            <summary>Remove all instances that are equal, or the same as, this item.</summary>
            <returns>Count of items removed.</returns>
        </member>
        <member name="M:DmFramework.Collections.HotSwapList`1.RemoveAt(System.Int32)">
            <summary>
            Implementation has internal check security,
            so no exceptions occur.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DmFramework.Collections.HotSwapList`1.Add(`0)">
            <summary>
            This method demonstrates the operation of the hot-swap mechanism.
            The existing instance is kept, for as Int64 as the new one is
            created, then a fast swap is made.
            </summary>
        </member>
        <member name="P:DmFramework.Collections.HotSwapList`1.Item(System.Int32)">
            <summary>
            *Warning* setting a value if very slow, since it redoes the hotswaps
            the entire collection too, so use with caution.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Collections.HotSwapList`1.Count">
            <summary>
            This is a typical example of the operation of the hot swap list.
            Internal instance is used for data access.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.MultiDictionary`2">
             <summary>
             <para>The MultiDictionary class that associates values with a key. Unlike an Dictionary,
             each key can have multiple values associated with it. When indexing an MultiDictionary, instead
             of a single value associated with a key, you retrieve an enumeration of values.</para>
             <para>When constructed, you can chose to allow the same value to be associated with a key multiple
             times, or only one time. </para>
             </summary>
             <typeparam name="TKey">The type of the keys.</typeparam>
             <typeparam name="TValue">The of values associated with the keys.</typeparam>
            <seealso cref="T:System.Collections.Generic.Dictionary`2"/>
            <seealso cref="T:DmFramework.Collections.OrderedMultiDictionary`2"/>
        </member>
        <member name="T:DmFramework.Collections.MultiDictionaryBase`2">
            <summary>
            MultiDictionaryBase is a base class that can be used to more easily implement a class
            that associates multiple values to a single key. The class implements the generic
            IDictionary&lt;TKey, ICollection&lt;TValue&gt;&gt; interface.
            </summary>
            <remarks>
            <para>To use MultiDictionaryBase as a base class, the derived class must override
            Count, Clear, Add, Remove(TKey), Remove(TKey,TValue), Contains(TKey,TValue), 
            EnumerateKeys, and TryEnumerateValuesForKey. </para>
            <para>It may wish consider overriding CountValues, CountAllValues, ContainsKey,
            and EqualValues, but these are not required.
            </para>
            </remarks>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.Clear">
            <summary>Clears the dictionary. This method must be overridden in the derived class.</summary>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.EnumerateKeys">
            <summary>
            Enumerate all the keys in the dictionary. This method must be overridden by a derived
            class.
            </summary>
            <returns>An IEnumerator&lt;TKey&gt; that enumerates all of the keys in the collection that
            have at least one value associated with them.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            Enumerate all of the values associated with a given key. This method must be overridden
            by the derived class. If the key exists and has values associated with it, an enumerator for those
            values is returned throught <paramref name="values"/>. If the key does not exist, false is returned.
            </summary>
            <param name="key">The key to get values for.</param>
            <param name="values">If true is returned, this parameter receives an enumerators that
            enumerates the values associated with that key.</param>
            <returns>True if the key exists and has values associated with it. False otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>
            Adds a key-value pair to the collection. The value part of the pair must be a collection
            of values to associate with the key. If values are already associated with the given
            key, the new values are added to the ones associated with that key.
            </summary>
            <param name="item">A KeyValuePair contains the Key and Value collection to add.</param>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Add(`0,System.Collections.Generic.ICollection{`1})">
            <summary>
            Implements IDictionary&lt;TKey, IEnumerable&lt;TValue&gt;&gt;.Add. If the 
            key is already present, and ArgumentException is thrown. Otherwise, a
            new key is added, and new values are associated with that key.
            </summary>
            <param name="key">Key to add.</param>
            <param name="values">Values to associate with that key.</param>
            <exception cref="T:System.ArgumentException">The key is already present in the dictionary.</exception>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.AddMany(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            <para>Adds new values to be associated with a key. If duplicate values are permitted, this
            method always adds new key-value pairs to the dictionary.</para>
            <para>If duplicate values are not permitted, and <paramref name="key"/> already has a value
            equal to one of <paramref name="values"/> associated with it, then that value is replaced,
            and the number of values associate with <paramref name="key"/> is unchanged.</para>
            </summary>
            <param name="key">The key to associate with.</param>
            <param name="values">A collection of values to associate with <paramref name="key"/>.</param>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.Add(`0,`1)">
            <summary>Adds a new key-value pair to the dictionary.  This method must be overridden in the derived class.</summary>
            <param name="key">Key to add.</param>
            <param name="value">Value to associated with the key.</param>
            <exception cref="T:System.ArgumentException">key is already present in the dictionary</exception>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.Remove(`0)">
            <summary>Removes a key from the dictionary. This method must be overridden in the derived class.</summary>
            <param name="key">Key to remove from the dictionary.</param>
            <returns>True if the key was found, false otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.Remove(`0,`1)">
            <summary>Removes a key-value pair from the dictionary. This method must be overridden in the derived class.</summary>
            <param name="key">Key to remove from the dictionary.</param>
            <param name="value">Associated value to remove from the dictionary.</param>
            <returns>True if the key-value pair was found, false otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>
            Removes a set of values from a given key. If all values associated with a key are
            removed, then the key is removed also.
            </summary>
            <param name="pair">A KeyValuePair contains a key and a set of values to remove from that key.</param>
            <returns>True if at least one values was found and removed.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.RemoveMany(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Removes a collection of values from the values associated with a key. If the
            last value is removed from a key, the key is removed also.
            </summary>
            <param name="key">A key to remove values from.</param>
            <param name="values">A collection of values to remove.</param>
            <returns>The number of values that were present and removed. </returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove all of the keys (and any associated values) in a collection
            of keys. If a key is not present in the dictionary, nothing happens.
            </summary>
            <param name="keyCollection">A collection of key values to remove.</param>
            <returns>The number of keys from the collection that were present and removed.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#TryGetValue(`0,System.Collections.Generic.ICollection{`1}@)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. If so, all the values
            associated with that key are returned through the values parameter. This method must be
            overridden by the derived class.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="values">Returns all values associated with key, if true was returned.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.ContainsKey(`0)">
            <summary>Determines whether a given key is found in the dictionary.</summary>
            <remarks>The default implementation simply calls TryEnumerateValuesForKey.
            It may be appropriate to override this method to 
            provide a more efficient implementation.</remarks>
            <param name="key">Key to look for in the dictionary.</param>
            <returns>True if the key is present in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.Contains(`0,`1)">
            <summary>
            Determines if this dictionary contains a key-value pair equal to <paramref name="key"/> and 
            <paramref name="value"/>. The dictionary is not changed. This method must be overridden in the derived class.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="value">The value to search for.</param>
            <returns>True if the dictionary has associated <paramref name="value"/> with <paramref name="key"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>Determines if this dictionary contains the given key and all of the values associated with that key..</summary>
            <param name="pair">A key and collection of values to search for.</param>
            <returns>True if the dictionary has associated all of the values in <paramref name="pair"/>.Value with <paramref name="pair"/>.Key.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.EqualValues(`1,`1)">
            <summary>
            If the derived class does not use the default comparison for values, this
            methods should be overridden to compare two values for equality. This is
            used for the correct implementation of ICollection.Contains on the Values
            and KeyValuePairs collections.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.CountValues(`0)">
            <summary>
            Gets a count of the number of values associated with a key. The
            default implementation is slow; it enumerators all of the values
            (using TryEnumerateValuesForKey) to count them. A derived class
            may be able to supply a more efficient implementation.
            </summary>
            <param name="key">The key to count values for.</param>
            <returns>The number of values associated with <paramref name="key"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.CountAllValues">
            <summary>
            Gets a total count of values in the collection. This default implementation
            is slow; it enumerates all of the keys in the dictionary and calls CountValues on each.
            A derived class may be able to supply a more efficient implementation.
            </summary>
            <returns>The total number of values associated with all keys in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.Replace(`0,`1)">
            <summary>Replaces all values associated with <paramref name="key"/> with the single value <paramref name="value"/>.</summary>
            <remarks>This implementation simply calls Remove, followed by Add.</remarks>
            <param name="key">The key to associate with.</param>
            <param name="value">The new values to be associated with <paramref name="key"/>.</param>
            <returns>Returns true if some values were removed. Returns false if <paramref name="key"/> was not
            present in the dictionary before Replace was called.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.ReplaceMany(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Replaces all values associated with <paramref name="key"/> with a new collection
            of values. If the collection does not permit duplicate values, and <paramref name="values"/> has duplicate
            items, then only the last of duplicates is added.
            </summary>
            <param name="key">The key to associate with.</param>
            <param name="values">The new values to be associated with <paramref name="key"/>.</param>
            <returns>Returns true if some values were removed. Returns false if <paramref name="key"/> was not
            present in the dictionary before Replace was called.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.ToString">
            <summary>
            Shows the String representation of the dictionary. The String representation contains
            a list of the mappings in the dictionary.
            </summary>
            <returns>The String representation of the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.DebuggerDisplayString">
            <summary>
            Display the contents of the dictionary in the debugger. This is intentionally private, it is called
            only from the debugger due to the presence of the DebuggerDisplay attribute. It is similar
            format to ToString(), but is limited to 250-300 characters or so, so as not to overload the debugger.
            </summary>
            <returns>The String representation of the items in the collection, similar in format to ToString().</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.GetEnumerator">
            <summary>Enumerate all the keys in the dictionary, and for each key, the collection of values for that key.</summary>
            <returns>An enumerator to enumerate all the key, ICollection&lt;value&gt; pairs in the dictionary.</returns>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionaryBase`2.Count">
            <summary>
            Gets the number of keys in the dictionary. This property must be overridden
            in the derived class.
            </summary>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionaryBase`2.Keys">
            <summary>Gets a read-only collection all the keys in this dictionary.</summary>
            <value>An readonly ICollection&lt;TKey&gt; of all the keys in this dictionary.</value>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionaryBase`2.Values">
            <summary>Gets a read-only collection of all the values in the dictionary.</summary>
            <returns>A read-only ICollection&lt;TValue&gt; of all the values in the dictionary.</returns>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Values">
            <summary>Gets a read-only collection of all the value collections in the dictionary.</summary>
            <returns>A read-only ICollection&lt;IEnumerable&lt;TValue&gt;&gt; of all the values in the dictionary.</returns>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionaryBase`2.KeyValuePairs">
            <summary>
            Gets a read-only collection of all key-value pairs in the dictionary. If a key has multiple
            values associated with it, then a key-value pair is present for each value associated
            with the key.
            </summary>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionaryBase`2.Item(`0)">
            <summary>
            Returns a collection of all of the values in the dictionary associated with <paramref name="key"/>,
            or changes the set of values associated with <paramref name="key"/>.
            If the key is not present in the dictionary, an ICollection enumerating no
            values is returned. The returned collection of values is read-write, and can be used to 
            modify the collection of values associated with the key.
            </summary>
            <param name="key">The key to get the values associated with.</param>
            <value>An ICollection&lt;TValue&gt; with all the values associated with <paramref name="key"/>.</value>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Item(`0)">
            <summary>
            Gets a collection of all the values in the dictionary associated with <paramref name="key"/>,
            or changes the set of values associated with <paramref name="key"/>.
            If the key is not present in the dictionary, a KeyNotFound exception is thrown.
            </summary>
            <param name="key">The key to get the values associated with.</param>
            <value>An IEnumerable&lt;TValue&gt; that enumerates all the values associated with <paramref name="key"/>.</value>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The given key is not present in the dictionary.</exception>
        </member>
        <member name="T:DmFramework.Collections.MultiDictionaryBase`2.ValuesForKeyCollection">
            <summary>
            A private class that provides the ICollection&lt;TValue&gt; for a particular key. This is the collection
            that is returned from the indexer. The collections is read-write, live, and can be used to add, remove,
            etc. values from the multi-dictionary.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.ValuesForKeyCollection.#ctor(DmFramework.Collections.MultiDictionaryBase{`0,`1},`0)">
            <summary>Constructor. Initializes this collection.</summary>
            <param name="myDictionary">Dictionary we're using.</param>
            <param name="key">The key we're looking at.</param>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.ValuesForKeyCollection.Clear">
            <summary>Remove the key and all values associated with it.</summary>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.ValuesForKeyCollection.Add(`1)">
            <summary>Add a new values to this key.</summary>
            <param name="item">New values to add.</param>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.ValuesForKeyCollection.Remove(`1)">
            <summary>Remove a value currently associated with key.</summary>
            <param name="item">Value to remove.</param>
            <returns>True if item was assocaited with key, false otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.ValuesForKeyCollection.NoValues">
            <summary>
            A simple function that returns an IEnumerator&lt;TValue&gt; that
            doesn't yield any values. A helper.
            </summary>
            <returns>An IEnumerator&lt;TValue&gt; that yields no values.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.ValuesForKeyCollection.GetEnumerator">
            <summary>Enumerate all the values associated with key.</summary>
            <returns>An IEnumerator&lt;TValue&gt; that enumerates all the values associated with key.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.ValuesForKeyCollection.Contains(`1)">
            <summary>Determines if the given values is associated with key.</summary>
            <param name="item">Value to check for.</param>
            <returns>True if value is associated with key, false otherwise.</returns>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionaryBase`2.ValuesForKeyCollection.Count">
            <summary>Get the number of values associated with the key.</summary>
        </member>
        <member name="T:DmFramework.Collections.MultiDictionaryBase`2.KeysCollection">
            <summary>
            A private class that implements ICollection&lt;TKey&gt; and ICollection for the
            Keys collection. The collection is read-only.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionaryBase`2.KeysCollection.#ctor(DmFramework.Collections.MultiDictionaryBase{`0,`1})">
            <summary>Constructor.</summary>
            <param name="myDictionary">The dictionary this is associated with.</param>
        </member>
        <member name="T:DmFramework.Collections.MultiDictionaryBase`2.ValuesCollection">
            <summary>
            A private class that implements ICollection&lt;TValue&gt; and ICollection for the
            Values collection. The collection is read-only.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.MultiDictionaryBase`2.EnumerableValuesCollection">
            <summary>
            A private class that implements ICollection&lt;ICollection&lt;TValue&gt;&gt; and ICollection for the
            Values collection on IDictionary. The collection is read-only.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.MultiDictionaryBase`2.KeyValuePairsCollection">
            <summary>
            A private class that implements ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt; and ICollection for the
            KeyValuePairs collection. The collection is read-only.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.#ctor(System.Boolean)">
            <summary>
            Create a new MultiDictionary. The default ordering of keys and values are used. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <remarks>The default ordering of keys and values will be used, as defined by TKey and TValue's implementation
            of IComparable&lt;T&gt; (or IComparable if IComparable&lt;T&gt; is not implemented). If a different ordering should be
            used, other constructors allow a custom Comparer or IComparer to be passed to changed the ordering.</remarks>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <exception cref="T:System.InvalidOperationException">TKey or TValue does not implement either IComparable&lt;T&gt; or IComparable.</exception>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a new MultiDictionary. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyEqualityComparer">An IEqualityComparer&lt;TKey&gt; instance that will be used to compare keys.</param>
            <exception cref="T:System.InvalidOperationException">TValue does not implement either IComparable&lt;TValue&gt; or IComparable.</exception>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Create a new MultiDictionary. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyEqualityComparer">An IEqualityComparer&lt;TKey&gt; instance that will be used to compare keys.</param>
            <param name="valueEqualityComparer">An IEqualityComparer&lt;TValue&gt; instance that will be used to compare values.</param>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1},System.Collections.Generic.IEqualityComparer{DmFramework.Collections.MultiDictionary{`0,`1}.KeyAndValues},DmFramework.Collections.Hash{DmFramework.Collections.MultiDictionary{`0,`1}.KeyAndValues})">
            <summary>Create a new MultiDictionary. Private constructor, for use by Clone().</summary>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.Add(`0,`1)">
            <summary>
            <para>Adds a new value to be associated with a key. If duplicate values are permitted, this
            method always adds a new key-value pair to the dictionary.</para>
            <para>If duplicate values are not permitted, and <paramref name="key"/> already has a value
            equal to <paramref name="value"/> associated with it, then that value is replaced with <paramref name="value"/>,
            and the number of values associate with <paramref name="key"/> is unchanged.</para>
            </summary>
            <param name="key">The key to associate with.</param>
            <param name="value">The value to associated with <paramref name="key"/>.</param>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a given value from the values associated with a key. If the
            last value is removed from a key, the key is removed also.
            </summary>
            <param name="key">A key to remove a value from.</param>
            <param name="value">The value to remove.</param>
            <returns>True if <paramref name="value"/> was associated with <paramref name="key"/> (and was
            therefore removed). False if <paramref name="value"/> was not associated with <paramref name="key"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.Remove(`0)">
            <summary>
            Removes a key and all associated values from the dictionary. If the
            key is not present in the dictionary, it is unchanged and false is returned.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the key was present and was removed. Returns
            false if the key was not present.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.Clear">
            <summary>Removes all keys and values from the dictionary.</summary>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.EqualValues(`1,`1)">
            <summary>Determine if two values are equal.</summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.Contains(`0,`1)">
            <summary>
            Checks to see if <paramref name="value"/> is associated with <paramref name="key"/>
            in the dictionary.
            </summary>
            <param name="key">The key to check.</param>
            <param name="value">The value to check.</param>
            <returns>True if <paramref name="value"/> is associated with <paramref name="key"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.ContainsKey(`0)">
            <summary>
            Checks to see if the key is present in the dictionary and has
            at least one value associated with it.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if <paramref name="key"/> is present and has at least
            one value associated with it. Returns false otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.EnumerateKeys">
            <summary>Enumerate all the keys in the dictionary.</summary>
            <returns>An IEnumerator&lt;TKey&gt; that enumerates all of the keys in the dictionary that
            have at least one value associated with them.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.EnumerateValues(DmFramework.Collections.MultiDictionary{`0,`1}.KeyAndValues)">
            <summary>
             Enumerate the values in the a KeyAndValues structure. Can't return
            the array directly because:
              a) The array might be larger than the count.
              b) We can't allow clients to down-cast to the array and modify it.
              c) We have to abort enumeration if the hash changes.
            </summary>
            <param name="keyAndValues">Item with the values to enumerate..</param>
            <returns>An enumerable that enumerates the items in the KeyAndValues structure.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. If so, all the values
            associated with that key are returned through the values parameter.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="values">Returns all values associated with key, if true was returned.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.CountValues(`0)">
            <summary>Gets the number of values associated with a given key.</summary>
            <param name="key">The key to count values of.</param>
            <returns>The number of values associated with <paramref name="key"/>. If <paramref name="key"/>
            is not present in the dictionary, zero is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.Clone">
            <summary>
            Makes a shallow clone of this dictionary; i.e., if keys or values of the
            dictionary are reference types, then they are not cloned. If TKey or TValue is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the dictionary takes time O(N), where N is the number of key-value pairs in the dictionary.</remarks>
            <returns>The cloned dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.System#ICloneable#Clone">
            <summary>Implements ICloneable.Clone. Makes a shallow clone of this dictionary; i.e., if keys or values are reference types, then they are not cloned.</summary>
            <returns>The cloned dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.NonCloneableType(System.Type)">
            <summary>Throw an InvalidOperationException indicating that this type is not cloneable.</summary>
            <param name="t">Type to test.</param>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.CloneContents">
            <summary>
            Makes a deep clone of this dictionary. A new dictionary is created with a clone of
            each entry of this dictionary, by calling ICloneable.Clone on each element. If TKey or TValue is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If TKey or TValue is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the dictionary takes time O(N log N), where N is the number of key-value pairs in the dictionary.</para></remarks>
            <returns>The cloned dictionary.</returns>
            <exception cref="T:System.InvalidOperationException">TKey or TValue is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionary`2.KeyComparer">
            <summary>Returns the IEqualityComparer&lt;T&gt; used to compare keys in this dictionary.</summary>
            <value>If the dictionary was created using a comparer, that comparer is returned. Otherwise
            the default comparer for TKey (EqualityComparer&lt;TKey&gt;.Default) is returned.</value>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionary`2.ValueComparer">
            <summary>Returns the IEqualityComparer&lt;T&gt; used to compare values in this dictionary.</summary>
            <value>If the dictionary was created using a comparer, that comparer is returned. Otherwise
            the default comparer for TValue (EqualityComparer&lt;TValue&gt;.Default) is returned.</value>
        </member>
        <member name="P:DmFramework.Collections.MultiDictionary`2.Count">
            <summary>
            Gets the number of key-value pairs in the dictionary. Each value associated
            with a given key is counted. If duplicate values are permitted, each duplicate
            value is included in the count.
            </summary>
            <value>The number of key-value pairs in the dictionary.</value>
        </member>
        <member name="T:DmFramework.Collections.MultiDictionary`2.KeyAndValues">
            <summary>
            A structure to hold the key and the values associated with the key.
            The number of values must always be 1 or greater in a version that is stored, but
            can be zero in a dummy version used only for lookups.
            </summary>
        </member>
        <member name="F:DmFramework.Collections.MultiDictionary`2.KeyAndValues.Key">
            <summary>The key.</summary>
        </member>
        <member name="F:DmFramework.Collections.MultiDictionary`2.KeyAndValues.Count">
            <summary>The number of values. Always at least 1 except in a dummy version for lookups.</summary>
        </member>
        <member name="F:DmFramework.Collections.MultiDictionary`2.KeyAndValues.Values">
            <summary>An array of values.</summary>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.KeyAndValues.#ctor(`0)">
            <summary>Create a dummy KeyAndValues with just the key, for lookups.</summary>
            <param name="key">The key to use.</param>
        </member>
        <member name="M:DmFramework.Collections.MultiDictionary`2.KeyAndValues.Copy(DmFramework.Collections.MultiDictionary{`0,`1}.KeyAndValues)">
            <summary>Make a copy of a KeyAndValues, copying the array.</summary>
            <param name="x">KeyAndValues to copy.</param>
            <returns>A copied version.</returns>
        </member>
        <member name="T:DmFramework.Collections.MultiDictionary`2.KeyAndValuesEqualityComparer">
            <summary>
            This class implements IEqualityComparer for KeysAndValues, allowing them to be
            compared by their keys. An IEqualityComparer on keys is required.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.Multimap`2">
            <summary>A Generic Dictionary collection type that can store multiple values for the same key.</summary>
            <typeparam name="Key"></typeparam>
            <typeparam name="Value"></typeparam>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.#ctor">
            <summary>Construction of Multi map</summary>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.GetEnumerator">
            <summary>Gets the Enumerator</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.#ctor(DmFramework.Collections.Multimap{`0,`1}@)">
            <summary>Construction copying from another Multi map</summary>
            <param name="DictToCopy"></param>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.Add(`0,`1)">
            <summary>Adds an element to the Multi map.</summary>
            <param name="KeyElement"></param>
            <param name="ValueElement"></param>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.GetFirstItem(`0)">
            <summary>Gets the first Item in the Multi map.</summary>
            <param name="ItemToFind"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.GetNextItem(`0)">
            <summary>Gets the Next Item in Multi map.  If this method is called first, it returns first item.</summary>
            <param name="ItemToFind"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.GetCurrentItem(`0)">
            <summary>Gets the Current value in the list of values for the searched Key</summary>
            <param name="ItemToFind"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.GetNthItem(System.Int32)">
            <summary>Gets the Next Item in Multi map.  If this method is called first, it returns first item.</summary>
            <param name="ItemNumber"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.GetForKey(`0,System.Collections.Generic.KeyValuePair{`0,DmFramework.Collections.ValueItem{`0,`1}}@)">
            <summary>Gets the Item in Multi map based on Key passed.</summary>
            <param name="KeyItem"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.GetNthKey(System.Int32,`0@)">
            <summary></summary>
            <param name="Index"></param>
            <param name="NthKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.MoveToNextItem(`0)">
            <summary>Move to next Value for the specified key</summary>
            <param name="ItemToFind"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.ResetToFirstItem(`0)">
            <summary>Move the pointer to the first item for the specified key</summary>
            <param name="ItemToFind"></param>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.Iterate(`0)">
            <summary>Iterates through all the values for the Key one by one.</summary>
            <param name="ItemToFind"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.DeleteAll(`0)">
            <summary>Removes the Key and all the values for an item.</summary>
            <param name="KeyElement"></param>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.Delete(`0,`1)">
            <summary>Deletes one Key and one Value from the Multi map.</summary>
            <param name="KeyElement"></param>
            <param name="ValueElement"></param>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.Clear">
            <summary>Clears all the elements in the collection.</summary>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.Dispose">
            <summary>Disposes all the objects stored in the collection.</summary>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.Finalize">
            <summary>Finalizer</summary>
        </member>
        <member name="T:DmFramework.Collections.Multimap`2.MultimapEnum">
            <summary>Enumerator class for the Multi map</summary>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.MultimapEnum.MoveNext">
            <summary>Move to the next Item</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.MultimapEnum.Reset">
            <summary>Reset to the first Item</summary>
        </member>
        <member name="M:DmFramework.Collections.Multimap`2.MultimapEnum.Dispose">
            <summary>Dispose the object</summary>
        </member>
        <member name="P:DmFramework.Collections.Multimap`2.MultimapEnum.Current">
            <summary>Returns Current Element</summary>
        </member>
        <member name="T:DmFramework.Collections.MultiMapException">
            <summary>The class DmFramework.Collections.MultiMap always throws one exception type - MultiMapBKException</summary>
        </member>
        <member name="M:DmFramework.Collections.MultiMapException.#ctor(System.Exception,System.String)">
             <summary>Constructor of Exception class</summary>
             <param name="ExceptionParam"></param>
             <param name="ExMessage"></param>
            
        </member>
        <member name="M:DmFramework.Collections.MultiMapException.#ctor">
            <summary>Default Constructor of Exception class</summary>
        </member>
        <member name="M:DmFramework.Collections.MultiMapException.#ctor(System.String)">
            <summary>Constructor of Exception class</summary>
            <param name="exMessage"></param>
        </member>
        <member name="M:DmFramework.Collections.MultiMapException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Multimap Exception constructor</summary>
            <param name="seInfo"></param>
            <param name="seCtxt"></param>
        </member>
        <member name="T:DmFramework.Collections.ValueItem`2">
            <summary>Contains Key and Value(s). i.e., Value.First, Value.Next and so on</summary>
            <typeparam name="Key"></typeparam>
            <typeparam name="Value"></typeparam>
        </member>
        <member name="M:DmFramework.Collections.ValueItem`2.MoveNext">
            <summary>Move to Next Item</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.ValueItem`2.Reset">
            <summary>Reset to first Item.</summary>
        </member>
        <member name="P:DmFramework.Collections.ValueItem`2.First">
            <summary>Returns the first Item</summary>
        </member>
        <member name="P:DmFramework.Collections.ValueItem`2.Current">
            <summary>Return Current Item</summary>
        </member>
        <member name="P:DmFramework.Collections.ValueItem`2.Next">
            <summary>Returns the Next Item</summary>
        </member>
        <member name="T:DmFramework.Collections.DictionaryCache`2">
            <summary>字典缓存。当指定键的缓存项不存在时，调用委托获取值，并写入缓存。</summary>
            <remarks>常用匿名函数或者Lambda表达式作为委托。</remarks>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="T:DmFramework.DisposeBase">
             <summary>具有销毁资源处理的抽象基类</summary>
             <example>
             <code>
             /// &lt;summary&gt;子类重载实现资源释放逻辑时必须首先调用基类方法&lt;/summary&gt;
             /// &lt;param name="disposing"&gt;从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
             /// 因为该方法只会被调用一次，所以该参数的意义不太大。&lt;/param&gt;
             protected override void OnDispose(Boolean disposing)
             {
                 base.OnDispose(disposing);
            
                 if (disposing)
                 {
                     // 如果是构造函数进来，不执行这里的代码
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:DmFramework.IDisposable2">
            <summary>具有是否已释放和释放后事件的接口</summary>
        </member>
        <member name="P:DmFramework.IDisposable2.Disposed">
            <summary>是否已经释放</summary>
        </member>
        <member name="E:DmFramework.IDisposable2.OnDisposed">
            <summary>被销毁时触发事件</summary>
        </member>
        <member name="M:DmFramework.DisposeBase.Dispose">
            <summary>实现IDisposable中的Dispose方法，释放资源</summary>
        </member>
        <member name="M:DmFramework.DisposeBase.Dispose(System.Boolean)">
            <summary>释放资源，参数表示是否由Dispose调用。该方法保证OnDispose只被调用一次！</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:DmFramework.DisposeBase.OnBeforeDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
            因为该方法只会被调用一次，所以该参数的意义不太大。</param>
        </member>
        <member name="M:DmFramework.DisposeBase.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
            因为该方法只会被调用一次，所以该参数的意义不太大。</param>
        </member>
        <member name="M:DmFramework.DisposeBase.Finalize">
            <summary>析构函数</summary>
            <remarks>
            必须，以备程序员忘记了显式调用Dispose方法
            如果忘记调用Dispose，这里会释放非托管资源
            如果曾经调用过Dispose，因为GC.SuppressFinalize(this)，不会再调用该析构函数
            </remarks>
        </member>
        <member name="P:DmFramework.DisposeBase.Disposed">
            <summary>是否已经释放</summary>
        </member>
        <member name="E:DmFramework.DisposeBase.OnDisposed">
            <summary>被销毁时触发事件</summary>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.#ctor">
            <summary>实例化一个字典缓存</summary>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>实例化一个字典缓存</summary>
            <param name="comparer"></param>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
            因为该方法只会被调用一次，所以该参数的意义不太大。</param>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.GetItem(`0,System.Func{`0,`1})">
            <summary>扩展获取数据项，当数据项不存在时，通过调用委托获取数据项。线程安全。</summary>
            <param name="key">键</param>
            <param name="func">获取值的委托，该委托以键作为参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.GetItem(`0,System.Func{`0,`1},System.Boolean)">
            <summary>扩展获取数据项，当数据项不存在时，通过调用委托获取数据项。线程安全。</summary>
            <param name="key">键</param>
            <param name="func">获取值的委托，该委托以键作为参数</param>
            <param name="cacheDefault">是否缓存默认值，可选参数，默认缓存</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.GetItem``1(`0,``0,System.Func{`0,``0,`1})">
            <summary>扩展获取数据项，当数据项不存在时，通过调用委托获取数据项。线程安全。</summary>
            <typeparam name="TArg">参数类型</typeparam>
            <param name="key">键</param>
            <param name="arg">参数</param>
            <param name="func">获取值的委托，该委托除了键参数外，还有一个泛型参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.GetItem``1(`0,``0,System.Func{`0,``0,`1},System.Boolean)">
            <summary>扩展获取数据项，当数据项不存在时，通过调用委托获取数据项。线程安全。</summary>
            <typeparam name="TArg">参数类型</typeparam>
            <param name="key">键</param>
            <param name="arg">参数</param>
            <param name="func">获取值的委托，该委托除了键参数外，还有一个泛型参数</param>
            <param name="cacheDefault">是否缓存默认值，可选参数，默认缓存</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.GetItem``2(`0,``0,``1,System.Func{`0,``0,``1,`1})">
            <summary>扩展获取数据项，当数据项不存在时，通过调用委托获取数据项。线程安全。</summary>
            <typeparam name="TArg">参数类型</typeparam>
            <typeparam name="TArg2">参数类型2</typeparam>
            <param name="key">键</param>
            <param name="arg">参数</param>
            <param name="arg2">参数2</param>
            <param name="func">获取值的委托，该委托除了键参数外，还有两个泛型参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.GetItem``2(`0,``0,``1,System.Func{`0,``0,``1,`1},System.Boolean)">
            <summary>扩展获取数据项，当数据项不存在时，通过调用委托获取数据项。线程安全。</summary>
            <typeparam name="TArg">参数类型</typeparam>
            <typeparam name="TArg2">参数类型2</typeparam>
            <param name="key">键</param>
            <param name="arg">参数</param>
            <param name="arg2">参数2</param>
            <param name="func">获取值的委托，该委托除了键参数外，还有两个泛型参数</param>
            <param name="cacheDefault">是否缓存默认值，可选参数，默认缓存</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.GetItem``3(`0,``0,``1,``2,System.Func{`0,``0,``1,``2,`1})">
            <summary>扩展获取数据项，当数据项不存在时，通过调用委托获取数据项。线程安全。</summary>
            <typeparam name="TArg">参数类型</typeparam>
            <typeparam name="TArg2">参数类型2</typeparam>
            <typeparam name="TArg3">参数类型3</typeparam>
            <param name="key">键</param>
            <param name="arg">参数</param>
            <param name="arg2">参数2</param>
            <param name="arg3">参数3</param>
            <param name="func">获取值的委托，该委托除了键参数外，还有三个泛型参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.GetItem``3(`0,``0,``1,``2,System.Func{`0,``0,``1,``2,`1},System.Boolean)">
            <summary>扩展获取数据项，当数据项不存在时，通过调用委托获取数据项。线程安全。</summary>
            <typeparam name="TArg">参数类型</typeparam>
            <typeparam name="TArg2">参数类型2</typeparam>
            <typeparam name="TArg3">参数类型3</typeparam>
            <param name="key">键</param>
            <param name="arg">参数</param>
            <param name="arg2">参数2</param>
            <param name="arg3">参数3</param>
            <param name="func">获取值的委托，该委托除了键参数外，还有三个泛型参数</param>
            <param name="cacheDefault">是否缓存默认值，可选参数，默认缓存</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.GetItem``4(`0,``0,``1,``2,``3,System.Func{`0,``0,``1,``2,``3,`1},System.Boolean)">
            <summary>扩展获取数据项，当数据项不存在时，通过调用委托获取数据项。线程安全。</summary>
            <typeparam name="TArg">参数类型</typeparam>
            <typeparam name="TArg2">参数类型2</typeparam>
            <typeparam name="TArg3">参数类型3</typeparam>
            <typeparam name="TArg4">参数类型4</typeparam>
            <param name="key">键</param>
            <param name="arg">参数</param>
            <param name="arg2">参数2</param>
            <param name="arg3">参数3</param>
            <param name="arg4">参数4</param>
            <param name="func">获取值的委托，该委托除了键参数外，还有三个泛型参数</param>
            <param name="cacheDefault">是否缓存默认值，可选参数，默认缓存</param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Collections.DictionaryCache`2.clearTimer">
            <summary>清理会话计时器</summary>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.RemoveNotAlive(System.Object)">
            <summary>移除过期的缓存项</summary>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.Add(`0,`1)">
            <summary></summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.ContainsKey(`0)">
            <summary></summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.Remove(`0)">
            <summary></summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.TryGetValue(`0,`1@)">
            <summary></summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary></summary>
            <param name="item"></param>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.Clear">
            <summary></summary>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary></summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary></summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary></summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.DictionaryCache`2.GetEnumerator">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.Expriod">
            <summary>过期时间。单位是秒，默认0秒，表示永不过期</summary>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.ClearExpriod">
            <summary>过期清理时间，缓存项过期后达到这个时间时，将被移除缓存。单位是秒，默认0秒，表示不清理过期项</summary>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.Asynchronous">
            <summary>异步更新</summary>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.AutoDispose">
            <summary>移除过期缓存项时，自动调用其Dispose</summary>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.Item(`0)">
            <summary>重写索引器。取值时如果没有该项则返回默认值；赋值时如果已存在该项则覆盖，否则添加。</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.Keys">
            <summary></summary>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.Values">
            <summary></summary>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.Count">
            <summary></summary>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.IsReadOnly">
            <summary></summary>
        </member>
        <member name="T:DmFramework.Collections.DictionaryCache`2.CacheItem">
            <summary>缓存项</summary>
        </member>
        <member name="F:DmFramework.Collections.DictionaryCache`2.CacheItem.Value">
            <summary>数值</summary>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.CacheItem.ExpiredTime">
            <summary>过期时间</summary>
        </member>
        <member name="P:DmFramework.Collections.DictionaryCache`2.CacheItem.Expired">
            <summary>是否过期</summary>
        </member>
        <member name="T:DmFramework.Collections.InterlockedStack`1">
             <summary>先进先出LIFO的原子栈结构，采用CAS保证线程安全。利用单链表实现。</summary>
             <remarks>
             注意：<see cref="M:DmFramework.Collections.InterlockedStack`1.Push(`0)"/>、<see cref="M:DmFramework.Collections.InterlockedStack`1.TryPop(`0@)"/>、<see cref="M:DmFramework.Collections.InterlockedStack`1.Pop"/>、<see cref="M:DmFramework.Collections.InterlockedStack`1.TryPeek(`0@)"/>、<see cref="M:DmFramework.Collections.InterlockedStack`1.Peek"/>是重量级线程安全代码，不要随意更改。
            
             增加自由节点链表，避免频繁分配节点带来的GC压力。
            
             经过测试，对象数量在万级以上时，性能急剧下降！
             </remarks>
             <typeparam name="T"></typeparam>
        </member>
        <member name="T:DmFramework.Collections.IStack`1">
            <summary>栈接口</summary>
            <remarks>重点解决多线程环境下资源争夺以及使用lock造成性能损失的问题</remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Collections.IStack`1.Push(`0)">
            <summary>向栈压入一个对象</summary>
            <param name="item"></param>
        </member>
        <member name="M:DmFramework.Collections.IStack`1.Pop">
            <summary>从栈中弹出一个对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.IStack`1.TryPop(`0@)">
            <summary>尝试从栈中弹出一个对象</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Collections.InterlockedStack`1.Top">
            <summary>栈顶</summary>
        </member>
        <member name="M:DmFramework.Collections.InterlockedStack`1.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）</param>
        </member>
        <member name="M:DmFramework.Collections.InterlockedStack`1.Push(`0)">
            <summary>向栈压入一个对象</summary>
            <remarks>重点解决多线程环境下资源争夺以及使用lock造成性能损失的问题</remarks>
            <param name="item"></param>
        </member>
        <member name="M:DmFramework.Collections.InterlockedStack`1.Pop">
            <summary>从栈中弹出一个对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.InterlockedStack`1.TryPop(`0@)">
            <summary>尝试从栈中弹出一个对象</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.InterlockedStack`1.Peek">
            <summary>获取栈顶对象，不弹栈</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.InterlockedStack`1.TryPeek(`0@)">
            <summary>尝试获取栈顶对象，不弹栈</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Collections.InterlockedStack`1.FreeTop">
            <summary>自由节点头部</summary>
        </member>
        <member name="M:DmFramework.Collections.InterlockedStack`1.Clear">
            <summary>清空</summary>
        </member>
        <member name="M:DmFramework.Collections.InterlockedStack`1.ToArray">
            <summary>转为数组</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.InterlockedStack`1.GetEnumerator">
            <summary>获取枚举器</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Collections.InterlockedStack`1.Count">
            <summary>元素个数</summary>
        </member>
        <member name="P:DmFramework.Collections.InterlockedStack`1.UseNodePool">
            <summary>是否使用节点池。采用节点池可以避免分配节点造成的GC压力，但是会让性能有所降低。</summary>
        </member>
        <member name="T:DmFramework.Collections.ListBase`1">
            <summary>泛型列表基类。主要提供一个重载实现自定义列表的基类实现。</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Collections.ListBase`1.Add(`0)">
            <summary>添加</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Collections.ListBase`1.Clear">
            <summary>清空</summary>
        </member>
        <member name="M:DmFramework.Collections.ListBase`1.Contains(`0)">
            <summary>是否包含指定元素</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.ListBase`1.CopyTo(`0[],System.Int32)">
            <summary>把元素复制到一个数组里面</summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:DmFramework.Collections.ListBase`1.GetEnumerator">
            <summary>获取一个枚举器</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.ListBase`1.IndexOf(`0)">
            <summary>确定列表中特定项的索引。</summary>
            <param name="value">要在列表中定位的对象。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.ListBase`1.Insert(System.Int32,`0)">
            <summary>将一个项插入指定索引处的列表。</summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Collections.ListBase`1.Remove(`0)">
            <summary>从列表中移除指定对象</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.ListBase`1.RemoveAt(System.Int32)">
            <summary>移除指定索引处的列表项。</summary>
            <param name="index"></param>
        </member>
        <member name="P:DmFramework.Collections.ListBase`1.InnerList">
            <summary>内部列表</summary>
        </member>
        <member name="P:DmFramework.Collections.ListBase`1.Count">
            <summary>列表元素个数</summary>
        </member>
        <member name="P:DmFramework.Collections.ListBase`1.IsFixedSize">
            <summary>是否固定大小</summary>
        </member>
        <member name="P:DmFramework.Collections.ListBase`1.IsReadOnly">
            <summary>是否只读</summary>
        </member>
        <member name="P:DmFramework.Collections.ListBase`1.Item(System.Int32)">
            <summary>获取或设置指定索引处的元素。</summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Collections.LockStack`1">
            <summary>基于lock的安全栈</summary>
            <remarks>
            理论上性能最差，但实际测试发现，似乎比InterlockedStack要好点。
            重点是它安全可信。
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Collections.LockStack`1.Push(`0)">
            <summary>向栈压入一个对象</summary>
            <param name="item"></param>
        </member>
        <member name="M:DmFramework.Collections.LockStack`1.Pop">
            <summary>从栈中弹出一个对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.LockStack`1.TryPop(`0@)">
            <summary>尝试从栈中弹出一个对象</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.LockStack`1.Peek">
            <summary>获取栈顶对象，不弹栈</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.LockStack`1.TryPeek(`0@)">
            <summary>尝试获取栈顶对象，不弹栈</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.LockStack`1.GetEnumerator">
            <summary>获取枚举器</summary>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Collections.ObjectPool`1">
            <summary>对象池。采用原子栈设计，避免锁资源的争夺。</summary>
            <remarks>
            经过测试，对象数量在万级以上时，性能下降很快！
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Collections.ObjectPool`1.#ctor">
            <summary>实例化一个对象池</summary>
        </member>
        <member name="F:DmFramework.Collections.ObjectPool`1.OnCreate">
            <summary>对象创建委托。在对象池内对象不足时调用，如未设置，则调用类型的默认构造函数创建对象。</summary>
        </member>
        <member name="M:DmFramework.Collections.ObjectPool`1.Push(`0)">
            <summary>归还</summary>
            <param name="obj"></param>
        </member>
        <member name="M:DmFramework.Collections.ObjectPool`1.Pop">
            <summary>借出</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.ObjectPool`1.Create">
            <summary>创建实例</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.ObjectPool`1.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）</param>
        </member>
        <member name="P:DmFramework.Collections.ObjectPool`1.Stock">
            <summary>在库</summary>
        </member>
        <member name="P:DmFramework.Collections.ObjectPool`1.Max">
            <summary>最大缓存数。默认1000，超过后将启用定时器来清理</summary>
        </member>
        <member name="P:DmFramework.Collections.ObjectPool`1.StockCount">
            <summary>在库</summary>
        </member>
        <member name="P:DmFramework.Collections.ObjectPool`1.NotStockCount">
            <summary>不在库</summary>
        </member>
        <member name="P:DmFramework.Collections.ObjectPool`1.FreeCount">
            <summary>被释放的对象数</summary>
        </member>
        <member name="P:DmFramework.Collections.ObjectPool`1.CreateCount">
            <summary>创建数</summary>
        </member>
        <member name="T:DmFramework.Collections.SafeStack`1">
             <summary>基于数组实现的线程安全栈。快速高效，不会形成内存碎片。</summary>
             <remarks>
             链表做的原子栈<see cref="T:DmFramework.Collections.InterlockedStack`1"/>，本来是为了做对象池用的，但是链表节点自身也会形成内存碎片，给GC压力，十分纠结。
             一直认为用数组做存储是效率最好的，但是纠结于无法实现原子操作，而迟迟不敢动手。
            
             最好指定初始容量，因为采用数组作为存储结构最大的缺点就是容量固定，从而导致满存储时必须重新分配数组，并且复制。
            
             在 @Aimeast 的指点下，有所感悟，我们没必要严格的追求绝对安全，只要把冲突可能性降到尽可能低即可。
            
             安全栈有问题，如果在同一个位置同时压入和弹出，可能会导致这个位置为空，后面再弹出的时候，只得到空值。
             通过增加一个锁定数组来解决这个问题，锁定数组实现不严格的数字对比锁定，保证性能。
             </remarks>
             <typeparam name="T"></typeparam>
        </member>
        <member name="F:DmFramework.Collections.SafeStack`1._array">
            <summary>数据数组。用于存放对象。</summary>
        </member>
        <member name="M:DmFramework.Collections.SafeStack`1.#ctor">
            <summary>实例化一个容纳4个元素的安全栈</summary>
        </member>
        <member name="M:DmFramework.Collections.SafeStack`1.#ctor(System.Int32)">
            <summary>实例化一个指定大小的安全栈</summary>
            <param name="capacity"></param>
        </member>
        <member name="M:DmFramework.Collections.SafeStack`1.#ctor(System.Collections.IEnumerable)">
            <summary>使用指定枚举实例化一个安全栈</summary>
            <param name="collection"></param>
        </member>
        <member name="M:DmFramework.Collections.SafeStack`1.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）</param>
        </member>
        <member name="M:DmFramework.Collections.SafeStack`1.Push(`0)">
            <summary>向栈压入一个对象</summary>
            <remarks>重点解决多线程环境下资源争夺以及使用lock造成性能损失的问题</remarks>
            <param name="item"></param>
        </member>
        <member name="M:DmFramework.Collections.SafeStack`1.Pop">
            <summary>从栈中弹出一个对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.SafeStack`1.TryPop(`0@)">
            <summary>尝试从栈中弹出一个对象</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.SafeStack`1.Clear">
            <summary>清空</summary>
        </member>
        <member name="M:DmFramework.Collections.SafeStack`1.ToArray">
            <summary>转为数组</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.SafeStack`1.GetEnumerator">
            <summary>获取枚举器</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Collections.SafeStack`1.Count">
            <summary>元素个数，同时也是下一个空位的位置指针</summary>
        </member>
        <member name="P:DmFramework.Collections.SafeStack`1.Capacity">
            <summary>最大容量</summary>
        </member>
        <member name="T:DmFramework.Collections.ISafeStackItem">
            <summary>安全栈项接口。采用安全栈存储的数据必须实现该接口</summary>
        </member>
        <member name="P:DmFramework.Collections.ISafeStackItem.Slot">
            <summary>存储位置</summary>
        </member>
        <member name="T:DmFramework.Collections.SingleListNode`1">
            <summary>单向链表节点</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Collections.SingleListNode`1.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Collections.SingleListNode`1.#ctor(`0)">
            <summary>使用一个对象初始化一个节点</summary>
            <param name="item"></param>
        </member>
        <member name="M:DmFramework.Collections.SingleListNode`1.#ctor(`0,DmFramework.Collections.SingleListNode{`0})">
            <summary>使用一个对象和下一个节点初始化一个节点</summary>
            <param name="item"></param>
            <param name="next"></param>
        </member>
        <member name="M:DmFramework.Collections.SingleListNode`1.Contain(`0)">
            <summary>在单向链表中查找指定项</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.SingleListNode`1.Remove(`0)">
            <summary>在单向链表中移除指定项</summary>
            <param name="item">指定项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.SingleListNode`1.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Collections.SingleListNode`1.Item">
            <summary>元素</summary>
        </member>
        <member name="P:DmFramework.Collections.SingleListNode`1.Next">
            <summary>下一个节点</summary>
        </member>
        <member name="T:DmFramework.Collections.Triplet">
            <summary>三个一组</summary>
        </member>
        <member name="F:DmFramework.Collections.Triplet.First">
            <summary>第一个</summary>
        </member>
        <member name="F:DmFramework.Collections.Triplet.Second">
            <summary>第二个</summary>
        </member>
        <member name="F:DmFramework.Collections.Triplet.Third">
            <summary>第三个</summary>
        </member>
        <member name="M:DmFramework.Collections.Triplet.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Collections.Triplet.#ctor(System.Object,System.Object)">
            <summary>初始化</summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:DmFramework.Collections.Triplet.#ctor(System.Object,System.Object,System.Object)">
            <summary>初始化</summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:DmFramework.Collections.Triplet.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Collections.Triplet`3">
            <summary>泛型三个一组</summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
        </member>
        <member name="F:DmFramework.Collections.Triplet`3.First">
            <summary>第一个</summary>
        </member>
        <member name="F:DmFramework.Collections.Triplet`3.Second">
            <summary>第二个</summary>
        </member>
        <member name="F:DmFramework.Collections.Triplet`3.Third">
            <summary>第三个</summary>
        </member>
        <member name="M:DmFramework.Collections.Triplet`3.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Collections.Triplet`3.#ctor(`0,`1)">
            <summary>初始化</summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:DmFramework.Collections.Triplet`3.#ctor(`0,`1,`2)">
            <summary>初始化</summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:DmFramework.Collections.Triplet`3.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Collections.WeakRefDictionary`2">
            <summary>弱引用字典，比较适合用作于缓存。</summary>
            <remarks>经过实验表明，弱引用非常容易被回收</remarks>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:DmFramework.Collections.OrderedBag`1">
             <summary>
             OrderedBag&lt;T&gt; is a collection that contains items of type T.
             The item are maintained in a sorted order. Unlike a OrderedSet, duplicate items (items that
             compare equal to each other) are allows in an OrderedBag.
             </summary>
             <remarks>
             <p>The items are compared in one of three ways. If T implements IComparable&lt;TKey&gt; or IComparable,
             then the CompareTo method of that interface will be used to compare items. Alternatively, a comparison
             function can be passed in either as a delegate, or as an instance of IComparer&lt;TKey&gt;.</p>
             <p>OrderedBag is implemented as a balanced binary tree. Inserting, deleting, and looking up an
             an element all are done in log(N) + M time, where N is the number of keys in the tree, and M is the current number
             of copies of the element being handled.</p>
             <p><see cref="T:DmFramework.Collections.Bag`1"/> is similar, but uses hashing instead of comparison, and does not maintain
             the keys in sorted order.</p>
            </remarks>
            <seealso cref="T:DmFramework.Collections.Bag`1"/>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.#ctor">
             <summary>
             Creates a new OrderedBag. The T must implement IComparable&lt;T&gt;
             or IComparable.
             The CompareTo method of this interface will be used to compare items in this bag.
             </summary>
            <remarks>
             Items that are null are permitted, and will be sorted before all other items.
            </remarks>
             <exception cref="T:System.InvalidOperationException">T does not implement IComparable&lt;TKey&gt;.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.#ctor(System.Comparison{`0})">
            <summary>Creates a new OrderedBag. The passed delegate will be used to compare items in this bag.</summary>
            <param name="comparison">A delegate to a method that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new OrderedBag. The Compare method of the passed comparison object
            will be used to compare items in this bag.
            </summary>
            <remarks>
            The GetHashCode and Equals methods of the provided IComparer&lt;T&gt; will never
            be called, and need not be implemented.
            </remarks>
            <param name="comparer">An instance of IComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Creates a new OrderedBag. The T must implement IComparable&lt;T&gt;
             or IComparable.
             The CompareTo method of this interface will be used to compare items in this bag. The bag is
             initialized with all the items in the given collection.
             </summary>
            <remarks>
             Items that are null are permitted, and will be sorted before all other items.
            </remarks>
             <param name="collection">A collection with items to be placed into the OrderedBag.</param>
             <exception cref="T:System.InvalidOperationException">T does not implement IComparable&lt;TKey&gt;.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{`0})">
            <summary>
            Creates a new OrderedBag. The passed delegate will be used to compare items in this bag.
            The bag is initialized with all the items in the given collection.
            </summary>
            <param name="collection">A collection with items to be placed into the OrderedBag.</param>
            <param name="comparison">A delegate to a method that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new OrderedBag. The Compare method of the passed comparison object
            will be used to compare items in this bag. The bag is
            initialized with all the items in the given collection.
            </summary>
            <remarks>
            The GetHashCode and Equals methods of the provided IComparer&lt;T&gt; will never
            be called, and need not be implemented.
            </remarks>
            <param name="collection">A collection with items to be placed into the OrderedBag.</param>
            <param name="comparer">An instance of IComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.#ctor(System.Collections.Generic.IComparer{`0},DmFramework.Collections.RedBlackTree{`0})">
            <summary>
            Creates a new OrderedBag given a comparer and a tree that contains the data. Used
            internally for Clone.
            </summary>
            <param name="comparer">Comparer for the bag.</param>
            <param name="tree">Data for the bag.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.System#ICloneable#Clone">
            <summary>
            Makes a shallow clone of this bag; i.e., if items of the
            bag are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the bag takes time O(N), where N is the number of items in the bag.</remarks>
            <returns>The cloned bag.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Clone">
            <summary>
            Makes a shallow clone of this bag; i.e., if items of the
            bag are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the bag takes time O(N), where N is the number of items in the bag.</remarks>
            <returns>The cloned bag.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.CloneContents">
            <summary>
            Makes a deep clone of this bag. A new bag is created with a clone of
            each element of this bag, by calling ICloneable.Clone on each element. If T is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If T is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the bag takes time O(N log N), where N is the number of items in the bag.</para></remarks>
            <returns>The cloned bag.</returns>
            <exception cref="T:System.InvalidOperationException">T is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.NumberOfCopies(`0)">
            <summary>
            Returns the number of copies of <paramref name="item"/> in the bag. More precisely, returns
            the number of items in the bag that compare equal to <paramref name="item"/>.
            </summary>
            <remarks>NumberOfCopies() takes time O(log N + M), where N is the total number of items in the
            bag, and M is the number of copies of <paramref name="item"/> in the bag.</remarks>
            <param name="item">The item to search for in the bag.</param>
            <returns>The number of items in the bag that compare equal to <paramref name="item"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the items in the bag.
            The items are enumerated in sorted order.
            </summary>
            <remarks>
            <p>Typically, this method is not called directly. Instead the "foreach" statement is used
            to enumerate the items, which uses this method implicitly.</p>
            <p>If an item is added to or deleted from the bag while it is being enumerated, then
            the enumeration will end with an InvalidOperationException.</p>
            <p>Enumeration all the items in the bag takes time O(N), where N is the number
            of items in the bag.</p>
            </remarks>
            <returns>An enumerator for enumerating all the items in the OrderedBag.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Contains(`0)">
            <summary>
            Determines if this bag contains an item equal to <paramref name="item"/>. The bag
            is not changed.
            </summary>
            <remarks>Searching the bag for an item takes time O(log N), where N is the number of items in the bag.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the bag contains <paramref name="item"/>. False if the bag does not contain <paramref name="item"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.GetEqualItems(`0)">
            <summary>
            <para>Enumerates all of the items in this bag that are equal to <paramref name="item"/>, according to the
            comparison mechanism that was used when the bag was created. The bag
            is not changed.</para>
            <para>If the bag does contain an item equal to <paramref name="item"/>, then the enumeration contains
            no items.</para>
            </summary>
            <remarks>Enumeration the items in the bag equal to <paramref name="item"/> takes time O(log N + M), where N
            is the total number of items in the bag, and M is the number of items equal to <paramref name="item"/>.</remarks>
            <param name="item">The item to search for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates all the items in the bag equal to <paramref name="item"/>. </returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.DistinctItems">
            <summary>
            Enumerates all the items in the bag, but enumerates equal items
            just once, even if they occur multiple times in the bag.
            </summary>
            <remarks>If the bag is changed while items are being enumerated, the
            enumeration will terminate with an InvalidOperationException.</remarks>
            <returns>An IEnumerable&lt;T&gt; that enumerates the unique items.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.LastIndexOf(`0)">
            <summary>
            Get the index of the given item in the sorted order. The smallest item has index 0,
            the next smallest item has index 1, and the largest item has index Count-1. If multiple
            equal items exist, the largest index of the equal items is returned.
            </summary>
            <remarks>Finding the index takes time O(log N), which N is the number of items in
            the set.</remarks>
            <param name="item">The item to get the index of.</param>
            <returns>The index of the last item in the sorted bag equal to <paramref name="item"/>, or -1 if the item is not present
            in the set.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.IndexOf(`0)">
            <summary>
            Get the index of the given item in the sorted order. The smallest item has index 0,
            the next smallest item has index 1, and the largest item has index Count-1. If multiple
            equal items exist, the smallest index of the equal items is returned.
            </summary>
            <remarks>Finding the index takes time O(log N), which N is the number of items in
            the set.</remarks>
            <param name="item">The item to get the index of.</param>
            <returns>The index of the first item in the sorted bag equal to <paramref name="item"/>, or -1 if the item is not present
            in the set.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Add(`0)">
            <summary>
            Adds a new item to the bag. Since bags can contain duplicate items, the item
            is added even if the bag already contains an item equal to <paramref name="item"/>. In
            this case, the new item is placed after all equal items already present in the bag.
            </summary>
            <remarks>
            <para>Adding an item takes time O(log N), where N is the number of items in the bag.</para></remarks>
            <param name="item">The item to add to the bag.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds all the items in <paramref name="collection"/> to the bag.</summary>
            <remarks>
            <para>Adding the collection takes time O(M log N), where N is the number of items in the bag, and M is the
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to add to the bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Remove(`0)">
            <summary>
            Searches the bag for one item equal to <paramref name="item"/>, and if found,
            removes it from the bag. If not found, the bag is unchanged. If more than one item
            equal to <paramref name="item"/>, the item that was last inserted is removed.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the bag.</para>
            <para>Removing an item from the bag takes time O(log N), where N is the number of items in the bag.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>True if <paramref name="item"/> was found and removed. False if <paramref name="item"/> was not in the bag.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.RemoveAllCopies(`0)">
            <summary>
            Searches the bag for all items equal to <paramref name="item"/>, and
            removes all of them from the bag. If not found, the bag is unchanged.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the bag.</para>
            <para>RemoveAllCopies() takes time O(M log N), where N is the total number of items in the bag, and M is
            the number of items equal to <paramref name="item"/>.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>The number of copies of <paramref name="item"/> that were found and removed. </returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all the items in <paramref name="collection"/> from the bag. Items not
            present in the bag are ignored.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the bag.</para>
            <para>Removing the collection takes time O(M log N), where N is the number of items in the bag, and M is the
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to remove from the bag.</param>
            <returns>The number of items removed from the bag.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Clear">
            <summary>Removes all items from the bag.</summary>
            <remarks>Clearing the bag takes a constant amount of time, regardless of the number of items in it.</remarks>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.CheckEmpty">
            <summary>If the collection is empty, throw an invalid operation exception.</summary>
            <exception cref="T:System.InvalidOperationException">The bag is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.GetFirst">
            <summary>
            Returns the first item in the bag: the item
            that would appear first if the bag was enumerated. This is also
            the smallest item in the bag.
            </summary>
            <remarks>GetFirst() takes time O(log N), where N is the number of items in the bag.</remarks>
            <returns>The first item in the bag. If more than one item
            is smallest, the first one added is returned.</returns>
            <exception cref="T:System.InvalidOperationException">The bag is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.GetLast">
            <summary>
            Returns the last item in the bag: the item
            that would appear last if the bag was enumerated. This is also the largest
            item in the bag.
            </summary>
            <remarks>GetLast() takes time O(log N), where N is the number of items in the bag.</remarks>
            <returns>The last item in the bag. If more than one item
            is largest, the last one added is returned.</returns>
            <exception cref="T:System.InvalidOperationException">The bag is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.RemoveFirst">
            <summary>
            Removes the first item in the bag. This is also the smallest
            item in the bag.
            </summary>
            <remarks>RemoveFirst() takes time O(log N), where N is the number of items in the bag.</remarks>
            <returns>The item that was removed, which was the smallest item in the bag. </returns>
            <exception cref="T:System.InvalidOperationException">The bag is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.RemoveLast">
            <summary>Removes the last item in the bag. This is also the largest item in the bag.</summary>
            <remarks>RemoveLast() takes time O(log N), where N is the number of items in the bag.</remarks>
            <returns>The item that was removed, which was the largest item in the bag. </returns>
            <exception cref="T:System.InvalidOperationException">The bag is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.CheckConsistentComparison(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Check that this bag and another bag were created with the same comparison
            mechanism. Throws exception if not compatible.
            </summary>
            <param name="otherBag">Other bag to check comparision mechanism.</param>
            <exception cref="T:System.InvalidOperationException">If otherBag and this bag don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.IsSupersetOf(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Determines if this bag is a superset of another bag. Neither bag is modified.
            This bag is a superset of <paramref name="otherBag"/> if every element in
            <paramref name="otherBag"/> is also in this bag, at least the same number of
            times.
            </summary>
            <remarks>IsSupersetOf is computed in time O(M log N), where M is the size of the
            <paramref name="otherBag"/>, and N is the size of the this set.</remarks>
            <param name="otherBag">OrderedBag to compare to.</param>
            <returns>True if this is a superset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.IsProperSupersetOf(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Determines if this bag is a proper superset of another bag. Neither bag is modified.
            This bag is a proper superset of <paramref name="otherBag"/> if every element in
            <paramref name="otherBag"/> is also in this bag, at least the same number of
            times. Additional, this bag must have strictly more items than <paramref name="otherBag"/>.
            </summary>
            <remarks>IsProperSupersetOf is computed in time O(M log N), where M is the number of unique items in
            <paramref name="otherBag"/>.</remarks>
            <param name="otherBag">OrderedBag to compare to.</param>
            <returns>True if this is a proper superset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.IsSubsetOf(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Determines if this bag is a subset of another bag. Neither bag is modified.
            This bag is a subset of <paramref name="otherBag"/> if every element in this bag
            is also in <paramref name="otherBag"/>, at least the same number of
            times.
            </summary>
            <remarks>IsSubsetOf is computed in time O(N log M), where M is the size of the
            <paramref name="otherBag"/>, and N is the size of the this bag.</remarks>
            <param name="otherBag">OrderedBag to compare to.</param>
            <returns>True if this is a subset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.IsProperSubsetOf(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Determines if this bag is a proper subset of another bag. Neither bag is modified.
            This bag is a subset of <paramref name="otherBag"/> if every element in this bag
            is also in <paramref name="otherBag"/>, at least the same number of
            times. Additional, this bag must have strictly fewer items than <paramref name="otherBag"/>.
            </summary>
            <remarks>IsSubsetOf is computed in time O(N log M), where M is the size of the
            <paramref nameb="otherBag"/>, and N is the size of the this bag.</remarks>
            <param name="otherBag">OrderedBag to compare to.</param>
            <returns>True if this is a proper subset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.IsDisjointFrom(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Determines if this bag is disjoint from another bag. Two bags are disjoint
            if no item from one set is equal to any item in the other bag.
            </summary>
            <remarks>
            <para>The answer is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherBag">Bag to check disjointness with.</param>
            <returns>True if the two bags are disjoint, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.IsEqualTo(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Determines if this bag is equal to another bag. This bag is equal to
            <paramref name="otherBag"/> if they contain the same items, each the
            same number of times.
            </summary>
            <remarks>IsEqualTo is computed in time O(N), where N is the number of items in
            this bag.</remarks>
            <param name="otherBag">OrderedBag to compare to</param>
            <returns>True if this bag is equal to <paramref name="otherBag"/>, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.UnionWith(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Computes the union of this bag with another bag. The union of two bags
            is all items from both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the union contains the item Maximum(X,Y) times. This bag receives
            the union of the two bags, the other bag is unchanged.
            </summary>
            <remarks>
            <para>The union of two bags is computed in time O(M + N log M), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to union with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Union(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Computes the union of this bag with another bag. The union of two bags
            is all items from both of the bags.  If an item appears X times in one bag,
            and Y times in the other bag, the union contains the item Maximum(X,Y) times. A new bag is
            created with the union of the bags and is returned. This bag and the other bag
            are unchanged.
            </summary>
            <remarks>
            <para>The union of two bags is computed in time O(M + N log M), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to union with.</param>
            <returns>The union of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.SumWith(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Computes the sum of this bag with another bag. The sum of two bags
            is all items from both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the sum contains the item (X+Y) times. This bag receives
            the sum of the two bags, the other bag is unchanged.
            </summary>
            <remarks>
            <para>The sum of two bags is computed in time O(M + N log M), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to sum with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Sum(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Computes the sum of this bag with another bag. he sum of two bags
            is all items from both of the bags.  If an item appears X times in one bag,
            and Y times in the other bag, the sum contains the item (X+Y) times. A new bag is
            created with the sum of the bags and is returned. This bag and the other bag
            are unchanged.
            </summary>
            <remarks>
            <para>The sum of two bags is computed in time O(M + N log M), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to sum with.</param>
            <returns>The sum of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.IntersectionWith(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Computes the intersection of this bag with another bag. The intersection of two bags
            is all items that appear in both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the sum contains the item Minimum(X,Y) times. This bag receives
            the intersection of the two bags, the other bag is unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both bags, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two bags is computed in time O(N log M), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to intersection with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Intersection(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Computes the intersection of this bag with another bag. The intersection of two bags
            is all items that appear in both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the sum contains the item Minimum(X,Y) times. A new bag is
            created with the intersection of the bags and is returned. This bag and the other bag
            are unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both bags, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two bags is computed in time O(N log M), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to intersection with.</param>
            <returns>The intersection of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.DifferenceWith(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Computes the difference of this bag with another bag. The difference of these two bags
            is all items that appear in this bag, but not in <paramref name="otherBag"/>. If an item appears X times in this bag,
            and Y times in the other bag, the difference contains the item X - Y times (zero times if Y &gt;= X). This bag receives
            the difference of the two bags; the other bag is unchanged.
            </summary>
            <remarks>
            <para>The difference of two bags is computed in time O(M + N log M), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to difference with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Difference(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Computes the difference of this bag with another bag. The difference of these two bags
            is all items that appear in this bag, but not in <paramref name="otherBag"/>. If an item appears X times in this bag,
            and Y times in the other bag, the difference contains the item X - Y times (zero times if Y &gt;= X).  A new bag is
            created with the difference of the bags and is returned. This bag and the other bag
            are unchanged.
            </summary>
            <remarks>
            <para>The difference of two bags is computed in time O(M + N log M), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to difference with.</param>
            <returns>The difference of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.SymmetricDifferenceWith(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Computes the symmetric difference of this bag with another bag. The symmetric difference of two bags
            is all items that appear in either of the bags, but not both. If an item appears X times in one bag,
            and Y times in the other bag, the symmetric difference contains the item AbsoluteValue(X - Y times). This bag receives
            the symmetric difference of the two bags; the other bag is unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two bags is computed in time O(M + N), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to symmetric difference with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.SymmetricDifference(DmFramework.Collections.OrderedBag{`0})">
            <summary>
            Computes the symmetric difference of this bag with another bag. The symmetric difference of two bags
            is all items that appear in either of the bags, but not both. If an item appears X times in one bag,
            and Y times in the other bag, the symmetric difference contains the item AbsoluteValue(X - Y times). A new bag is
            created with the symmetric difference of the bags and is returned. This bag and the other bag
            are unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two bags is computed in time O(M + N), where M is the size of the
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to symmetric difference with.</param>
            <returns>The symmetric difference of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherBag"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.AsList">
            <summary>
            Get a read-only list view of the items in this ordered bag. The
            items in the list are in sorted order, with the smallest item
            at index 0. This view does not copy any data, and reflects any
            changes to the underlying OrderedBag.
            </summary>
            <returns>A read-only IList&lt;T&gt; view onto this OrderedBag.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Reversed">
             <summary>
             Returns a View collection that can be used for enumerating the items in the bag in
             reversed order.
             </summary>
            <remarks>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(T item in bag.Reversed()) {
                // process item
             }
            </code></p>
             <p>If an item is added to or deleted from the bag while the View is being enumerated, then
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling Reverse does not copy the data in the tree, and the operation takes constant time.</p>
            </remarks>
             <returns>An OrderedBag.View of items in reverse order.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.Range(`0,System.Boolean,`0,System.Boolean)">
             <summary>
             Returns a View collection that can be used for enumerating a range of the items in the bag.
             Only items that are greater than <paramref name="from"/> and
             less than <paramref name="to"/> are included. The items are enumerated in sorted order.
             Items equal to the end points of the range can be included or excluded depending on the
             <paramref name="fromInclusive"/> and <paramref name="toInclusive"/> parameters.
             </summary>
            <remarks>
            <p>If <paramref name="from"/> is greater than or equal to <paramref name="to"/>, the returned collection is empty. </p>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(T item in bag.Range(from, true, to, false)) {
                // process item
             }
            </code></p>
             <p>If an item is added to or deleted from the bag while the View is being enumerated, then
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling Range does not copy the data in the tree, and the operation takes constant time.</p>
            </remarks>
             <param name="from">The lower bound of the range.</param>
             <param name="fromInclusive">If true, the lower bound is inclusive--items equal to the lower bound will
             be included in the range. If false, the lower bound is exclusive--items equal to the lower bound will not
             be included in the range.</param>
             <param name="to">The upper bound of the range. </param>
             <param name="toInclusive">If true, the upper bound is inclusive--items equal to the upper bound will
             be included in the range. If false, the upper bound is exclusive--items equal to the upper bound will not
             be included in the range.</param>
             <returns>An OrderedBag.View of items in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.RangeFrom(`0,System.Boolean)">
             <summary>
             Returns a View collection that can be used for enumerating a range of the items in the bag.
             Only items that are greater than (and optionally, equal to) <paramref name="from"/> are included.
             The items are enumerated in sorted order. Items equal to <paramref name="from"/> can be included
             or excluded depending on the <paramref name="fromInclusive"/> parameter.
             </summary>
            <remarks>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(T item in bag.RangeFrom(from, true)) {
                // process item
             }
            </code></p>
             <p>If an item is added to or deleted from the bag while the View is being enumerated, then
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling RangeFrom does not copy the data in the tree, and the operation takes constant time.</p>
            </remarks>
             <param name="from">The lower bound of the range.</param>
             <param name="fromInclusive">If true, the lower bound is inclusive--items equal to the lower bound will
             be included in the range. If false, the lower bound is exclusive--items equal to the lower bound will not
             be included in the range.</param>
             <returns>An OrderedBag.View of items in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.RangeTo(`0,System.Boolean)">
             <summary>
             Returns a View collection that can be used for enumerating a range of the items in the bag.
             Only items that are less than (and optionally, equal to) <paramref name="to"/> are included.
             The items are enumerated in sorted order. Items equal to <paramref name="to"/> can be included
             or excluded depending on the <paramref name="toInclusive"/> parameter.
             </summary>
            <remarks>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(T item in bag.RangeTo(to, false)) {
                // process item
             }
            </code></p>
             <p>If an item is added to or deleted from the bag while the View is being enumerated, then
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling RangeTo does not copy the data in the tree, and the operation takes constant time.</p>
            </remarks>
             <param name="to">The upper bound of the range. </param>
             <param name="toInclusive">If true, the upper bound is inclusive--items equal to the upper bound will
             be included in the range. If false, the upper bound is exclusive--items equal to the upper bound will not
             be included in the range.</param>
             <returns>An OrderedBag.View of items in the given range.</returns>
        </member>
        <member name="P:DmFramework.Collections.OrderedBag`1.Comparer">
            <summary>Returns the IComparer&lt;T&gt; used to compare items in this bag.</summary>
            <value>If the bag was created using a comparer, that comparer is returned. If the bag was
            created using a comparison delegate, then a comparer equivalent to that delegate
            is returned. Otherwise
            the default comparer for T (Comparer&lt;T&gt;.Default) is returned.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedBag`1.Count">
            <summary>Returns the number of items in the bag.</summary>
            <remarks>The size of the bag is returned in constant time.</remarks>
            <value>The number of items in the bag.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedBag`1.Item(System.Int32)">
            <summary>
            Get the item by its index in the sorted order. The smallest item has index 0,
            the next smallest item has index 1, and the largest item has index Count-1.
            </summary>
            <remarks>The indexer takes time O(log N), which N is the number of items in
            the set.</remarks>
            <param name="index">The index to get the item by.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="T:DmFramework.Collections.OrderedBag`1.ListView">
            <summary>
            The nested class that provides a read-only list view
            of all or part of the collection.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyListBase`1">
            <summary>
            ReadOnlyListBase is an abstract class that can be used as a base class for a read-only collection that needs
            to implement the generic IList&lt;T&gt; and non-generic IList collections. The derived class needs
            to override the Count property and the get part of the indexer. The implementation
            of all the other methods in IList&lt;T&gt; and IList are handled by ListBase.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.MethodModifiesCollection">
            <summary>Throws an NotSupportedException stating that this collection cannot be modified.</summary>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.GetEnumerator">
            <summary>
            Enumerates all of the items in the list, in order. The item at index 0
            is enumerated first, then the item at index 1, and so on.
            </summary>
            <returns>An IEnumerator&lt;T&gt; that enumerates all the
            items in the list.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.Contains(`0)">
            <summary>
            Determines if the list contains any item that compares equal to <paramref name="item"/>.
            The implementation simply checks whether IndexOf(item) returns a non-negative value.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise,
            Object.Equals is used to determine equality.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the list contains an item that compares equal to <paramref name="item"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.CopyTo(`0[])">
            <summary>
            Copies all the items in the list, in order, to <paramref name="array"/>,
            starting at index 0.
            </summary>
            <param name="array">The array to copy to. This array must have a size
            that is greater than or equal to Count.</param>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the list to <paramref name="array"/>,
            starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="index">The starting index in the source list of the range to copy.</param>
            <param name="array">The array to copy to. This array must have a size
            that is greater than or equal to Count + arrayIndex.</param>
            <param name="arrayIndex">The starting index in <paramref name="array"/>
            to copy to.</param>
            <param name="count">The number of items to copy.</param>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.Find(System.Predicate{`0})">
            <summary>
            Finds the first item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, than
            the default value for T (null or all-zero) is returned.
            </summary>
            <remarks>If the default value for T (null or all-zero) matches the condition defined by <paramref name="predicate"/>,
            and the list might contain the default value, then it is impossible to distinguish the different between finding
            the default value and not finding any item. To distinguish these cases, use <see cref="M:DmFramework.Collections.ReadOnlyListBase`1.TryFind(System.Predicate{`0},`0@)"/>.</remarks>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The first item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, the default value for T is returned.</returns>
            <seealso cref="M:DmFramework.Collections.ReadOnlyListBase`1.TryFind(System.Predicate{`0},`0@)"/>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.TryFind(System.Predicate{`0},`0@)">
            <summary>
            Finds the first item in the list that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <param name="foundItem">If true is returned, this parameter receives the first item in the list
            that satifies the condition defined by <paramref name="predicate"/>.</param>
            <returns>True if an item that  satisfies the condition <paramref name="predicate"/> was found. False
            if no item in the list satisfies that condition.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.FindLast(System.Predicate{`0})">
            <summary>
            Finds the last item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, than
            the default value for T (null or all-zero) is returned.
            </summary>
            <remarks>If the default value for T (null or all-zero) matches the condition defined by <paramref name="predicate"/>,
            and the list might contain the default value, then it is impossible to distinguish the different between finding
            the default value and not finding any item. To distinguish these cases, use <see cref="M:DmFramework.Collections.ReadOnlyListBase`1.TryFindLast(System.Predicate{`0},`0@)"/>.</remarks>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The last item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, the default value for T is returned.</returns>
            <seealso cref="M:DmFramework.Collections.ReadOnlyListBase`1.TryFindLast(System.Predicate{`0},`0@)"/>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.TryFindLast(System.Predicate{`0},`0@)">
            <summary>
            Finds the last item in the list that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <param name="foundItem">If true is returned, this parameter receives the last item in the list
            that satifies the condition defined by <paramref name="predicate"/>.</param>
            <returns>True if an item that  satisfies the condition <paramref name="predicate"/> was found. False
            if no item in the list satisfies that condition.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.FindIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the first item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The index of the first item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the first item, in the range of items extending from <paramref name="index"/> to the end, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The starting index of the range to check.</param>
            <returns>The index of the first item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the first item, in the range of <paramref name="count"/> items starting from <paramref name="index"/>, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The starting index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the first item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the last item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The index of the last item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the last item, in the range of items extending from the beginning
            of the list to <paramref name="index"/>, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The ending index of the range to check.</param>
            <returns>The index of the last item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the last item, in the range of <paramref name="count"/> items ending at <paramref name="index"/>, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The ending index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the last item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.IndexOf(`0)">
            <summary>Finds the index of the first item in the list that is equal to <paramref name="item"/>.</summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <returns>The index of the first item in the list that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.IndexOf(`0,System.Int32)">
            <summary>
            Finds the index of the first item, in the range of items extending from <paramref name="index"/> to the end,
            that is equal to <paramref name="item"/>.
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <param name="index">The starting index of the range to check.</param>
            <returns>The index of the first item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Finds the index of the first item, in the range of <paramref name="count"/> items starting from <paramref name="index"/>,
            that is equal to <paramref name="item"/>.
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <param name="index">The starting index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the first item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.LastIndexOf(`0)">
            <summary>Finds the index of the last item in the list that is equal to <paramref name="item"/>.</summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <returns>The index of the last item in the list that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Finds the index of the last item, in the range of items extending from the beginning
            of the list to <paramref name="index"/>, that is equal to <paramref name="item"/>.
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <param name="index">The ending index of the range to check.</param>
            <returns>The index of the last item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Finds the index of the last item, in the range of <paramref name="count"/> items ending at <paramref name="index"/>,
            that is equal to <paramref name="item"/>.
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search for.</param>
            <param name="index">The ending index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the last item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.Range(System.Int32,System.Int32)">
            <summary>
            Returns a view onto a sub-range of this list. Items are not copied; the
            returned IList&lt;T&gt; is simply a different view onto the same underlying items.
            </summary>
            <remarks>
            <para>This method can be used to apply an algorithm to a portion of a list. For example:</para>
            <code>Algorithms.Reverse(deque.Range(3, 6))</code>
            will return the reverse opf the 6 items beginning at index 3.</remarks>
            <param name="start">The starting index of the view.</param>
            <param name="count">The number of items in the view.</param>
            <returns>A list that is a view onto the given sub-part of this list. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> + <paramref name="count"/> is greater than the
            size of the list.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Inserts a new item at the given index. This implementation throws a NotSupportedException
            indicating that the list is read-only.
            </summary>
            <param name="index">The index in the list to insert the item at. After the
            insertion, the inserted item is located at this index. The
            first item in the list has index 0.</param>
            <param name="item">The item to insert at the given index.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index.  This implementation throws a NotSupportedException
            indicating that the list is read-only.
            </summary>
            <param name="index">The index in the list to remove the item at. The
            first item in the list has index 0.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the end of the list. This implementation throws a NotSupportedException
            indicating that the list is read-only.
            </summary>
            <param name="value">The item to add to the list.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#IList#Clear">
            <summary>
            Removes all the items from the list, resulting in an empty list. This implementation throws a NotSupportedException
            indicating that the list is read-only.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#IList#Contains(System.Object)">
            <summary>Determines if the list contains any item that compares equal to <paramref name="value"/>.</summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise,
            Object.Equals is used to determine equality.</remarks>
            <param name="value">The item to search for.</param>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Find the first occurrence of an item equal to <paramref name="value"/>
            in the list, and returns the index of that item.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise,
            Object.Equals is used to determine equality.</remarks>
            <param name="value">The item to search for.</param>
            <returns>The index of <paramref name="value"/>, or -1 if no item in the
            list compares equal to <paramref name="value"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Insert a new item at the given index. This implementation throws a NotSupportedException
            indicating that the list is read-only.
            </summary>
            <param name="index">The index in the list to insert the item at. After the
            insertion, the inserted item is located at this index. The
            first item in the list has index 0.</param>
            <param name="value">The item to insert at the given index.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Searches the list for the first item that compares equal to <paramref name="value"/>.
            If one is found, it is removed. Otherwise, the list is unchanged.  This implementation throws a NotSupportedException
            indicating that the list is read-only.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise,
            Object.Equals is used to determine equality.</remarks>
            <param name="value">The item to remove from the list.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index. This implementation throws a NotSupportedException
            indicating that the list is read-only.
            </summary>
            <param name="index">The index in the list to remove the item at. The
            first item in the list has index 0.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyListBase`1.Count">
            <summary>
            The property must be overridden by the derived class to return the number of
            items in the list.
            </summary>
            <value>The number of items in the list.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyListBase`1.Item(System.Int32)">
            <summary>
            The get part of the indexer must be overridden by the derived class to get
            values of the list at a particular index.
            </summary>
            <param name="index">The index in the list to get or set an item at. The
            first item in the list has index 0, and the last has index Count-1.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#IList#IsFixedSize">
            <summary>Returns whether the list is a fixed size. This implementation always returns true.</summary>
            <value>Alway true, indicating that the list is fixed size.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#IList#IsReadOnly">
            <summary>Returns whether the list is read only. This implementation always returns true.</summary>
            <value>Alway true, indicating that the list is read-only.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyListBase`1.System#Collections#IList#Item(System.Int32)">
            <summary>Gets or sets the value at a particular index in the list.</summary>
            <param name="index">The index in the list to get or set an item at. The
            first item in the list has index 0, and the last has index Count-1.</param>
            <value>The item at the given index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> cannot be converted to T.</exception>
            <exception cref="T:System.NotSupportedException">Always thrown from the setter, indicating that the list
            is read-only.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.ListView.#ctor(DmFramework.Collections.OrderedBag{`0},DmFramework.Collections.RedBlackTree{`0}.RangeTester,System.Boolean,System.Boolean)">
            <summary>Create a new list view wrapped the given set.</summary>
            <param name="myBag">The ordered bag to wrap.</param>
            <param name="rangeTester">Range tester that defines the range being used.</param>
            <param name="entireTree">If true, then rangeTester defines the entire tree. Used to optimize some operations.</param>
            <param name="reversed">Is the view enuemerated in reverse order?</param>
        </member>
        <member name="T:DmFramework.Collections.OrderedBag`1.View">
             <summary>
             The OrderedBag&lt;T&gt;.View class is used to look at a subset of the items
             inside an ordered bag. It is returned from the Range, RangeTo, RangeFrom, and Reversed methods.
             </summary>
            <remarks>
             <p>Views are dynamic. If the underlying bag changes, the view changes in sync. If a change is made
             to the view, the underlying bag changes accordingly.</p>
            <p>Typically, this class is used in conjunction with a foreach statement to enumerate the items
             in a subset of the OrderedBag. For example:</p>
            <code>
             foreach(T item in bag.Range(from, to)) {
                // process item
             }
            </code>
            </remarks>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.#ctor(DmFramework.Collections.OrderedBag{`0},DmFramework.Collections.RedBlackTree{`0}.RangeTester,System.Boolean,System.Boolean)">
            <summary>Initialize the view.</summary>
            <param name="myBag">OrderedBag being viewed</param>
            <param name="rangeTester">Range tester that defines the range being used.</param>
            <param name="entireTree">If true, then rangeTester defines the entire tree.</param>
            <param name="reversed">Is the view enuemerated in reverse order?</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.ItemInView(`0)">
            <summary>Determine if the given item lies within the bounds of this view.</summary>
            <param name="item">Item to test.</param>
            <returns>True if the item is within the bounds of this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.GetEnumerator">
            <summary>Enumerate all the items in this view.</summary>
            <returns>An IEnumerator&lt;T&gt; with the items in this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.Clear">
            <summary>Removes all the items within this view from the underlying bag.</summary>
            <example>The following removes all the items that start with "A" from an OrderedBag.
            <code>
            bag.Range("A", "B").Clear();
            </code>
            </example>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.Add(`0)">
            <summary>
            Adds a new item to the bag underlying this View. If the bag already contains an item equal to
            <paramref name="item"/>, that item is replaces with <paramref name="item"/>. If
            <paramref name="item"/> is outside the range of this view, an InvalidOperationException
            is thrown.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the bag.</para>
            <para>Adding an item takes time O(log N), where N is the number of items in the bag.</para></remarks>
            <param name="item">The item to add.</param>
            <returns>True if the bag already contained an item equal to <paramref name="item"/> (which was replaced), false
            otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.Remove(`0)">
            <summary>
            Searches the underlying bag for an item equal to <paramref name="item"/>, and if found,
            removes it from the bag. If not found, the bag is unchanged. If the item is outside
            the range of this view, the bag is unchanged.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the bag.</para>
            <para>Removing an item from the bag takes time O(log N), where N is the number of items in the bag.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>True if <paramref name="item"/> was found and removed. False if <paramref name="item"/> was not in the bag, or
            was outside the range of this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.Contains(`0)">
            <summary>
            Determines if this view of the bag contains an item equal to <paramref name="item"/>. The bag
            is not changed. If
            </summary>
            <remarks>Searching the bag for an item takes time O(log N), where N is the number of items in the bag.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the bag contains <paramref name="item"/>, and <paramref name="item"/> is within
            the range of this view. False otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.IndexOf(`0)">
            <summary>
            Get the first index of the given item in the view. The smallest item in the view has index 0,
            the next smallest item has index 1, and the largest item has index Count-1.
            </summary>
            <remarks>Finding the index takes time O(log N), which N is the number of items in
            the set.</remarks>
            <param name="item">The item to get the index of.</param>
            <returns>The index of the first item in the view equal to <paramref name="item"/>, or -1 if the item is not present
            in the view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.LastIndexOf(`0)">
            <summary>
            Get the last index of the given item in the view. The smallest item in the view has index 0,
            the next smallest item has index 1, and the largest item has index Count-1.
            </summary>
            <remarks>Finding the index takes time O(log N), which N is the number of items in
            the set.</remarks>
            <param name="item">The item to get the index of.</param>
            <returns>The index of the last item in the view equal to <paramref name="item"/>, or -1 if the item is not present
            in the view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.AsList">
            <summary>
            Get a read-only list view of the items in this view. The
            items in the list are in sorted order, with the smallest item
            at index 0. This view does not copy any data, and reflects any
            changes to the underlying OrderedSet.
            </summary>
            <returns>A read-only IList&lt;T&gt; view onto this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.Reversed">
            <summary>Creates a new View that has the same items as this view, in the reversed order.</summary>
            <returns>A new View that has the reversed order of this view, with the same upper
            and lower bounds.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.GetFirst">
            <summary>
            Returns the first item in this view: the item
            that would appear first if the view was enumerated.
            </summary>
            <remarks>GetFirst() takes time O(log N), where N is the number of items in the bag.</remarks>
            <returns>The first item in the view. </returns>
            <exception cref="T:System.InvalidOperationException">The view has no items in it.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedBag`1.View.GetLast">
            <summary>
            Returns the last item in the view: the item
            that would appear last if the view was enumerated.
            </summary>
            <remarks>GetLast() takes time O(log N), where N is the number of items in the bag.</remarks>
            <returns>The last item in the view. </returns>
            <exception cref="T:System.InvalidOperationException">The view has no items in it.</exception>
        </member>
        <member name="P:DmFramework.Collections.OrderedBag`1.View.Count">
            <summary>Number of items in this view.</summary>
            <value>Number of items that lie within the bounds the view.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedBag`1.View.Item(System.Int32)">
            <summary>
            Get the item by its index in the sorted order. The smallest item in the view has index 0,
            the next smallest item has index 1, and the largest item has index Count-1.
            </summary>
            <remarks>The indexer takes time O(log N), which N is the number of items in
            the set.</remarks>
            <param name="index">The index to get the item by.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="T:DmFramework.Collections.OrderedDictionary`2">
             <summary>
             OrderedDictionary&lt;TKey, TValue&gt; is a collection that maps keys of type TKey
             to values of type TValue. The keys are maintained in a sorted order, and at most one value
             is permitted for each key.
             </summary>
             <remarks>
             <p>The keys are compared in one of three ways. If TKey implements IComparable&lt;TKey&gt; or IComparable,
             then the CompareTo method of that interface will be used to compare elements. Alternatively, a comparison
             function can be passed in either as a delegate, or as an instance of IComparer&lt;TKey&gt;.</p>
             <p>OrderedDictionary is implemented as a balanced binary tree. Inserting, deleting, and looking up an
             an element all are done in log(N) type, where N is the number of keys in the tree.</p>
             <p><see cref="T:System.Collections.Generic.Dictionary`2"/> is similar, but uses hashing instead of comparison, and does not maintain
             the keys in sorted order.</p>
            </remarks>
            <seealso cref="T:System.Collections.Generic.Dictionary`2"/>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.NewPair(`0,`1)">
            <summary>Helper function to create a new KeyValuePair struct.</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.NewPair(`0)">
            <summary>Helper function to create a new KeyValuePair struct with a default value.</summary>
            <param name="key">The key.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.#ctor">
            <summary>
            Creates a new OrderedDictionary. The TKey must implemented IComparable&lt;TKey&gt;
            or IComparable.
            The CompareTo method of this interface will be used to compare keys in this dictionary.
            </summary>
            <exception cref="T:System.InvalidOperationException">TKey does not implement IComparable&lt;TKey&gt;.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new OrderedDictionary. The Compare method of the passed comparison object
            will be used to compare keys in this dictionary.
            </summary>
            <remarks>
            The GetHashCode and Equals methods of the provided IComparer&lt;TKey&gt; will never
            be called, and need not be implemented.</remarks>
            <param name="comparer">An instance of IComparer&lt;TKey&gt; that will be used to compare keys.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.#ctor(System.Comparison{`0})">
            <summary>Creates a new OrderedDictionary. The passed delegate will be used to compare keys in this dictionary.</summary>
            <param name="comparison">A delegate to a method that will be used to compare keys.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            <para>Creates a new OrderedDictionary. The TKey must implemented IComparable&lt;TKey&gt;
            or IComparable.
            The CompareTo method of this interface will be used to compare keys in this dictionary.</para>
            <para>A collection and keys and values (typically another dictionary) is used to initialized the
            contents of the dictionary.</para>
            </summary>
            <param name="keysAndValues">A collection of keys and values whose contents are used to initialized the dictionary.</param>
            <exception cref="T:System.InvalidOperationException">TKey does not implement IComparable&lt;TKey&gt;.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`0})">
            <summary>
            <para>Creates a new OrderedDictionary. The Compare method of the passed comparison object
            will be used to compare keys in this dictionary.</para>
            <para>A collection and keys and values (typically another dictionary) is used to initialized the
            contents of the dictionary.</para>
            </summary>
            <remarks>
            The GetHashCode and Equals methods of the provided IComparer&lt;TKey&gt; will never
            be called, and need not be implemented.</remarks>
            <param name="keysAndValues">A collection of keys and values whose contents are used to initialized the dictionary.</param>
            <param name="comparer">An instance of IComparer&lt;TKey&gt; that will be used to compare keys.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Comparison{`0})">
            <summary>
            <para>Creates a new OrderedDictionary. The passed delegate will be used to compare keys in this dictionary.</para>
            <para>A collection and keys and values (typically another dictionary) is used to initialized the
            contents of the dictionary.</para>
            </summary>
            <param name="keysAndValues">A collection of keys and values whose contents are used to initialized the dictionary.</param>
            <param name="comparison">A delegate to a method that will be used to compare keys.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`0},System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Creates a new OrderedDictionary. The passed comparer
            will be used to compare key-value pairs in this dictionary. Used internally
            from other constructors.
            </summary>
            <param name="keysAndValues">A collection of keys and values whose contents are used to initialized the dictionary.</param>
            <param name="keyComparer">An IComparer that will be used to compare keys.</param>
            <param name="pairComparer">An IComparer that will be used to compare key-value pairs.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}},DmFramework.Collections.RedBlackTree{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Creates a new OrderedDictionary. The passed comparison delegate
            will be used to compare keys in this dictionary, and the given tree is used. Used internally for Clone().
            </summary>
            <param name="keyComparer">An IComparer that will be used to compare keys.</param>
            <param name="pairComparer">A delegate to a method that will be used to compare key-value pairs.</param>
            <param name="tree">RedBlackTree that contains the data for the dictionary.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.Clone">
            <summary>
            Makes a shallow clone of this dictionary; i.e., if keys or values of the
            dictionary are reference types, then they are not cloned. If TKey or TValue is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the dictionary takes time O(N), where N is the number of keys in the dictionary.</remarks>
            <returns>The cloned dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.NonCloneableType(System.Type)">
            <summary>Throw an InvalidOperationException indicating that this type is not cloneable.</summary>
            <param name="t">Type to test.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.CloneContents">
            <summary>
            Makes a deep clone of this dictionary. A new dictionary is created with a clone of
            each entry of this dictionary, by calling ICloneable.Clone on each element. If TKey or TValue is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If TKey or TValue is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the dictionary takes time O(N log N), where N is the number of keys in the dictionary.</para></remarks>
            <returns>The cloned dictionary.</returns>
            <exception cref="T:System.InvalidOperationException">TKey or TValue is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.Reversed">
             <summary>
             Returns a View collection that can be used for enumerating the keys and values in the collection in
             reversed order.
             </summary>
            <remarks>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Reversed()) {
                // process pair
             }
            </code></p>
             <p>If an entry is added to or deleted from the dictionary while the View is being enumerated, then
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling Reverse does not copy the data in the dictionary, and the operation takes constant time.</p>
            </remarks>
             <returns>An OrderedDictionary.View of key-value pairs in reverse order.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.Range(`0,System.Boolean,`0,System.Boolean)">
             <summary>
             Returns a collection that can be used for enumerating some of the keys and values in the collection.
             Only keys that are greater than <paramref name="from"/> and
             less than <paramref name="to"/> are included. The keys are enumerated in sorted order.
             Keys equal to the end points of the range can be included or excluded depending on the
             <paramref name="fromInclusive"/> and <paramref name="toInclusive"/> parameters.
             </summary>
            <remarks>
            <p>If <paramref name="from"/> is greater than or equal to <paramref name="to"/>, the returned collection is empty. </p>
            <p>The sorted order of the keys is determined by the comparison instance or delegate used
             to create the dictionary.</p>
            <p>Typically, this property is used in conjunction with a foreach statement. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Range(from, true, to, false)) {
                // process pair
             }
            </code>
            <p>Calling Range does not copy the data in the dictionary, and the operation takes constant time.</p></remarks>
             <param name="from">The lower bound of the range.</param>
             <param name="fromInclusive">If true, the lower bound is inclusive--keys equal to the lower bound will
             be included in the range. If false, the lower bound is exclusive--keys equal to the lower bound will not
             be included in the range.</param>
             <param name="to">The upper bound of the range. </param>
             <param name="toInclusive">If true, the upper bound is inclusive--keys equal to the upper bound will
             be included in the range. If false, the upper bound is exclusive--keys equal to the upper bound will not
             be included in the range.</param>
             <returns>An OrderedDictionary.View of key-value pairs in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.RangeFrom(`0,System.Boolean)">
             <summary>
             Returns a collection that can be used for enumerating some of the keys and values in the collection.
             Only keys that are greater than (and optionally, equal to) <paramref name="from"/> are included.
             The keys are enumerated in sorted order. Keys equal to <paramref name="from"/> can be included
             or excluded depending on the <paramref name="fromInclusive"/> parameter.
             </summary>
            <remarks>
            <p>The sorted order of the keys is determined by the comparison instance or delegate used
             to create the dictionary.</p>
            <p>Typically, this property is used in conjunction with a foreach statement. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.RangeFrom(from, true)) {
                // process pair
             }
            </code>
            <p>Calling RangeFrom does not copy of the data in the dictionary, and the operation takes constant time.</p>
            </remarks>
             <param name="from">The lower bound of the range.</param>
             <param name="fromInclusive">If true, the lower bound is inclusive--keys equal to the lower bound will
             be included in the range. If false, the lower bound is exclusive--keys equal to the lower bound will not
             be included in the range.</param>
             <returns>An OrderedDictionary.View of key-value pairs in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.RangeTo(`0,System.Boolean)">
             <summary>
             Returns a collection that can be used for enumerating some of the keys and values in the collection.
             Only items that are less than (and optionally, equal to) <paramref name="to"/> are included.
             The items are enumerated in sorted order. Items equal to <paramref name="to"/> can be included
             or excluded depending on the <paramref name="toInclusive"/> parameter.
             </summary>
            <remarks>
            <p>The sorted order of the keys is determined by the comparison instance or delegate used
             to create the dictionary.</p>
            <p>Typically, this property is used in conjunction with a foreach statement. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.RangeFrom(from, false)) {
                // process pair
             }
            </code>
            <p>Calling RangeTo does not copy the data in the dictionary, and the operation takes constant time.</p>
            </remarks>
             <param name="to">The upper bound of the range. </param>
             <param name="toInclusive">If true, the upper bound is inclusive--keys equal to the upper bound will
             be included in the range. If false, the upper bound is exclusive--keys equal to the upper bound will not
             be included in the range.</param>
             <returns>An OrderedDictionary.View of key-value pairs in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the key (and associated value) from the collection that is equal to the passed in key. If
            no key in the dictionary is equal to the passed key, false is returned and the
            dictionary is unchanged.
            </summary>
            <remarks>Equality between keys is determined by the comparison instance or delegate used
            to create the dictionary.</remarks>
            <param name="key">The key to remove.</param>
            <returns>True if the key was found and removed. False if the key was not found.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.Clear">
            <summary>Removes all keys and values from the dictionary.</summary>
            <remarks>Clearing the dictionary takes a constant amount of time, regardless of the number of keys in it.</remarks>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.GetValueElseAdd(`0,`1@)">
            <summary>
            Finds a key in the dictionary. If the dictionary already contains
            a key equal to the passed key, then the existing value is returned via value. If the dictionary
            doesn't contain that key, then value is associated with that key.
            </summary>
            <remarks><para> between keys is determined by the comparison instance or delegate used
            to create the dictionary.</para>
            <para>This method takes time O(log N), where N is the number of keys in the dictionary. If a value is added, It is more efficient than
            calling TryGetValue followed by Add, because the dictionary is not searched twice.</para></remarks>
            <param name="key">The new key. </param>
            <param name="value">The new value to associated with that key, if the key isn't present. If the key was present,
            returns the exist value associated with that key.</param>
            <returns>True if key was already present, false if key wasn't present (and a new value was added).</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds a new key and value to the dictionary. If the dictionary already contains
            a key equal to the passed key, then an ArgumentException is thrown
            </summary>
            <remarks>
            <para>Equality between keys is determined by the comparison instance or delegate used
            to create the dictionary.</para>
            <para>Adding an key and value takes time O(log N), where N is the number of keys in the dictionary.</para></remarks>
            <param name="key">The new key. "null" is a valid key value.</param>
            <param name="value">The new value to associated with that key.</param>
            <exception cref="T:System.ArgumentException">key is already present in the dictionary</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.Replace(`0,`1)">
            <summary>
            Changes the value associated with a given key. If the dictionary does not contain
            a key equal to the passed key, then an ArgumentException is thrown.
            </summary>
            <remarks>
            <p>Unlike adding or removing an element, changing the value associated with a key
            can be performed while an enumeration (foreach) on the the dictionary is in progress.</p>
            <p>Equality between keys is determined by the comparison instance or delegate used
            to create the dictionary.</p>
            <p>Replace takes time O(log N), where N is the number of entries in the dictionary.</p></remarks>
            <param name="key">The new key. </param>
            <param name="value">The new value to associated with that key.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">key is not present in the dictionary</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.AddMany(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds multiple key-value pairs to a dictionary. If a key exists in both the current instance and dictionaryToAdd,
            then the value is updated with the value from <paramref name="keysAndValues>"/> (no exception is thrown).
            Since IDictionary&lt;TKey,TValue&gt; inherits from IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;, this
            method can be used to merge one dictionary into another.
            </summary>
            <remarks>AddMany takes time O(M log (N+M)), where M is the size of <paramref name="keysAndValues>"/>, and N is the size of
            this dictionary.</remarks>
            <param name="keysAndValues">A collection of keys and values whose contents are added to the current dictionary.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all the keys found in another collection (such as an array or List&lt;TKey&gt;). Each key in keyCollectionToRemove
            is removed from the dictionary. Keys that are not present are ignored.
            </summary>
            <remarks>RemoveMany takes time O(M log N), where M is the size of keyCollectionToRemove, and N is this
            size of this collection.</remarks>
            <returns>The number of keys removed from the dictionary.</returns>
            <param name="keyCollectionToRemove">A collection of keys to remove from the dictionary.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. The dictionary
            is not changed.
            </summary>
            <remarks>Searching the dictionary for a key takes time O(log N), where N is the number of keys in the dictionary.</remarks>
            <param name="key">The key to search for.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. If so, the value
            associated with that key is returned through the value parameter.
            </summary>
            <remarks>TryGetValue takes time O(log N), where N is the number of entries in the dictionary.</remarks>
            <param name="key">The key to search for.</param>
            <param name="value">Returns the value associated with key, if true was returned.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the entries in the dictionary. Each entry is
            returned as a KeyValuePair&lt;TKey,TValue&gt;.
            The entries are enumerated in the sorted order of the keys.
            </summary>
            <remarks>
            <p>Typically, this method is not called directly. Instead the "foreach" statement is used
            to enumerate the elements of the dictionary, which uses this method implicitly.</p>
            <p>If an element is added to or deleted from the dictionary while it is being enumerated, then
            the enumeration will end with an InvalidOperationException.</p>
            <p>Enumeration all the entries in the dictionary takes time O(N log N), where N is the number
            of entries in the dictionary.</p>
            </remarks>
            <returns>An enumerator for enumerating all the elements in the OrderedDictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.System#ICloneable#Clone">
            <summary>Implements ICloneable.Clone. Makes a shallow clone of this dictionary; i.e., if keys or values are reference types, then they are not cloned.</summary>
            <returns>The cloned dictionary.</returns>
        </member>
        <member name="P:DmFramework.Collections.OrderedDictionary`2.Comparer">
            <summary>Returns the IComparer&lt;T&gt; used to compare keys in this dictionary.</summary>
            <value>If the dictionary was created using a comparer, that comparer is returned. If the dictionary was
            created using a comparison delegate, then a comparer equivalent to that delegate
            is returned. Otherwise
            the default comparer for TKey (Comparer&lt;TKey&gt;.Default) is returned.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with a given key. When getting a value, if this
            key is not found in the collection, then an ArgumentException is thrown. When setting
            a value, the value replaces any existing value in the dictionary.
            </summary>
            <remarks>The indexer takes time O(log N), where N is the number of entries in the dictionary.</remarks>
            <value>The value associated with the key</value>
            <exception cref="T:System.ArgumentException">A value is being retrieved, and the key is not present in the dictionary.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:DmFramework.Collections.OrderedDictionary`2.Count">
            <summary>Returns the number of keys in the dictionary.</summary>
            <remarks>The size of the dictionary is returned in constant time..</remarks>
            <value>The number of keys in the dictionary.</value>
        </member>
        <member name="T:DmFramework.Collections.OrderedDictionary`2.View">
             <summary>
             The OrderedDictionary&lt;TKey,TValue&gt;.View class is used to look at a subset of the keys and values
             inside an ordered dictionary. It is returned from the Range, RangeTo, RangeFrom, and Reversed methods.
             </summary>
            <remarks>
             <p>Views are dynamic. If the underlying dictionary changes, the view changes in sync. If a change is made
             to the view, the underlying dictionary changes accordingly.</p>
            <p>Typically, this class is used in conjunction with a foreach statement to enumerate the keys
             and values in a subset of the OrderedDictionary. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Range(from, to)) {
                // process pair
             }
            </code>
            </remarks>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.View.#ctor(DmFramework.Collections.OrderedDictionary{`0,`1},DmFramework.Collections.RedBlackTree{System.Collections.Generic.KeyValuePair{`0,`1}}.RangeTester,System.Boolean,System.Boolean)">
            <summary>Initialize the View.</summary>
            <param name="myDictionary">Associated OrderedDictionary to be viewed.</param>
            <param name="rangeTester">Range tester that defines the range being used.</param>
            <param name="entireTree">If true, then rangeTester defines the entire tree.</param>
            <param name="reversed">Is the view enuemerated in reverse order?</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.View.KeyInView(`0)">
            <summary>Determine if the given key lies within the bounds of this view.</summary>
            <param name="key">Key to test.</param>
            <returns>True if the key is within the bounds of this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.View.GetEnumerator">
            <summary>Enumerate all the keys and values in this view.</summary>
            <returns>An IEnumerator of KeyValuePairs with the keys and views in this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.View.ContainsKey(`0)">
            <summary>Tests if the key is present in the part of the dictionary being viewed.</summary>
            <param name="key">Key to check for.</param>
            <returns>True if the key is within this view. </returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.View.TryGetValue(`0,`1@)">
            <summary>
            Determines if this view contains a key equal to <paramref name="key"/>. If so, the value
            associated with that key is returned through the value parameter.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="value">Returns the value associated with key, if true was returned.</param>
            <returns>True if the key is within this view. </returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.View.Remove(`0)">
            <summary>
            Removes the key (and associated value) from the underlying dictionary of this view. that is equal to the passed in key. If
            no key in the view is equal to the passed key, the dictionary and view are unchanged.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the key was found and removed. False if the key was not found.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.View.Clear">
            <summary>Removes all the keys and values within this view from the underlying OrderedDictionary.</summary>
            <example>The following removes all the keys that start with "A" from an OrderedDictionary.
            <code>
            dictionary.Range("A", "B").Clear();
            </code>
            </example>
        </member>
        <member name="M:DmFramework.Collections.OrderedDictionary`2.View.Reversed">
            <summary>Creates a new View that has the same keys and values as this, in the reversed order.</summary>
            <returns>A new View that has the reversed order of this view.</returns>
        </member>
        <member name="P:DmFramework.Collections.OrderedDictionary`2.View.Count">
            <summary>Number of keys in this view.</summary>
            <value>Number of keys that lie within the bounds the view.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedDictionary`2.View.Item(`0)">
            <summary>
            Gets or sets the value associated with a given key. When getting a value, if this
            key is not found in the collection, then an ArgumentException is thrown. When setting
            a value, the value replaces any existing value in the dictionary. When setting a value, the
            key must be within the range of keys being viewed.
            </summary>
            <value>The value associated with the key.</value>
            <exception cref="T:System.ArgumentException">A value is being retrieved, and the key is not present in the dictionary,
            or a value is being set, and the key is outside the range of keys being viewed by this View.</exception>
        </member>
        <member name="T:DmFramework.Collections.OrderedMultiDictionary`2">
             <summary>
             <para>The OrderedMultiDictionary class that associates values with a key. Unlike an OrderedDictionary,
             each key can have multiple values associated with it. When indexing an OrderedMultidictionary, instead
             of a single value associated with a key, you retrieve an enumeration of values.</para>
             <para>All of the key are stored in sorted order. Also, the values associated with a given key
             are kept in sorted order as well.</para>
             <para>When constructed, you can chose to allow the same value to be associated with a key multiple
             times, or only one time. </para>
             </summary>
             <typeparam name="TKey">The type of the keys.</typeparam>
             <typeparam name="TValue">The of values associated with the keys.</typeparam>
            <seealso cref="T:DmFramework.Collections.MultiDictionary`2"/>
            <seealso cref="T:DmFramework.Collections.OrderedDictionary`2"/>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.NewPair(`0,`1)">
            <summary>Helper function to create a new KeyValuePair struct.</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.KeyRange(`0)">
            <summary>
            Get a RangeTester that maps to the range of all items with the
            given key.
            </summary>
            <param name="key">Key in the given range.</param>
            <returns>A RangeTester delegate that selects the range of items with that range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.DoubleBoundedKeyRangeTester(`0,System.Boolean,`0,System.Boolean)">
            <summary>Gets a range tester that defines a range by first and last items.</summary>
            <param name="first">The lower bound.</param>
            <param name="firstInclusive">True if the lower bound is inclusive, false if exclusive.</param>
            <param name="last">The upper bound.</param>
            <param name="lastInclusive">True if the upper bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for a key in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.LowerBoundedKeyRangeTester(`0,System.Boolean)">
            <summary>Gets a range tester that defines a range by a lower bound.</summary>
            <param name="first">The lower bound.</param>
            <param name="inclusive">True if the lower bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for a key in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.UpperBoundedKeyRangeTester(`0,System.Boolean)">
            <summary>Gets a range tester that defines a range by upper bound.</summary>
            <param name="last">The upper bound.</param>
            <param name="inclusive">True if the upper bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for a key in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean)">
            <summary>
            Create a new OrderedMultiDictionary. The default ordering of keys and values are used. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <remarks>The default ordering of keys and values will be used, as defined by TKey and TValue's implementation
            of IComparable&lt;T&gt; (or IComparable if IComparable&lt;T&gt; is not implemented). If a different ordering should be
            used, other constructors allow a custom Comparer or IComparer to be passed to changed the ordering.</remarks>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <exception cref="T:System.InvalidOperationException">TKey or TValue does not implement either IComparable&lt;T&gt; or IComparable.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Comparison{`0})">
            <summary>
            Create a new OrderedMultiDictionary. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyComparison">A delegate to a method that will be used to compare keys.</param>
            <exception cref="T:System.InvalidOperationException">TValue does not implement either IComparable&lt;TValue&gt; or IComparable.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Comparison{`0},System.Comparison{`1})">
            <summary>
            Create a new OrderedMultiDictionary. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyComparison">A delegate to a method that will be used to compare keys.</param>
            <param name="valueComparison">A delegate to a method that will be used to compare values.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a new OrderedMultiDictionary. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyComparer">An IComparer&lt;TKey&gt; instance that will be used to compare keys.</param>
            <exception cref="T:System.InvalidOperationException">TValue does not implement either IComparable&lt;TValue&gt; or IComparable.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IComparer{`1})">
            <summary>
            Create a new OrderedMultiDictionary. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyComparer">An IComparer&lt;TKey&gt; instance that will be used to compare keys.</param>
            <param name="valueComparer">An IComparer&lt;TValue&gt; instance that will be used to compare values.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Int32,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IComparer{`1},System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}},DmFramework.Collections.RedBlackTree{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Create a new OrderedMultiDictionary. Used internally for cloning.</summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyCount">Number of keys.</param>
            <param name="keyComparer">An IComparer&lt;TKey&gt; instance that will be used to compare keys.</param>
            <param name="valueComparer">An IComparer&lt;TValue&gt; instance that will be used to compare values.</param>
            <param name="comparer">Comparer of key-value pairs.</param>
            <param name="tree">The red-black tree used to store the data.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.Add(`0,`1)">
            <summary>
            <para>Adds a new value to be associated with a key. If duplicate values are permitted, this
            method always adds a new key-value pair to the dictionary.</para>
            <para>If duplicate values are not permitted, and <paramref name="key"/> already has a value
            equal to <paramref name="value"/> associated with it, then that value is replaced with <paramref name="value"/>,
            and the number of values associate with <paramref name="key"/> is unchanged.</para>
            </summary>
            <param name="key">The key to associate with.</param>
            <param name="value">The value to associated with <paramref name="key"/>.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a given value from the values associated with a key. If the
            last value is removed from a key, the key is removed also.
            </summary>
            <param name="key">A key to remove a value from.</param>
            <param name="value">The value to remove.</param>
            <returns>True if <paramref name="value"/> was associated with <paramref name="key"/> (and was
            therefore removed). False if <paramref name="value"/> was not associated with <paramref name="key"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.Remove(`0)">
            <summary>
            Removes a key and all associated values from the dictionary. If the
            key is not present in the dictionary, it is unchanged and false is returned.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the key was present and was removed. Returns
            false if the key was not present.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.Clear">
            <summary>Removes all keys and values from the dictionary.</summary>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.EqualValues(`1,`1)">
            <summary>Determine if two values are equal.</summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.Contains(`0,`1)">
            <summary>
            Checks to see if <paramref name="value"/> is associated with <paramref name="key"/>
            in the dictionary.
            </summary>
            <param name="key">The key to check.</param>
            <param name="value">The value to check.</param>
            <returns>True if <paramref name="value"/> is associated with <paramref name="key"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.ContainsKey(`0)">
            <summary>
            Checks to see if the key is present in the dictionary and has
            at least one value associated with it.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if <paramref name="key"/> is present and has at least
            one value associated with it. Returns false otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.EnumerateKeys(DmFramework.Collections.RedBlackTree{System.Collections.Generic.KeyValuePair{`0,`1}}.RangeTester,System.Boolean)">
            <summary>
            A private helper method that returns an enumerable that
            enumerates all the keys in a range.
            </summary>
            <param name="rangeTester">Defines the range to enumerate.</param>
            <param name="reversed">Should the keys be enumerated in reverse order?</param>
            <returns>An IEnumerable&lt;TKey&gt; that enumerates the keys in the given range.
            in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.EnumerateValuesForKey(`0)">
            <summary>
            A private helper method for the indexer to return an enumerable that
            enumerates all the values for a key. This is separate method because indexers
            can't use the yield return construct.
            </summary>
            <param name="key"></param>
            <returns>An IEnumerable&lt;TValue&gt; that can be used to enumerate all the
            values associated with <paramref name="key"/>. If <paramref name="key"/> is not present,
            an enumerable that enumerates no items is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. If so, all the values
            associated with that key are returned through the values parameter.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="values">Returns all values associated with key, if true was returned.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.EnumerateKeys">
            <summary>Enumerate all of the keys in the dictionary.</summary>
            <returns>An IEnumerator&lt;TKey&gt; of all of the keys in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.CountValues(`0)">
            <summary>Gets the number of values associated with a given key.</summary>
            <param name="key">The key to count values of.</param>
            <returns>The number of values associated with <paramref name="key"/>. If <paramref name="key"/>
            is not present in the dictionary, zero is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.CountAllValues">
            <summary>Gets a total count of values in the collection.</summary>
            <returns>The total number of values associated with all keys in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.Clone">
            <summary>
            Makes a shallow clone of this dictionary; i.e., if keys or values of the
            dictionary are reference types, then they are not cloned. If TKey or TValue is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the dictionary takes time O(N), where N is the number of key-value pairs in the dictionary.</remarks>
            <returns>The cloned dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.System#ICloneable#Clone">
            <summary>Implements ICloneable.Clone. Makes a shallow clone of this dictionary; i.e., if keys or values are reference types, then they are not cloned.</summary>
            <returns>The cloned dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.NonCloneableType(System.Type)">
            <summary>Throw an InvalidOperationException indicating that this type is not cloneable.</summary>
            <param name="t">Type to test.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.CloneContents">
            <summary>
            Makes a deep clone of this dictionary. A new dictionary is created with a clone of
            each entry of this dictionary, by calling ICloneable.Clone on each element. If TKey or TValue is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If TKey or TValue is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the dictionary takes time O(N log N), where N is the number of key-value pairs in the dictionary.</para></remarks>
            <returns>The cloned dictionary.</returns>
            <exception cref="T:System.InvalidOperationException">TKey or TValue is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.Reversed">
             <summary>
             Returns a View collection that can be used for enumerating the keys and values in the collection in
             reversed order.
             </summary>
            <remarks>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Reversed()) {
                // process pair
             }
            </code></p>
             <p>If an entry is added to or deleted from the dictionary while the View is being enumerated, then
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling Reverse does not copy the data in the dictionary, and the operation takes constant time.</p>
            </remarks>
             <returns>An OrderedDictionary.View of key-value pairs in reverse order.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.Range(`0,System.Boolean,`0,System.Boolean)">
             <summary>
             Returns a collection that can be used for enumerating some of the keys and values in the collection.
             Only keys that are greater than <paramref name="from"/> and
             less than <paramref name="to"/> are included. The keys are enumerated in sorted order.
             Keys equal to the end points of the range can be included or excluded depending on the
             <paramref name="fromInclusive"/> and <paramref name="toInclusive"/> parameters.
             </summary>
            <remarks>
            <p>If <paramref name="from"/> is greater than or equal to <paramref name="to"/>, the returned collection is empty. </p>
            <p>The sorted order of the keys is determined by the comparison instance or delegate used
             to create the dictionary.</p>
            <p>Typically, this property is used in conjunction with a foreach statement. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Range(from, true, to, false)) {
                // process pair
             }
            </code>
            <p>Calling Range does not copy the data in the dictionary, and the operation takes constant time.</p></remarks>
             <param name="from">The lower bound of the range.</param>
             <param name="fromInclusive">If true, the lower bound is inclusive--keys equal to the lower bound will
             be included in the range. If false, the lower bound is exclusive--keys equal to the lower bound will not
             be included in the range.</param>
             <param name="to">The upper bound of the range. </param>
             <param name="toInclusive">If true, the upper bound is inclusive--keys equal to the upper bound will
             be included in the range. If false, the upper bound is exclusive--keys equal to the upper bound will not
             be included in the range.</param>
             <returns>An OrderedMultiDictionary.View of key-value pairs in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.RangeFrom(`0,System.Boolean)">
             <summary>
             Returns a collection that can be used for enumerating some of the keys and values in the collection.
             Only keys that are greater than (and optionally, equal to) <paramref name="from"/> are included.
             The keys are enumerated in sorted order. Keys equal to <paramref name="from"/> can be included
             or excluded depending on the <paramref name="fromInclusive"/> parameter.
             </summary>
            <remarks>
            <p>The sorted order of the keys is determined by the comparison instance or delegate used
             to create the dictionary.</p>
            <p>Typically, this property is used in conjunction with a foreach statement. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.RangeFrom(from, true)) {
                // process pair
             }
            </code>
            <p>Calling RangeFrom does not copy of the data in the dictionary, and the operation takes constant time.</p>
            </remarks>
             <param name="from">The lower bound of the range.</param>
             <param name="fromInclusive">If true, the lower bound is inclusive--keys equal to the lower bound will
             be included in the range. If false, the lower bound is exclusive--keys equal to the lower bound will not
             be included in the range.</param>
             <returns>An OrderedMultiDictionary.View of key-value pairs in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.RangeTo(`0,System.Boolean)">
             <summary>
             Returns a collection that can be used for enumerating some of the keys and values in the collection.
             Only items that are less than (and optionally, equal to) <paramref name="to"/> are included.
             The items are enumerated in sorted order. Items equal to <paramref name="to"/> can be included
             or excluded depending on the <paramref name="toInclusive"/> parameter.
             </summary>
            <remarks>
            <p>The sorted order of the keys is determined by the comparison instance or delegate used
             to create the dictionary.</p>
            <p>Typically, this property is used in conjunction with a foreach statement. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.RangeFrom(from, false)) {
                // process pair
             }
            </code>
            <p>Calling RangeTo does not copy the data in the dictionary, and the operation takes constant time.</p>
            </remarks>
             <param name="to">The upper bound of the range. </param>
             <param name="toInclusive">If true, the upper bound is inclusive--keys equal to the upper bound will
             be included in the range. If false, the upper bound is exclusive--keys equal to the upper bound will not
             be included in the range.</param>
             <returns>An OrderedMultiDictionary.View of key-value pairs in the given range.</returns>
        </member>
        <member name="P:DmFramework.Collections.OrderedMultiDictionary`2.KeyComparer">
            <summary>Returns the IComparer&lt;T&gt; used to compare keys in this dictionary.</summary>
            <value>If the dictionary was created using a comparer, that comparer is returned. If the dictionary was
            created using a comparison delegate, then a comparer equivalent to that delegate
            is returned. Otherwise
            the default comparer for TKey (Comparer&lt;TKey&gt;.Default) is returned.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedMultiDictionary`2.ValueComparer">
            <summary>Returns the IComparer&lt;T&gt; used to compare values in this dictionary.</summary>
            <value>If the dictionary was created using a comparer, that comparer is returned. If the dictionary was
            created using a comparison delegate, then a comparer equivalent to that delegate
            is returned. Otherwise
            the default comparer for TValue (Comparer&lt;TValue&gt;.Default) is returned.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedMultiDictionary`2.Count">
            <summary>
            Gets the number of key-value pairs in the dictionary. Each value associated
            with a given key is counted. If duplicate values are permitted, each duplicate
            value is included in the count.
            </summary>
            <value>The number of key-value pairs in the dictionary.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedMultiDictionary`2.KeyValuePairs">
            <summary>
            Gets a read-only collection of all key-value pairs in the dictionary. If a key has multiple
            values associated with it, then a key-value pair is present for each value associated
            with the key.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.OrderedMultiDictionary`2.KeyValuePairsCollection">
            <summary>
            A private class that implements ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt; and ICollection for the
            KeyValuePairs collection. The collection is read-only.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.OrderedMultiDictionary`2.View">
             <summary>
             The OrderedMultiDictionary&lt;TKey,TValue&gt;.View class is used to look at a subset of the keys and values
             inside an ordered multi-dictionary. It is returned from the Range, RangeTo, RangeFrom, and Reversed methods.
             </summary>
            <remarks>
             <p>Views are dynamic. If the underlying dictionary changes, the view changes in sync. If a change is made
             to the view, the underlying dictionary changes accordingly.</p>
            <p>Typically, this class is used in conjunction with a foreach statement to enumerate the keys
             and values in a subset of the OrderedMultiDictionary. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Range(from, to)) {
                // process pair
             }
            </code>
            </remarks>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.#ctor(DmFramework.Collections.OrderedMultiDictionary{`0,`1},DmFramework.Collections.RedBlackTree{System.Collections.Generic.KeyValuePair{`0,`1}}.RangeTester,System.Boolean,System.Boolean)">
            <summary>Initialize the View.</summary>
            <param name="myDictionary">Associated OrderedMultiDictionary to be viewed.</param>
            <param name="rangeTester">Range tester that defines the range being used.</param>
            <param name="entireTree">If true, then rangeTester defines the entire tree.</param>
            <param name="reversed">Is the view enuemerated in reverse order?</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.KeyInView(`0)">
            <summary>Determine if the given key lies within the bounds of this view.</summary>
            <param name="key">Key to test.</param>
            <returns>True if the key is within the bounds of this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.EnumerateKeys">
            <summary>Enumerate all the keys in the dictionary.</summary>
            <returns>An IEnumerator&lt;TKey&gt; that enumerates all of the keys in the collection that
            have at least one value associated with them.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            Enumerate all of the values associated with a given key. If the key exists and has values associated with it, an enumerator for those
            values is returned throught <paramref name="values"/>. If the key does not exist, false is returned.
            </summary>
            <param name="key">The key to get values for.</param>
            <param name="values">If true is returned, this parameter receives an enumerators that
            enumerates the values associated with that key.</param>
            <returns>True if the key exists and has values associated with it. False otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.ContainsKey(`0)">
            <summary>Tests if the key is present in the part of the dictionary being viewed.</summary>
            <param name="key">Key to check</param>
            <returns>True if the key is within this view. </returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.Contains(`0,`1)">
            <summary>Tests if the key-value pair is present in the part of the dictionary being viewed.</summary>
            <param name="key">Key to check for.</param>
            <param name="value">Value to check for.</param>
            <returns>True if the key-value pair is within this view. </returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.CountValues(`0)">
            <summary>Gets the number of values associated with a given key.</summary>
            <param name="key">The key to count values of.</param>
            <returns>The number of values associated with <paramref name="key"/>. If <paramref name="key"/>
            is not present in this view, zero is returned.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.Add(`0,`1)">
            <summary>
            Adds the given key-value pair to the underlying dictionary of this view.
            If <paramref name="key"/> is not within the range of this view, an
            ArgumentException is thrown.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not
            within the range of this view.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.Remove(`0)">
            <summary>
            Removes the key (and associated value) from the underlying dictionary of this view. If
            no key in the view is equal to the passed key, the dictionary and view are unchanged.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the key was found and removed. False if the key was not found.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.Remove(`0,`1)">
            <summary>
            Removes the key and value from the underlying dictionary of this view. that is equal to the passed in key. If
            no key in the view is equal to the passed key, or has the given value associated with it, the dictionary and view are unchanged.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="value">The value to remove.</param>
            <returns>True if the key-value pair was found and removed. False if the key-value pair was not found.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.Clear">
            <summary>Removes all the keys and values within this view from the underlying OrderedMultiDictionary.</summary>
            <example>The following removes all the keys that start with "A" from an OrderedMultiDictionary.
            <code>
            dictionary.Range("A", "B").Clear();
            </code>
            </example>
        </member>
        <member name="M:DmFramework.Collections.OrderedMultiDictionary`2.View.Reversed">
            <summary>Creates a new View that has the same keys and values as this, in the reversed order.</summary>
            <returns>A new View that has the reversed order of this view.</returns>
        </member>
        <member name="P:DmFramework.Collections.OrderedMultiDictionary`2.View.Count">
            <summary>Number of keys in this view.</summary>
            <value>Number of keys that lie within the bounds the view.</value>
        </member>
        <member name="T:DmFramework.Collections.OrderedSet`1">
             <summary>
             OrderedSet&lt;T&gt; is a collection that contains items of type T.
             The item are maintained in a sorted order, and duplicate items are not allowed. Each item has
             an index in the set: the smallest item has index 0, the next smallest item has index 1,
             and so forth.
             </summary>
             <remarks>
             <p>The items are compared in one of three ways. If T implements IComparable&lt;TKey&gt; or IComparable,
             then the CompareTo method of that interface will be used to compare items. Alternatively, a comparison
             function can be passed in either as a delegate, or as an instance of IComparer&lt;TKey&gt;.</p>
             <p>OrderedSet is implemented as a balanced binary tree. Inserting, deleting, and looking up an
             an element all are done in log(N) type, where N is the number of keys in the tree.</p>
             <p><see cref="T:DmFramework.Collections.Set`1"/> is similar, but uses hashing instead of comparison, and does not maintain
             the items in sorted order.</p>
            </remarks>
            <seealso cref="T:DmFramework.Collections.Set`1"/>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.#ctor">
             <summary>
             Creates a new OrderedSet. The T must implement IComparable&lt;T&gt;
             or IComparable.
             The CompareTo method of this interface will be used to compare items in this set.
             </summary>
            <remarks>
             Items that are null are permitted, and will be sorted before all other items.
            </remarks>
             <exception cref="T:System.InvalidOperationException">T does not implement IComparable&lt;TKey&gt;.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.#ctor(System.Comparison{`0})">
            <summary>Creates a new OrderedSet. The passed delegate will be used to compare items in this set.</summary>
            <param name="comparison">A delegate to a method that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new OrderedSet. The Compare method of the passed comparison object
            will be used to compare items in this set.
            </summary>
            <remarks>
            The GetHashCode and Equals methods of the provided IComparer&lt;T&gt; will never
            be called, and need not be implemented.
            </remarks>
            <param name="comparer">An instance of IComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Creates a new OrderedSet. The T must implement IComparable&lt;T&gt;
             or IComparable.
             The CompareTo method of this interface will be used to compare items in this set. The set is
             initialized with all the items in the given collection.
             </summary>
            <remarks>
             Items that are null are permitted, and will be sorted before all other items.
            </remarks>
             <param name="collection">A collection with items to be placed into the OrderedSet.</param>
             <exception cref="T:System.InvalidOperationException">T does not implement IComparable&lt;TKey&gt;.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{`0})">
            <summary>
            Creates a new OrderedSet. The passed delegate will be used to compare items in this set.
            The set is initialized with all the items in the given collection.
            </summary>
            <param name="collection">A collection with items to be placed into the OrderedSet.</param>
            <param name="comparison">A delegate to a method that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new OrderedSet. The Compare method of the passed comparison object
            will be used to compare items in this set. The set is
            initialized with all the items in the given collection.
            </summary>
            <remarks>
            The GetHashCode and Equals methods of the provided IComparer&lt;T&gt; will never
            be called, and need not be implemented.
            </remarks>
            <param name="collection">A collection with items to be placed into the OrderedSet.</param>
            <param name="comparer">An instance of IComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.#ctor(System.Collections.Generic.IComparer{`0},DmFramework.Collections.RedBlackTree{`0})">
            <summary>
            Creates a new OrderedSet given a comparer and a tree that contains the data. Used
            internally for Clone.
            </summary>
            <param name="comparer">Comparer for the set.</param>
            <param name="tree">Data for the set.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.System#ICloneable#Clone">
            <summary>
            Makes a shallow clone of this set; i.e., if items of the
            set are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the set takes time O(N), where N is the number of items in the set.</remarks>
            <returns>The cloned set.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.Clone">
            <summary>
            Makes a shallow clone of this set; i.e., if items of the
            set are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the set takes time O(N), where N is the number of items in the set.</remarks>
            <returns>The cloned set.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.CloneContents">
            <summary>
            Makes a deep clone of this set. A new set is created with a clone of
            each element of this set, by calling ICloneable.Clone on each element. If T is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If T is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the set takes time O(N log N), where N is the number of items in the set.</para></remarks>
            <returns>The cloned set.</returns>
            <exception cref="T:System.InvalidOperationException">T is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the items in the set.
            The items are enumerated in sorted order.
            </summary>
            <remarks>
            <p>Typically, this method is not called directly. Instead the "foreach" statement is used
            to enumerate the items, which uses this method implicitly.</p>
            <p>If an item is added to or deleted from the set while it is being enumerated, then
            the enumeration will end with an InvalidOperationException.</p>
            <p>Enumeration all the items in the set takes time O(N log N), where N is the number
            of items in the set.</p>
            </remarks>
            <returns>An enumerator for enumerating all the items in the OrderedSet.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.Contains(`0)">
            <summary>
            Determines if this set contains an item equal to <paramref name="item"/>. The set
            is not changed.
            </summary>
            <remarks>Searching the set for an item takes time O(log N), where N is the number of items in the set.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the set contains <paramref name="item"/>. False if the set does not contain <paramref name="item"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.TryGetItem(`0,`0@)">
            <summary>
            <para>Determines if this set contains an item equal to <paramref name="item"/>, according to the
            comparison mechanism that was used when the set was created. The set
            is not changed.</para>
            <para>If the set does contain an item equal to <paramref name="item"/>, then the item from the set is returned.</para>
            </summary>
            <remarks>Searching the set for an item takes time O(log N), where N is the number of items in the set.</remarks>
            <example>
            In the following example, the set contains strings which are compared in a case-insensitive manner.
            <code>
            OrderedSet&lt;String&gt; set = new OrderedSet&lt;String&gt;(StringComparer.CurrentCultureIgnoreCase);
            set.Add("HELLO");
            String s;
            Boolean b = set.TryGetItem("Hello", out s);   // b receives true, s receives "HELLO".
            </code>
            </example>
            <param name="item">The item to search for.</param>
            <param name="foundItem">Returns the item from the set that was equal to <paramref name="item"/>.</param>
            <returns>True if the set contains <paramref name="item"/>. False if the set does not contain <paramref name="item"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.IndexOf(`0)">
            <summary>
            Get the index of the given item in the sorted order. The smallest item has index 0,
            the next smallest item has index 1, and the largest item has index Count-1.
            </summary>
            <remarks>Finding the index takes time O(log N), which N is the number of items in
            the set.</remarks>
            <param name="item">The item to get the index of.</param>
            <returns>The index of the item in the sorted set, or -1 if the item is not present
            in the set.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.Add(`0)">
            <summary>
            Adds a new item to the set. If the set already contains an item equal to
            <paramref name="item"/>, that item is replaced with <paramref name="item"/>.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding an item takes time O(log N), where N is the number of items in the set.</para></remarks>
            <param name="item">The item to add to the set.</param>
            <returns>True if the set already contained an item equal to <paramref name="item"/> (which was replaced), false
            otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds a new item to the set. If the set already contains an item equal to
            <paramref name="item"/>, that item is replaces with <paramref name="item"/>.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding an item takes time O(log N), where N is the number of items in the set.</para></remarks>
            <param name="item">The item to add to the set.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all the items in <paramref name="collection"/> to the set. If the set already contains an item equal to
            one of the items in <paramref name="collection"/>, that item will be replaced.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding the collection takes time O(M log N), where N is the number of items in the set, and M is the
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to add to the set.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.Remove(`0)">
            <summary>
            Searches the set for an item equal to <paramref name="item"/>, and if found,
            removes it from the set. If not found, the set is unchanged.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Removing an item from the set takes time O(log N), where N is the number of items in the set.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>True if <paramref name="item"/> was found and removed. False if <paramref name="item"/> was not in the set.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all the items in <paramref name="collection"/> from the set. Items
            not present in the set are ignored.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Removing the collection takes time O(M log N), where N is the number of items in the set, and M is the
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to remove from the set.</param>
            <returns>The number of items removed from the set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.Clear">
            <summary>Removes all items from the set.</summary>
            <remarks>Clearing the sets takes a constant amount of time, regardless of the number of items in it.</remarks>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.CheckEmpty">
            <summary>If the collection is empty, throw an invalid operation exception.</summary>
            <exception cref="T:System.InvalidOperationException">The set is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.GetFirst">
            <summary>
            Returns the first item in the set: the item
            that would appear first if the set was enumerated. This is also
            the smallest item in the set.
            </summary>
            <remarks>GetFirst() takes time O(log N), where N is the number of items in the set.</remarks>
            <returns>The first item in the set. </returns>
            <exception cref="T:System.InvalidOperationException">The set is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.GetLast">
            <summary>
            Returns the lastl item in the set: the item
            that would appear last if the set was enumerated. This is also the
            largest item in the set.
            </summary>
            <remarks>GetLast() takes time O(log N), where N is the number of items in the set.</remarks>
            <returns>The lastl item in the set. </returns>
            <exception cref="T:System.InvalidOperationException">The set is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.RemoveFirst">
            <summary>Removes the first item in the set. This is also the smallest item in the set.</summary>
            <remarks>RemoveFirst() takes time O(log N), where N is the number of items in the set.</remarks>
            <returns>The item that was removed, which was the smallest item in the set. </returns>
            <exception cref="T:System.InvalidOperationException">The set is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.RemoveLast">
            <summary>Removes the last item in the set. This is also the largest item in the set.</summary>
            <remarks>RemoveLast() takes time O(log N), where N is the number of items in the set.</remarks>
            <returns>The item that was removed, which was the largest item in the set. </returns>
            <exception cref="T:System.InvalidOperationException">The set is empty.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.CheckConsistentComparison(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Check that this set and another set were created with the same comparison
            mechanism. Throws exception if not compatible.
            </summary>
            <param name="otherSet">Other set to check comparision mechanism.</param>
            <exception cref="T:System.InvalidOperationException">If otherSet and this set don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.IsSupersetOf(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Determines if this set is a superset of another set. Neither set is modified.
            This set is a superset of <paramref name="otherSet"/> if every element in
            <paramref name="otherSet"/> is also in this set.
            <remarks>IsSupersetOf is computed in time O(M log N), where M is the size of the
            <paramref name="otherSet"/>, and N is the size of the this set.</remarks>
            </summary>
            <param name="otherSet">OrderedSet to compare to.</param>
            <returns>True if this is a superset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.IsProperSupersetOf(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Determines if this set is a proper superset of another set. Neither set is modified.
            This set is a proper superset of <paramref name="otherSet"/> if every element in
            <paramref name="otherSet"/> is also in this set.
            Additionally, this set must have strictly more items than <paramref name="otherSet"/>.
            </summary>
            <remarks>IsProperSupersetOf is computed in time O(M log N), where M is the number of unique items in
            <paramref name="otherSet"/>.</remarks>
            <param name="otherSet">OrderedSet to compare to.</param>
            <returns>True if this is a proper superset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.IsSubsetOf(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Determines if this set is a subset of another set. Neither set is modified.
            This set is a subset of <paramref name="otherSet"/> if every element in this set
            is also in <paramref name="otherSet"/>.
            </summary>
            <remarks>IsSubsetOf is computed in time O(N log M), where M is the size of the
            <paramref name="otherSet"/>, and N is the size of the this set.</remarks>
            <param name="otherSet">Set to compare to.</param>
            <returns>True if this is a subset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.IsProperSubsetOf(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Determines if this set is a proper subset of another set. Neither set is modified.
            This set is a subset of <paramref name="otherSet"/> if every element in this set
            is also in <paramref name="otherSet"/>. Additionally, this set must have strictly
            fewer items than <paramref name="otherSet"/>.
            </summary>
            <remarks>IsSubsetOf is computed in time O(N log M), where M is the size of the
            <paramref name="otherSet"/>, and N is the size of the this set.</remarks>
            <param name="otherSet">Set to compare to.</param>
            <returns>True if this is a proper subset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.IsEqualTo(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Determines if this set is equal to another set. This set is equal to
            <paramref name="otherSet"/> if they contain the same items.
            </summary>
            <remarks>IsEqualTo is computed in time O(N), where N is the number of items in
            this set.</remarks>
            <param name="otherSet">Set to compare to</param>
            <returns>True if this set is equal to <paramref name="otherSet"/>, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.UnionWith(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Computes the union of this set with another set. The union of two sets
            is all items that appear in either or both of the sets. This set receives
            the union of the two sets, the other set is unchanged.
            </summary>
            <remarks>
            <para>If equal items appear in both sets, the union will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The union of two sets is computed in time O(M + N log M), where M is the size of the
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to union with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.IsDisjointFrom(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Determines if this set is disjoint from another set. Two sets are disjoint
            if no item from one set is equal to any item in the other set.
            </summary>
            <remarks>
            <para>The answer is computed in time O(N log M), where M is the size of the
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to check disjointness with.</param>
            <returns>True if the two sets are disjoint, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.Union(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Computes the union of this set with another set. The union of two sets
            is all items that appear in either or both of the sets. A new set is
            created with the union of the sets and is returned. This set and the other set
            are unchanged.
            </summary>
            <remarks>
            <para>If equal items appear in both sets, the union will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The union of two sets is computed in time O(M + N log M), where M is the size of the
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to union with.</param>
            <returns>The union of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.IntersectionWith(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Computes the intersection of this set with another set. The intersection of two sets
            is all items that appear in both of the sets. This set receives
            the intersection of the two sets, the other set is unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both sets, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two sets is computed in time O(N log M), where M is the size of the
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to intersection with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.Intersection(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Computes the intersection of this set with another set. The intersection of two sets
            is all items that appear in both of the sets. A new set is
            created with the intersection of the sets and is returned. This set and the other set
            are unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both sets, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two sets is computed in time O(N log M), where M is the size of the
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to intersection with.</param>
            <returns>The intersection of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.DifferenceWith(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Computes the difference of this set with another set. The difference of these two sets
            is all items that appear in this set, but not in <paramref name="otherSet"/>. This set receives
            the difference of the two sets; the other set is unchanged.
            </summary>
            <remarks>
            <para>The difference of two sets is computed in time O(M + N log M), where M is the size of the
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to difference with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.Difference(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Computes the difference of this set with another set. The difference of these two sets
            is all items that appear in this set, but not in <paramref name="otherSet"/>. A new set is
            created with the difference of the sets and is returned. This set and the other set
            are unchanged.
            </summary>
            <remarks>
            <para>The difference of two sets is computed in time O(M + N log M), where M is the size of the
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to difference with.</param>
            <returns>The difference of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.SymmetricDifferenceWith(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Computes the symmetric difference of this set with another set. The symmetric difference of two sets
            is all items that appear in either of the sets, but not both. This set receives
            the symmetric difference of the two sets; the other set is unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two sets is computed in time O(M + N log M), where M is the size of the
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to symmetric difference with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.SymmetricDifference(DmFramework.Collections.OrderedSet{`0})">
            <summary>
            Computes the symmetric difference of this set with another set. The symmetric difference of two sets
            is all items that appear in either of the sets, but not both. A new set is
            created with the symmetric difference of the sets and is returned. This set and the other set
            are unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two sets is computed in time O(M + N log M), where M is the size of the
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to symmetric difference with.</param>
            <returns>The symmetric difference of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.AsList">
            <summary>
            Get a read-only list view of the items in this ordered set. The
            items in the list are in sorted order, with the smallest item
            at index 0. This view does not copy any data, and reflects any
            changes to the underlying OrderedSet.
            </summary>
            <returns>A read-only IList&lt;T&gt; view onto this OrderedSet.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.Reversed">
             <summary>
             Returns a View collection that can be used for enumerating the items in the set in
             reversed order.
             </summary>
            <remarks>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(T item in set.Reversed()) {
                // process item
             }
            </code></p>
             <p>If an item is added to or deleted from the set while the View is being enumerated, then
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling Reverse does not copy the data in the tree, and the operation takes constant time.</p>
            </remarks>
             <returns>An OrderedSet.View of items in reverse order.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.Range(`0,System.Boolean,`0,System.Boolean)">
             <summary>
             Returns a View collection that can be used for enumerating a range of the items in the set..
             Only items that are greater than <paramref name="from"/> and
             less than <paramref name="to"/> are included. The items are enumerated in sorted order.
             Items equal to the end points of the range can be included or excluded depending on the
             <paramref name="fromInclusive"/> and <paramref name="toInclusive"/> parameters.
             </summary>
            <remarks>
            <p>If <paramref name="from"/> is greater than <paramref name="to"/>, the returned collection is empty. </p>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(T item in set.Range(from, true, to, false)) {
                // process item
             }
            </code></p>
             <p>If an item is added to or deleted from the set while the View is being enumerated, then
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling Range does not copy the data in the tree, and the operation takes constant time.</p>
            </remarks>
             <param name="from">The lower bound of the range.</param>
             <param name="fromInclusive">If true, the lower bound is inclusive--items equal to the lower bound will
             be included in the range. If false, the lower bound is exclusive--items equal to the lower bound will not
             be included in the range.</param>
             <param name="to">The upper bound of the range. </param>
             <param name="toInclusive">If true, the upper bound is inclusive--items equal to the upper bound will
             be included in the range. If false, the upper bound is exclusive--items equal to the upper bound will not
             be included in the range.</param>
             <returns>An OrderedSet.View of items in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.RangeFrom(`0,System.Boolean)">
             <summary>
             Returns a View collection that can be used for enumerating a range of the items in the set..
             Only items that are greater than (and optionally, equal to) <paramref name="from"/> are included.
             The items are enumerated in sorted order. Items equal to <paramref name="from"/> can be included
             or excluded depending on the <paramref name="fromInclusive"/> parameter.
             </summary>
            <remarks>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(T item in set.RangeFrom(from, true)) {
                // process item
             }
            </code></p>
             <p>If an item is added to or deleted from the set while the View is being enumerated, then
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling RangeFrom does not copy the data in the tree, and the operation takes constant time.</p>
            </remarks>
             <param name="from">The lower bound of the range.</param>
             <param name="fromInclusive">If true, the lower bound is inclusive--items equal to the lower bound will
             be included in the range. If false, the lower bound is exclusive--items equal to the lower bound will not
             be included in the range.</param>
             <returns>An OrderedSet.View of items in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.RangeTo(`0,System.Boolean)">
             <summary>
             Returns a View collection that can be used for enumerating a range of the items in the set..
             Only items that are less than (and optionally, equal to) <paramref name="to"/> are included.
             The items are enumerated in sorted order. Items equal to <paramref name="to"/> can be included
             or excluded depending on the <paramref name="toInclusive"/> parameter.
             </summary>
            <remarks>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(T item in set.RangeTo(to, false)) {
                // process item
             }
            </code></p>
             <p>If an item is added to or deleted from the set while the View is being enumerated, then
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling RangeTo does not copy the data in the tree, and the operation takes constant time.</p>
            </remarks>
             <param name="to">The upper bound of the range. </param>
             <param name="toInclusive">If true, the upper bound is inclusive--items equal to the upper bound will
             be included in the range. If false, the upper bound is exclusive--items equal to the upper bound will not
             be included in the range.</param>
             <returns>An OrderedSet.View of items in the given range.</returns>
        </member>
        <member name="P:DmFramework.Collections.OrderedSet`1.Comparer">
            <summary>Returns the IComparer&lt;T&gt; used to compare items in this set.</summary>
            <value>If the set was created using a comparer, that comparer is returned. If the set was
            created using a comparison delegate, then a comparer equivalent to that delegate
            is returned. Otherwise
            the default comparer for T (Comparer&lt;T&gt;.Default) is returned.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedSet`1.Count">
            <summary>Returns the number of items in the set.</summary>
            <remarks>The size of the set is returned in constant time.</remarks>
            <value>The number of items in the set.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedSet`1.Item(System.Int32)">
            <summary>
            Get the item by its index in the sorted order. The smallest item has index 0,
            the next smallest item has index 1, and the largest item has index Count-1.
            </summary>
            <remarks>The indexer takes time O(log N), which N is the number of items in
            the set.</remarks>
            <param name="index">The index to get the item by.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="T:DmFramework.Collections.OrderedSet`1.ListView">
            <summary>
            The nested class that provides a read-only list view
            of all or part of the collection.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.ListView.#ctor(DmFramework.Collections.OrderedSet{`0},DmFramework.Collections.RedBlackTree{`0}.RangeTester,System.Boolean,System.Boolean)">
            <summary>Create a new list view wrapped the given set.</summary>
            <param name="mySet"></param>
            <param name="rangeTester">Range tester that defines the range being used.</param>
            <param name="entireTree">If true, then rangeTester defines the entire tree. Used to optimize some operations.</param>
            <param name="reversed">Is the view enuemerated in reverse order?</param>
        </member>
        <member name="T:DmFramework.Collections.OrderedSet`1.View">
             <summary>
             The OrderedSet&lt;T&gt;.View class is used to look at a subset of the Items
             inside an ordered set. It is returned from the Range, RangeTo, RangeFrom, and Reversed methods.
             </summary>
            <remarks>
             <p>Views are dynamic. If the underlying set changes, the view changes in sync. If a change is made
             to the view, the underlying set changes accordingly.</p>
            <p>Typically, this class is used in conjunction with a foreach statement to enumerate the items
             in a subset of the OrderedSet. For example:</p>
            <code>
             foreach(T item in set.Range(from, to)) {
                // process item
             }
            </code>
            </remarks>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.#ctor(DmFramework.Collections.OrderedSet{`0},DmFramework.Collections.RedBlackTree{`0}.RangeTester,System.Boolean,System.Boolean)">
            <summary>Initialize the view.</summary>
            <param name="mySet">OrderedSet being viewed</param>
            <param name="rangeTester">Range tester that defines the range being used.</param>
            <param name="entireTree">If true, then rangeTester defines the entire tree. Used to optimize some operations.</param>
            <param name="reversed">Is the view enuemerated in reverse order?</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.ItemInView(`0)">
            <summary>Determine if the given item lies within the bounds of this view.</summary>
            <param name="item">Item to test.</param>
            <returns>True if the item is within the bounds of this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.GetEnumerator">
            <summary>Enumerate all the items in this view.</summary>
            <returns>An IEnumerator&lt;T&gt; with the items in this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.Clear">
            <summary>Removes all the items within this view from the underlying set.</summary>
            <example>The following removes all the items that start with "A" from an OrderedSet.
            <code>
            set.Range("A", "B").Clear();
            </code>
            </example>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.Add(`0)">
            <summary>
            Adds a new item to the set underlying this View. If the set already contains an item equal to
            <paramref name="item"/>, that item is replaces with <paramref name="item"/>. If
            <paramref name="item"/> is outside the range of this view, an InvalidOperationException
            is thrown.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding an item takes time O(log N), where N is the number of items in the set.</para></remarks>
            <param name="item">The item to add.</param>
            <returns>True if the set already contained an item equal to <paramref name="item"/> (which was replaced), false
            otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds a new item to the set underlying this View. If the set already contains an item equal to
            <paramref name="item"/>, that item is replaces with <paramref name="item"/>. If
            <paramref name="item"/> is outside the range of this view, an InvalidOperationException
            is thrown.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding an item takes time O(log N), where N is the number of items in the set.</para></remarks>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.Remove(`0)">
            <summary>
            Searches the underlying set for an item equal to <paramref name="item"/>, and if found,
            removes it from the set. If not found, the set is unchanged. If the item is outside
            the range of this view, the set is unchanged.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Removing an item from the set takes time O(log N), where N is the number of items in the set.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>True if <paramref name="item"/> was found and removed. False if <paramref name="item"/> was not in the set, or
            was outside the range of this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.Contains(`0)">
            <summary>
            Determines if this view of the set contains an item equal to <paramref name="item"/>. The set
            is not changed. If
            </summary>
            <remarks>Searching the set for an item takes time O(log N), where N is the number of items in the set.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the set contains <paramref name="item"/>, and <paramref name="item"/> is within
            the range of this view. False otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.IndexOf(`0)">
            <summary>
            Get the index of the given item in the view. The smallest item in the view has index 0,
            the next smallest item has index 1, and the largest item has index Count-1.
            </summary>
            <remarks>Finding the index takes time O(log N), which N is the number of items in
            the set.</remarks>
            <param name="item">The item to get the index of.</param>
            <returns>The index of the item in the view, or -1 if the item is not present
            in the view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.AsList">
            <summary>
            Get a read-only list view of the items in this view. The
            items in the list are in sorted order, with the smallest item
            at index 0. This view does not copy any data, and reflects any
            changes to the underlying OrderedSet.
            </summary>
            <returns>A read-only IList&lt;T&gt; view onto this view.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.Reversed">
            <summary>Creates a new View that has the same items as this view, in the reversed order.</summary>
            <returns>A new View that has the reversed order of this view, with the same upper
            and lower bounds.</returns>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.GetFirst">
            <summary>
            Returns the first item in this view: the item
            that would appear first if the view was enumerated.
            </summary>
            <remarks>GetFirst() takes time O(log N), where N is the number of items in the set.</remarks>
            <returns>The first item in the view. </returns>
            <exception cref="T:System.InvalidOperationException">The view has no items in it.</exception>
        </member>
        <member name="M:DmFramework.Collections.OrderedSet`1.View.GetLast">
            <summary>
            Returns the last item in the view: the item
            that would appear last if the view was enumerated.
            </summary>
            <remarks>GetLast() takes time O(log N), where N is the number of items in the set.</remarks>
            <returns>The last item in the view. </returns>
            <exception cref="T:System.InvalidOperationException">The view has no items in it.</exception>
        </member>
        <member name="P:DmFramework.Collections.OrderedSet`1.View.Count">
            <summary>Number of items in this view.</summary>
            <value>Number of items that lie within the bounds the view.</value>
        </member>
        <member name="P:DmFramework.Collections.OrderedSet`1.View.Item(System.Int32)">
            <summary>
            Get the item by its index in the sorted order. The smallest item in the view has index 0,
            the next smallest item has index 1, and the largest item has index Count-1.
            </summary>
            <remarks>The indexer takes time O(log N), which N is the number of items in
            the set.</remarks>
            <param name="index">The index to get the item by.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="T:DmFramework.Collections.Pair`2">
            <summary>
            Stores a pair of objects within a single struct. This struct is useful to use as the
            T of a collection, or as the TKey or TValue of a dictionary.
            </summary>
        </member>
        <member name="F:DmFramework.Collections.Pair`2.firstComparer">
            <summary>
            Comparers for the first and second type that are used to compare
            values.
            </summary>
        </member>
        <member name="F:DmFramework.Collections.Pair`2.First">
            <summary>The first element of the pair.</summary>
        </member>
        <member name="F:DmFramework.Collections.Pair`2.Second">
            <summary>The second element of the pair.</summary>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.#ctor(`0,`1)">
            <summary>Creates a new pair with given first and second elements.</summary>
            <param name="first">The first element of the pair.</param>
            <param name="second">The second element of the pair.</param>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Creates a new pair using elements from a KeyValuePair structure. The
            First element gets the Key, and the Second elements gets the Value.
            </summary>
            <param name="keyAndValue">The KeyValuePair to initialize the Pair with .</param>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.Equals(System.Object)">
            <summary>
            Determines if this pair is equal to another object. The pair is equal to another object
            if that object is a Pair, both element types are the same, and the first and second elements
            both compare equal using object.Equals.
            </summary>
            <param name="obj">Object to compare for equality.</param>
            <returns>True if the objects are equal. False if the objects are not equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.Equals(DmFramework.Collections.Pair{`0,`1})">
            <summary>
            Determines if this pair is equal to another pair. The pair is equal if  the first and second elements
            both compare equal using IComparable&lt;T&gt;.Equals or object.Equals.
            </summary>
            <param name="other">Pair to compare with for equality.</param>
            <returns>True if the pairs are equal. False if the pairs are not equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.GetHashCode">
            <summary>
            Returns a hash code for the pair, suitable for use in a hash-table or other hashed collection.
            Two pairs that compare equal (using Equals) will have the same hash code. The hash code for
            the pair is derived by combining the hash codes for each of the two elements of the pair.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.CompareTo(DmFramework.Collections.Pair{`0,`1})">
            <summary>
            <para> Compares this pair to another pair of the some type. The pairs are compared by using
            the IComparable&lt;T&gt; or IComparable interface on TFirst and TSecond. The pairs
            are compared by their first elements first, if their first elements are equal, then they
            are compared by their second elements.</para>
            <para>If either TFirst or TSecond does not implement IComparable&lt;T&gt; or IComparable, then
            an NotSupportedException is thrown, because the pairs cannot be compared.</para>
            </summary>
            <param name="other">The pair to compare to.</param>
            <returns>An integer indicating how this pair compares to <paramref name="other"/>. Less
            than zero indicates this pair is less than <paramref name="other"/>. Zero indicate this pair is
            equals to <paramref name="other"/>. Greater than zero indicates this pair is greater than
            <paramref name="other"/>.</returns>
            <exception cref="T:System.NotSupportedException">Either FirstSecond or TSecond is not comparable
            via the IComparable&lt;T&gt; or IComparable interfaces.</exception>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.System#IComparable#CompareTo(System.Object)">
            <summary>
            <para> Compares this pair to another pair of the some type. The pairs are compared by using
            the IComparable&lt;T&gt; or IComparable interface on TFirst and TSecond. The pairs
            are compared by their first elements first, if their first elements are equal, then they
            are compared by their second elements.</para>
            <para>If either TFirst or TSecond does not implement IComparable&lt;T&gt; or IComparable, then
            an NotSupportedException is thrown, because the pairs cannot be compared.</para>
            </summary>
            <param name="obj">The pair to compare to.</param>
            <returns>An integer indicating how this pair compares to <paramref name="obj"/>. Less
            than zero indicates this pair is less than <paramref name="obj"/>. Zero indicate this pair is
            equals to <paramref name="obj"/>. Greater than zero indicates this pair is greater than
            <paramref name="obj"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of the correct type.</exception>
            <exception cref="T:System.NotSupportedException">Either FirstSecond or TSecond is not comparable
            via the IComparable&lt;T&gt; or IComparable interfaces.</exception>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.ToString">
            <summary>
            Returns a String representation of the pair. The String representation of the pair is
            of the form:
            <c>First: {0}, Second: {1}</c>
            where {0} is the result of First.ToString(), and {1} is the result of Second.ToString() (or
            "null" if they are null.)
            </summary>
            <returns> The String representation of the pair.</returns>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.op_Equality(DmFramework.Collections.Pair{`0,`1},DmFramework.Collections.Pair{`0,`1})">
            <summary>
            Determines if two pairs are equal. Two pairs are equal if  the first and second elements
            both compare equal using IComparable&lt;T&gt;.Equals or object.Equals.
            </summary>
            <param name="pair1">First pair to compare.</param>
            <param name="pair2">Second pair to compare.</param>
            <returns>True if the pairs are equal. False if the pairs are not equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.op_Inequality(DmFramework.Collections.Pair{`0,`1},DmFramework.Collections.Pair{`0,`1})">
            <summary>
            Determines if two pairs are not equal. Two pairs are equal if  the first and second elements
            both compare equal using IComparable&lt;T&gt;.Equals or object.Equals.
            </summary>
            <param name="pair1">First pair to compare.</param>
            <param name="pair2">Second pair to compare.</param>
            <returns>True if the pairs are not equal. False if the pairs are equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.op_Explicit(DmFramework.Collections.Pair{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
            <summary>
            Converts a Pair to a KeyValuePair. The Key part of the KeyValuePair gets
            the First element, and the Value part of the KeyValuePair gets the Second
            elements.
            </summary>
            <param name="pair">Pair to convert.</param>
            <returns>The KeyValuePair created from <paramref name="pair"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.ToKeyValuePair">
            <summary>
            Converts this Pair to a KeyValuePair. The Key part of the KeyValuePair gets
            the First element, and the Value part of the KeyValuePair gets the Second
            elements.
            </summary>
            <returns>The KeyValuePair created from this Pair.</returns>
        </member>
        <member name="M:DmFramework.Collections.Pair`2.op_Explicit(System.Collections.Generic.KeyValuePair{`0,`1})~DmFramework.Collections.Pair{`0,`1}">
            <summary>
            Converts a KeyValuePair structure into a Pair. The
            First element gets the Key, and the Second element gets the Value.
            </summary>
            <param name="keyAndValue">The KeyValuePair to convert.</param>
            <returns>The Pair created by converted the KeyValuePair into a Pair.</returns>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyDictionaryBase`2">
            <summary>
            ReadOnlyDictionaryBase is a base class that can be used to more easily implement the
            generic IDictionary&lt;T&gt; and non-generic IDictionary interfaces.
            </summary>
            <remarks>
            <para>To use ReadOnlyDictionaryBase as a base class, the derived class must override
            Count, TryGetValue, GetEnumerator. </para>
            </remarks>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.MethodModifiesCollection">
            <summary>Throws an NotSupportedException stating that this collection cannot be modified.</summary>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            Adds a new key-value pair to the dictionary. Always throws an exception
            indicating that this method is not supported in a read-only dictionary.
            </summary>
            <param name="key">Key to add.</param>
            <param name="value">Value to associated with the key.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.Remove(`0)">
            <summary>
            Removes a key from the dictionary. Always throws an exception
            indicating that this method is not supported in a read-only dictionary.
            </summary>
            <param name="key">Key to remove from the dictionary.</param>
            <returns>True if the key was found, false otherwise.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.ContainsKey(`0)">
            <summary>
            Determines whether a given key is found
            in the dictionary.
            </summary>
            <remarks>The default implementation simply calls TryGetValue and returns
            what it returns.</remarks>
            <param name="key">Key to look for in the dictionary.</param>
            <returns>True if the key is present in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. If so, the value
            associated with that key is returned through the value parameter. This method must be overridden
            in the derived class.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="value">Returns the value associated with key, if true was returned.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.ToString">
            <summary>
            Shows the String representation of the dictionary. The String representation contains
            a list of the mappings in the dictionary.
            </summary>
            <returns>The String representation of the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if a dictionary contains a given KeyValuePair. This implementation checks to see if the
            dictionary contains the given key, and if the value associated with the key is equal to (via object.Equals)
            the value.
            </summary>
            <param name="item">A KeyValuePair containing the Key and Value to check for.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds a key-value pair to the collection. Always throws an exception
            indicating that this method is not supported in a read-only dictionary.
            </summary>
            <param name="key">Key to add to the dictionary.</param>
            <param name="value">Value to add to the dictionary.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Clear">
            <summary>
            Clears this dictionary. Always throws an exception
            indicating that this method is not supported in a read-only dictionary.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. The dictionary
            is not changed. Calls the (overridden) ContainsKey method. If key is not of the correct
            TKey for the dictionary, false is returned.
            </summary>
            <param name="key">The key to search for.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the key (and associated value) from the collection that is equal to the passed in key. Always throws an exception
            indicating that this method is not supported in a read-only dictionary.
            </summary>
            <param name="key">The key to remove.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the entries in the dictionary. Each entry is
            returned as a DictionaryEntry.
            The entries are enumerated in the same orders as the (overridden) GetEnumerator
            method.
            </summary>
            <returns>An enumerator for enumerating all the elements in the OrderedDictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the entries in the dictionary. Each entry is
            returned as a DictionaryEntry.
            The entries are enumerated in the same orders as the (overridden) GetEnumerator
            method.
            </summary>
            <returns>An enumerator for enumerating all the elements in the OrderedDictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.DebuggerDisplayString">
            <summary>
            Display the contents of the dictionary in the debugger. This is intentionally private, it is called
            only from the debugger due to the presence of the DebuggerDisplay attribute. It is similar
            format to ToString(), but is limited to 250-300 characters or so, so as not to overload the debugger.
            </summary>
            <returns>The String representation of the items in the collection, similar in format to ToString().</returns>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyDictionaryBase`2.Item(`0)">
            <summary>
            The indexer of the dictionary. The set accessor throws an NotSupportedException
            stating the dictionary is read-only.
            </summary>
            <remarks>The get accessor is implemented by calling TryGetValue.</remarks>
            <param name="key">Key to find in the dictionary.</param>
            <returns>The value associated with the key.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown from the set accessor, indicating
            that the dictionary is read only.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown from the get accessor if the key
            was not found.</exception>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyDictionaryBase`2.Keys">
            <summary>Returns a collection of the keys in this dictionary.</summary>
            <value>A read-only collection of the keys in this dictionary.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyDictionaryBase`2.Values">
            <summary>
            Returns a collection of the values in this dictionary. The ordering of
            values in this collection is the same as that in the Keys collection.
            </summary>
            <value>A read-only collection of the values in this dictionary.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#IsFixedSize">
            <summary>Returns whether this dictionary is fixed size.</summary>
            <value>Always returns true.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#IsReadOnly">
            <summary>Returns if this dictionary is read-only.</summary>
            <value>Always returns true.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Keys">
            <summary>
            Returns a collection of all the keys in the dictionary. The values in this collection will
            be enumerated in the same order as the (overridden) GetEnumerator method.
            </summary>
            <value>The collection of keys.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Values">
            <summary>
            Returns a collection of all the values in the dictionary. The values in this collection will
            be enumerated in the same order as the (overridden) GetEnumerator method.
            </summary>
            <value>The collection of values.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets the value associated with a given key. When getting a value, if this
            key is not found in the collection, then null is returned. If the key is not of the correct type
            for this dictionary, null is returned.
            </summary>
            <value>The value associated with the key, or null if the key was not present.</value>
            <exception cref="T:System.NotSupportedException">Always thrown from the set accessor, indicating
            that the dictionary is read only.</exception>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyDictionaryBase`2.KeysCollection">
            <summary>
            A private class that implements ICollection&lt;TKey&gt; and ICollection for the
            Keys collection. The collection is read-only.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.KeysCollection.#ctor(DmFramework.Collections.ReadOnlyDictionaryBase{`0,`1})">
            <summary>Constructor.</summary>
            <param name="myDictionary">The dictionary this is associated with.</param>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyDictionaryBase`2.ValuesCollection">
            <summary>
            A private class that implements ICollection&lt;TKey&gt; and ICollection for the
            Values collection. The collection is read-only.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyDictionaryBase`2.DictionaryEnumeratorWrapper">
            <summary>
            A class that wraps a IDictionaryEnumerator around an IEnumerator that
            enumerates KeyValuePairs. This is useful in implementing IDictionary, because
            IEnumerator can be implemented with an iterator, but IDictionaryEnumerator cannot.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyDictionaryBase`2.DictionaryEnumeratorWrapper.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Constructor.</summary>
            <param name="enumerator">The enumerator of KeyValuePairs that is being wrapped.</param>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2">
            <summary>
            MultiDictionaryBase is a base class that can be used to more easily implement a class
            that associates multiple values to a single key. The class implements the generic
            IDictionary&lt;TKey, ICollection&lt;TValue&gt;&gt; interface. The resulting collection
            is read-only -- items cannot be added or removed.
            </summary>
            <remarks>
            <para>To use ReadOnlyMultiDictionaryBase as a base class, the derived class must override
            Count, Contains(TKey,TValue), EnumerateKeys, and TryEnumerateValuesForKey . </para>
            </remarks>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.MethodModifiesCollection">
            <summary>Throws an NotSupportedException stating that this collection cannot be modified.</summary>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.EnumerateKeys">
            <summary>
            Enumerate all the keys in the dictionary. This method must be overridden by a derived
            class.
            </summary>
            <returns>An IEnumerator&lt;TKey&gt; that enumerates all of the keys in the collection that
            have at least one value associated with them.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            Enumerate all of the values associated with a given key. This method must be overridden
            by the derived class. If the key exists and has values associated with it, an enumerator for those
            values is returned throught <paramref name="values"/>. If the key does not exist, false is returned.
            </summary>
            <param name="key">The key to get values for.</param>
            <param name="values">If true is returned, this parameter receives an enumerators that
            enumerates the values associated with that key.</param>
            <returns>True if the key exists and has values associated with it. False otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Add(`0,System.Collections.Generic.ICollection{`1})">
            <summary>
            Implements IDictionary&lt;TKey, IEnumerable&lt;TValue&gt;&gt;.Add. If the
            key is already present, and ArgumentException is thrown. Otherwise, a
            new key is added, and new values are associated with that key.
            </summary>
            <param name="key">Key to add.</param>
            <param name="values">Values to associate with that key.</param>
            <exception cref="T:System.ArgumentException">The key is already present in the dictionary.</exception>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Remove(`0)">
            <summary>Removes a key from the dictionary. This method must be overridden in the derived class.</summary>
            <param name="key">Key to remove from the dictionary.</param>
            <returns>True if the key was found, false otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#TryGetValue(`0,System.Collections.Generic.ICollection{`1}@)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. If so, all the values
            associated with that key are returned through the values parameter. This method must be
            overridden by the derived class.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="values">Returns all values associated with key, if true was returned.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.ContainsKey(`0)">
            <summary>Determines whether a given key is found in the dictionary.</summary>
            <remarks>The default implementation simply calls TryGetValue.
            It may be appropriate to override this method to
            provide a more efficient implementation.</remarks>
            <param name="key">Key to look for in the dictionary.</param>
            <returns>True if the key is present in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.Contains(`0,`1)">
            <summary>
            Determines if this dictionary contains a key-value pair equal to <paramref name="key"/> and
            <paramref name="value"/>. The dictionary is not changed. This method must be overridden in the derived class.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="value">The value to search for.</param>
            <returns>True if the dictionary has associated <paramref name="value"/> with <paramref name="key"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>Determines if this dictionary contains the given key and all of the values associated with that key..</summary>
            <param name="pair">A key and collection of values to search for.</param>
            <returns>True if the dictionary has associated all of the values in <paramref name="pair"/>.Value with <paramref name="pair"/>.Key.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.EqualValues(`1,`1)">
            <summary>
            If the derived class does not use the default comparison for values, this
            methods should be overridden to compare two values for equality. This is
            used for the correct implementation of ICollection.Contains on the Values
            and KeyValuePairs collections.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.CountValues(`0)">
            <summary>
            Gets a count of the number of values associated with a key. The
            default implementation is slow; it enumerators all of the values
            (using TryEnumerateValuesForKey) to count them. A derived class
            may be able to supply a more efficient implementation.
            </summary>
            <param name="key">The key to count values for.</param>
            <returns>The number of values associated with <paramref name="key"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.CountAllValues">
            <summary>
            Gets a total count of values in the collection. This default implementation
            is slow; it enumerates all of the keys in the dictionary and calls CountValues on each.
            A derived class may be able to supply a more efficient implementation.
            </summary>
            <returns>The total number of values associated with all keys in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.ToString">
            <summary>
            Shows the String representation of the dictionary. The String representation contains
            a list of the mappings in the dictionary.
            </summary>
            <returns>The String representation of the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.DebuggerDisplayString">
            <summary>
            Display the contents of the dictionary in the debugger. This is intentionally private, it is called
            only from the debugger due to the presence of the DebuggerDisplay attribute. It is similar
            format to ToString(), but is limited to 250-300 characters or so, so as not to overload the debugger.
            </summary>
            <returns>The String representation of the items in the collection, similar in format to ToString().</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.GetEnumerator">
            <summary>Enumerate all the keys in the dictionary, and for each key, the collection of values for that key.</summary>
            <returns>An enumerator to enumerate all the key, ICollection&lt;value&gt; pairs in the dictionary.</returns>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.Count">
            <summary>
            Gets the number of keys in the dictionary. This property must be overridden
            in the derived class.
            </summary>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.Keys">
            <summary>Gets a read-only collection all the keys in this dictionary.</summary>
            <value>An readonly ICollection&lt;TKey&gt; of all the keys in this dictionary.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.Values">
            <summary>Gets a read-only collection of all the values in the dictionary.</summary>
            <returns>A read-only ICollection&lt;TValue&gt; of all the values in the dictionary.</returns>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Values">
            <summary>Gets a read-only collection of all the value collections in the dictionary.</summary>
            <returns>A read-only ICollection&lt;IEnumerable&lt;TValue&gt;&gt; of all the values in the dictionary.</returns>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.KeyValuePairs">
            <summary>
            Gets a read-only collection of all key-value pairs in the dictionary. If a key has multiple
            values associated with it, then a key-value pair is present for each value associated
            with the key.
            </summary>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.Item(`0)">
            <summary>
            Returns a collection of all of the values in the dictionary associated with <paramref name="key"/>.
            If the key is not present in the dictionary, an ICollection with no
            values is returned. The returned ICollection is read-only.
            </summary>
            <param name="key">The key to get the values associated with.</param>
            <value>An ICollection&lt;TValue&gt; with all the values associated with <paramref name="key"/>.</value>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Item(`0)">
            <summary>
            Gets a collection of all the values in the dictionary associated with <paramref name="key"/>.
            If the key is not present in the dictionary, a KeyNotFound exception is thrown.
            </summary>
            <param name="key">The key to get the values associated with.</param>
            <value>An IEnumerable&lt;TValue&gt; that enumerates all the values associated with <paramref name="key"/>.</value>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The given key is not present in the dictionary.</exception>
            <exception cref="T:System.NotSupportedException">The set accessor is called.</exception>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.ValuesForKeyCollection">
            <summary>
            A private class that provides the ICollection&lt;TValue&gt; for a particular key. This is the collection
            that is returned from the indexer. The collections is read-write, live, and can be used to add, remove,
            etc. values from the multi-dictionary.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.ValuesForKeyCollection.#ctor(DmFramework.Collections.ReadOnlyMultiDictionaryBase{`0,`1},`0)">
            <summary>Constructor. Initializes this collection.</summary>
            <param name="myDictionary">Dictionary we're using.</param>
            <param name="key">The key we're looking at.</param>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.ValuesForKeyCollection.NoValues">
            <summary>
            A simple function that returns an IEnumerator&lt;TValue&gt; that
            doesn't yield any values. A helper.
            </summary>
            <returns>An IEnumerator&lt;TValue&gt; that yields no values.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.ValuesForKeyCollection.GetEnumerator">
            <summary>Enumerate all the values associated with key.</summary>
            <returns>An IEnumerator&lt;TValue&gt; that enumerates all the values associated with key.</returns>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.ValuesForKeyCollection.Contains(`1)">
            <summary>Determines if the given values is associated with key.</summary>
            <param name="item">Value to check for.</param>
            <returns>True if value is associated with key, false otherwise.</returns>
        </member>
        <member name="P:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.ValuesForKeyCollection.Count">
            <summary>Get the number of values associated with the key.</summary>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.KeysCollection">
            <summary>
            A private class that implements ICollection&lt;TKey&gt; and ICollection for the
            Keys collection. The collection is read-only.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.KeysCollection.#ctor(DmFramework.Collections.ReadOnlyMultiDictionaryBase{`0,`1})">
            <summary>Constructor.</summary>
            <param name="myDictionary">The dictionary this is associated with.</param>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.ValuesCollection">
            <summary>
            A private class that implements ICollection&lt;TValue&gt; and ICollection for the
            Values collection. The collection is read-only.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.EnumerableValuesCollection">
            <summary>
            A private class that implements ICollection&lt;IEnumerable&lt;TValue&gt;&gt; and ICollection for the
            Values collection on IDictionary. The collection is read-only.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.ReadOnlyMultiDictionaryBase`2.KeyValuePairsCollection">
            <summary>
            A private class that implements ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt; and ICollection for the
            KeyValuePairs collection. The collection is read-only.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.DuplicatePolicy">
            <summary>
            Describes what to do if a key is already in the tree when doing an
            insertion.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.RedBlackTree`1">
             <summary>
             The base implementation for various collections classes that use Red-Black trees
             as part of their implementation. This class should not (and can not) be
             used directly by end users; it's only for internal use by the collections package.
             </summary>
             <remarks>
             The Red-Black tree manages items of type T, and uses a IComparer&lt;T&gt; that
             compares items to sort the tree. Multiple items can compare equal and be stored
             in the tree. Insert, Delete, and Find operations are provided in their full generality;
             all operations allow dealing with either the first or last of items that compare equal.
            </remarks>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.GetNodeStack">
            <summary>
            Create an array of Nodes big enough for any path from top
            to bottom. This is cached, and reused from call-to-call, so only one
            can be around at a time per tree.
            </summary>
            <returns>The node stack.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.StopEnumerations">
            <summary>
            Must be called whenever there is a structural change in the tree. Causes
            changeStamp to be changed, which causes any in-progress enumerations
            to throw exceptions.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.CheckEnumerationStamp(System.Int32)">
            <summary>
            Checks the given stamp against the current change stamp. If different, the
            collection has changed during enumeration and an InvalidOperationException
            must be thrown
            </summary>
            <param name="startStamp">changeStamp at the start of the enumeration.</param>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initialize a red-black tree, using the given interface instance to compare elements. Only
            Compare is used on the IComparer interface.
            </summary>
            <param name="comparer">The IComparer&lt;T&gt; used to sort keys.</param>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.Clone">
            <summary>
            Clone the tree, returning a new tree containing the same items. Should
            take O(N) take.
            </summary>
            <returns>Clone version of this tree.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.Find(`0,System.Boolean,System.Boolean,`0@)">
            <summary>
            Finds the key in the tree. If multiple items in the tree have
            compare equal to the key, finds the first or last one. Optionally replaces the item
            with the one searched for.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="findFirst">If true, find the first of duplicates, else finds the last of duplicates.</param>
            <param name="replace">If true, replaces the item with key (if function returns true)</param>
            <param name="item">Returns the found item, before replacing (if function returns true).</param>
            <returns>True if the key was found.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.FindIndex(`0,System.Boolean)">
            <summary>
            Finds the index of the key in the tree. If multiple items in the tree have
            compare equal to the key, finds the first or last one.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="findFirst">If true, find the first of duplicates, else finds the last of duplicates.</param>
            <returns>Index of the item found if the key was found, -1 if not found.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.GetItemByIndex(System.Int32)">
            <summary>Find the item at a particular index in the tree.</summary>
            <param name="index">The zero-based index of the item. Must be &gt;= 0 and &lt; Count.</param>
            <returns>The item at the particular index.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.Insert(`0,DmFramework.Collections.DuplicatePolicy,`0@)">
            <summary>Insert a new node into the tree, maintaining the red-black invariants.</summary>
            <remarks>Algorithm from Sedgewick, "Algorithms".</remarks>
            <param name="item">The new item to insert</param>
            <param name="dupPolicy">What to do if equal item is already present.</param>
            <param name="previous">If false, returned, the previous item.</param>
            <returns>false if duplicate exists, otherwise true.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.InsertSplit(DmFramework.Collections.RedBlackTree{`0}.Node,DmFramework.Collections.RedBlackTree{`0}.Node,DmFramework.Collections.RedBlackTree{`0}.Node,DmFramework.Collections.RedBlackTree{`0}.Node,System.Boolean@)">
            <summary>
            Split a node with two red children (a 4-node in the 2-3-4 tree formalism), as
            part of an insert operation.
            </summary>
            <param name="ggparent">great grand-parent of "node", can be null near root</param>
            <param name="gparent">grand-parent of "node", can be null near root</param>
            <param name="parent">parent of "node", can be null near root</param>
            <param name="node">Node to split, can't be null</param>
            <param name="rotated">Indicates that rotation(s) occurred in the tree.</param>
            <returns>Node to continue searching from.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.Rotate(DmFramework.Collections.RedBlackTree{`0}.Node,DmFramework.Collections.RedBlackTree{`0}.Node,DmFramework.Collections.RedBlackTree{`0}.Node)">
            <summary>
            Performs a rotation involving the node, it's child and grandchild. The counts of
            childs and grand-child are set the correct values from their children; this is important
            if they have been adjusted on the way down the try as part of an insert/delete.
            </summary>
            <param name="node">Top node of the rotation. Can be null if child==root.</param>
            <param name="child">One child of "node". Not null.</param>
            <param name="gchild">One child of "child". Not null.</param>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.Delete(`0,System.Boolean,`0@)">
            <summary>
            Deletes a key from the tree. If multiple elements are equal to key,
            deletes the first or last. If no element is equal to the key,
            returns false.
            </summary>
            <remarks>Top-down algorithm from Weiss. Basic plan is to move down in the tree,
            rotating and recoloring along the way to always keep the current node red, which
            ensures that the node we delete is red. The details are quite complex, however! </remarks>
            <param name="key">Key to delete.</param>
            <param name="deleteFirst">Which item to delete if multiple are equal to key. True to delete the first, false to delete last.</param>
            <param name="item">Returns the item that was deleted, if true returned.</param>
            <returns>True if an element was deleted, false if no element had
            specified key.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.GetEnumerator">
            
             <summary>Enumerate all the items in-order</summary>
             <returns>An enumerator for all the items, in order.</returns>
             <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Enumerate all the items in-order</summary>
            <returns>An enumerator for all the items, in order.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.BoundedRangeTester(System.Boolean,`0,System.Boolean,`0)">
            <summary>Gets a range tester that defines a range by first and last items.</summary>
            <param name="useFirst">If true, bound the range on the bottom by first.</param>
            <param name="first">If useFirst is true, the inclusive lower bound.</param>
            <param name="useLast">If true, bound the range on the top by last.</param>
            <param name="last">If useLast is true, the exclusive upper bound.</param>
            <returns>A RangeTester delegate that tests for an item in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.DoubleBoundedRangeTester(`0,System.Boolean,`0,System.Boolean)">
            <summary>Gets a range tester that defines a range by first and last items.</summary>
            <param name="first">The lower bound.</param>
            <param name="firstInclusive">True if the lower bound is inclusive, false if exclusive.</param>
            <param name="last">The upper bound.</param>
            <param name="lastInclusive">True if the upper bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for an item in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.LowerBoundedRangeTester(`0,System.Boolean)">
            <summary>Gets a range tester that defines a range by a lower bound.</summary>
            <param name="first">The lower bound.</param>
            <param name="inclusive">True if the lower bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for an item in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.UpperBoundedRangeTester(`0,System.Boolean)">
            <summary>Gets a range tester that defines a range by upper bound.</summary>
            <param name="last">The upper bound.</param>
            <param name="inclusive">True if the upper bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for an item in the given range.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.EqualRangeTester(`0)">
            <summary>Gets a range tester that defines a range by all items equal to an item.</summary>
            <param name="equalTo">The item that is contained in the range.</param>
            <returns>A RangeTester delegate that tests for an item equal to <paramref name="equalTo"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.EntireRangeTester(`0)">
            <summary>A range tester that defines a range that is the entire tree.</summary>
            <param name="item">Item to test.</param>
            <returns>Always returns 0.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.EnumerateRange(DmFramework.Collections.RedBlackTree{`0}.RangeTester)">
            <summary>
            Enumerate the items in a custom range in the tree. The range is determined by
            a RangeTest delegate.
            </summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the custom range in order.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.EnumerateRangeInOrder(DmFramework.Collections.RedBlackTree{`0}.RangeTester,DmFramework.Collections.RedBlackTree{`0}.Node)">
            <summary>Enumerate all the items in a custom range, under and including node, in-order.</summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <param name="node">Node to begin enumeration. May be null.</param>
            <returns>An enumerable of the items.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.EnumerateRangeReversed(DmFramework.Collections.RedBlackTree{`0}.RangeTester)">
            <summary>
            Enumerate the items in a custom range in the tree, in reversed order. The range is determined by
            a RangeTest delegate.
            </summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the custom range in reversed order.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.EnumerateRangeInReversedOrder(DmFramework.Collections.RedBlackTree{`0}.RangeTester,DmFramework.Collections.RedBlackTree{`0}.Node)">
            <summary>Enumerate all the items in a custom range, under and including node, in reversed order.</summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <param name="node">Node to begin enumeration. May be null.</param>
            <returns>An enumerable of the items, in reversed oreder.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.DeleteItemFromRange(DmFramework.Collections.RedBlackTree{`0}.RangeTester,System.Boolean,`0@)">
            <summary>
            Deletes either the first or last item from a range, as identified by a RangeTester
            delegate. If the range is empty, returns false.
            </summary>
            <remarks>Top-down algorithm from Weiss. Basic plan is to move down in the tree,
            rotating and recoloring along the way to always keep the current node red, which
            ensures that the node we delete is red. The details are quite complex, however! </remarks>
            <param name="rangeTester">Range to delete from.</param>
            <param name="deleteFirst">If true, delete the first item from the range, else the last.</param>
            <param name="item">Returns the item that was deleted, if true returned.</param>
            <returns>True if an element was deleted, false if the range is empty.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.DeleteRange(DmFramework.Collections.RedBlackTree{`0}.RangeTester)">
            <summary>Delete all the items in a range, identified by a RangeTester delegate.</summary>
            <param name="rangeTester">The delegate that defines the range to delete.</param>
            <returns>The number of items deleted.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.CountRange(DmFramework.Collections.RedBlackTree{`0}.RangeTester)">
            <summary>
            Count the items in a custom range in the tree. The range is determined by
            a RangeTester delegate.
            </summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <returns>The number of items in the range.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.CountRangeUnderNode(DmFramework.Collections.RedBlackTree{`0}.RangeTester,DmFramework.Collections.RedBlackTree{`0}.Node,System.Boolean,System.Boolean)">
            <summary>Count all the items in a custom range, under and including node.</summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <param name="node">Node to begin enumeration. May be null.</param>
            <param name="belowRangeTop">This node and all under it are either in the range or below it.</param>
            <param name="aboveRangeBottom">This node and all under it are either in the range or above it.</param>
            <returns>The number of items in the range, under and include node.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.FirstItemInRange(DmFramework.Collections.RedBlackTree{`0}.RangeTester,`0@)">
            <summary>
            Find the first item in a custom range in the tree, and it's index. The range is determined
            by a RangeTester delegate.
            </summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <param name="item">Returns the item found, if true was returned.</param>
            <returns>Index of first item in range if range is non-empty, -1 otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.LastItemInRange(DmFramework.Collections.RedBlackTree{`0}.RangeTester,`0@)">
            <summary>
            Find the last item in a custom range in the tree, and it's index. The range is determined
            by a RangeTester delegate.
            </summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <param name="item">Returns the item found, if true was returned.</param>
            <returns>Index of the item if range is non-empty, -1 otherwise.</returns>
        </member>
        <member name="P:DmFramework.Collections.RedBlackTree`1.ElementCount">
            <summary>Returns the number of elements in the tree.</summary>
        </member>
        <member name="T:DmFramework.Collections.RedBlackTree`1.Node">
            <summary>The class that is each node in the red-black tree.</summary>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.Node.IncrementCount">
            <summary>Add one to the Count.</summary>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.Node.DecrementCount">
            <summary>
            Subtract one from the Count. The current
            Count must be non-zero.
            </summary>
        </member>
        <member name="M:DmFramework.Collections.RedBlackTree`1.Node.Clone">
            <summary>Clones a node and all its descendants.</summary>
            <returns>The cloned node.</returns>
        </member>
        <member name="P:DmFramework.Collections.RedBlackTree`1.Node.IsRed">
            <summary>Is this a red node?</summary>
        </member>
        <member name="P:DmFramework.Collections.RedBlackTree`1.Node.Count">
            <summary>
            Get or set the Count field -- a 31-bit field
            that holds the number of nodes at or below this
            level.
            </summary>
        </member>
        <member name="T:DmFramework.Collections.RedBlackTree`1.RangeTester">
            <summary>
            A delegate that tests if an item is within a custom range. The range must be a contiguous
            range of items with the ordering of this tree. The range test function must test
            if an item is before, withing, or after the range.
            </summary>
            <param name="item">Item to test against the range.</param>
            <returns>Returns negative if item is before the range, zero if item is withing the range,
            and positive if item is after the range.</returns>
        </member>
        <member name="T:DmFramework.Collections.Set`1">
             <summary>
             Set&lt;T&gt; is a collection that contains items of type T.
             The item are maintained in a haphazard, unpredictable order, and duplicate items are not allowed.
             </summary>
             <remarks>
             <p>The items are compared in one of two ways. If T implements IComparable&lt;T&gt;
             then the Equals method of that interface will be used to compare items, otherwise the Equals
             method from Object will be used. Alternatively, an instance of IComparer&lt;T&gt; can be passed
             to the constructor to use to compare items.</p>
             <p>Set is implemented as a hash table. Inserting, deleting, and looking up an
             an element all are done in approximately constant time, regardless of the number of items in the Set.</p>
             <p><see cref="T:DmFramework.Collections.OrderedSet`1"/> is similar, but uses comparison instead of hashing, and does maintains
             the items in sorted order.</p>
            </remarks>
            <seealso cref="T:DmFramework.Collections.OrderedSet`1"/>
        </member>
        <member name="M:DmFramework.Collections.Set`1.#ctor">
             <summary>
             Creates a new Set. The Equals method and GetHashCode method on T
             will be used to compare items for equality.
             </summary>
            <remarks>
             Items that are null are permitted, and will be sorted before all other items.
            </remarks>
        </member>
        <member name="M:DmFramework.Collections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new Set. The Equals and GetHashCode method of the passed comparer object
            will be used to compare items in this set.
            </summary>
            <param name="equalityComparer">An instance of IEqualityComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Creates a new Set. The Equals method and GetHashCode method on T
             will be used to compare items for equality.
             </summary>
            <remarks>
             Items that are null are permitted.
            </remarks>
             <param name="collection">A collection with items to be placed into the Set.</param>
        </member>
        <member name="M:DmFramework.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new Set. The Equals and GetHashCode method of the passed comparer object
            will be used to compare items in this set. The set is
            initialized with all the items in the given collection.
            </summary>
            <param name="collection">A collection with items to be placed into the Set.</param>
            <param name="equalityComparer">An instance of IEqualityComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:DmFramework.Collections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},DmFramework.Collections.Hash{`0})">
            <summary>
            Creates a new Set given a comparer and a tree that contains the data. Used
            internally for Clone.
            </summary>
            <param name="equalityComparer">EqualityComparer for the set.</param>
            <param name="hash">Data for the set.</param>
        </member>
        <member name="M:DmFramework.Collections.Set`1.System#ICloneable#Clone">
            <summary>
            Makes a shallow clone of this set; i.e., if items of the
            set are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the set takes time O(N), where N is the number of items in the set.</remarks>
            <returns>The cloned set.</returns>
        </member>
        <member name="M:DmFramework.Collections.Set`1.Clone">
            <summary>
            Makes a shallow clone of this set; i.e., if items of the
            set are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the set takes time O(N), where N is the number of items in the set.</remarks>
            <returns>The cloned set.</returns>
        </member>
        <member name="M:DmFramework.Collections.Set`1.CloneContents">
            <summary>
            Makes a deep clone of this set. A new set is created with a clone of
            each element of this set, by calling ICloneable.Clone on each element. If T is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If T is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the set takes time O(N), where N is the number of items in the set.</para></remarks>
            <returns>The cloned set.</returns>
            <exception cref="T:System.InvalidOperationException">T is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the items in the set.
            The items are enumerated in sorted order.
            </summary>
            <remarks>
            <p>Typically, this method is not called directly. Instead the "foreach" statement is used
            to enumerate the items, which uses this method implicitly.</p>
            <p>If an item is added to or deleted from the set while it is being enumerated, then
            the enumeration will end with an InvalidOperationException.</p>
            <p>Enumerating all the items in the set takes time O(N), where N is the number
            of items in the set.</p>
            </remarks>
            <returns>An enumerator for enumerating all the items in the Set.</returns>
        </member>
        <member name="M:DmFramework.Collections.Set`1.Contains(`0)">
            <summary>
            Determines if this set contains an item equal to <paramref name="item"/>. The set
            is not changed.
            </summary>
            <remarks>Searching the set for an item takes approximately constant time, regardless of the number of items in the set.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the set contains <paramref name="item"/>. False if the set does not contain <paramref name="item"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Set`1.TryGetItem(`0,`0@)">
            <summary>
            <para>Determines if this set contains an item equal to <paramref name="item"/>, according to the
            comparison mechanism that was used when the set was created. The set
            is not changed.</para>
            <para>If the set does contain an item equal to <paramref name="item"/>, then the item from the set is returned.</para>
            </summary>
            <remarks>Searching the set for an item takes approximately constant time, regardless of the number of items in the set.</remarks>
            <example>
            In the following example, the set contains strings which are compared in a case-insensitive manner.
            <code>
            Set&lt;String&gt; set = new Set&lt;String&gt;(StringComparer.CurrentCultureIgnoreCase);
            set.Add("HELLO");
            String s;
            Boolean b = set.TryGetItem("Hello", out s);   // b receives true, s receives "HELLO".
            </code>
            </example>
            <param name="item">The item to search for.</param>
            <param name="foundItem">Returns the item from the set that was equal to <paramref name="item"/>.</param>
            <returns>True if the set contains <paramref name="item"/>. False if the set does not contain <paramref name="item"/>.</returns>
        </member>
        <member name="M:DmFramework.Collections.Set`1.Add(`0)">
            <summary>
            Adds a new item to the set. If the set already contains an item equal to
            <paramref name="item"/>, that item is replaced with <paramref name="item"/>.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding an item takes approximately constant time, regardless of the number of items in the set.</para></remarks>
            <param name="item">The item to add to the set.</param>
            <returns>True if the set already contained an item equal to <paramref name="item"/> (which was replaced), false
            otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.Set`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds a new item to the set. If the set already contains an item equal to
            <paramref name="item"/>, that item is replaced with <paramref name="item"/>.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding an item takes approximately constant time, regardless of the number of items in the set.</para></remarks>
            <param name="item">The item to add to the set.</param>
            <returns>True if the set already contained an item equal to <paramref name="item"/> (which was replaced), false
            otherwise.</returns>
        </member>
        <member name="M:DmFramework.Collections.Set`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all the items in <paramref name="collection"/> to the set. If the set already contains an item equal to
            one of the items in <paramref name="collection"/>, that item will be replaced.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding the collection takes time O(M), where M is the
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to add to the set.</param>
        </member>
        <member name="M:DmFramework.Collections.Set`1.Remove(`0)">
            <summary>
            Searches the set for an item equal to <paramref name="item"/>, and if found,
            removes it from the set. If not found, the set is unchanged.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Removing an item from the set takes approximately constant time, regardless of the size of the set.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>True if <paramref name="item"/> was found and removed. False if <paramref name="item"/> was not in the set.</returns>
        </member>
        <member name="M:DmFramework.Collections.Set`1.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>Removes all the items in <paramref name="collection"/> from the set.</summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Removing the collection takes time O(M), where M is the
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to remove from the set.</param>
            <returns>The number of items removed from the set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.Clear">
            <summary>Removes all items from the set.</summary>
            <remarks>Clearing the set takes a constant amount of time, regardless of the number of items in it.</remarks>
        </member>
        <member name="M:DmFramework.Collections.Set`1.CheckConsistentComparison(DmFramework.Collections.Set{`0})">
            <summary>
            Check that this set and another set were created with the same comparison
            mechanism. Throws exception if not compatible.
            </summary>
            <param name="otherSet">Other set to check comparision mechanism.</param>
            <exception cref="T:System.InvalidOperationException">If otherSet and this set don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.IsSupersetOf(DmFramework.Collections.Set{`0})">
            <summary>
            Determines if this set is a superset of another set. Neither set is modified.
            This set is a superset of <paramref name="otherSet"/> if every element in
            <paramref name="otherSet"/> is also in this set.
            <remarks>IsSupersetOf is computed in time O(M), where M is the size of the
            <paramref name="otherSet"/>.</remarks>
            </summary>
            <param name="otherSet">Set to compare to.</param>
            <returns>True if this is a superset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.IsProperSupersetOf(DmFramework.Collections.Set{`0})">
            <summary>
            Determines if this set is a proper superset of another set. Neither set is modified.
            This set is a proper superset of <paramref name="otherSet"/> if every element in
            <paramref name="otherSet"/> is also in this set.
            Additionally, this set must have strictly more items than <paramref name="otherSet"/>.
            </summary>
            <remarks>IsProperSubsetOf is computed in time O(M), where M is the size of
            <paramref name="otherSet"/>.</remarks>
            <param name="otherSet">Set to compare to.</param>
            <returns>True if this is a proper superset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.IsSubsetOf(DmFramework.Collections.Set{`0})">
            <summary>
            Determines if this set is a subset of another set. Neither set is modified.
            This set is a subset of <paramref name="otherSet"/> if every element in this set
            is also in <paramref name="otherSet"/>.
            </summary>
            <remarks>IsSubsetOf is computed in time O(N), where N is the size of the this set.</remarks>
            <param name="otherSet">Set to compare to.</param>
            <returns>True if this is a subset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.IsProperSubsetOf(DmFramework.Collections.Set{`0})">
            <summary>
            Determines if this set is a proper subset of another set. Neither set is modified.
            This set is a subset of <paramref name="otherSet"/> if every element in this set
            is also in <paramref name="otherSet"/>. Additionally, this set must have strictly
            fewer items than <paramref name="otherSet"/>.
            </summary>
            <remarks>IsProperSubsetOf is computed in time O(N), where N is the size of the this set.</remarks>
            <param name="otherSet">Set to compare to.</param>
            <returns>True if this is a proper subset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.IsEqualTo(DmFramework.Collections.Set{`0})">
            <summary>
            Determines if this set is equal to another set. This set is equal to
            <paramref name="otherSet"/> if they contain the same items.
            </summary>
            <remarks>IsEqualTo is computed in time O(N), where N is the number of items in
            this set.</remarks>
            <param name="otherSet">Set to compare to</param>
            <returns>True if this set is equal to <paramref name="otherSet"/>, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.IsDisjointFrom(DmFramework.Collections.Set{`0})">
            <summary>
            Determines if this set is disjoint from another set. Two sets are disjoint
            if no item from one set is equal to any item in the other set.
            </summary>
            <remarks>
            <para>The answer is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to check disjointness with.</param>
            <returns>True if the two sets are disjoint, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.UnionWith(DmFramework.Collections.Set{`0})">
            <summary>
            Computes the union of this set with another set. The union of two sets
            is all items that appear in either or both of the sets. This set receives
            the union of the two sets, the other set is unchanged.
            </summary>
            <remarks>
            <para>If equal items appear in both sets, the union will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The union of two sets is computed in time O(M + N), where M is the size of the
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to union with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.Union(DmFramework.Collections.Set{`0})">
            <summary>
            Computes the union of this set with another set. The union of two sets
            is all items that appear in either or both of the sets. A new set is
            created with the union of the sets and is returned. This set and the other set
            are unchanged.
            </summary>
            <remarks>
            <para>If equal items appear in both sets, the union will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The union of two sets is computed in time O(M + N), where M is the size of the
            one set, and N is the size of the other set.</para>
            </remarks>
            <param name="otherSet">Set to union with.</param>
            <returns>The union of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.IntersectionWith(DmFramework.Collections.Set{`0})">
            <summary>
            Computes the intersection of this set with another set. The intersection of two sets
            is all items that appear in both of the sets. This set receives
            the intersection of the two sets, the other set is unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both sets, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to intersection with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.Intersection(DmFramework.Collections.Set{`0})">
            <summary>
            Computes the intersection of this set with another set. The intersection of two sets
            is all items that appear in both of the sets. A new set is
            created with the intersection of the sets and is returned. This set and the other set
            are unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both sets, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to intersection with.</param>
            <returns>The intersection of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.DifferenceWith(DmFramework.Collections.Set{`0})">
            <summary>
            Computes the difference of this set with another set. The difference of these two sets
            is all items that appear in this set, but not in <paramref name="otherSet"/>. This set receives
            the difference of the two sets; the other set is unchanged.
            </summary>
            <remarks>
            <para>The difference of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to difference with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.Difference(DmFramework.Collections.Set{`0})">
            <summary>
            Computes the difference of this set with another set. The difference of these two sets
            is all items that appear in this set, but not in <paramref name="otherSet"/>. A new set is
            created with the difference of the sets and is returned. This set and the other set
            are unchanged.
            </summary>
            <remarks>
            <para>The difference of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to difference with.</param>
            <returns>The difference of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.SymmetricDifferenceWith(DmFramework.Collections.Set{`0})">
            <summary>
            Computes the symmetric difference of this set with another set. The symmetric difference of two sets
            is all items that appear in either of the sets, but not both. This set receives
            the symmetric difference of the two sets; the other set is unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to symmetric difference with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:DmFramework.Collections.Set`1.SymmetricDifference(DmFramework.Collections.Set{`0})">
            <summary>
            Computes the symmetric difference of this set with another set. The symmetric difference of two sets
            is all items that appear in either of the sets, but not both. A new set is
            created with the symmetric difference of the sets and is returned. This set and the other set
            are unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to symmetric difference with.</param>
            <returns>The symmetric difference of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="P:DmFramework.Collections.Set`1.Comparer">
            <summary>Returns the IEqualityComparer&lt;T&gt; used to compare items in this set.</summary>
            <value>If the set was created using a comparer, that comparer is returned. Otherwise
            the default comparer for T (EqualityComparer&lt;T&gt;.Default) is returned.</value>
        </member>
        <member name="P:DmFramework.Collections.Set`1.Count">
            <summary>Returns the number of items in the set.</summary>
            <remarks>The size of the set is returned in constant time.</remarks>
            <value>The number of items in the set.</value>
        </member>
        <member name="T:DmFramework.Collections.Triple`3">
            <summary>
            Stores a triple of objects within a single struct. This struct is useful to use as the
            T of a collection, or as the TKey or TValue of a dictionary.
            </summary>
        </member>
        <member name="F:DmFramework.Collections.Triple`3.firstComparer">
            <summary>
            Comparers for the first and second type that are used to compare
            values.
            </summary>
        </member>
        <member name="F:DmFramework.Collections.Triple`3.First">
            <summary>The first element of the triple.</summary>
        </member>
        <member name="F:DmFramework.Collections.Triple`3.Second">
            <summary>The second element of the triple.</summary>
        </member>
        <member name="F:DmFramework.Collections.Triple`3.Third">
            <summary>The thrid element of the triple.</summary>
        </member>
        <member name="M:DmFramework.Collections.Triple`3.#ctor(`0,`1,`2)">
            <summary>Creates a new triple with given elements.</summary>
            <param name="first">The first element of the triple.</param>
            <param name="second">The second element of the triple.</param>
            <param name="third">The third element of the triple.</param>
        </member>
        <member name="M:DmFramework.Collections.Triple`3.Equals(System.Object)">
            <summary>
            Determines if this triple is equal to another object. The triple is equal to another object
            if that object is a Triple, all element types are the same, and the all three elements
            compare equal using object.Equals.
            </summary>
            <param name="obj">Object to compare for equality.</param>
            <returns>True if the objects are equal. False if the objects are not equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.Triple`3.Equals(DmFramework.Collections.Triple{`0,`1,`2})">
            <summary>
            Determines if this triple is equal to another triple. Two triples are equal if the all three elements
            compare equal using IComparable&lt;T&gt;.Equals or object.Equals.
            </summary>
            <param name="other">Triple to compare with for equality.</param>
            <returns>True if the triples are equal. False if the triples are not equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.Triple`3.GetHashCode">
            <summary>
            Returns a hash code for the triple, suitable for use in a hash-table or other hashed collection.
            Two triples that compare equal (using Equals) will have the same hash code. The hash code for
            the triple is derived by combining the hash codes for each of the two elements of the triple.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:DmFramework.Collections.Triple`3.CompareTo(DmFramework.Collections.Triple{`0,`1,`2})">
            <summary>
            <para> Compares this triple to another triple of the some type. The triples are compared by using
            the IComparable&lt;T&gt; or IComparable interface on TFirst, TSecond, and TThird. The triples
            are compared by their first elements first, if their first elements are equal, then they
            are compared by their second elements. If their second elements are also equal, then they
            are compared by their third elements.</para>
            <para>If TFirst, TSecond, or TThird does not implement IComparable&lt;T&gt; or IComparable, then
            an NotSupportedException is thrown, because the triples cannot be compared.</para>
            </summary>
            <param name="other">The triple to compare to.</param>
            <returns>An integer indicating how this triple compares to <paramref name="other"/>. Less
            than zero indicates this triple is less than <paramref name="other"/>. Zero indicate this triple is
            equals to <paramref name="other"/>. Greater than zero indicates this triple is greater than
            <paramref name="other"/>.</returns>
            <exception cref="T:System.NotSupportedException">Either FirstSecond, TSecond, or TThird is not comparable
            via the IComparable&lt;T&gt; or IComparable interfaces.</exception>
        </member>
        <member name="M:DmFramework.Collections.Triple`3.System#IComparable#CompareTo(System.Object)">
            <summary>
            <para> Compares this triple to another triple of the some type. The triples are compared by using
            the IComparable&lt;T&gt; or IComparable interface on TFirst, TSecond, and TThird. The triples
            are compared by their first elements first, if their first elements are equal, then they
            are compared by their second elements. If their second elements are also equal, then they
            are compared by their third elements.</para>
            <para>If TFirst, TSecond, or TThird does not implement IComparable&lt;T&gt; or IComparable, then
            an NotSupportedException is thrown, because the triples cannot be compared.</para>
            </summary>
            <param name="obj">The triple to compare to.</param>
            <returns>An integer indicating how this triple compares to <paramref name="obj"/>. Less
            than zero indicates this triple is less than <paramref name="obj"/>. Zero indicate this triple is
            equals to <paramref name="obj"/>. Greater than zero indicates this triple is greater than
            <paramref name="obj"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of the correct type.</exception>
            <exception cref="T:System.NotSupportedException">Either FirstSecond, TSecond, or TThird is not comparable
            via the IComparable&lt;T&gt; or IComparable interfaces.</exception>
        </member>
        <member name="M:DmFramework.Collections.Triple`3.ToString">
            <summary>
            Returns a String representation of the triple. The String representation of the triple is
            of the form:
            <c>First: {0}, Second: {1}, Third: {2}</c>
            where {0} is the result of First.ToString(), {1} is the result of Second.ToString(), and
            {2} is the result of Third.ToString() (or "null" if they are null.)
            </summary>
            <returns> The String representation of the triple.</returns>
        </member>
        <member name="M:DmFramework.Collections.Triple`3.op_Equality(DmFramework.Collections.Triple{`0,`1,`2},DmFramework.Collections.Triple{`0,`1,`2})">
            <summary>
            Determines if two triples are equal. Two triples are equal if the all three elements
            compare equal using IComparable&lt;T&gt;.Equals or object.Equals.
            </summary>
            <param name="pair1">First triple to compare.</param>
            <param name="pair2">Second triple to compare.</param>
            <returns>True if the triples are equal. False if the triples are not equal.</returns>
        </member>
        <member name="M:DmFramework.Collections.Triple`3.op_Inequality(DmFramework.Collections.Triple{`0,`1,`2},DmFramework.Collections.Triple{`0,`1,`2})">
            <summary>
            Determines if two triples are not equal. Two triples are equal if the all three elements
            compare equal using IComparable&lt;T&gt;.Equals or object.Equals.
            </summary>
            <param name="pair1">First triple to compare.</param>
            <param name="pair2">Second triple to compare.</param>
            <returns>True if the triples are not equal. False if the triples are equal.</returns>
        </member>
        <member name="T:DmFramework.DataSetSerializationType">
            <summary>DataSet序列化方式</summary>
        </member>
        <member name="F:DmFramework.DataSetSerializationType.XmlSerializer">
            <summary>XML序列化，FX</summary>
        </member>
        <member name="F:DmFramework.DataSetSerializationType.BinarySerializer">
            <summary>Binary序列化，FX</summary>
        </member>
        <member name="F:DmFramework.DataSetSerializationType.SurrogateSerializer">
            <summary>Surrogate序列化，FX</summary>
        </member>
        <member name="T:DmFramework.OSVersionType">
            <summary>操作系统类型.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.UnKnown">
            <summary>未知</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_3_1">
            <summary>Microsoft Windows 3.1</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_Me">
            <summary>Microsoft Windows Me.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_98_SecondEdition">
            <summary>Microsoft Windows 98 Second Edition.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_98">
            <summary>Microsoft Windows 98.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_95_OS_R2">
            <summary>Microsoft Windows 95 OS R2.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_95">
            <summary>Microsoft Windows 95.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_NT_3_5_1">
            <summary>Microsoft Windows NT 3.51.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_NT_4_0">
            <summary>Microsoft Windows NT 4.0.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_NT_4_0_Server">
            <summary>Microsoft Windows NT 4.0 Server.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_2000">
            <summary>Microsoft Windows 2000.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_XP">
            <summary>Microsoft Windows XP.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_Server_2003">
            <summary>Microsoft Windows Server 2003.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_Vista">
            <summary>Microsoft Windows Vista.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_7">
            <summary>Microsoft Windows 7.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_Server_2008">
            <summary>Microsoft Windows Server 2008.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_Server_2008_R2">
            <summary>Microsoft Windows Server 2008 R2.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Microsoft_Windows_CE">
            <summary>Microsoft Windows CE.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.Unix">
            <summary>Unix.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.MacOSX">
            <summary>MacOSX,基于 Unix 的增强版.</summary>
        </member>
        <member name="F:DmFramework.OSVersionType.XBox_360">
            <summary>XBox 360</summary>
        </member>
        <member name="T:DmFramework.EnvironmentHelper">
            <summary>提供有关当前环境和平台的信息以及操作它们的方法.</summary>
        </member>
        <member name="F:DmFramework.EnvironmentHelper.CarriageReturnLineFeed">
            <summary>回车换行符</summary>
        </member>
        <member name="F:DmFramework.EnvironmentHelper.Empty">
            <summary>空字符</summary>
        </member>
        <member name="F:DmFramework.EnvironmentHelper.CarriageReturn">
            <summary>回车符</summary>
        </member>
        <member name="F:DmFramework.EnvironmentHelper.LineFeed">
            <summary>换行符</summary>
        </member>
        <member name="F:DmFramework.EnvironmentHelper.Tab">
            <summary>制表符</summary>
        </member>
        <member name="P:DmFramework.EnvironmentHelper.OSEdition">
            <summary>当前系统的发行版本.类似 "Service Pack 2".</summary>
        </member>
        <member name="P:DmFramework.EnvironmentHelper.OSName">
            <summary>获取当前计算机操作系统的版本名称.类似 "Microsoft Windows Server 2003".</summary>
        </member>
        <member name="P:DmFramework.EnvironmentHelper.OSVersion">
            <summary>获取标识操作系统的 <see cref="P:DmFramework.EnvironmentHelper.OSVersion"/> 对象.</summary>
        </member>
        <member name="P:DmFramework.EnvironmentHelper.OSVersionString">
            <summary>获取平台标识符、版本和当前安装在操作系统上的 Service Pack 的连接字符串表示形式.</summary>
        </member>
        <member name="P:DmFramework.EnvironmentHelper.OSServicePack">
            <summary>获取当前操作系统补丁包的详细信息.类似 "Standard".</summary>
        </member>
        <member name="P:DmFramework.EnvironmentHelper.IsGreaterThanOrEqualToVista">
            <summary>获取当前的系统是否是 Windows Vista (包含)以上.</summary>
        </member>
        <member name="T:DmFramework.Common.HardInfo">
            <summary>硬件信息</summary>
        </member>
        <member name="M:DmFramework.Common.HardInfo.ToExtend">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Common.HardInfo.FromExtend(DmFramework.Xml.ExtendData)">
            <summary></summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Common.HardInfo.ToXml">
            <summary>导出XML</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Common.HardInfo.FromXml(System.String)">
            <summary>导入</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Common.HardInfo.MachineName">
            <summary>机器名</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.BaseBoard">
            <summary>主板</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.Processors">
            <summary>处理器</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.Disk">
            <summary>磁盘</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.DiskSerial">
            <summary>磁盘序列号</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.Volume">
            <summary>驱动器序列号</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.Macs">
            <summary>网卡</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.IPs">
            <summary>IP地址</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.OSVersion">
            <summary>系统版本</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.Memory">
            <summary>内存</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.ScreenWidth">
            <summary>屏幕宽</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.ScreenHeight">
            <summary>屏幕高</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.DiskSize">
            <summary>磁盘大小</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo.Current">
            <summary>当前机器硬件信息</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo._.BaseBoard">
            <summary>主板序列号</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo._.Processors">
            <summary>处理器序列号</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo._.Memory">
            <summary>内存总量</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo._.Disk">
            <summary>磁盘名称</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo._.DiskSerial">
            <summary>磁盘序列号</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo._.Volume">
            <summary>驱动器序列号</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo._.Macs">
            <summary>网卡地址序列号</summary>
        </member>
        <member name="P:DmFramework.Common.HardInfo._.IPs">
            <summary>IP地址</summary>
        </member>
        <member name="T:DmFramework.Common.IdentityCard">
            <summary>身份证</summary>
        </member>
        <member name="M:DmFramework.Common.IdentityCard.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Common.IdentityCard.Valid(System.String)">
            <summary>验证身份证是否合法</summary>
            <param name="card"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Common.IdentityCard.Parse(System.String)">
            <summary>使用身份证号码初始化</summary>
            <param name="card"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Common.IdentityCard.Birthday">
            <summary>生日</summary>
        </member>
        <member name="P:DmFramework.Common.IdentityCard.Sex">
            <summary>性别</summary>
        </member>
        <member name="P:DmFramework.Common.IdentityCard.IsOld">
            <summary>是否15位旧卡</summary>
        </member>
        <member name="P:DmFramework.Common.IdentityCard.AreaNum">
            <summary>地区编码</summary>
        </member>
        <member name="T:DmFramework.Common.IdentityCard.SexType">
            <summary>性别</summary>
        </member>
        <member name="F:DmFramework.Common.IdentityCard.SexType.Man">
            <summary>男</summary>
        </member>
        <member name="F:DmFramework.Common.IdentityCard.SexType.Woman">
            <summary>女</summary>
        </member>
        <member name="T:DmFramework.Common.PinYin">
            <summary>汉字拼音转换类</summary>
        </member>
        <member name="M:DmFramework.Common.PinYin.GetFirst(System.Char)">
            <summary>取拼音第一个字段</summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Common.PinYin.GetFirst(System.String)">
            <summary>取拼音第一个字段</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Common.PinYin.Get(System.Char)">
            <summary>获取单字拼音</summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Common.PinYin.Get(System.String)">
            <summary>把汉字转换成拼音(全拼)</summary>
            <param name="str">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="T:DmFramework.Runtime">
            <summary>运行时</summary>
        </member>
        <member name="M:DmFramework.Runtime.GetPEFileKinds(System.Reflection.MemberInfo)">
            <summary>获取PE文件类型。扩展方法</summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Runtime.GetPEFileKinds(System.String)">
            <summary>Parses the PE header and determines whether the given assembly is a console application.</summary>
            <param name="assemblyPath">The path of the assembly to check.</param>
            <remarks>The magic numbers in this method are extracted from the PE/COFF file
            format specification available from http://www.microsoft.com/whdc/system/platform/firmware/pecoff.mspx
            </remarks>
        </member>
        <member name="M:DmFramework.Runtime.SetProcessWorkingSetSize(System.Int32,System.Int32,System.Int32)">
            <summary>设置进程的程序集大小，将部分物理内存占用转移到虚拟内存</summary>
            <param name="pid">要设置的进程ID</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Runtime.ReleaseMemory">
            <summary>释放当前进程所占用的内存</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Runtime.IsConsole">
            <summary>是否控制台。用于判断是否可以执行一些控制台操作。</summary>
        </member>
        <member name="P:DmFramework.Runtime.IsWeb">
            <summary>是否Web环境</summary>
        </member>
        <member name="P:DmFramework.Runtime.Is64BitOperatingSystem">
            <summary>确定当前操作系统是否为 64 位操作系统。</summary>
            <returns>如果操作系统为 64 位操作系统，则为 true；否则为 false。</returns>
        </member>
        <member name="P:DmFramework.Runtime.Is64BitProcess">
            <summary>确定当前进程是否为 64 位进程。</summary>
            <returns>如果进程为 64 位进程，则为 true；否则为 false。</returns>
        </member>
        <member name="P:DmFramework.Runtime.OSName">
            <summary>操作系统</summary>
        </member>
        <member name="T:DmFramework.OSSuites">
            <summary>标识系统上的程序组</summary>
        </member>
        <member name="T:DmFramework.OSProductType">
            <summary>标识系统类型</summary>
        </member>
        <member name="F:DmFramework.OSProductType.WorkStation">
            <summary>工作站</summary>
        </member>
        <member name="F:DmFramework.OSProductType.DomainController">
            <summary>域控制器</summary>
        </member>
        <member name="F:DmFramework.OSProductType.Server">
            <summary>服务器</summary>
        </member>
        <member name="T:DmFramework.Common.SysConfig">
            <summary>系统设置。提供系统名称、版本等基本设置。</summary>
        </member>
        <member name="T:DmFramework.Common.SysConfig`1">
            <summary>系统设置。提供系统名称、版本等基本设置。泛型基类，可继承扩展。</summary>
            <typeparam name="TSetting"></typeparam>
        </member>
        <member name="T:DmFramework.Xml.XmlConfig`1">
             <summary>Xml配置文件基类</summary>
             <remarks>
             标准用法：TConfig.Current
            
             配置实体类通过<see cref="T:DmFramework.Xml.XmlConfigFileAttribute"/>特性指定配置文件路径以及自动更新时间。
             Current将加载配置文件，如果文件不存在或者加载失败，将实例化一个对象返回。
            
             考虑到自动刷新，不提供LoadFile和SaveFile等方法，可通过扩展方法ToXmlFileEntity和ToXmlFile实现。
            
             用户也可以通过配置实体类的静态构造函数修改基类的<see cref="P:DmFramework.Xml.XmlConfig`1._.ConfigFile"/>和<see cref="P:DmFramework.Xml.XmlConfig`1._.ReloadTime"/>来动态配置加载信息。
             </remarks>
             <typeparam name="TConfig"></typeparam>
        </member>
        <member name="F:DmFramework.Xml.XmlConfig`1.lastWrite">
            <summary>最后写入时间</summary>
        </member>
        <member name="F:DmFramework.Xml.XmlConfig`1.expire">
            <summary>过期时间。如果在这个时间之后再次访问，将检查文件修改时间</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlConfig`1.OnLoaded">
            <summary>从配置文件中读取完成后触发</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlConfig`1.Save">
            <summary>保存到配置文件中去</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlConfig`1.Current">
            <summary>当前实例。通过置空可以使其重新加载。</summary>
        </member>
        <member name="T:DmFramework.Xml.XmlConfig`1._">
            <summary>一些设置。派生类可以在自己的静态构造函数中指定</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlConfig`1._.ConfigFile">
            <summary>配置文件路径</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlConfig`1._.ReloadTime">
            <summary>重新加载时间。单位：毫秒</summary>
        </member>
        <member name="M:DmFramework.Common.SysConfig`1.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="F:DmFramework.Common.SysConfig`1.SysAssembly">
            <summary>系统主程序集</summary>
        </member>
        <member name="P:DmFramework.Common.SysConfig`1.Name">
            <summary>系统名称</summary>
        </member>
        <member name="P:DmFramework.Common.SysConfig`1.Version">
            <summary>系统版本</summary>
        </member>
        <member name="P:DmFramework.Common.SysConfig`1.DisplayName">
            <summary>显示名称</summary>
        </member>
        <member name="P:DmFramework.Common.SysConfig`1.Company">
            <summary>公司</summary>
        </member>
        <member name="P:DmFramework.Common.SysConfig`1.Address">
            <summary>地址</summary>
        </member>
        <member name="P:DmFramework.Common.SysConfig`1.Tel">
            <summary>电话</summary>
        </member>
        <member name="P:DmFramework.Common.SysConfig`1.Fax">
            <summary>传真</summary>
        </member>
        <member name="P:DmFramework.Common.SysConfig`1.EMail">
            <summary>电子邮件</summary>
        </member>
        <member name="P:DmFramework.Common.SysConfig`1.IsEnable">
            <summary>是否启用</summary>
        </member>
        <member name="P:DmFramework.Common.SysConfig`1.InstallTime">
            <summary>安装时间</summary>
        </member>
        <member name="T:DmFramework.WeakReference`1">
            <summary>弱引用</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.WeakReference`1.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:DmFramework.WeakReference`1.#ctor(`0)">
            <summary>实例化</summary>
            <param name="target"></param>
        </member>
        <member name="M:DmFramework.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>实例化</summary>
            <param name="target"></param>
            <param name="trackResurrection"></param>
        </member>
        <member name="M:DmFramework.WeakReference`1.TryGetTarget(`0@)">
            <summary>尝试获取目标值</summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.WeakReference`1.op_Implicit(DmFramework.WeakReference{`0})~`0">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.WeakReference`1.op_Implicit(`0)~DmFramework.WeakReference{`0}">
            <summary>类型转换</summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.WeakReference`1.Target">
            <summary>目标引用对象</summary>
        </member>
        <member name="T:DmFramework.Configuration.AppConfigInfo">
            <summary>HmFrame组件设置描述类, 加[Serializable]标记为可序列化</summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoBase.Init">
            <summary>配置文件初始化</summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoBase.LoadConfig(System.String)">
            <summary>配置文件载入，只适用于DataSet方式</summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoBase.SaveConfig(System.String)">
            <summary>配置文件存储，只适用于DataSet方式</summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoBase.TryGetConfig``1(System.String,``0@)">
            <summary>尝试获取指定名称的设置项</summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoBase.TryGetConfig(System.String,System.Type,System.Object@)">
            <summary>尝试获取指定名称的设置项</summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Configuration.ConfigInfoBase.UsingXmlSerializer">
            <summary>配置文件存储方式，分XML序列化和Dataset两种</summary>
        </member>
        <member name="M:DmFramework.Configuration.BaseConfigs`2.ConfigFileExist">
            <summary>配置文件是否存在</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.BaseConfigs`2.GetConfig">
            <summary>加载配置实例</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.BaseConfigs`2.SaveConfig(`1)">
            <summary>保存配置实例</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.BaseConfigs`2.SaveConfig">
            <summary>保存配置实例</summary>
        </member>
        <member name="T:DmFramework.Configuration.ConfigCustomItem">
            <summary>自定义配置项</summary>
        </member>
        <member name="P:DmFramework.Configuration.ConfigCustomItem.Name">
            <summary>配置项名称</summary>
        </member>
        <member name="P:DmFramework.Configuration.ConfigCustomItem.Value">
            <summary>配置项值</summary>
        </member>
        <member name="T:DmFramework.Configuration.Config">
            <summary>通用配置辅助类</summary>
            <remarks>
            一定要注意的是：ConfigurationManager.AppSettings会获取当前应用的设置，如果子目录里面的web.config有设置，则会获取最近的设置。
            </remarks>
        </member>
        <member name="M:DmFramework.Configuration.Config.GethttpHandlers">
            <summary>获取httpHandlers</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.Contain(System.String)">
            <summary>是否包含指定项的设置</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.GetMutilConfig``1(``0,System.String[])">
            <summary>依次尝试获取一批设置项，直到找到第一个为止</summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.TryGetMutilConfig``1(``0@,System.String[])">
            <summary>依次尝试获取一批设置项，直到找到第一个为止</summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.GetConfig``1(System.String)">
            <summary>取得指定名称的设置项，并转为指定类型</summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.GetConfig``1(System.String,``0)">
            <summary>取得指定名称的设置项，并转为指定类型。如果设置不存在，则返回默认值</summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.TryGetConfig``1(System.String,``0@)">
            <summary>尝试获取指定名称的设置项</summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.TryGetConfig(System.String,System.Type,System.Object@)">
            <summary>尝试获取指定名称的设置项</summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.GetConfigByPrefix(System.String)">
            <summary>根据指定前缀，获取设置项。其中key不包含前缀</summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.GetConfigSplit``1(System.String,System.String)">
            <summary>取得指定名称的设置项，并分割为指定类型数组</summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.GetConfigSplit``1(System.String,System.String,``0[])">
            <summary>取得指定名称的设置项，并分割为指定类型数组</summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="split"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.Config.SetConfig``1(System.String,``0)">
            <summary>设置配置文件参数</summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:DmFramework.Configuration.Config.SetConfig(System.String,System.String)">
            <summary>设置配置文件参数</summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Configuration.Config.AppSettingsKeyExists(System.String,System.Configuration.Configuration)">
            <summary>
            判断appSettings中是否有此项
            </summary>
        </member>
        <member name="M:DmFramework.Configuration.Config.UpdateConfig(System.String,System.String)">
            <summary>设置配置文件参数</summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:DmFramework.Configuration.Config.AppSettings">
            <summary>应用设置</summary>
        </member>
        <member name="P:DmFramework.Configuration.Config.ConnectionStrings">
            <summary>连接字符串设置</summary>
        </member>
        <member name="P:DmFramework.Configuration.Config.httpHandlers">
            <summary>获取httphandlers</summary>
        </member>
        <member name="F:DmFramework.Configuration.ConfigFileManager`1.m_lockHelper">
            <summary>锁对象</summary>
        </member>
        <member name="F:DmFramework.Configuration.ConfigFileManager`1.m_fileOldChangeTime">
            <summary>配置文件修改时间</summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigFileManager`1.#ctor(System.String,System.String)">
            <summary>初始化/载入配置信息，如果配置文件不存在则创建包含默认配置信息的配置文件</summary>
            <param name="type">配置文件类型，也是配置文件存储名称，默认扩展名为.config</param>
            <param name="path">配置文件存储路径</param>
        </member>
        <member name="M:DmFramework.Configuration.ConfigFileManager`1.Create(System.String,System.String)">
            <summary>每个目录的日志实例应该只有一个，所以采用静态创建</summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.ConfigFileManager`1.LoadConfig(System.Boolean)">
            <summary>加载(反序列化)指定对象类型的配置对象</summary>
            <param name="checkTime">是否检查并更新传递进来的"文件加载时间"变量</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.ConfigFileManager`1.SaveConfig(`0)">
            <summary>保存(序列化)指定对象类型的配置对象</summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
            因为该方法只会被调用一次，所以该参数的意义不太大。</param>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.LoadConfig(System.String)">
            <summary>配置文件载入，只适用于DataSet方式</summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.SaveConfig(System.String)">
            <summary>配置文件存储，只适用于DataSet方式</summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.Clear">
            <summary>配置文件DataSet对象的所有数据</summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.Clone">
            <summary>复制 DataSet 的结构，包括所有 DataTable 架构、关系和约束。 不复制任何数据。</summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.Copy">
            <summary>复制该 DataSet 的结构和数据。 </summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.GetTable(System.String)">
            <summary>根据表名得到 DataTable 对象。 </summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.ClearTable(System.String)">
            <summary>清除指定表的所有数据。 </summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.CloneTable(System.String)">
            <summary>克隆指定表的结构，包括所有架构和约束。  </summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.CopyTable(System.String)">
            <summary>复制指定表的结构和数据。 </summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.Compute(System.String,System.String,System.String)">
            <summary>根据表名，计算用来传递筛选条件的当前行上的给定表达式</summary>
            <param name="tableName"></param>
            <param name="expression"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.NewRow(System.String)">
            <summary>创建与该表具有相同架构的新 DataRow。 </summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.GetTableRows(System.String)">
            <summary>根据表名得到 DataTable 对象行的集合。 </summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.Select(System.String)">
            <summary>获取指定表所有 DataRow 对象的数组。 </summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.Select(System.String,System.String)">
            <summary>按照主键顺序（如果没有主键，则按照添加顺序）获取与筛选条件相匹配的所有 DataRow 对象的数组。 </summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.Select(System.String,System.String,System.String)">
            <summary>获取按照指定的排序顺序且与筛选条件相匹配的所有 DataRow 对象的数组。 </summary>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.GetDefaultView(System.String)">
            <summary>根据表名获取该表的默认视图</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.GetView(System.String,System.String,System.String)">
            <summary>根据表名获取该表一个新的视图</summary>
            <param name="tableName"></param>
            <param name="rowFilter"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Configuration.ConfigInfoDataSet.GetView(System.String,System.String,System.String,System.Data.DataViewRowState)">
            <summary>根据表名获取该表一个新的视图</summary>
            <param name="tableName"></param>
            <param name="rowFilter"></param>
            <param name="sort"></param>
            <param name="rowState"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Configuration.ConfigInfoDataSet.SerializationType">
            <summary>序列化方式，默认XML</summary>
        </member>
        <member name="P:DmFramework.Configuration.ConfigInfoDataSet.WriteXmlIgnoreSchema">
            <summary>保存时是否忽略架构信息</summary>
        </member>
        <member name="P:DmFramework.Configuration.ConfigInfoDataSet.ReadXmlIgnoreSchema">
            <summary>读取时是否忽略架构信息</summary>
        </member>
        <member name="P:DmFramework.Configuration.ConfigInfoDataSet.LockSynchronizer">
            <summary>Gets lobal lock() Object what can be used to lock whole User API.</summary>
        </member>
        <member name="P:DmFramework.Configuration.ConfigInfoDataSet.ConfigDataSet">
            <summary>配置文件DataSet对象</summary>
        </member>
        <member name="P:DmFramework.Configuration.ConfigInfoDataSet.ConfigTables">
            <summary>配置文件DataSet对象的表的集合</summary>
        </member>
        <member name="T:DmFramework.Configuration.LogConfigInfo">
            <summary>Log设置描述类, 加[Serializable]标记为可序列化</summary>
        </member>
        <member name="M:DmFramework.Configuration.LogConfigInfo.GetAllowLogAction(System.String)">
            <summary>取得允许的Log输出模式</summary>
            <param name="action" type="string">
            <para></para>
            </param>
            <returns>A int value...</returns>
        </member>
        <member name="M:DmFramework.Configuration.LogConfigInfo.GetBackupFileSize">
            <summary>日志文件大小，备份时需要。</summary>
            <returns>A long value...</returns>
        </member>
        <member name="M:DmFramework.Configuration.LogConfigInfo.GetClearHour">
            <summary>自动清除日志文件期限</summary>
            <returns>A int value...</returns>
        </member>
        <member name="P:DmFramework.Configuration.LogConfigInfo.BackupFileSize">
            <summary>
            日志文件大小，三种方式：1 mb；1024 kb；1048576，为空则不作备份
            只要制定了备份日志文件大小之后，不管任何命名方式都备份
            </summary>
        </member>
        <member name="P:DmFramework.Configuration.LogConfigInfo.ClearHour">
            <summary>清除备份log文件的时间，三种方式：30 m（月）; 30 d（天）; 30 h（小时），为空则不作清理</summary>
        </member>
        <member name="P:DmFramework.Configuration.LogConfigInfo.TimedLog">
            <summary>日志文件命名方式：1 - 按日期命名；2 - 按日期小时命名；3 - 按日期小时分钟命名；其他数值：使用LogFileName设定的名字</summary>
        </member>
        <member name="P:DmFramework.Configuration.LogConfigInfo.LogFileName">
            <summary>日志文件名称：默认为空，系统自动根据时间命名</summary>
        </member>
        <member name="P:DmFramework.Configuration.LogConfigInfo.ThinkTime">
            <summary>日志线程思考时间，单位毫秒</summary>
        </member>
        <member name="P:DmFramework.Configuration.LogConfigInfo.IsMutex">
            <summary>是否需要互拆对象，进程级别</summary>
        </member>
        <member name="P:DmFramework.Configuration.LogConfigInfo.MutexName">
            <summary>互拆对象命名</summary>
        </member>
        <member name="P:DmFramework.Configuration.LogConfigInfo.SecurityMemNumber">
            <summary>队列最大缓存数目：值为0则不限制</summary>
        </member>
        <member name="T:DmFramework.Configuration.LogConfigs">
            <summary>Log配置管理</summary>
            <remarks></remarks>
        </member>
        <member name="T:DmFramework.ConvertHelper">
            <summary>
            <para>　</para>
            　常用工具类——转换操作类
            </summary>
        </member>
        <member name="M:DmFramework.ConvertHelper.GetStrArray(System.String,System.Char,System.Boolean)">
            <summary>将字符串分隔转为泛型LIST</summary>
            <param name="str">字符串</param>
            <param name="speater">分隔符</param>
            <param name="toLower">是否转换为小写</param>
            <returns>ILIST</returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.GetArrayStr(System.Collections.Generic.List{System.String},System.String)">
            <summary>将泛型ILIST转换为分隔字符串</summary>
            <param name="list">泛型ILIST</param>
            <param name="speater">分隔字符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.GetStrArray(System.String)">
            <summary>将分隔字符串","转换为字符串数组</summary>
            <param name="str">字符串</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.FileToBinary(System.String)">
            <summary>将文件转换为二进制数组</summary>
            <param name="FilePath">文件完整路径</param>
            <returns>二进制数组</returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.BinaryToFile(System.String,System.Byte[])">
            <summary>二进制数组转为文件</summary>
            <param name="FilePath">转到的文件完整路径</param>
            <param name="Buffer">二进制数组</param>
            <returns>转换是否成功</returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.ToString(System.Object)">
            <summary>Converts object to String. If value == null, returns "".</summary>
            <param name="value">Value to  be converted.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.ToBoolean(System.Object)">
            <summary>Convert object to Boolean. If value == null or object can't be converted to Boolean, returns false.</summary>
            <param name="value">Value to  be converted.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.ToBoolean(System.Object,System.Boolean)">
            <summary>Convert object to Boolean. If value == null or object can't be converted to Boolean, returns defaultValue.</summary>
            <param name="value">Value to  be converted.</param>
            <param name="defaultValue">If parsing fails, this default value is used then.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.ToInt32(System.Object)">
            <summary>Convert object to Int32. If value == null or object can't be converted to Int32, returns 0.</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.ToInt32(System.Object,System.Int32)">
            <summary>Convert object to Int32. If value == null or object can't be converted to Int32, returns 0.</summary>
            <param name="value">Value to convert.</param>
            <param name="defaultValue">Default value if value == null.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.ToInt64(System.Object)">
            <summary>Convert object to Int64. If value == null or object can't be converted to Int64, returns 0.</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.ToInt64(System.Object,System.Int64)">
            <summary>Convert object to Int64. If value == null or object can't be converted to Int64, returns 0.</summary>
            <param name="value">Value to convert.</param>
            <param name="defaultValue">Default value if value == null.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.ConvertHelper.ToIPEndPoint(System.String,System.Net.IPEndPoint)">
            <summary>Converts specified value to IP end point. Returns default value specified if parsing fails.</summary>
            <param name="value">Value to convert.</param>
            <param name="defultValue">Default value if parsing fails.</param>
        </member>
        <member name="T:DmFramework.Configuration.MessageConfigInfo">
            <summary>网络配置, 加[Serializable]标记为可序列化</summary>
        </member>
        <member name="P:DmFramework.Configuration.MessageConfigInfo.IsMessageDebug">
            <summary>消息配置：是否启用消息调试，输出序列化过程。默认为不启用</summary>
        </member>
        <member name="P:DmFramework.Configuration.MessageConfigInfo.IsDumpStreamWhenError">
            <summary>消息配置：是否在出错时Dump数据流到文件中。默认为不启用</summary>
        </member>
        <member name="T:DmFramework.Configuration.MessageConfigs">
            <summary>网络配置管理类</summary>
        </member>
        <member name="T:DmFramework.Configuration.SystemConfigInfo">
            <summary>系统配置, 加[Serializable]标记为可序列化</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.IsDebug">
            <summary>是否启用全局调试。默认为不启用</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.TempPath">
            <summary>临时目录：默认为当前目录下的HmTemp文件夹。生产环境建议输出到站点外单独的HmTemp目录</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.IsThreadDebug">
            <summary>线程池配置：是否启用线程池调试。默认为不启用</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.IsNetDebug">
            <summary>网络配置：是否启用网络调试。默认为不启用</summary>
        </member>
        <member name="T:DmFramework.Configuration.SystemConfigInfo.StreamHandlerItem">
            <summary>IO配置</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.StreamHandlerItem.Name">
            <summary>总线名称</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.StreamHandlerItem.Processor">
            <summary>数据流处理器，多个处理器用竖线|隔开，前面的处理器比后面的先处理。</summary>
        </member>
        <member name="T:DmFramework.Configuration.SystemConfigInfo.ObjectContainerItem">
            <summary>对象容器配置</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.ObjectContainerItem.Interface">
            <summary>接口名称</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.ObjectContainerItem.Name">
            <summary>标示</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.ObjectContainerItem.Type">
            <summary>类型名称</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.ObjectContainerItem.Priority">
            <summary>优先级</summary>
        </member>
        <member name="P:DmFramework.Configuration.SystemConfigInfo.ObjectContainerItem.Mode">
            <summary>模式标记</summary>
        </member>
        <member name="T:DmFramework.EventArgs`1">
            <summary>泛型事件参数</summary>
            <typeparam name="TArg"></typeparam>
        </member>
        <member name="M:DmFramework.EventArgs`1.#ctor(`0)">
            <summary>使用参数初始化</summary>
            <param name="arg"></param>
        </member>
        <member name="M:DmFramework.EventArgs`1.Pop(`0@)">
            <summary>弹出</summary>
            <param name="arg"></param>
        </member>
        <member name="P:DmFramework.EventArgs`1.Arg">
            <summary>参数</summary>
        </member>
        <member name="T:DmFramework.EventArgs`2">
            <summary>泛型事件参数</summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
        </member>
        <member name="M:DmFramework.EventArgs`2.#ctor(`0,`1)">
            <summary>使用参数初始化</summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:DmFramework.EventArgs`2.Pop(`0@,`1@)">
            <summary>弹出</summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="P:DmFramework.EventArgs`2.Arg1">
            <summary>参数</summary>
        </member>
        <member name="P:DmFramework.EventArgs`2.Arg2">
            <summary>参数2</summary>
        </member>
        <member name="T:DmFramework.EventArgs`3">
            <summary>泛型事件参数</summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
        </member>
        <member name="M:DmFramework.EventArgs`3.#ctor(`0,`1,`2)">
            <summary>使用参数初始化</summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:DmFramework.EventArgs`3.Pop(`0@,`1@,`2@)">
            <summary>弹出</summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="P:DmFramework.EventArgs`3.Arg1">
            <summary>参数</summary>
        </member>
        <member name="P:DmFramework.EventArgs`3.Arg2">
            <summary>参数2</summary>
        </member>
        <member name="P:DmFramework.EventArgs`3.Arg3">
            <summary>参数3</summary>
        </member>
        <member name="T:DmFramework.EventArgs`4">
            <summary>泛型事件参数</summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <typeparam name="TArg4"></typeparam>
        </member>
        <member name="M:DmFramework.EventArgs`4.#ctor(`0,`1,`2,`3)">
            <summary>使用参数初始化</summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
        </member>
        <member name="M:DmFramework.EventArgs`4.Pop(`0@,`1@,`2@,`3@)">
            <summary>弹出</summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
        </member>
        <member name="P:DmFramework.EventArgs`4.Arg1">
            <summary>参数</summary>
        </member>
        <member name="P:DmFramework.EventArgs`4.Arg2">
            <summary>参数2</summary>
        </member>
        <member name="P:DmFramework.EventArgs`4.Arg3">
            <summary>参数3</summary>
        </member>
        <member name="P:DmFramework.EventArgs`4.Arg4">
            <summary>参数4</summary>
        </member>
        <member name="T:DmFramework.WeakAction`1">
            <summary>弱引用Action</summary>
            <remarks>
            常见的事件和委托，都包括两部分：对象和方法，当然如果委托到静态方法上，对象是为空的。
            如果把事件委托到某个对象的方法上，同时就间接的引用了这个对象，导致其一直无法被回收，从而造成内存泄漏。
            弱引用Action，原理就是把委托拆分，然后弱引用对象部分，需要调用委托的时候，再把对象“拉”回来，如果被回收了，就没有必要再调用它的方法了。
            </remarks>
            <typeparam name="TArgs"></typeparam>
        </member>
        <member name="F:DmFramework.WeakAction`1.Target">
            <summary>目标对象。弱引用，使得调用方对象可以被GC回收</summary>
        </member>
        <member name="F:DmFramework.WeakAction`1.Method">
            <summary>委托方法</summary>
        </member>
        <member name="F:DmFramework.WeakAction`1.Handler">
            <summary>经过包装的新的委托</summary>
        </member>
        <member name="F:DmFramework.WeakAction`1.UnHandler">
            <summary>取消注册的委托</summary>
        </member>
        <member name="F:DmFramework.WeakAction`1.Once">
            <summary>是否只使用一次，如果只使用一次，执行委托后马上取消注册</summary>
        </member>
        <member name="M:DmFramework.WeakAction`1.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>实例化</summary>
            <param name="target"></param>
            <param name="method"></param>
        </member>
        <member name="M:DmFramework.WeakAction`1.#ctor(System.Object,System.Reflection.MethodInfo,System.Action{System.Action{`0}},System.Boolean)">
            <summary>实例化</summary>
            <param name="target"></param>
            <param name="method"></param>
            <param name="unHandler"></param>
            <param name="once"></param>
        </member>
        <member name="M:DmFramework.WeakAction`1.#ctor(System.Delegate)">
            <summary>实例化</summary>
            <param name="handler"></param>
        </member>
        <member name="M:DmFramework.WeakAction`1.#ctor(System.Delegate,System.Action{System.Action{`0}},System.Boolean)">
            <summary>使用事件处理器、取消注册回调、是否一次性事件来初始化</summary>
            <param name="handler"></param>
            <param name="unHandler"></param>
            <param name="once"></param>
        </member>
        <member name="M:DmFramework.WeakAction`1.Invoke(`0)">
            <summary>调用委托</summary>
            <param name="e"></param>
        </member>
        <member name="M:DmFramework.WeakAction`1.op_Implicit(DmFramework.WeakAction{`0})~System.Action{`0}">
            <summary>把弱引用事件处理器转换为普通事件处理器</summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.WeakAction`1.ToString">
            <summary>已重载</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.WeakAction`1.IsAlive">
            <summary>是否可用</summary>
        </member>
        <member name="T:DmFramework.WeakEventHandler`1">
            <summary>弱引用事件</summary>
            <remarks>
            很多绑定事件的场合，并不适合取消绑定，这就造成了事件资源无法得到回收。
            更加麻烦的是，事件本身除了包含事件处理方法外，还会包含目标对象，也就导致目标对象无法得到释放。
            弱引用事件的原理是把目标对象与事件处理方法分拆开来，使用弱引用来引用目标对象，保证目标对象能够得到有效的释放。
            触发弱引用事件时，首先判断目标对象是否可用，因为其可能已经被GC回收，然后再通过快速访问方法调用事件处理方法。
            也许有人会问，如果目标对象不可用怎么办？岂不是无法执行事件处理方法了？
            我们换一个角度来看，既然目标对象都已经不存在了，它绑定的事件自然也就无需过问了！
            </remarks>
            <typeparam name="TEventArgs"></typeparam>
        </member>
        <member name="F:DmFramework.WeakEventHandler`1.Target">
            <summary>目标对象。弱引用，使得调用方对象可以被GC回收</summary>
        </member>
        <member name="F:DmFramework.WeakEventHandler`1.Method">
            <summary>委托方法</summary>
        </member>
        <member name="F:DmFramework.WeakEventHandler`1.Handler">
            <summary>经过包装的新的委托</summary>
        </member>
        <member name="F:DmFramework.WeakEventHandler`1.UnHandler">
            <summary>取消注册的委托</summary>
        </member>
        <member name="F:DmFramework.WeakEventHandler`1.Once">
            <summary>是否只使用一次，如果只使用一次，执行委托后马上取消注册</summary>
        </member>
        <member name="M:DmFramework.WeakEventHandler`1.#ctor(System.EventHandler{`0},System.Action{System.EventHandler{`0}},System.Boolean)">
            <summary>使用事件处理器、取消注册回调、是否一次性事件来初始化</summary>
            <param name="handler"></param>
            <param name="unHandler"></param>
            <param name="once"></param>
        </member>
        <member name="M:DmFramework.WeakEventHandler`1.Invoke(System.Object,`0)">
            <summary>调用委托</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DmFramework.WeakEventHandler`1.op_Implicit(DmFramework.WeakEventHandler{`0})~System.EventHandler{`0}">
            <summary>把弱引用事件处理器转换为普通事件处理器</summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.WeakEventHandler`1.Combine(System.EventHandler{`0}@)">
            <summary>绑定</summary>
            <param name="handler"></param>
        </member>
        <member name="M:DmFramework.WeakEventHandler`1.Remove(System.EventHandler{`0}@,System.EventHandler{`0})">
            <summary>移除</summary>
            <param name="handler"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Extension.BinHexDecoderX.#ctor">
            <summary>默认构造函数</summary>
        </member>
        <member name="T:DmFramework.Extension.BinHexEncoderX">
            <summary>指定的二进制字节编码为 BinHex</summary>
            <remarks>取自System.Xml</remarks>
        </member>
        <member name="M:DmFramework.Extension.BinHexEncoderX.Encode(System.Byte[],System.Int32,System.Int32,System.Text.StringBuilder)">
            <summary>BinHex编码</summary>
            <param name="buffer" type="byte[]">
            <para></para>
            </param>
            <param name="index" type="int">
            <para></para>
            </param>
            <param name="count" type="int">
            <para></para>
            </param>
            <param name="sb" type="System.Text.StringBuilder">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Extension.BinHexEncoderX.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>BinHex编码</summary>
            <param name="inArray" type="byte[]">
            <para></para>
            </param>
            <param name="offsetIn" type="int">
            <para></para>
            </param>
            <param name="count" type="int">
            <para></para>
            </param>
            <returns>A string value...</returns>
        </member>
        <member name="T:System.BitHelper">
            <summary>数据位助手</summary>
        </member>
        <member name="M:System.BitHelper.SetBit(System.UInt16,System.Int32,System.Boolean)">
            <summary>设置数据位</summary>
            <param name="value"></param>
            <param name="position"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:System.BitHelper.SetBits(System.UInt16,System.Int32,System.Int32,System.UInt16)">
            <summary>设置数据位</summary>
            <param name="value"></param>
            <param name="position"></param>
            <param name="length"></param>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:System.BitHelper.SetBit(System.Byte,System.Int32,System.Boolean)">
            <summary>设置数据位</summary>
            <param name="value"></param>
            <param name="position"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:System.BitHelper.GetBit(System.UInt16,System.Int32)">
            <summary>获取数据位</summary>
            <param name="value"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:System.BitHelper.GetBits(System.UInt16,System.Int32,System.Int32)">
            <summary>获取数据位</summary>
            <param name="value"></param>
            <param name="position"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.BitHelper.GetBit(System.Byte,System.Int32)">
            <summary>获取数据位</summary>
            <param name="value"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:System.EnumHelper">
            <summary>枚举类型助手类</summary>
        </member>
        <member name="M:System.EnumHelper.Has(System.Enum,System.Enum)">
            <summary>枚举变量是否包含指定标识</summary>
            <param name="value">枚举变量</param>
            <param name="flag">要判断的标识</param>
            <returns></returns>
        </member>
        <member name="M:System.EnumHelper.Set``1(System.Enum,``0,System.Boolean)">
            <summary>设置标识位</summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="flag"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.EnumHelper.GetDescription(System.Enum)">
            <summary>获取枚举字段的注释</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.EnumHelper.GetDescriptions``1">
            <summary>获取枚举类型的所有字段注释</summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.EnumHelper.GetDescriptions(System.Type)">
            <summary>获取枚举类型的所有字段注释</summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:System.StringUtils">
            <summary>字符串助手类</summary>
        </member>
        <member name="M:System.StringUtils.EqualIgnoreCase(System.String,System.String)">
            <summary>忽略大小写的字符串比较</summary>
            <param name="value"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.IsNullOrWhiteSpace(System.String)">
            <summary>是否空或者空白字符串</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.Split(System.String,System.String[])">
            <summary>拆分字符串</summary>
            <param name="value"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.SplitAsDictionary(System.String,System.String,System.String[])">
            <summary>拆分字符串成为名值字典</summary>
            <param name="str"></param>
            <param name="nameValueSeparator"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.AppendExceptStart(System.Text.StringBuilder,System.String)">
            <summary>追加字符串，除了开头</summary>
            <param name="sb"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.Left(System.String,System.Int32)">
            <summary>截取左边若干长度字符串</summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.LeftBinary(System.String,System.Int32,System.Boolean)">
            <summary>截取左边若干长度字符串（二进制计算长度）</summary>
            <param name="str"></param>
            <param name="length"></param>
            <param name="strict">严格模式时，遇到截断位置位于一个字符中间时，忽略该字符，否则包括该字符</param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.Right(System.String,System.Int32)">
            <summary>截取右边若干长度字符串</summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.RightBinary(System.String,System.Int32,System.Boolean)">
            <summary>截取右边若干长度字符串（二进制计算长度）</summary>
            <param name="str"></param>
            <param name="length"></param>
            <param name="strict">严格模式时，遇到截断位置位于一个字符中间时，忽略该字符，否则包括该字符</param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.EnsureStart(System.String,System.String)">
            <summary>确保字符串以指定的另一字符串开始，不区分大小写</summary>
            <param name="str"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.EnsureEnd(System.String,System.String)">
            <summary>确保字符串以指定的另一字符串结束，不区分大小写</summary>
            <param name="str"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.Cut(System.String,System.Int32,System.String)">
            <summary>根据最大长度截取字符串，并允许以指定空白填充末尾</summary>
            <param name="str"></param>
            <param name="maxLength"></param>
            <param name="pad"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtils.CutBinary(System.String,System.Int32,System.String,System.Boolean)">
            <summary>根据最大长度截取字符串（二进制计算长度），并允许以指定空白填充末尾</summary>
            <param name="str"></param>
            <param name="maxLength"></param>
            <param name="pad"></param>
            <param name="strict">严格模式时，遇到截断位置位于一个字符中间时，忽略该字符，否则包括该字符</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Extension.XmlHelper">
            <summary>Xml扩展工具类</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Extension.XmlHelper.CreateXElementFromStream(System.IO.Stream)">
            <summary>使用指定的流创建一个新的 XElement 实例。</summary>
            <param name="stream" type="System.IO.Stream">
            <para></para>
            </param>
            <returns>A System.Xml.Linq.XElement value...</returns>
        </member>
        <member name="M:DmFramework.Extension.XmlHelper.CreateXElementFromStream(System.IO.Stream,System.Xml.Linq.LoadOptions)">
            <summary>使用指定流创建新的 XElement 实例，也可以选择保留空白，设置基 URI 和保留行信息。</summary>
            <param name="stream" type="System.IO.Stream">
            <para></para>
            </param>
            <param name="options" type="System.Xml.Linq.LoadOptions">
            <para></para>
            </param>
            <returns>A System.Xml.Linq.XElement value...</returns>
        </member>
        <member name="T:DmFramework.Generics.Algorithms.GraphAlgorithms">
            <summary>Several algorithms for use on graphs</summary>
        </member>
        <member name="M:DmFramework.Generics.Algorithms.GraphAlgorithms.DijkstrasAlgorithm``1(DmFramework.Generics.DataStructures.General.Graph{``0},DmFramework.Generics.DataStructures.General.Vertex{``0})">
            <summary>Finds the shortest paths to all other vertices from the specified source vertex using Dijkstra's Algorithm.</summary>
            <typeparam name="T">The graph node type.</typeparam>
            <param name="weightedGraph">The weighted graph.</param>
            <param name="fromVertex">The source vertex.</param>
            <returns>
            A graph representing the shortest paths from the source node to all other nodes in the graph.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="weightedGraph"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fromVertex"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fromVertex"/> could not be found in <paramref name="weightedGraph"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.Algorithms.GraphAlgorithms.PrimsAlgorithm``1(DmFramework.Generics.DataStructures.General.Graph{``0},DmFramework.Generics.DataStructures.General.Vertex{``0})">
            <summary>Finds the minimal spanning tree of the graph supplied using Prim's algorithm.</summary>
            <typeparam name="T">The graph node type.</typeparam>
            <param name="weightedGraph">The weighted graph.</param>
            <param name="fromVertex">The vertex to start from.</param>
            <returns>
            A graph representing the minimal spanning tree of the graph supplied.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="weightedGraph"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fromVertex"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fromVertex"/> could not be found in <paramref name="weightedGraph"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.Algorithms.GraphAlgorithms.KruskalsAlgorithm``1(DmFramework.Generics.DataStructures.General.Graph{``0})">
            <summary>Finds the minimal spanning tree of the graph supplied.</summary>
            <typeparam name="T">The type of vertex, edge and graph.</typeparam>
            <param name="weightedGraph">The weighted graph.</param>
            <returns>
            A graph representing the minimal spanning tree of the graph supplied.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.Algorithms.GraphAlgorithms.BuildGraphPrim``1(DmFramework.Generics.DataStructures.General.Graph{``0},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{DmFramework.Generics.DataStructures.General.Vertex{``0},DmFramework.Generics.Algorithms.VertexInfo{``0}}})">
            <summary>Builds a new graph from the edges followed.</summary>
            <param name="weightedGraph">The weighted graph.</param>
            <param name="vertexStatus">The vertex status.</param>
            <returns>A new graph from the edges followed.</returns>
        </member>
        <member name="M:DmFramework.Generics.Algorithms.GraphAlgorithms.BuildGraphDijkstra``1(DmFramework.Generics.DataStructures.General.Graph{``0},DmFramework.Generics.DataStructures.General.Vertex{``0},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{DmFramework.Generics.DataStructures.General.Vertex{``0},DmFramework.Generics.Algorithms.VertexInfo{``0}}})">
            <summary>Builds the graph for Dijkstra's algorithm with the edges followed.</summary>
            <param name="weightedGraph">The weighted graph.</param>
            <param name="fromVertex">The from vertex.</param>
            <param name="vertexStatus">The vertex status.</param>
            <returns>The graph for Dijkstra's algorithm with the edges followed.</returns>
        </member>
        <member name="T:DmFramework.Generics.Algorithms.MathAlgorithms">
            <summary>General math functions.</summary>
        </member>
        <member name="M:DmFramework.Generics.Algorithms.MathAlgorithms.GreatestCommonDivisor(System.Int32,System.Int32)">
            <summary>Finds the greatest common divisor.</summary>
            <param name="firstNumber">The first number.</param>
            <param name="secondNumber">The second number.</param>
            <returns>The greatest common divisor between the two integers supplied.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Algorithms\MathExample.cs" region="GreatestCommonDivisor" lang="cs" title="The following example shows how to use the FindGreatestCommonDivisor method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Algorithms\MathExample.vb"  region="GreatestCommonDivisor" lang="vbnet" title="The following example shows how to use the FindGreatestCommonDivisor method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Algorithms.MathAlgorithms.LeastCommonMultiple(System.Int32,System.Int32)">
            <summary>Finds the least common multiple of the two numbers.</summary>
            <param name="firstNumber">The first number.</param>
            <param name="secondNumber">The second number.</param>
            <returns>The least common multiple of the two numbers.</returns>
        </member>
        <member name="M:DmFramework.Generics.Algorithms.MathAlgorithms.Fibonacci(System.Int32)">
            <summary>Generates the Nth Fibonacci number.</summary>
            <param name="nthElement">The value of N.</param>
            <returns>The Nth number in the Fibonacci sequence.</returns>    
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Algorithms\MathExample.cs" region="Fibonacci" lang="cs" title="The following example shows how to use the GenerateNthFibonacci method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Algorithms\MathExample.vb"  region="Fibonacci" lang="vbnet" title="The following example shows how to use the GenerateNthFibonacci method."/>
            </example>      
        </member>
        <member name="M:DmFramework.Generics.Algorithms.MathAlgorithms.GenerateFibonacciSequence(System.Int32)">
            <summary>Generates the Fibonacci number series until the Nth element.</summary>
            <param name="nthElement">The upper bound N.</param>
            <returns>A series of Fibonacci numbers until the <paramref name="nthElement"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Algorithms\MathExample.cs" region="GenerateFibonacciSequence" lang="cs" title="The following example shows how to use the GenerateFibonacciSequence method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Algorithms\MathExample.vb"  region="GenerateFibonacciSequence" lang="vbnet" title="The following example shows how to use the GenerateFibonacciSequence method."/>
            </example>      
        </member>
        <member name="M:DmFramework.Generics.Algorithms.MathAlgorithms.Hypotenuse(System.Double,System.Double)">
            <summary>Calculates the Hypotenuse of a triangle.</summary>
            <param name="a">One of the shorter sides of the triangle.</param>
            <param name="b">One of the shorter sides of the triangle.</param>
            <returns>The Hypotenuse of a triangle.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Algorithms\MathExample.cs" region="Hypotenuse" lang="cs" title="The following example shows how to use the Hypotenuse method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Algorithms\MathExample.vb"  region="Hypotenuse" lang="vbnet" title="The following example shows how to use the Hypotenuse method."/>
            </example>      
        </member>
        <member name="T:DmFramework.Generics.Comparers.AssociationKeyComparer`2">
            <summary>A comparer for comparing keys using the Association class.</summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Comparers.AssociationKeyComparer`2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Comparers.AssociationKeyComparer`2"/> class.</summary>
        </member>
        <member name="M:DmFramework.Generics.Comparers.AssociationKeyComparer`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Comparers.AssociationKeyComparer`2"/> class.</summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:DmFramework.Generics.Comparers.AssociationKeyComparer`2.Compare(DmFramework.Generics.DataStructures.General.Association{`0,`1},DmFramework.Generics.DataStructures.General.Association{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.Comparers.AssociationKeyComparer`2.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Comparers.AssociationKeyComparer`2.DefaultComparer">
            <summary>Gets the default comparer for the type of association specified.</summary>
            <value>The default comparer.</value>
        </member>
        <member name="T:DmFramework.Generics.Comparers.ComparisonComparer`1">
            <summary>A Comparer using a Comparison delegate for comparisons between items.</summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Comparers.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <param name="comparison">The comparison.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.Comparers.ComparisonComparer`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Comparers.ComparisonComparer`1.Comparison">
            <summary>Gets or sets the comparison used in this comparer.</summary>
            <value>The comparison used in this comparer.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="T:DmFramework.Generics.Comparers.EdgeWeightComparer`1">
            <summary>A comparer for comparing weights on graph edges.</summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Comparers.EdgeWeightComparer`1.Compare(DmFramework.Generics.DataStructures.General.Edge{`0},DmFramework.Generics.DataStructures.General.Edge{`0})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Comparers.KeyValuePairComparer`2">
            <summary>A comparer for comparing keys for the KeyValuePair class.</summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Comparers.KeyValuePairComparer`2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Comparers.KeyValuePairComparer`2"/> class.</summary>
        </member>
        <member name="M:DmFramework.Generics.Comparers.KeyValuePairComparer`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Comparers.KeyValuePairComparer`2"/> class.</summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:DmFramework.Generics.Comparers.KeyValuePairComparer`2.#ctor(System.Comparison{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Comparers.KeyValuePairComparer`2"/> class.</summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:DmFramework.Generics.Comparers.KeyValuePairComparer`2.Compare(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.Comparers.KeyValuePairComparer`2.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Comparers.ReverseComparer`1">
            <summary>A comparer that wraps the IComparable interface to reproduce the opposite comparison result.</summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Comparers.ReverseComparer`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.Comparers.ReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <param name="comparer">The comparer to reverse.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.Comparers.ReverseComparer`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Comparers.ReverseComparer`1.Comparer">
            <summary>Gets or sets the comparer used in this instance.</summary>
            <value>The comparer.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="T:DmFramework.Generics.Comparers.ReverseComparisonComparer`1">
            <summary>A Comparer using a Comparison delegate for comparisons between items.</summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Comparers.ReverseComparisonComparer`1.#ctor(System.Comparison{`0})">
            <param name="comparison">The comparison.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.Comparers.ReverseComparisonComparer`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Comparers.ReverseComparisonComparer`1.Comparison">
            <summary>Gets or sets the comparison used in this comparer.</summary>
            <value>The comparison used in this comparer.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Association`2">
            <summary>
            The Association performs the same function as a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, but allows the 
            Value members to be written to.
            It is serializable and implemented as class, whereas KeyValuePair is struct.
            </summary>
            <typeparam name="TKey">The type of the key for the association.</typeparam>
            <typeparam name="TValue">The type of the value for the association.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Association`2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.Association`2"/> class.</summary>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\AssociationExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the constructor."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\AssociationExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Association`2.#ctor(`0,`1)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.Association`2"/> class.</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\AssociationExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the constructor."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\AssociationExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Association`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.Association`2"/> class.</summary>
            <param name="value">The value.</param>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\AssociationExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the constructor."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\AssociationExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Association`2.ToKeyValuePair">
            <summary>Construct a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> object from the current values.</summary>
            <returns>A key value pair representation of this <see cref="T:DmFramework.Generics.DataStructures.General.Association`2"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\AssociationExamples.cs" region="ToKeyValuePair" lang="cs" title="The following example shows how to use the ToKeyValuePair method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\AssociationExamples.vb" region="ToKeyValuePair" lang="vbnet" title="The following example shows how to use the ToKeyValuePair method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Association`2.ToString">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Association`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Association`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Association`2.Key">
            <summary>Gets the key.</summary>
            <value>The key.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\AssociationExamples.cs" region="Key" lang="cs" title="The following example shows how to use the Key property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\AssociationExamples.vb" region="Key" lang="vbnet" title="The following example shows how to use the Key property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Association`2.Value">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\AssociationExamples.cs" region="Value" lang="cs" title="The following example shows how to use the Value property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\AssociationExamples.vb" region="Value" lang="vbnet" title="The following example shows how to use the Value property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2">
            <summary>Provides the abstract base class for a dictionary that generated its own keys.</summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.#ctor(System.Func{`1,`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> class.</summary>
            <param name="getKeyForItem">The key retrieval function for the item.</param>
            <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface to use when comparing keys, or null to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"></see>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.#ctor(System.Func{`1,`0},System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> class.</summary>
            <param name="getKeyForItem">The key retrieval function for the item.</param>
            <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface to use when comparing keys, or null to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.</param>
            <param name="capacity">The initial number of elements that the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> can contain.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.TryAdd(`1)">
            <summary>Attempts to add the specified item to the dictionary.</summary>
            <param name="item">The item to add to the dictionary.</param>
            <returns><c>True</c> if the item was added, <c>false</c> if another item with the same key was found in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.TryRemove(`1)">
            <summary>Attempts to remove the specified item from the dictionary.</summary>
            <param name="item">The item to remove from the dictionary.</param>
            <returns><c>True</c> if the item was found and removed, <c>false</c> if another item with the same key was found in the dictionary.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.Add(`1)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.Contains(`1)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.CopyTo(`1[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.Remove(`1)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> contains the specified key.</summary>
            <returns>true if the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> contains an element with the specified key; otherwise, false.</returns>
            <param name="key">The key to locate in the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.RemoveKey(`0)">
            <summary>Removes the element with the specified key from the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/>.</summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <seealso cref="P:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.IsReadOnly"/> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.InternalRemove(`0)">
            <summary>Removes the element with the specified key from the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/>.</summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <seealso cref="P:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.IsReadOnly"/> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.InternalRemove(`1)">
            <summary>Removes the element from the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/>.</summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> is read-only. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <seealso cref="P:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.IsReadOnly"/> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the item associated with the specified key.</summary>
            <param name="key">The key of the item to get.</param>
            <param name="item">When this method returns, contains the item associated with the specified <paramref name="key"/>, if the key is found; otherwise, the default item for the type of the item parameter. This parameter is passed uninitialized.</param>
            <returns>true if the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> contains an element with the specified <paramref name="key"/>; otherwise, false. </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.OnDeserialization(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.GetKeyForItem">
            <summary>When implemented in a derived class, extracts the key from the specified element.</summary>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.Comparer">
            <summary>Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to determine equality of keys for the dictionary. </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface implementation that is used to determine equality of keys for the current <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> and to provide hash values for the keys.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.Item(`0)">
            <summary>Gets the value associated with the specified key.</summary>
            <returns>The value associated with the specified key. If the specified <paramref name="key"/> is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new element with the specified key.</returns>
            <param name="key">The key of the value to get or set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">An item with the <paramref name="key"/> does not exist in the collection.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.Keys">
            <summary>Gets a collection containing the keys in the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/>.</summary>
            <remarks>
            The order of the keys in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> is unspecified, but it is the same order as the associated values in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> returned by the Values property.
            The returned <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> is not a static copy; instead, the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> refers back to the keys in the original <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/>. Therefore, changes to the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> continue to be reflected in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>.
            Getting the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.Values">
            <summary>Gets a collection containing the values in the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/>.</summary>
            <remarks>
            The order of the values in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> is unspecified, but it is the same order as the associated keys in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> returned by the Keys property.
            The returned <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> is not a static copy; instead, the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> refers back to the values in the original <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/>. Therefore, changes to the <see cref="T:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2"/> continue to be reflected in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/>.
            Getting the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.Count">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.AutoKeyDictionary`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Bag`1">
            <summary>A Bag data structure.</summary>
            <remarks>
            A Bag (sometimes also called a multiset) is a group of object in which each 
            each member has a multiplicity, which is a natural number indicating (loosely speaking)
            how many times it is a member. For example, in the bag { a, a, b, b, b, c }, the 
            multiplicities of the members a, b, and c are respectively 2, 3, and 1.
            </remarks>
            <typeparam name="T">The type of elements in the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.IBag`1">
            <summary>An interface for a <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/> data structure.</summary>
            <remarks>
            A Bag (sometimes also called a multiset) is a group of object in which each 
            each member has a multiplicity, which is a natural number indicating (loosely speaking)
            how many times it is a member. For example, in the bag { a, a, b, b, b, c }, the 
            multiplicities of the members a, b, and c are respectively 2, 3, and 1.
            </remarks>
            <typeparam name="T">The type of elements in the bag.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IBag`1.Add(`0,System.Int32)">
            <summary>Adds n * the specified item to the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</summary>
            <param name="item">The item.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IBag`1.Subtract(DmFramework.Generics.DataStructures.General.IBag{`0})">
            <summary>Applies the Difference operation on two <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>s.</summary>
            <param name="bag">The other <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</param>
            <returns>The difference between the current <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/> and the specified <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IBag`1.Intersection(DmFramework.Generics.DataStructures.General.IBag{`0})">
            <summary>Applies the Intersection operation on two <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>s.</summary>
            <param name="bag">The other bag.</param>
            <returns>The intersection of the current <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/> and the specified <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IBag`1.Remove(`0,System.Int32)">
            <summary>Removes the specified amount of items from the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</summary>
            <param name="item">The item.</param>
            <param name="maximum">The maximum amount of items to remove.</param>
            <returns>An indication of whether the items were found (and removed).</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IBag`1.Union(DmFramework.Generics.DataStructures.General.IBag{`0})">
            <summary>Applies the Union operation with two <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>s.</summary>
            <param name="bag">The other <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</param>
            <returns>The union of the current bag and the specified <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IBag`1.GetCountEnumerator">
            <summary>
            Gets an enumerator that returns both the items, and the
            count of the items in the bag.
            </summary>
            <returns>An enumerator to cycle through the items in the bag.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.IBag`1.Item(`0)">
            <summary>Gets the count of the specified item contained in the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.#ctor">
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.#ctor(System.Int32)">
            <param name="capacity">The initial capacity of the bag.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="ConstructorCapacity" lang="cs" title="The following example shows how to use the capacity constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="ConstructorCapacity" lang="vbnet" title="The following example shows how to use the capacity constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when testing equality of items in the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="ConstructorComparer" lang="cs" title="The following example shows how to use the comparer constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="ConstructorComparer" lang="vbnet" title="The following example shows how to use the comparer constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <param name="capacity">The initial capacity of the bag.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when testing equality of items in the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.#ctor(System.Collections.Generic.IDictionary{`0,System.Int32})">
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to copy values from.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.RemoveAll(`0)">
            <summary>Removes all instances of  the specified item in the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</summary>
            <param name="item">The <paramref name="item"/> to be removed.</param>
            <returns>A value indicating if <paramref name="item"/> was found (and removed) from the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="RemoveAll" lang="cs" title="The following example shows how to use the RemoveAll method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="RemoveAll" lang="vbnet" title="The following example shows how to use the RemoveAll method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.Remove(`0,System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="RemoveMax" lang="cs" title="The following example shows how to use the Remove method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="RemoveMax" lang="vbnet" title="The following example shows how to use the Remove method."/>
            </example>        
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.RemoveItem(`0,System.Int32,System.Int32)">
            <summary>Removes the specified amount of items from the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</summary>
            <param name="item">The item.</param>
            <param name="maximum">The maximum amount of items to remove.</param>
            <param name="itemCount">The count of the items being removed.</param>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.Bag`1.Remove(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.Add(`0,System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="AddAmount" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="AddAmount" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.AddItem(`0,System.Int32)">
            <summary>Adds n * the specified item to the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</summary>
            <param name="item">The item.</param>
            <param name="amount">The amount.</param>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.Bag`1.Add(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.GetCountEnumerator">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.Union(DmFramework.Generics.DataStructures.General.Bag{`0})">
            <summary>Computes the union of this <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/> and the specified <paramref name="bag"/>.</summary>
            <param name="bag">The bag.</param>
            <returns>The union of this <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/> and <paramref name="bag"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bag"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Union" lang="cs" title="The following example shows how to use the Union method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Union" lang="vbnet" title="The following example shows how to use the Union method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.Subtract(DmFramework.Generics.DataStructures.General.Bag{`0})">
            <summary>Computes the difference between this bag and the specified <paramref name="bag"/>.</summary>
            <param name="bag">The bag.</param>
            <returns>The difference between this bag and <paramref name="bag"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bag"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Subtract" lang="cs" title="The following example shows how to use the Subtract method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Subtract" lang="vbnet" title="The following example shows how to use the Subtract method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.Intersection(DmFramework.Generics.DataStructures.General.Bag{`0})">
            <summary>Computes the intersection between this <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/> and the specified <paramref name="bag"/>.</summary>
            <param name="bag">The bag.</param>
            <returns>The intersection between this <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/> and <paramref name="bag"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bag"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Intersection" lang="cs" title="The following example shows how to use the Intersection method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Intersection" lang="vbnet" title="The following example shows how to use the Intersection method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.IntersectionInternal(DmFramework.Generics.DataStructures.General.IBag{`0})">
            <summary>Internal method for the Intersection operation.</summary>
            <param name="bag">The bag to perform the intersection on.</param>
            <returns>The result of the intersection.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.UnionInternal(DmFramework.Generics.DataStructures.General.IBag{`0})">
            <summary>Internal method for the Union operation.</summary>
            <param name="bag">The bag to perform the union with.</param>
            <returns>The result of the union operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.SubtractInternal(DmFramework.Generics.DataStructures.General.IBag{`0})">
            <summary>Internal method for the subtraction operation.</summary>
            <param name="bag">The bag to subtract from this bag.</param>
            <returns>The result of the subtract operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.op_Addition(DmFramework.Generics.DataStructures.General.Bag{`0},DmFramework.Generics.DataStructures.General.Bag{`0})">
            <summary>Operator + : Performs a union between two <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>s.</summary>
            <param name="left">The left hand <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</param>
            <param name="right">The right hand <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</param>
            <returns>The union between <paramref name="left"/> and <paramref name="right"/>.</returns>        
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="OperatorAdd" lang="cs" title="The following example shows how to use the + operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="OperatorAdd" lang="vbnet" title="The following example shows how to use the + operator overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.op_Subtraction(DmFramework.Generics.DataStructures.General.Bag{`0},DmFramework.Generics.DataStructures.General.Bag{`0})">
            <summary>Operator - : Performs a difference operation between two Bags.</summary>
            <param name="left">The left hand <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</param>
            <param name="right">The right hand <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</param>
            <returns>The union between <paramref name="left"/> and <paramref name="right"/>.</returns>         
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="OperatorSubtract" lang="cs" title="The following example shows how to use the - operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="OperatorSubtract" lang="vbnet" title="The following example shows how to use the - operator overload."/>
            </example>        
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.op_Multiply(DmFramework.Generics.DataStructures.General.Bag{`0},DmFramework.Generics.DataStructures.General.Bag{`0})">
            <summary>Operator * : Performs a intersection between two Bags.</summary>
            <param name="left">The left hand <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</param>
            <param name="right">The right hand <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</param>
            <returns>The union between <paramref name="left"/> and <paramref name="right"/>.</returns>         
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="OperatorMultiply" lang="cs" title="The following example shows how to use the * operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="OperatorMultiply" lang="vbnet" title="The following example shows how to use the * operator overload."/>
            </example>           
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>   
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.Add(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.Remove(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Remove" lang="cs" title="The following example shows how to use the Remove method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Remove" lang="vbnet" title="The following example shows how to use the Remove method."/>
            </example>        
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.Contains(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>        
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.GetEnumerator">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>        
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.Clear">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>         
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.ClearItems">
            <summary>Clears all the objects in this instance.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.Bag`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.DmFramework#Generics#DataStructures#General#IBag{T}#Intersection(DmFramework.Generics.DataStructures.General.IBag{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.DmFramework#Generics#DataStructures#General#IBag{T}#Subtract(DmFramework.Generics.DataStructures.General.IBag{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.DmFramework#Generics#DataStructures#General#IBag{T}#Union(DmFramework.Generics.DataStructures.General.IBag{`0})">
            <inheritdoc/>
            <exception cref="T:System.InvalidCastException"><paramref name="bag"/> is not a <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Bag`1.Equals(DmFramework.Generics.DataStructures.General.Bag{`0})">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Equals" lang="cs" title="The following example shows how to use the Equals method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Equals" lang="vbnet" title="The following example shows how to use the Equals method."/>
            </example>     
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Bag`1.Item(`0)">
            <inheritdoc /> 
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Item" lang="cs" title="The following example shows how to use the indexer method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Item" lang="vbnet" title="The following example shows how to use the indexer method."/>
            </example>           
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Bag`1.IsEmpty">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="IsEmpty" lang="cs" title="The following example shows how to use the IsEmpty property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="IsEmpty" lang="vbnet" title="The following example shows how to use the IsEmpty property."/>
            </example>           
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Bag`1.Count">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="Count" lang="cs" title="The following example shows how to use the IsFull property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the IsFull property."/>
            </example>           
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Bag`1.IsReadOnly">
            <inheritdoc/>
            <returns><c>false</c>.</returns>
            <remarks>Always returns <c>false</c> for <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/>.</remarks>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\BagExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\BagExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>     
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.CaseInsensitiveString">
            <summary>Represents case insensitive text as a series of Unicode characters.</summary>
            <remarks>
            All operations are performed in case insensitive manner using <see cref="F:System.StringComparison.InvariantCultureIgnoreCase"/>.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.#ctor(System.String)">
            <summary>Constrcuts CaseInsensitiveString based on <paramref name="value"/></summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.GetLastAfter(System.String)">
            <summary>Returns substring after <paramref name="after"/></summary>
            <param name="after"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.WriteXml(System.Xml.XmlWriter)">
            <summary>Write the String to Xml</summary>
            <param name="writer"></param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ReadXml(System.Xml.XmlReader)">
            <summary>Reads the String from xml</summary>
            <param name="reader"></param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.GetEnumerator">
            <summary>Retrieves an object that can iterate through the individual characters in this String.</summary>
            <returns>
            A <see cref="T:System.CharEnumerator"/> object.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.GetSchema">
            <summary>returms xmlSchema</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Clone">
            <summary>Returns a reference to this instance of <see cref="T:System.String"/>.</summary>
            <returns>
            This instance of String.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:System.Object"/> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object"/>.
             </summary>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value"/> parameter.
            Value
            Condition
            Less than zero
            This instance precedes <paramref name="value"/>.
            Zero
            This instance has the same position in the sort order as <paramref name="value"/>.
            Greater than zero
            This instance follows <paramref name="value"/>.
            -or-
            <paramref name="value"/> is null.
            </returns>
            <param name="value">An <see cref="T:System.Object"/> that evaluates to a String.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is not a <see cref="T:System.String"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.CompareTo(System.String)">
            <summary>Compares this instance with a specified <see cref="T:System.String"/> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.String"/>.</summary>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="strB"/> parameter.
            Value
            Condition
            Less than zero
            This instance precedes <paramref name="strB"/>.
            Zero
            This instance has the same position in the sort order as <paramref name="strB"/>.
            Greater than zero
            This instance follows <paramref name="strB"/>.
            -or-
            <paramref name="strB"/> is null.
            
            </returns>
            <param name="strB">A <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ToString(System.IFormatProvider)">
            <summary>Returns this instance of <see cref="T:System.String"/>; no actual conversion is performed.</summary>
            <returns>
            This <see cref="T:System.String"/>.
            </returns>
            <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.GetTypeCode">
            <summary>Returns the <see cref="T:System.TypeCode"/> for class <see cref="T:System.String"/>.</summary>
            <returns>
            The enumerated constant, <see cref="F:System.TypeCode.String"/>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>.</summary>
            <returns>
            true if the value of the current <see cref="T:System.String"/> object is <see cref="F:System.Boolean.TrueString"/>, or false if the value of the current <see cref="T:System.String"/> object is <see cref="F:System.Boolean.FalseString"/>.
            </returns>
            <param name="provider">This parameter is ignored.</param>
            <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String"/> object is not <see cref="F:System.Boolean.TrueString"/> or <see cref="F:System.Boolean.FalseString"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>.</summary>
            <returns>
            The character at index 0 in the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
            <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String"/> object cannot be parsed.</exception>
            <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String"/> object is a number greater than <see cref="F:System.SByte.MaxValue"/> or less than <see cref="F:System.SByte.MinValue"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
            <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String"/> object cannot be parsed.</exception>
            <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String"/> object is a number greater than <see cref="F:System.Byte.MaxValue"/> or less than <see cref="F:System.Byte.MinValue"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
            <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String"/> object cannot be parsed.</exception>
            <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String"/> object is a number greater than <see cref="F:System.Int16.MaxValue"/> or less than <see cref="F:System.Int16.MinValue"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
            <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String"/> object cannot be parsed.</exception>
            <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String"/> object is a number greater than <see cref="F:System.UInt16.MaxValue"/> or less than <see cref="F:System.UInt16.MinValue"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object.</param>
            <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String"/> object cannot be parsed.</exception>
            <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String"/> object is a number greater <see cref="F:System.UInt32.MaxValue"/> or less than <see cref="F:System.UInt32.MinValue"/></exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
            <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String"/> object cannot be parsed.</exception>
            <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String"/> object is a number less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
            <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String"/> object cannot be parsed.</exception>
            <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String"/> object is a number less than <see cref="F:System.Decimal.MinValue"/> or than <see cref="F:System.Decimal.MaxValue"/> greater.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>.</summary>
            <returns>
            The converted value of the current <see cref="T:System.String"/> object.
            </returns>
            <param name="type">The type of the returned object.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> object that provides culture-specific formatting information.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.String"/> object cannot be converted to the type specified by the <paramref name="type"/> parameter.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through the current <see cref="T:System.String"/> object.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the current <see cref="T:System.String"/> object.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Equals(System.String)">
            <summary>Determines whether this instance and another specified <see cref="T:System.String"/> object have the same value.</summary>
            <returns>
            true if the value of the <paramref name="value"/> parameter is the same as this instance; otherwise, false.
            </returns>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <exception cref="T:System.NullReferenceException">This instance is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Equals(DmFramework.Generics.DataStructures.General.CaseInsensitiveString)">
            <summary>Determines whether this instance and another specified <see cref="T:DmFramework.Generics.DataStructures.General.CaseInsensitiveString"/> object have the same value.</summary>
            <returns>
            true if the value of the <paramref name="value"/> parameter is the same as this instance; otherwise, false.
            </returns>
            <param name="value">A <see cref="T:DmFramework.Generics.DataStructures.General.CaseInsensitiveString"/>.</param>
            <exception cref="T:System.NullReferenceException">This instance is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.op_Equality(DmFramework.Generics.DataStructures.General.CaseInsensitiveString,DmFramework.Generics.DataStructures.General.CaseInsensitiveString)">
            <summary>Determines whether two specified <see cref="T:System.String"/> objects have the same value.</summary>
            <returns>
            true if the value of <paramref name="a"/> is the same as the value of <paramref name="b"/>; otherwise, false.
            </returns>
            <param name="a">A <see cref="T:System.String"/> or null.</param>
            <param name="b">A <see cref="T:System.String"/> or null.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.op_Inequality(DmFramework.Generics.DataStructures.General.CaseInsensitiveString,DmFramework.Generics.DataStructures.General.CaseInsensitiveString)">
            <summary>Determines whether two specified <see cref="T:System.String"/> objects have different values.</summary>
            <returns>
            true if the value of <paramref name="a"/> is different from the value of <paramref name="b"/>; otherwise, false.
            </returns>
            <param name="a">A String or null.</param>
            <param name="b">A String or null.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.op_Implicit(DmFramework.Generics.DataStructures.General.CaseInsensitiveString)~System.String">
            <summary></summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.op_Implicit(System.String)~DmFramework.Generics.DataStructures.General.CaseInsensitiveString">
            <summary>Creates a new instance of <see cref="T:DmFramework.Generics.DataStructures.General.CaseInsensitiveString"/> based  on <paramref name="value"/></summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Equals(System.Object)">
            <summary>Determines whether this instance of <see cref="T:System.String"/> and a specified object, which must also be a <see cref="T:System.String"/> object, have the same value.</summary>
            <returns>
            true if <paramref name="obj"/> is a <see cref="T:System.String"/> and its value is the same as this instance; otherwise, false.
            </returns>
            <param name="obj">An <see cref="T:System.Object"/>.</param>
            <exception cref="T:System.NullReferenceException">This instance is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ToCharArray">
            <summary>Copies the characters in this instance to a Unicode character array.</summary>
            <returns>
            A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty String, the returned array is empty and has a zero length.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ToCharArray(System.Int32,System.Int32)">
            <summary>Copies the characters in a specified substring in this instance to a Unicode character array.</summary>
            <returns>
            A Unicode character array whose elements are the <paramref name="length"/> number of characters in this instance starting from character position <paramref name="startIndex"/>.
            </returns>
            <param name="startIndex">The starting position of a substring in this instance.</param>
            <param name="length">The length of the substring in this instance.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> or <paramref name="length"/> is less than zero.
            -or-
            <paramref name="startIndex"/> plus <paramref name="length"/> is greater than the length of this instance.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.GetHashCode">
            <summary>Returns the hash code for this String.</summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Split(System.Char[])">
            <summary>Returns a String array that contains the substrings in this instance that are delimited by elements of a specified Unicode character array.</summary>
            <returns>
            An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array that contains no delimiters, or null.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Split(System.Char[],System.Int32)">
            <summary>Returns a String array that contains the substrings in this instance that are delimited by elements of a specified Unicode character array. A parameter specifies the maximum number of substrings to return.</summary>
            <returns>
            An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array that contains no delimiters, or null.</param>
            <param name="count">The maximum number of substrings to return.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Split(System.Char[],System.StringSplitOptions)">
            <summary>Returns a String array that contains the substrings in this String that are delimited by elements of a specified Unicode character array. A parameter specifies whether to return empty array elements.</summary>
            <returns>
            An array whose elements contain the substrings in this String that are delimited by one or more characters in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of Unicode characters that delimit the substrings in this String, an empty array that contains no delimiters, or null.</param>
            <param name="options">Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned, or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned.</param>
            <exception cref="T:System.ArgumentException"><paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Split(System.Char[],System.Int32,System.StringSplitOptions)">
            <summary>Returns a String array that contains the substrings in this String that are delimited by elements of a specified Unicode character array. Parameters specify the maximum number of substrings to return and whether to return empty array elements.</summary>
            <returns>
            An array whose elements contain the substrings in this String that are delimited by one or more characters in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of Unicode characters that delimit the substrings in this String, an empty array that contains no delimiters, or null.</param>
            <param name="count">The maximum number of substrings to return.</param>
            <param name="options">Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned, or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Split(System.String[],System.StringSplitOptions)">
            <summary>Returns a String array that contains the substrings in this String that are delimited by elements of a specified String array. A parameter specifies whether to return empty array elements.</summary>
            <returns>
            An array whose elements contain the substrings in this String that are delimited by one or more strings in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of strings that delimit the substrings in this String, an empty array that contains no delimiters, or null.</param>
            <param name="options">Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned, or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned.</param>
            <exception cref="T:System.ArgumentException"><paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Split(System.String[],System.Int32,System.StringSplitOptions)">
            <summary>Returns a String array that contains the substrings in this String that are delimited by elements of a specified String array. Parameters specify the maximum number of substrings to return and whether to return empty array elements.</summary>
            <returns>
            An array whose elements contain the substrings in this String that are delimited by one or more strings in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of strings that delimit the substrings in this String, an empty array that contains no delimiters, or null.</param>
            <param name="count">The maximum number of substrings to return.</param>
            <param name="options">Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned, or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Substring(System.Int32)">
            <summary>Retrieves a substring from this instance. The substring starts at a specified character position.</summary>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that begins at <paramref name="startIndex"/> in this instance, or <see cref="F:System.String.Empty"/> if <paramref name="startIndex"/> is equal to the length of this instance.
            </returns>
            <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Substring(System.Int32,System.Int32)">
            <summary>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</summary>
            <returns>
            A <see cref="T:System.String"/> equivalent to the substring of length <paramref name="length"/> that begins at <paramref name="startIndex"/> in this instance, or <see cref="F:System.String.Empty"/> if <paramref name="startIndex"/> is equal to the length of this instance and <paramref name="length"/> is zero.
            </returns>
            <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
            <param name="length">The number of characters in the substring.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> plus <paramref name="length"/> indicates a position not within this instance.
             -or-
            <paramref name="startIndex"/> or <paramref name="length"/> is less than zero.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Trim(System.Char[])">
            <summary>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String"/> object.</summary>
            <returns>
            The String that remains after all occurrences of the characters in the <paramref name="trimChars"/> parameter are removed from the start and end of the current <see cref="T:System.String"/> object. If <paramref name="trimChars"/> is null, white-space characters are removed instead.
            </returns>
            <param name="trimChars">An array of Unicode characters to remove or null.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.TrimStart(System.Char[])">
            <summary>Removes all leading occurrences of a set of characters specified in an array from the current <see cref="T:System.String"/> object.</summary>
            <returns>
            The String that remains after all occurrences of characters in the <paramref name="trimChars"/> parameter are removed from the start of the current <see cref="T:System.String"/> object. If <paramref name="trimChars"/> is null, white-space characters are removed instead.
            </returns>
            <param name="trimChars">An array of Unicode characters to remove or null.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.TrimEnd(System.Char[])">
            <summary>Removes all trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String"/> object.</summary>
            <returns>
            The String that remains after all occurrences of the characters in the <paramref name="trimChars"/> parameter are removed from the end of the current <see cref="T:System.String"/> object. If <paramref name="trimChars"/> is null, white-space characters are removed instead.
            </returns>
            <param name="trimChars">An array of Unicode characters to remove or null.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IsNormalized">
            <summary>Indicates whether this String is in Unicode normalization form C.</summary>
            <returns>
            true if this String is in normalization form C; otherwise, false.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IsNormalized(System.Text.NormalizationForm)">
            <summary>Indicates whether this String is in the specified Unicode normalization form.</summary>
            <returns>
            true if this String is in the normalization form specified by the <paramref name="normalizationForm"/> parameter; otherwise, false.
            </returns>
            <param name="normalizationForm">A Unicode normalization form.</param>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Normalize">
            <summary>Returns a new String whose textual value is the same as this String, but whose binary representation is in Unicode normalization form C.</summary>
            <returns>
            A new, normalized String whose textual value is the same as this String, but whose binary representation is in normalization form C.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Normalize(System.Text.NormalizationForm)">
            <summary>Returns a new String whose textual value is the same as this String, but whose binary representation is in the specified Unicode normalization form.</summary>
            <returns>
            A new String whose textual value is the same as this String, but whose binary representation is in the normalization form specified by the <paramref name="normalizationForm"/> parameter.
            </returns>
            <param name="normalizationForm">A Unicode normalization form.</param>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Contains(System.String)">
            <summary>Returns a value indicating whether the specified <see cref="T:System.String"/> object occurs within this String.</summary>
            <returns>
            true if the <paramref name="value"/> parameter occurs within this String, or if <paramref name="value"/> is the empty String (""); otherwise, false.
            </returns>
            <param name="value">The <see cref="T:System.String"/> object to seek.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.EndsWith(System.String)">
            <summary>Determines whether the end of this instance matches the specified String.</summary>
            <returns>
            true if <paramref name="value"/> matches the end of this instance; otherwise, false.
            </returns>
            <param name="value">A <see cref="T:System.String"/> to compare to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.EndsWith(System.String,System.StringComparison)">
            <summary>Determines whether the end of this String matches the specified String when compared using the specified comparison option.</summary>
            <returns>
            true if the <paramref name="value"/> parameter matches the end of this String; otherwise, false.
            </returns>
            <param name="value">A <see cref="T:System.String"/> object to compare to.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how this String and <paramref name="value"/> are compared.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="comparisonType"/> is not a <see cref="T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>Determines whether the end of this String matches the specified String when compared using the specified culture.</summary>
            <returns>
            true if the <paramref name="value"/> parameter matches the end of this String; otherwise, false.
            </returns>
            <param name="value">A <see cref="T:System.String"/> object to compare to.</param>
            <param name="ignoreCase">true to ignore case when comparing this instance and <paramref name="value"/>; otherwise, false.</param>
            <param name="culture">Cultural information that determines how this instance and <paramref name="value"/> are compared. If <paramref name="culture"/> is null, the current culture is used.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IndexOf(System.Char)">
            <summary>Reports the index of the first occurrence of the specified Unicode character in this String.</summary>
            <returns>
            The zero-based index position of <paramref name="value"/> if that character is found, or -1 if it is not.
            </returns>
            <param name="value">A Unicode character to seek.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IndexOf(System.Char,System.Int32)">
            <summary>Reports the index of the first occurrence of the specified Unicode character in this String. The search starts at a specified character position.</summary>
            <returns>
            The zero-based index position of <paramref name="value"/> if that character is found, or -1 if it is not.
            </returns>
            <param name="value">A Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero or specifies a position beyond the end of this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>Reports the index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
            <returns>
            The zero-based index position of <paramref name="value"/> if that character is found, or -1 if it is not.
            </returns>
            <param name="value">A Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> or <paramref name="startIndex"/> is negative.
            -or-
            <paramref name="count"/> + <paramref name="startIndex"/> specifies a position beyond the end of this instance.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IndexOfAny(System.Char[])">
            <summary>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</summary>
            <returns>
            The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf"/> was found; otherwise, -1 if no character in <paramref name="anyOf"/> was found.
            </returns>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="anyOf"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IndexOfAny(System.Char[],System.Int32)">
            <summary>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</summary>
            <returns>
            The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf"/> was found; otherwise, -1 if no character in <paramref name="anyOf"/> was found.
            </returns>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="anyOf"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is negative.
            -or-
            <paramref name="startIndex"/> is greater than the number of characters in this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</summary>
            <returns>
            The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf"/> was found; otherwise, -1 if no character in <paramref name="anyOf"/> was found.
            </returns>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="anyOf"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> or <paramref name="startIndex"/> is negative.
            -or-
            <paramref name="count"/> + <paramref name="startIndex"/> is greater than the number of characters in this instance.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IndexOf(System.String)">
            <summary>Reports the index of the first occurrence of the specified <see cref="T:System.String"/> in this instance.</summary>
            <returns>
            The zero-based index position of <paramref name="value"/> if that String is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is 0.
            </returns>
            <param name="value">The <see cref="T:System.String"/> to seek.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IndexOf(System.String,System.Int32)">
            <summary>Reports the index of the first occurrence of the specified <see cref="T:System.String"/> in this instance. The search starts at a specified character position.</summary>
            <returns>
            The zero-based index position of <paramref name="value"/> if that String is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is <paramref name="startIndex"/>.
            
            </returns>
            <param name="value">The <see cref="T:System.String"/> to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative.
            -or-
            <paramref name="startIndex"/> specifies a position not within this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>Reports the index of the first occurrence of the specified <see cref="T:System.String"/> in this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
            <returns>
            The zero-based index position of <paramref name="value"/> if that String is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is <paramref name="startIndex"/>.
            </returns>
            <param name="value">The <see cref="T:System.String"/> to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> or <paramref name="startIndex"/> is negative.
            -or-
            <paramref name="count"/> plus <paramref name="startIndex"/> specify a position not within this instance.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOf(System.Char)">
            <summary>Reports the index position of the last occurrence of a specified Unicode character within this instance.</summary>
            <returns>
            The index position of <paramref name="value"/> if that character is found, or -1 if it is not.
            </returns>
            <param name="value">A Unicode character to seek.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOf(System.Char,System.Int32)">
            <summary>Reports the index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position.</summary>
            <returns>
            The index position of <paramref name="value"/> if that character is found, or -1 if it is not.
            </returns>
            <param name="value">A Unicode character to seek.</param>
            <param name="startIndex">The starting position of a substring within this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <summary>Reports the index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
            <returns>
            The index position of <paramref name="value"/> if that character is found, or -1 if it is not.
            </returns>
            <param name="value">A Unicode character to seek.</param>
            <param name="startIndex">The starting position of a substring within this instance.</param>
            <param name="count">The number of character positions to examine.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero, or greater than or equal to the length of this instance.
            -or-
            <paramref name="startIndex"/> + 1 - <paramref name="count"/> is less than zero.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOfAny(System.Char[])">
            <summary>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</summary>
            <returns>
            The index position of the last occurrence in this instance where any character in <paramref name="anyOf"/> was found; otherwise, -1 if no character in <paramref name="anyOf"/> was found.
            </returns>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="anyOf"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOfAny(System.Char[],System.Int32)">
            <summary>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position.</summary>
            <returns>
            The index position of the last occurrence in this instance where any character in <paramref name="anyOf"/> was found; otherwise, -1 if no character in <paramref name="anyOf"/> was found.
            </returns>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="anyOf"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> specifies a position not within this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and examines a specified number of character positions.</summary>
            <returns>
            The index position of the last occurrence in this instance where any character in <paramref name="anyOf"/> was found; otherwise, -1 if no character in <paramref name="anyOf"/> was found.
            </returns>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="anyOf"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> or <paramref name="startIndex"/> is negative.
            -or-
            <paramref name="startIndex"/> minus <paramref name="count"/> specify a position that is not within this instance.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOf(System.String)">
            <summary>Reports the index position of the last occurrence of a specified <see cref="T:System.String"/> within this instance.</summary>
            <returns>
            The index position of <paramref name="value"/> if that String is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is the last index position in this instance.
            </returns>
            <param name="value">A <see cref="T:System.String"/> to seek.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOf(System.String,System.Int32)">
            <summary>Reports the index position of the last occurrence of a specified <see cref="T:System.String"/> within this instance. The search starts at a specified character position.</summary>
            <returns>
            The index position of <paramref name="value"/> if that String is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is <paramref name="startIndex"/>.
            </returns>
            <param name="value">The <see cref="T:System.String"/> to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero or specifies a position not within this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOf(System.String,System.Int32,System.Int32)">
            <summary>Reports the index position of the last occurrence of a specified <see cref="T:System.String"/> within this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
            <returns>
            The index position of <paramref name="value"/> if that String is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is <paramref name="startIndex"/>.
            </returns>
            <param name="value">The <see cref="T:System.String"/> to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> or <paramref name="startIndex"/> is negative.
            -or-
            <paramref name="startIndex"/> is greater than the length of this instance.
            -or-
            <paramref name="startIndex"/> + 1 - <paramref name="count"/> specifies a position that is not within this instance.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOf(System.String,System.StringComparison)">
            <summary>Reports the index of the last occurrence of a specified String within the current <see cref="T:System.String"/> object. A parameter specifies the type of search to use for the specified String.</summary>
            <returns>
            The index position of the <paramref name="value"/> parameter if that String is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is the last index position in this instance.
            </returns>
            <param name="value">The <see cref="T:System.String"/> object to seek.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="comparisonType"/> is not a valid <see cref="T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>Reports the index of the last occurrence of a specified String within the current <see cref="T:System.String"/> object. Parameters specify the starting search position in the current String, and type of search to use for the specified String.</summary>
            <returns>
            The index position of the <paramref name="value"/> parameter if that String is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is <paramref name="startIndex"/>.
            </returns>
            <param name="value">The <see cref="T:System.String"/> object to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero or specifies a position that is not within this instance.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="comparisonType"/> is not a valid <see cref="T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>Reports the index position of the last occurrence of a specified <see cref="T:System.String"/> object within this instance. Parameters specify the starting search position in the current String, the number of characters in the current String to search, and the type of search to use for the specified String.</summary>
            <returns>
            The index position of the <paramref name="value"/> parameter if that String is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is <paramref name="startIndex"/>.
            </returns>
            <param name="value">The <see cref="T:System.String"/> object to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> or <paramref name="startIndex"/> is negative.
            -or-
            <paramref name="startIndex"/> is greater than the length of this instance.
            -or-
            <paramref name="startIndex"/> + 1 - <paramref name="count"/> specifies a position that is not within this instance.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="comparisonType"/> is not a valid <see cref="T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.PadLeft(System.Int32)">
            <summary>Right-aligns the characters in this instance, padding with spaces on the left for a specified total length.</summary>
            <returns>
            A new <see cref="T:System.String"/> that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth"/>. Or, if <paramref name="totalWidth"/> is less than the length of this instance, a new <see cref="T:System.String"/> object that is identical to this instance.
            </returns>
            <param name="totalWidth">The number of characters in the resulting String, equal to the number of original characters plus any additional padding characters.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalWidth"/> is less than zero.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.PadLeft(System.Int32,System.Char)">
            <summary>Right-aligns the characters in this instance, padding on the left with a specified Unicode character for a specified total length.</summary>
            <returns>
            A new <see cref="T:System.String"/> that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar"/> characters as needed to create a length of <paramref name="totalWidth"/>. Or, if <paramref name="totalWidth"/> is less than the length of this instance, a new <see cref="T:System.String"/> that is identical to this instance.
            </returns>
            <param name="totalWidth">The number of characters in the resulting String, equal to the number of original characters plus any additional padding characters.</param>
            <param name="paddingChar">A Unicode padding character.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalWidth"/> is less than zero.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.PadRight(System.Int32)">
            <summary>Left-aligns the characters in this String, padding with spaces on the right, for a specified total length.</summary>
            <returns>
            A new <see cref="T:System.String"/> that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth"/>. Or, if <paramref name="totalWidth"/> is less than the length of this instance, a new <see cref="T:System.String"/> that is identical to this instance.
            </returns>
            <param name="totalWidth">The number of characters in the resulting String, equal to the number of original characters plus any additional padding characters.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalWidth"/> is less than zero.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.PadRight(System.Int32,System.Char)">
            <summary>Left-aligns the characters in this String, padding on the right with a specified Unicode character, for a specified total length.</summary>
            <returns>
            A new <see cref="T:System.String"/> that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar"/> characters as needed to create a length of <paramref name="totalWidth"/>. Or, if <paramref name="totalWidth"/> is less than the length of this instance, a new <see cref="T:System.String"/> that is identical to this instance.
            </returns>
            <param name="totalWidth">The number of characters in the resulting String, equal to the number of original characters plus any additional padding characters.</param>
            <param name="paddingChar">A Unicode padding character.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalWidth"/> is less than zero.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.StartsWith(System.String)">
            <summary>Determines whether the beginning of this instance matches the specified String.</summary>
            <returns>
            true if <paramref name="value"/> matches the beginning of this String; otherwise, false.
            </returns>
            <param name="value">The <see cref="T:System.String"/> to compare.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.StartsWith(System.String,System.StringComparison)">
            <summary>Determines whether the beginning of this String matches the specified String when compared using the specified comparison option.</summary>
            <returns>
            true if the <paramref name="value"/> parameter matches the beginning of this String; otherwise, false.
            </returns>
            <param name="value">A <see cref="T:System.String"/> object to compare to.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how this String and <paramref name="value"/> are compared.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="comparisonType"/> is not a <see cref="T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>Determines whether the beginning of this String matches the specified String when compared using the specified culture.</summary>
            <returns>
            true if the <paramref name="value"/> parameter matches the beginning of this String; otherwise, false.
            </returns>
            <param name="value">The <see cref="T:System.String"/> object to compare.</param>
            <param name="ignoreCase">true to ignore case when comparing this String and <paramref name="value"/>; otherwise, false.</param>
            <param name="culture">Cultural information that determines how this String and <paramref name="value"/> are compared. If <paramref name="culture"/> is null, the current culture is used.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ToLower">
            <summary>Returns a copy of this <see cref="T:System.String"/> converted to lowercase, using the casing rules of the current culture.</summary>
            <returns>
            A <see cref="T:System.String"/> in lowercase.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ToLower(System.Globalization.CultureInfo)">
            <summary>Returns a copy of this <see cref="T:System.String"/> converted to lowercase, using the casing rules of the specified culture.</summary>
            <returns>
            A <see cref="T:System.String"/> in lowercase.
            </returns>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that supplies culture-specific casing rules.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="culture"/> is null.</exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ToLowerInvariant">
            <summary>Returns a copy of this <see cref="T:System.String"/> object converted to lowercase using the casing rules of the invariant culture.</summary>
            <returns>
            A <see cref="T:System.String"/> object in lowercase.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ToUpperInvariant">
            <summary>Returns a copy of this <see cref="T:System.String"/> object converted to uppercase using the casing rules of the invariant culture.</summary>
            <returns>
            A <see cref="T:System.String"/> object in uppercase.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ToUpper">
            <summary>Returns a copy of this <see cref="T:System.String"/> converted to uppercase, using the casing rules of the current culture.</summary>
            <returns>
            A <see cref="T:System.String"/> in uppercase.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ToUpper(System.Globalization.CultureInfo)">
            <summary>Returns a copy of this <see cref="T:System.String"/> converted to uppercase, using the casing rules of the specified culture.</summary>
            <returns>
            A <see cref="T:System.String"/> in uppercase.
            </returns>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that supplies culture-specific casing rules.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="culture"/> is null.</exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.ToString">
            <summary>Returns this instance of <see cref="T:System.String"/>; no actual conversion is performed.</summary>
            <returns>
            This <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Trim">
            <summary>Removes all leading and trailing white-space characters from the current <see cref="T:System.String"/> object.</summary>
            <returns>
            The String that remains after all white-space characters are removed from the start and end of the current <see cref="T:System.String"/> object.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Insert(System.Int32,System.String)">
            <summary>Inserts a specified instance of <see cref="T:System.String"/> at a specified index position in this instance.</summary>
            <returns>
            A new <see cref="T:System.String"/> equivalent to this instance but with <paramref name="value"/> inserted at position <paramref name="startIndex"/>.
            </returns>
            <param name="startIndex">The index position of the insertion.</param>
            <param name="value">The <see cref="T:System.String"/> to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is negative or greater than the length of this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Replace(System.Char,System.Char)">
            <summary>Replaces all occurrences of a specified Unicode character in this instance with another specified Unicode character.</summary>
            <returns>
            A <see cref="T:System.String"/> equivalent to this instance but with all instances of <paramref name="oldChar"/> replaced with <paramref name="newChar"/>.
            </returns>
            <param name="oldChar">A Unicode character to be replaced.</param>
            <param name="newChar">A Unicode character to replace all occurrences of <paramref name="oldChar"/>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Replace(System.String,System.String)">
            <summary>Replaces all occurrences of a specified <see cref="T:System.String"/> in this instance, with another specified <see cref="T:System.String"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> equivalent to this instance but with all instances of <paramref name="pattern"/> replaced with <paramref name="replacement"/>.
            </returns>
            <param name="pattern">A <see cref="T:System.String"/> to be replaced.</param>
            <param name="replacement">A <see cref="T:System.String"/> to replace all occurrences of <paramref name="pattern"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is the empty String ("").</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Remove(System.Int32,System.Int32)">
            <summary>Deletes a specified number of characters from this instance beginning at a specified position.</summary>
            <returns>
            A new <see cref="T:System.String"/> that is equivalent to this instance less <paramref name="count"/> number of characters.
            </returns>
            <param name="startIndex">The zero-based position to begin deleting characters.</param>
            <param name="count">The number of characters to delete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="startIndex"/> or <paramref name="count"/> is less than zero.
            -or-
            <paramref name="startIndex"/> plus <paramref name="count"/> specify a position outside this instance.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Remove(System.Int32)">
            <summary>Deletes all the characters from this String beginning at a specified position and continuing through the last position.</summary>
            <returns>
            A new <see cref="T:System.String"/> object that is equivalent to this String less the removed characters.
            </returns>
            <param name="startIndex">The zero-based position to begin deleting characters.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than zero.
            -or-
            <paramref name="startIndex"/> specifies a position that is not within this String.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.RemoveEnd(System.String)">
            <summary>Remove <paramref name="toRemove"/> String if it is the of this String.</summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Value">
            <summary>Gets or sets the underlying case sensitive String.</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Item(System.Int32)">
            <summary>Gets the character at a specified character position in the current <see cref="T:System.String"/> object.</summary>
            <returns>
            A Unicode character.
            </returns>
            <param name="index">A character position in the current <see cref="T:System.String"/> object.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is greater than or equal to the length of this object or less than zero.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.CaseInsensitiveString.Length">
            <summary>Gets the number of characters in the current <see cref="T:System.String"/> object.</summary>
            <returns>
            The number of characters in this instance.
            </returns>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Curve`2">
            <summary>
            An implementation of a Dictionary like structure implemented with IList interface instead.
            Rather than KeyvaluePair this structure uses <see cref="T:DmFramework.Generics.DataStructures.General.Association`2"/> for added flexibility.
            Another benefit that this structure can be XMLSerialized in contrast to Dictionary.
            Typical application would be for storing chart curve points, hence the name.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.#ctor">
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <param name="comparer">The comparer to use.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="ConstructorComparer" lang="cs" title="The following example shows how to use the Comparer constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="ConstructorComparer" lang="vbnet" title="The following example shows how to use the Comparer constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.#ctor(System.Int32)">
            <param name="capacity">The initial capacity of the sorted list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>.
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="ConstructorCapacity" lang="cs" title="The following example shows how to use the constructor with an initial capacity."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="ConstructorCapacity" lang="vbnet" title="The following example shows how to use the constructor with an initial capacity."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <param name="capacity">The initial capacity of the sorted list.</param>
            <param name="comparer">The comparer to use.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>.
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.#ctor(System.Collections.Generic.IEnumerable{DmFramework.Generics.DataStructures.General.Association{`0,`1}})">
            <param name="collection">The collection to copy into the sorted list.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="ConstructorCollection" lang="cs" title="The following example shows how to use the collections constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="ConstructorCollection" lang="vbnet" title="The following example shows how to use the collections constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <param name="collection">The collection to copy into the sorted list.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="ConstructorCollection" lang="cs" title="The following example shows how to use the collections constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="ConstructorCollection" lang="vbnet" title="The following example shows how to use the collections constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.GetValue(`0)">
            <summary>Get the value indexed by key</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.System#Collections#IList#Remove(System.Object)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.</summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.System#Collections#IList#Add(System.Object)">
            <summary>Adds an item to the <see cref="T:System.Collections.IList"/>.</summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.System#Collections#IList#Contains(System.Object)">
            <summary>Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.</summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.System#Collections#IList#IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.</summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.RemoveAt(System.Int32)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="RemoveAt" lang="cs" title="The following example shows how to use the RemoveAt method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="RemoveAt" lang="vbnet" title="The following example shows how to use the RemoveAt method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.CopyTo(DmFramework.Generics.DataStructures.General.Association{`0,`1}[],System.Int32)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.Add(DmFramework.Generics.DataStructures.General.Association{`0,`1})">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.Remove(DmFramework.Generics.DataStructures.General.Association{`0,`1})">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.Contains(DmFramework.Generics.DataStructures.General.Association{`0,`1})">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.Contains(`0,`1)">
            <summary>Check if the collection contains (key,value) pair</summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.Clear">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.IndexOf(DmFramework.Generics.DataStructures.General.Association{`0,`1})">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="IndexOf" lang="cs" title="The following example shows how to use the IndexOf method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="IndexOf" lang="vbnet" title="The following example shows how to use the IndexOf method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.System#Collections#Generic#IList{DmFramework#Generics#DataStructures#General#Association{TKey@TValue}}#Insert(System.Int32,DmFramework.Generics.DataStructures.General.Association{`0,`1})">
            <inheritdoc/>  
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.GetKeyForItem(DmFramework.Generics.DataStructures.General.Association{`0,`1})">
            <summary>Gets the key for item.</summary>
            <param name="item">The item.</param>
            <returns>The key for the specified association.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.ContainsKey(`0)">
            <summary>Determines whether the collection contains the specified key.</summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the collection contains the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.Add(`0,`1)">
            <summary>Adds the specified key.</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.Remove(`0)">
            <summary>Removes the specified key.</summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.TryGetValue(`0,`1@)">
            <summary>Tries to the get the value tied to the specified key.</summary>
            <param name="key">The key to look for.</param>
            <param name="value">The value.</param>
            <returns>An indication of whether the item was found.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.GetDefaultAssociationForKey(`0)">
            <summary>Gets the default association for the key.</summary>
            <param name="key">The key to get the default association for.</param>
            <returns>An association with a default value and the given key.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Curve`2.IndexOf(`0)">
            <summary>Gets the index of the specified key.</summary>
            <param name="key">The key to look for.</param>
            <returns>The index of the specified key.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.Comparer">
            <summary>Gets the comparer.</summary>
            <value>The comparer.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.Capacity">
            <summary>Gets or sets the total number of elements the internal data structure can hold without resizing.</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.IsEmpty">
            <inheritdoc />  
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.Item(`0)">
            <summary>Gets or sets the <see cref="T:DmFramework.Generics.DataStructures.General.Association`2"/> with the specified key.</summary>
            <value></value>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.Keys">
            <summary>Gets the keys.</summary>
            <value>The keys.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.Values">
            <summary>Gets the values.</summary>
            <value>The values.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.System#Collections#IList#Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:System.Object"/> at the specified index.</summary>
            <value></value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).</summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.IsFixedSize">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.</summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.Item(System.Int32)">
            <summary>Gets the item at the specified position.</summary>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is equal to or greater than <see cref="P:DmFramework.Generics.DataStructures.General.Curve`2.Count"/>.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.Count">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.IsReadOnly">
            <inheritdoc />  
            <remarks>Always returns <c>false</c>.</remarks>
            <value>
            	<c>false</c>.
            </value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Curve`2.System#Collections#Generic#IList{DmFramework#Generics#DataStructures#General#Association{TKey@TValue}}#Item(System.Int32)">
            <inheritdoc/>  
            <exception cref="T:System.NotSupportedException">When set is called.</exception>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.DictionaryBase`2">
            <summary>A custom hashtable extending the standard Generic Dictionary.</summary>
            <remarks>
            <para>
            The <see cref="T:DmFramework.Generics.DataStructures.General.DictionaryBase`2"/> class can be used by derive your 
            own dictionary type the <see cref="T:DmFramework.Generics.DataStructures.General.DictionaryBase`2"/> class.
            </para>
            <para>
            The <see cref="T:DmFramework.Generics.DataStructures.General.DictionaryBase`2"/> class provides protected 
            methods that can be used to customize its behavior when adding and removing 
            items, clearing the dictionary, or setting the value of an existing item.
            </para>
            <para>
            <see cref="T:DmFramework.Generics.DataStructures.General.DictionaryBase`2"/> accepts a null reference 
            (Nothing in Visual Basic) as a valid value for reference types.
            </para>
            <para>
            Notes to Implementers: This base class is provided to make it easier for implementers 
            to create a custom dictionaries. Implementers are encouraged to extend this base class 
            instead of creating their own. 
            </para>
            </remarks>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.#ctor">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.#ctor(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.GetEnumerator"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.AddItem(`0,`1)">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)"/>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Add(`0,`1)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.SetItem(`0,`1)">
            <summary>Sets the value associated with the specified key.</summary>
            <param name="key">The key to set the value for.</param>
            <param name="value">The value to assign to the entry.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.SetItem(`0,`1)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.RemoveItem(`0)">
            <summary>Removes the value with the specified key from the <see cref="T:DmFramework.Generics.DataStructures.General.DictionaryBase`2"/>.</summary>
            <param name="key">The key to remove.</param>
            <returns>
            	<c>true</c> if the element is successfully found and removed; otherwise, <c>false</c>. This method returns false if key is not found in the <see cref="T:DmFramework.Generics.DataStructures.General.DictionaryBase`2"/>.
            </returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Remove(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.ClearItems">
            <summary>Clears all the objects in this instance.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.VerifyKey(System.Object)">
            <summary>Verifies the key.</summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.VerifyValueType(System.Object)">
            <summary>Verifies the type of the value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.ContainsKey(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\DictionaryBaseExamples.cs" region="ContainsKey" lang="cs" title="The following example shows how to use the ContainsKey method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\DictionaryBaseExamples.vb" region="ContainsKey" lang="vbnet" title="The following example shows how to use the ContainsKey method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Add(`0,`1)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\DictionaryBaseExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\DictionaryBaseExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Remove(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\DictionaryBaseExamples.cs" region="Remove" lang="cs" title="The following example shows how to use the Remove method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\DictionaryBaseExamples.vb" region="Remove" lang="vbnet" title="The following example shows how to use the Remove method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.TryGetValue(`0,`1@)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\DictionaryBaseExamples.cs" region="TryGetValue" lang="cs" title="The following example shows how to use the TryGetValue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\DictionaryBaseExamples.vb" region="TryGetValue" lang="vbnet" title="The following example shows how to use the TryGetValue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Clear">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\DictionaryBaseExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\DictionaryBaseExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#IDictionary#Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#IDictionary#Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.DictionaryBase`2.OnDeserialization(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Comparer">
            <inheritdoc cref="P:System.Collections.Generic.Dictionary`2.Comparer"/>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Item(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\DictionaryBaseExamples.cs" region="Item" lang="cs" title="The following example shows how to use the Item property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\DictionaryBaseExamples.vb" region="Item" lang="vbnet" title="The following example shows how to use the Item property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Keys">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\DictionaryBaseExamples.cs" region="Keys" lang="cs" title="The following example shows how to use the Keys property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\DictionaryBaseExamples.vb" region="Keys" lang="vbnet" title="The following example shows how to use the Keys property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Values">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\DictionaryBaseExamples.cs" region="Values" lang="cs" title="The following example shows how to use the Values property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\DictionaryBaseExamples.vb" region="Values" lang="vbnet" title="The following example shows how to use the Values property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.Count">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\DictionaryBaseExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\DictionaryBaseExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#IDictionary#Item(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#IDictionary#Keys">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#IDictionary#Values">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.IsFixedSize">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#ICollection#SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.DictionaryBase`2.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Edge`1">
            <summary>A class representing an edge in a graph.</summary>
            <typeparam name="T">The type of object the edge contains.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Edge`1.#ctor(DmFramework.Generics.DataStructures.General.Vertex{`0},DmFramework.Generics.DataStructures.General.Vertex{`0},System.Boolean)">
            <param name="fromVertex">From <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/>.</param>
            <param name="toVertex">To <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/>.</param>
            <param name="isDirected">if set to <c>true</c> [is directed].</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\EdgeExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\EdgeExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Edge`1.#ctor(DmFramework.Generics.DataStructures.General.Vertex{`0},DmFramework.Generics.DataStructures.General.Vertex{`0},System.Double,System.Boolean)">
            <param name="fromVertex">From <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/>.</param>
            <param name="toVertex">To <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/>.</param>
            <param name="weight">The weight associated with the edge.</param>
            <param name="isDirected">if set to <c>true</c> [is directed].</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fromVertex"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="toVertex"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\EdgeExamples.cs" region="WeightedConstructor" lang="cs" title="The following example shows how to use the constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\EdgeExamples.vb" region="WeightedConstructor" lang="vbnet" title="The following example shows how to use the constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Edge`1.GetPartnerVertex(DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Gets the partner vertex in this <see cref="T:DmFramework.Generics.DataStructures.General.Edge`1"/> relationship.</summary>
            <param name="vertex">The <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/>.</param>
            <returns>The partner of the <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/> specified in this <see cref="T:DmFramework.Generics.DataStructures.General.Edge`1"/> relationship.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="vertex"/> does not equal <see cref="P:DmFramework.Generics.DataStructures.General.Edge`1.FromVertex"/> or <see cref="P:DmFramework.Generics.DataStructures.General.Edge`1.ToVertex"/>.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\EdgeExamples.cs" region="GetPartnerVertex" lang="cs" title="The following example shows how to use the GetPartnerVertex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\EdgeExamples.vb" region="GetPartnerVertex" lang="vbnet" title="The following example shows how to use the GetPartnerVertex method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Edge`1.FromVertex">
            <summary>Gets the from <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/>.</summary>
            <value>The from <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/>.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\EdgeExamples.cs" region="FromVertex" lang="cs" title="The following example shows how to use the FromVertex property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\EdgeExamples.vb" region="FromVertex" lang="vbnet" title="The following example shows how to use the FromVertex property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Edge`1.ToVertex">
            <summary>Gets the to <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/>.</summary>
            <value>The to <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/>.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\EdgeExamples.cs" region="ToVertex" lang="cs" title="The following example shows how to use the ToVertex property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\EdgeExamples.vb" region="ToVertex" lang="vbnet" title="The following example shows how to use the ToVertex property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Edge`1.IsDirected">
            <summary>Gets a value indicating whether this <see cref="T:DmFramework.Generics.DataStructures.General.Edge`1"/> is directed.</summary>
            <value>
            	<c>true</c> if this edge is directed; otherwise, <c>false</c>.
            </value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\EdgeExamples.cs" region="IsDirected" lang="cs" title="The following example shows how to use the IsDirected property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\EdgeExamples.vb" region="IsDirected" lang="vbnet" title="The following example shows how to use the IsDirected property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Edge`1.Weight">
            <summary>Gets the weight associated with this <see cref="T:DmFramework.Generics.DataStructures.General.Edge`1"/>.</summary>
            <value>The weight associated with this <see cref="T:DmFramework.Generics.DataStructures.General.Edge`1"/>.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\EdgeExamples.cs" region="Weight" lang="cs" title="The following example shows how to use the Weight property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\EdgeExamples.vb" region="Weight" lang="vbnet" title="The following example shows how to use the Weight property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Edge`1.Tag">
            <summary>Gets or sets the tag object contained in the edge.</summary>
            <value>The tag object.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\EdgeExamples.cs" region="Tag" lang="cs" title="The following example shows how to use the Tag property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\EdgeExamples.vb" region="Tag" lang="vbnet" title="The following example shows how to use the Tag property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Graph`1">
            <summary>
            An implementation of a Graph data structure.  The graph can be either
            directed or undirected.
            </summary>
            <typeparam name="T">The type of elements in the graph.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.#ctor(System.Boolean)">
            <param name="isDirected">if set to <c>true</c> [is directed].</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the Constructor method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the Constructor method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="AddVertex" lang="cs" title="The following example shows how to use the AddVertex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="AddVertex" lang="vbnet" title="The following example shows how to use the AddVertex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="Remove" lang="cs" title="The following example shows how to use the Remove method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="Remove" lang="vbnet" title="The following example shows how to use the Remove method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.Clear">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.DepthFirstTraversal(DmFramework.Generics.Patterns.Visitor.OrderedVisitor{DmFramework.Generics.DataStructures.General.Vertex{`0}},DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Performs a depth-first traversal, starting at the specified vertex.</summary>
            <param name="visitor">The visitor to use.  In-order traversal is not applicable in a graph.</param>
            <param name="startVertex">The vertex to start from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="startVertex"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="DepthFirstTraversal" lang="cs" title="The following example shows how to use the DepthFirstTraversal method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="DepthFirstTraversal" lang="vbnet" title="The following example shows how to use the DepthFirstTraversal method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.IsCyclic">
            <summary>Determines whether this graph is cyclic (contains cycles).</summary>
            <returns>
            	<c>true</c> if this instance contains cycles; otherwise, <c>false</c>.
            </returns>
            <remarks>The topological sort algorithm is only valid for a directed, acyclic (cycle free) graph.</remarks>
            <remarks>In order to detect cycles, a topological sort of the graph is computed.</remarks>
            <exception cref="T:System.InvalidOperationException">The graph contains cycles.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="IsCyclic" lang="cs" title="The following example shows how to use the IsCyclic method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="IsCyclic" lang="vbnet" title="The following example shows how to use the IsCyclic method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.TopologicalSort">
            <summary>Computes the topological sort of the graph.</summary>
            <remarks>This operation is only defined on a directed graph.</remarks>
            <remarks>The topological sort algorithm is only valid for a directed, acyclic (cycle free) graph.</remarks>
            <returns>A list of vertices in topological order.</returns>
            <exception cref="T:System.InvalidOperationException">The graph contains cycles.</exception>
            <exception cref="T:System.ArgumentException">The graph is not directed.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="TopologicalSort" lang="cs" title="The following example shows how to use the TopologicalSort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="TopologicalSort" lang="vbnet" title="The following example shows how to use the TopologicalSort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.TopologicalSortTraversal(DmFramework.Generics.Patterns.Visitor.IVisitor{DmFramework.Generics.DataStructures.General.Vertex{`0}})">
            <summary>Visits very vertex in the graph (provided it doesn't have cycles) in topological order.</summary>
            <param name="visitor">The visitor.</param>
            <exception cref="T:System.ArgumentException">The graph is not directed.</exception>
            <remarks>The topological sort algorithm is only valid for a directed, acyclic (cycle free) graph.</remarks>
            <exception cref="T:System.InvalidOperationException">The graph contains cycles.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="TopologicalSortTraversal" lang="cs" title="The following example shows how to use the TopologicalSortTraversal method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="TopologicalSortTraversal" lang="vbnet" title="The following example shows how to use the TopologicalSortTraversal method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.BreadthFirstTraversal(DmFramework.Generics.Patterns.Visitor.IVisitor{DmFramework.Generics.DataStructures.General.Vertex{`0}},DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Performs a breadth-first traversal from the specified vertex.</summary>
            <param name="visitor">The visitor to use.</param>
            <param name="startVertex">The vertex to start from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="startVertex"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="BreadthFirstTraversal" lang="cs" title="The following example shows how to use the BreadthFirstTraversal method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="BreadthFirstTraversal" lang="vbnet" title="The following example shows how to use the BreadthFirstTraversal method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.RemoveVertex(DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Removes the specified vertex from the graph.</summary>
            <param name="vertex">The vertex to be removed.</param>
            <returns>A value indicating whether the vertex was found (and removed) in the graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="RemoveVertex" lang="cs" title="The following example shows how to use the RemoveVertex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="RemoveVertex" lang="vbnet" title="The following example shows how to use the RemoveVertex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.RemoveVertex(`0)">
            <summary>Removes the vertex with the specified value from the graph.</summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if a vertex with the value specified was found (and removed) in the graph; otherwise <c>false</c>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="RemoveVertexFromValue" lang="cs" title="The following example shows how to use the RemoveVertex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="RemoveVertexFromValue" lang="vbnet" title="The following example shows how to use the RemoveVertex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.ContainsVertex(DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Determines whether this graph contains the specified vertex.</summary>
            <param name="vertex">The vertex.</param>
            <returns>
            	<c>true</c> if this instance contains the specified vertex; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="ContainsVertex" lang="cs" title="The following example shows how to use the ContainsVertex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="ContainsVertex" lang="vbnet" title="The following example shows how to use the ContainsVertex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.ContainsVertex(`0)">
            <summary>Determines whether the specified item is contained in the graph.</summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the specified item contains vertex; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="ContainsVertexValue" lang="cs" title="The following example shows how to use the ContainsVertex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="ContainsVertexValue" lang="vbnet" title="The following example shows how to use the ContainsVertex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.RemoveEdge(DmFramework.Generics.DataStructures.General.Edge{`0})">
            <summary>Removes the edge specified from the graph.</summary>
            <param name="edge">The edge to be removed.</param>
            <returns>A value indicating whether the edge specified was found (and removed) from the graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="RemoveEdge" lang="cs" title="The following example shows how to use the RemoveEdge method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="RemoveEdge" lang="vbnet" title="The following example shows how to use the RemoveEdge method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.RemoveEdge(DmFramework.Generics.DataStructures.General.Vertex{`0},DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Removes the edge specified from the graph.</summary>
            <param name="from">The from vertex.</param>
            <param name="to">The to vertex.</param>
            <returns>A value indicating whether the edge between the two vertices supplied was found (and removed) from the graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="from"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="to"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="RemoveEdgeFromVertices" lang="cs" title="The following example shows how to use the RemoveEdge method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="RemoveEdgeFromVertices" lang="vbnet" title="The following example shows how to use the RemoveEdge method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.AddEdge(DmFramework.Generics.DataStructures.General.Edge{`0})">
            <summary>Adds the specified edge to the graph.</summary>
            <param name="edge">The edge to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DmFramework.Generics.DataStructures.General.Edge`1.IsDirected"/> of <paramref name="edge"/> doe not equal <see cref="P:DmFramework.Generics.DataStructures.General.Edge`1.IsDirected"/> of the current instance.</exception>
            <exception cref="T:System.ArgumentException">Either <see cref="P:DmFramework.Generics.DataStructures.General.Edge`1.FromVertex"/> or <see cref="P:DmFramework.Generics.DataStructures.General.Edge`1.ToVertex"/> of <paramref name="edge"/> cannot be found the current instance.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DmFramework.Generics.DataStructures.General.Edge`1.ToVertex"/> of <paramref name="edge"/> already exists on the current instance.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="AddEdge" lang="cs" title="The following example shows how to use the AddEdge method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="AddEdge" lang="vbnet" title="The following example shows how to use the AddEdge method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.AddVertex(DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Adds the vertex specified to the graph.</summary>
            <param name="vertex">The vertex to add.</param>
            <exception cref="T:System.ArgumentException"><paramref name="vertex"/> already exists in the current instance.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="AddVertex" lang="cs" title="The following example shows how to use the AddVertex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="AddVertex" lang="vbnet" title="The following example shows how to use the AddVertex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.AddVertex(`0)">
            <summary>Adds a vertex to the graph with the specified data item.</summary>
            <param name="item">The item to store in the vertex.</param>
            <returns>The <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/> created and added to the graph.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="AddVertexFromValue" lang="cs" title="The following example shows how to use the AddVertex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="AddVertexFromValue" lang="vbnet" title="The following example shows how to use the AddVertex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.AddEdge(DmFramework.Generics.DataStructures.General.Vertex{`0},DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Adds the edge to the graph.</summary>
            <param name="from">The from vertex.</param>
            <param name="to">The to vertex.</param>
            <returns>The newly created <see cref="T:DmFramework.Generics.DataStructures.General.Edge`1"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="AddEdgeFromVertices" lang="cs" title="The following example shows how to use the AddEdge method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="AddEdgeFromVertices" lang="vbnet" title="The following example shows how to use the AddEdge method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.AddEdge(DmFramework.Generics.DataStructures.General.Vertex{`0},DmFramework.Generics.DataStructures.General.Vertex{`0},System.Double)">
            <summary>Adds the edge to the graph.</summary>
            <param name="from">The from vertex.</param>
            <param name="to">The to vertex.</param>
            <param name="weight">The weight of this edge.</param>
            <returns>The newly created <see cref="T:DmFramework.Generics.DataStructures.General.Edge`1"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="AddWeightedEdgeFromVertices" lang="cs" title="The following example shows how to use the AddEdge method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="AddWeightedEdgeFromVertices" lang="vbnet" title="The following example shows how to use the AddEdge method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.IsWeaklyConnected">
            <summary>Gets a value indicating whether this graph is weakly connected.</summary>
            <returns><c>true</c> if this graph is weakly connected; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.General.Graph`1"/> is empty.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="IsWeaklyConnected" lang="cs" title="The following example shows how to use the IsWeaklyConnected method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="IsWeaklyConnected" lang="vbnet" title="The following example shows how to use the IsWeaklyConnected method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.IsStronglyConnected">
            <summary>Gets a value indicating whether this graph is weakly connected.</summary>
            <returns><c>true</c> if this graph is weakly connected; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:DmFramework.Generics.DataStructures.General.Graph`1.IsDirected"/> is <c>true</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.General.Graph`1"/> is empty.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="IsStronglyConnected" lang="cs" title="The following example shows how to use the IsStronglyConnected method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="IsStronglyConnected" lang="vbnet" title="The following example shows how to use the IsStronglyConnected method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.ContainsEdge(`0,`0)">
            <summary>Determines whether the vertex with the specified from value has an edge to a vertex with the specified to value.</summary>
            <param name="fromValue">The from vertex value.</param>
            <param name="toValue">The to vertex value.</param>
            <returns>
            	<c>true</c> if the vertex with the specified from value has an edge to a vertex with the specified to value; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="ContainsEdgeFromVerticeValues" lang="cs" title="The following example shows how to use the ContainsEdge method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="ContainsEdgeFromVerticeValues" lang="vbnet" title="The following example shows how to use the ContainsEdge method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.ContainsEdge(DmFramework.Generics.DataStructures.General.Vertex{`0},DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Determines whether the specified vertex has a edge to the to vertex.</summary>
            <param name="from">The from vertex.</param>
            <param name="to">The to vertex.</param>
            <returns>
            	<c>true</c> if the specified from vertex has an edge to the to vertex; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="ContainsEdgeFromVertices" lang="cs" title="The following example shows how to use the ContainsEdge method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="ContainsEdgeFromVertices" lang="vbnet" title="The following example shows how to use the ContainsEdge method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.ContainsEdge(DmFramework.Generics.DataStructures.General.Edge{`0})">
            <summary>Determines whether the specified edge is contained in this graph.</summary>
            <param name="edge">The edge to look for.</param>
            <returns>
            	<c>true</c> if the specified edge is contained in the graph; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="ContainsEdge" lang="cs" title="The following example shows how to use the ContainsEdge method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="ContainsEdge" lang="vbnet" title="The following example shows how to use the ContainsEdge method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.GetEdge(DmFramework.Generics.DataStructures.General.Vertex{`0},DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Gets the edge specified by the two vertices.</summary>
            <param name="from">The from vertex.</param>
            <param name="to">The two vertex.</param>
            <returns>The <see cref="T:DmFramework.Generics.DataStructures.General.Edge`1"/> between the two specified vertices if found; otherwise a null reference.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="GetEdge" lang="cs" title="The following example shows how to use the GetEdge method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="GetEdge" lang="vbnet" title="The following example shows how to use the GetEdge method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.GetEdge(`0,`0)">
            <summary>Gets the edge specified by the two vertices.</summary>
            <param name="fromVertexValue">The from vertex value.</param>
            <param name="toVertexValue">The to vertex value.</param>
            <returns>The <see cref="T:DmFramework.Generics.DataStructures.General.Edge`1"/> formed by vertices with the specified values if found, otherwise a null reference.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="GetEdgeFromVertexValue" lang="cs" title="The following example shows how to use the GetEdge method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="GetEdgeFromVertexValue" lang="vbnet" title="The following example shows how to use the GetEdge method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.GetVertex(`0)">
            <summary>Gets the vertex with the specified value.</summary>
            <param name="vertexValue">The vertex value to look for.</param>
            <returns>The <see cref="T:DmFramework.Generics.DataStructures.General.Vertex`1"/> with the specified value.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="GetVertex" lang="cs" title="The following example shows how to use the GetVertex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="GetVertex" lang="vbnet" title="The following example shows how to use the GetVertex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.FindVertices(System.Predicate{`0})">
            <summary>Find all vertices matching the predicate supplied.</summary>
            <returns>All vertices matching <paramref name="predicate"/>.</returns>
            <param name="predicate">The predicate (condition) to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="FindVertices" lang="cs" title="The following example shows how to use the FindVertices method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="FindVertices" lang="vbnet" title="The following example shows how to use the FindVertices method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.FindCycles">
            <summary>
            Finds cycles in a graph using Tarjan's strongly connected components algorithm.
            See http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm
            </summary>
            <returns>A list of of vertice arrays (paths) that form cycles in the graph.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.FindCycles(System.Boolean)">
            <summary>
            Finds cycles in a graph using Tarjan's strongly connected components algorithm.
            See http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm
            </summary>
            <param name="excludeSingleItems">if set to <c>true</c> nodes with no edges are excluded.</param>
            <returns>A list of of vertice arrays (paths) that form cycles in the graph.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.TopologicalSortTraversalInternal(DmFramework.Generics.Patterns.Visitor.IVisitor{DmFramework.Generics.DataStructures.General.Vertex{`0}})">
            <summary>Allows a visitor to visit each vertex in topological order.</summary>
            <param name="visitor">The visitor.</param>
            <returns>The number of items visited.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.DepthFirstTraversal(DmFramework.Generics.Patterns.Visitor.OrderedVisitor{DmFramework.Generics.DataStructures.General.Vertex{`0}},DmFramework.Generics.DataStructures.General.Vertex{`0},System.Collections.Generic.List{DmFramework.Generics.DataStructures.General.Vertex{`0}}@)">
            <summary>Performs a depth-first traversal.</summary>
            <param name="visitor">The visitor.</param>
            <param name="startVertex">The start vertex.</param>
            <param name="visitedVertices">The visited vertices.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.AddEdgeToVertices(DmFramework.Generics.DataStructures.General.Edge{`0})">
            <summary>Adds the edge to the vertices in the edge.</summary>
            <param name="edge">The edge to add.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.CheckEdgeNotNull(DmFramework.Generics.DataStructures.General.Edge{`0})">
            <summary>Checks that the edge is not null.</summary>
            <param name="edge">The edge to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.GetAnyVertex">
            <summary>Gets any vertex.</summary>
            <returns>Any vertex.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.TarjansStronglyConnectedComponentsAlgorithm(System.Boolean,DmFramework.Generics.DataStructures.General.Vertex{`0},System.Collections.Generic.IDictionary{DmFramework.Generics.DataStructures.General.Vertex{`0},System.Int32},System.Collections.Generic.IDictionary{DmFramework.Generics.DataStructures.General.Vertex{`0},System.Int32},System.Collections.Generic.ICollection{DmFramework.Generics.DataStructures.General.Vertex{`0}[]},System.Collections.Generic.Stack{DmFramework.Generics.DataStructures.General.Vertex{`0}},System.Int32)">
            <summary>Executes Tarjan's algorithm on the graph.</summary>
            <param name="excludeSinlgeItems">if set to <c>true</c> [exclude sinlge items].</param>
            <param name="vertex">The vertex to start with.</param>
            <param name="indices">The current indices.</param>
            <param name="lowlinks">The current lowlinks.</param>
            <param name="connected">The connected components.</param>
            <param name="stack">The stack.</param>
            <param name="index">The current index.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Graph`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Graph`1.IsEmpty">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="IsEmpty" lang="cs" title="The following example shows how to use the IsEmpty property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="IsEmpty" lang="vbnet" title="The following example shows how to use the IsEmpty property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Graph`1.System#Collections#Generic#ICollection{T}#Count">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Graph`1.IsDirected">
            <summary>Gets a value indicating whether this instance is directed.</summary>
            <value>
            	<c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="IsDirected" lang="cs" title="The following example shows how to use the IsDirected property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="IsDirected" lang="vbnet" title="The following example shows how to use the IsDirected property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Graph`1.Vertices">
            <summary>Gets the vertices contained in this graph.</summary>
            <value>The vertices contained in this graph.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="Vertices" lang="cs" title="The following example shows how to use the Vertices property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="Vertices" lang="vbnet" title="The following example shows how to use the Vertices property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Graph`1.Edges">
            <summary>Gets the edges contained in this graph.</summary>
            <value>The edges contained in this graph.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="Edges" lang="cs" title="The following example shows how to use the Edges property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="Edges" lang="vbnet" title="The following example shows how to use the Edges property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Graph`1.IsReadOnly">
            <inheritdoc />
            <value>
            	Always <c>false</c>.
            </value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\GraphExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\GraphExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.HashList`2">
            <summary>A Dictionary that accepts multiple values for a unique key.</summary>
            <typeparam name="TKey">The type of the keys in the HashList.</typeparam>
            <typeparam name="TValue">The type of the values in the HashList.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.#ctor">
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>     
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}})">
            <param name="dictionary">The dictionary.</param>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <param name="comparer">The comparer.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="ConstructorComparer" lang="cs" title="The following example shows how to use the comparer constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="ConstructorComparer" lang="vbnet" title="The following example shows how to use the comparer constructor."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.#ctor(System.Int32)">
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="ConstructorCapacity" lang="cs" title="The following example shows how to use the capacity constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="ConstructorCapacity" lang="vbnet" title="The following example shows how to use the capacity constructor."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.GetValueEnumerator">
            <summary>Gets an enumerator for enumerating though values.</summary>
            <returns>A enumerator for enumerating through values in the <see cref="T:DmFramework.Generics.DataStructures.General.HashList`2"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="GetValueEnumerator" lang="cs" title="The following example shows how to use the GetValueEnumerator method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="GetValueEnumerator" lang="vbnet" title="The following example shows how to use the GetValueEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.Add(`0,`1)">
            <summary>Adds the specified key.</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.AddItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Adds the item.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.Add(`0,`1[])">
            <summary>Adds the specified key.</summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>   
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="AddParams" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="AddParams" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>     
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.AddItem(`0,System.Collections.Generic.IList{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.RemoveValue(`1)">
            <summary>Removes the first occurrence of the value found.</summary>
            <param name="item">The item.</param>
            <returns>A indication of whether the item has been found (and removed) in the Hash IList.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="RemoveValue" lang="cs" title="The following example shows how to use the RemoveValue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="RemoveValue" lang="vbnet" title="The following example shows how to use the RemoveValue method."/>
            </example>     
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.RemoveValueItem(`1)">
            <summary>Removes the first instance found of the value specified from the HashList.</summary>
            <param name="item">The item.</param>
            <returns>A value indicating whether or not an item matching the criteria was found and removed.</returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.HashList`2.RemoveValue(`1)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.RemoveAll(`1)">
            <summary>Removes all the occurrences of the item in the HashList</summary>
            <param name="item">The item.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="RemoveAll" lang="cs" title="The following example shows how to use the RemoveAll method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="RemoveAll" lang="vbnet" title="The following example shows how to use the RemoveAll method."/>
            </example>     
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.RemoveAllItems(`1)">
            <summary>Removes all the specified values from the HashList.</summary>
            <param name="item">The item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.HashList`2.RemoveAll(`1)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.Remove(`0,`1)">
            <summary>Removes all the occurrences of the item in the HashList</summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <returns>An indication of whether the key and value pair has been found (and removed).</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="RemoveKeyValue" lang="cs" title="The following example shows how to use the RemoveAll method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="RemoveKeyValue" lang="vbnet" title="The following example shows how to use the RemoveAll method."/>
            </example>     
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.HashList`2.RemoveItem(`0,`1)">
            <summary>Removes the item from this instance.</summary>
            <param name="key">The key.</param>
            <param name="item">The item to remove.</param>
            <returns></returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.HashList`2.Remove(`0,`1)"/> method.
            </remarks>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.HashList`2.ValueCount">
            <summary>Gets the count of values in this HashList.</summary>
            <value>The count of values.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="ValueCount" lang="cs" title="The following example shows how to use the ValueCount property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="ValueCount" lang="vbnet" title="The following example shows how to use the ValueCount property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.HashList`2.KeyCount">
            <summary>Gets the count of values in this HashList.</summary>
            <value>The count of values.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HashListExamples.cs" region="KeyCount" lang="cs" title="The following example shows how to use the KeyCount property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HashListExamples.vb" region="KeyCount" lang="vbnet" title="The following example shows how to use the KeyCount property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Heap`1">
            <summary>An implementation of a Heap data structure.</summary>
            <typeparam name="T">The type of item stored in the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/>.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.IHeap`1">
            <summary>An interface for the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/> data structure.</summary>
            <typeparam name="T">The type of elements in the heap.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IHeap`1.Add(`0)">
            <summary>Adds the specified item.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IHeap`1.RemoveRoot">
            <summary>Removes the root and returns it.</summary>
            <returns>The root of the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.General.Graph`1"/> is empty.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.IHeap`1.Root">
            <summary>Gets the root.</summary>
            <value>The root.</value>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/> is empty.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.#ctor(DmFramework.Generics.DataStructures.General.HeapType)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/> class.</summary>
            <param name="type">The type of Heap to create.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not either <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Maximum"/> or <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Minimum"/> .</exception>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.#ctor(DmFramework.Generics.DataStructures.General.HeapType,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/> class.</summary>
            <param name="type">The type of heap.</param>
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not either <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Maximum"/> or <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Minimum"/> .</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
            .
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="ConstructorCapacity" lang="cs" title="The following example shows how to use the capacity constructor."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="ConstructorCapacity" lang="vbnet" title="The following example shows how to use the capacity constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.#ctor(DmFramework.Generics.DataStructures.General.HeapType,System.Comparison{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/> class.</summary>
            <param name="type">The type of heap.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not either <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Maximum"/> or <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Minimum"/> .</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.#ctor(DmFramework.Generics.DataStructures.General.HeapType,System.Int32,System.Comparison{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/> class.</summary>
            <param name="type">The type of heap.</param>
            <param name="capacity">The capacity of the heap to start with.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not either <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Maximum"/> or <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Minimum"/> .</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.#ctor(DmFramework.Generics.DataStructures.General.HeapType,System.Collections.Generic.IComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/> class.</summary>
            <param name="type">The type of Heap to create.</param>
            <param name="comparer">The comparer to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not either <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Maximum"/> or <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Minimum"/> .</exception>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="ConstructorComparer" lang="cs" title="The following example shows how to use the comparer constructor."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="ConstructorComparer" lang="vbnet" title="The following example shows how to use the comparer constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.#ctor(DmFramework.Generics.DataStructures.General.HeapType,System.Int32,System.Collections.Generic.IComparer{`0})">
            <param name="type">The type of heap.</param>
            <param name="capacity">The initial capacity of the Heap.</param>
            <param name="comparer">The comparer to use.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>.
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not either <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Maximum"/> or <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Minimum"/> .</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.RemoveRoot">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="RemoveRoot" lang="cs" title="The following example shows how to use the RemoveRoot method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="RemoveRoot" lang="vbnet" title="The following example shows how to use the RemoveRoot method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.RemoveRootItem(`0)">
            <summary>Removes the root item.</summary>
            <param name="item">The item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.Heap`1.RemoveRoot"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.Contains(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.Add(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.AddItem(`0)">
            <summary>Adds the item.</summary>
            <param name="item">The item to add.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.Heap`1.Add(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.Clear">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.ClearItems">
            <summary>Clears all the objects in this instance.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.Heap`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Heap`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Heap`1.Root">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="Root" lang="cs" title="The following example shows how to use the Root property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="Root" lang="vbnet" title="The following example shows how to use the Root property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Heap`1.Type">
            <summary>Gets the type of heap represented by this instance.</summary>
            <value>The type of heap.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="Type" lang="cs" title="The following example shows how to use the Type property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="Type" lang="vbnet" title="The following example shows how to use the Type property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Heap`1.IsEmpty">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="IsEmpty" lang="cs" title="The following example shows how to use the IsEmpty property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="IsEmpty" lang="vbnet" title="The following example shows how to use the IsEmpty property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Heap`1.Count">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Heap`1.IsReadOnly">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.HeapType">
            <summary>The type of <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/> to implemented.</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.General.HeapType.Minimum">
            <summary>Makes the heap a Minimum-Heap - the smallest item is kept in the root of the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/>.</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.General.HeapType.Maximum">
            <summary>Makes the heap a Maximum-Heap - the largest item is kept in the root of the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/>.</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.IMatrix`1">
            <summary>An interface for a general matrix-type data structure.</summary>
            <typeparam name="T">The type of elements in the matrix.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Gets the specified sub matrix of the current <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/></summary>
            <param name="rowStart">The start row.</param>
            <param name="columnStart">The start column.</param>
            <param name="rowCount">The number of rows.</param>
            <param name="columnCount">The number of columns.</param>
            <returns>A sub-<see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/> of the current <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.InterchangeRows(System.Int32,System.Int32)">
            <summary>Interchanges (swap) one row with another.</summary>
            <param name="firstRow">The index of the first row.</param>
            <param name="secondRow">The index of the second row.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="firstRow"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="firstRow"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Rows"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="secondRow"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="secondRow"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Rows"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.InterchangeColumns(System.Int32,System.Int32)">
            <summary>Interchanges (swap) one column with another.</summary>
            <param name="firstColumn">The index of the first column.</param>
            <param name="secondColumn">The index of the second column.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="firstColumn"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="secondColumn"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="firstColumn"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Columns"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="secondColumn"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Columns"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.GetRow(System.Int32)">
            <summary>Gets the row at the specified index.</summary>
            <param name="rowIndex">Index of the row.</param>
            <returns>An array containing the values of the requested row.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Rows"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.GetColumn(System.Int32)">
            <summary>Gets the column at the specified index.</summary>
            <param name="columnIndex">Index of the column.</param>
            <returns>An array containing the values of the requested column.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Columns"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.AddRows(System.Int32)">
            <summary>Adds the specified number of rows to the matrix.</summary>
            <param name="rowCount">The number of rows to add.</param>     
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowCount"/> is less than or equal to 0.</exception>   
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.AddRow">
            <summary>Adds a single row to the <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/>.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.AddRow(`0[])">
            <summary>
            Adds a single row to the <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/>, and populates the values
            accordingly.
            </summary>
            <param name="values">The values to populate the row with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="values"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Columns"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.AddColumns(System.Int32)">
            <summary>Adds the specified number of columns to the <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/>.</summary>
            <param name="columnCount">The number of columns to add.</param>       
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnCount"/> is less than or equal to 0.</exception> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.AddColumn">
            <summary>Adds a single column to the <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/>.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.AddColumn(`0[])">
            <summary>
            Adds a single column to the <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/>, and populates the values
            accordingly.
            </summary>
            <param name="values">The values to populate the column with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="values"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Rows"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.DeleteRow(System.Int32)">
            <summary>Deletes the row from the Matrix.</summary>
            <param name="row">The index of the row to delete.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.DeleteColumn(System.Int32)">
            <summary>Deletes the column from the Matrix.</summary>
            <param name="column">The index of the column to delete.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.IMatrix`1.Resize(System.Int32,System.Int32)">
            <summary>Resizes the <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/> to the specified size.</summary>
            <param name="newNumberOfRows">The new number of rows.</param>
            <param name="newNumberOfColumns">The new number of columns.</param>
            <exception cref="T:System.ArgumentException"><paramref name="newNumberOfColumns"/> is less than or equal to 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="newNumberOfRows"/> is less than or equal to 0.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Columns">
            <summary>Gets the number of columns in this <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/>.</summary>
            <value>The columns.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Rows">
            <summary>Gets the number of rows in this <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/>.</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.IMatrix`1.IsSquare">
            <summary>Gets a value indicating whether this <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/> is square.</summary>
            <value><c>true</c> if this <see cref="T:DmFramework.Generics.DataStructures.General.IMatrix`1"/> is square; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Item(System.Int32,System.Int32)">
            <summary>Gets or sets the value at the specified index.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Rows"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="column"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="column"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Columns"/>.</exception>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.ISet">
            <summary>An interface for the Set data structure</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ISet.Subtract(DmFramework.Generics.DataStructures.General.ISet)">
            <summary>Applies the difference operation to two <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>.</summary>
            <param name="other">The other <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>.</param>
            <returns>The result of the difference operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ISet.Intersection(DmFramework.Generics.DataStructures.General.ISet)">
            <summary>Applies the Intersection operation to two <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>s.</summary>
            <param name="other">The other <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>.</param>
            <returns>The result of the intersection operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ISet.Inverse">
            <summary>Inverses this instance.</summary>
            <returns>The Inverse representation of the current <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ISet.IsProperSubsetOf(DmFramework.Generics.DataStructures.General.ISet)">
            <summary>Determines whether the current instance is a proper subset specified <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>.</summary>
            <param name="other">The <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>.</param>
            <returns>
            	<c>true</c> if [is proper subset of] [the specified set]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ISet.IsProperSupersetOf(DmFramework.Generics.DataStructures.General.ISet)">
            <summary>Determines whether the current instance is a proper superset of specified <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>.</summary>
            <param name="other">The set.</param>
            <returns>
            	<c>true</c> if [is proper superset of] [the specified set]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ISet.IsSubsetOf(DmFramework.Generics.DataStructures.General.ISet)">
            <summary>Determines whether the current instance is a subset of the specified <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>.</summary>
            <param name="other">The set.</param>
            <returns>
            	<c>true</c> if [is subset of] [the specified set]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ISet.IsSupersetOf(DmFramework.Generics.DataStructures.General.ISet)">
            <summary>Determines whether the current instance is a superset of the specified <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>.</summary>
            <param name="other">The set.</param>
            <returns>
            	<c>true</c> if [is superset of] [the specified set]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ISet.Union(DmFramework.Generics.DataStructures.General.ISet)">
            <summary>Performs the union operation on two <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/>s.</summary>
            <param name="other">The set.</param>
            <returns>The union of this <see cref="T:DmFramework.Generics.DataStructures.General.ISet"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.ListBase`1">
            <summary>Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.#ctor">
            <inheritdoc cref="M:System.Collections.Generic.List`1.#ctor"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.#ctor(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.#ctor(System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.InsertItem(System.Int32,`0)">
            <summary>Inserts an element into the <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"/> at the specified index.</summary>
            <param name="index">The object to insert. The value can be null for reference types.</param>
            <param name="item">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.-or-<paramref name="index"/> is equal to or greater than <see cref="P:DmFramework.Generics.DataStructures.General.ListBase`1.Count"/>.</exception>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.ListBase`1.Add(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds the elements of the specified collection to the end of the <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"></see>.</summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"></see>. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.AddRangeItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds a range of items to the list.</summary>
            <param name="collection">The collection of items to add.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.ListBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.AsReadOnly">
            <summary>Returns a read-only <see cref="T:System.Collections.Generic.IList`1"></see> wrapper for the current collection.</summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> that acts as a read-only wrapper around the current <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"></see>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"></see> for an element using the default comparer and returns the zero-based index of the element.</summary>
            <returns>The zero-based index of item in the sorted <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"></see>, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:DmFramework.Generics.DataStructures.General.ListBase`1.Count"></see>.</returns>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <exception cref="T:System.InvalidOperationException">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"></see> cannot find an implementation of the <see cref="T:System.IComparable`1"></see> generic interface or the <see cref="T:System.IComparable"></see> interface for type T.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"></see> for an element using the specified comparer and returns the zero-based index of the element.</summary>
            <returns>The zero-based index of item in the sorted <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"></see>, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:DmFramework.Generics.DataStructures.General.ListBase`1.Count"></see>.</returns>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to use when comparing elements.-or-null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"></see>.</param>
            <exception cref="T:System.InvalidOperationException">comparer is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"></see> cannot find an implementation of the <see cref="T:System.IComparable`1"></see> generic interface or the <see cref="T:System.IComparable"></see> interface for type T.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>Searches a range of elements in the sorted <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"></see> for an element using the specified comparer and returns the zero-based index of the element.</summary>
            <returns>The zero-based index of item in the sorted <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"></see>, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:DmFramework.Generics.DataStructures.General.ListBase`1.Count"></see>.</returns>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"></see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0. </exception>
            <exception cref="T:System.InvalidOperationException">comparer is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"></see> cannot find an implementation of the <see cref="T:System.IComparable`1"></see> generic interface or the <see cref="T:System.IComparable"></see> interface for type T.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range in the <see cref="T:DmFramework.Generics.DataStructures.General.ListBase`1"></see>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.ClearItems">
            <summary>Clears all the objects in this instance.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.ListBase`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.ConvertAll``1(System.Converter{`0,``0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.CopyTo(`0[])">
            <inheritdoc cref="M:System.Collections.Generic.List`1.CopyTo(`0[])"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>Copies all items in the list to the specified array.</summary>
            <param name="index">The index to start from in the list.</param>
            <param name="array">The array to copy from.</param>
            <param name="arrayIndex">Index of the array.</param>
            <param name="count">The number of items to copy.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.ForEach(System.Action{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.GetRange(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.IndexOf(`0,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.IndexOf(`0,System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.InsertRangeItems(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>Inserts items in the specified range, from the specified index.</summary>
            <param name="index">The index to start copying to.</param>
            <param name="collection">The collection to copy from.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.ListBase`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.LastIndexOf(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.LastIndexOf(`0,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.RemoveItem(System.Int32,`0)">
            <summary>Removes the element at the specified index of the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.-or-<paramref name="index"/> is equal to or greater than <see cref="P:DmFramework.Generics.DataStructures.General.ListBase`1.Count"/>.</exception>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.ListBase`1.Remove(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.RemoveAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.RemoveRangeItems(System.Int32,System.Int32)">
            <summary>Removes the items in the specified range.</summary>
            <param name="index">The index to start from.</param>
            <param name="count">The number of items to remove.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.ListBase`1.RemoveRange(System.Int32,System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Reverse">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Reverse"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Reverse(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.SetItem(System.Int32,`0)">
            <summary>Replaces the element at the specified index.</summary>
            <param name="index">The new value for the element at the specified index. The value can be null for reference types.</param>
            <param name="item">The zero-based index of the element to replace.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0. </exception>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.ListBase`1.SetItem(System.Int32,`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Sort">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Sort(System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Sort(System.Comparison{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.ToArray">
            <inheritdoc cref="M:System.Collections.Generic.List`1.ToArray"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ListBase`1.TrimExcess">
            <inheritdoc cref="M:System.Collections.Generic.List`1.TrimExcess"/>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ListBase`1.Capacity">
            <inheritdoc cref="P:System.Collections.Generic.List`1.Capacity"/>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ListBase`1.Count">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ListBase`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ListBase`1.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ListBase`1.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ListBase`1.IsFixedSize">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ListBase`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ListBase`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1">
            <summary>A data structure representing a matrix of objects.</summary>
            <typeparam name="T">The type of elements in the object matrix.</typeparam>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.noOfColumns">
            <summary>The number of columns in the matrix.</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.noOfRows">
            <summary>The number of rows in the matrix.</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.data">
            <summary>The data matrix.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/> class.</summary>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <exception cref="T:System.ArgumentException"><paramref name="columns"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="rows"/> is less than 0.</exception>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/> class.</summary>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <param name="pData">The data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="columns"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="rows"/> is less than 0.</exception>
            <example>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.#ctor(System.Int32,System.Int32,`0[0:,0:])">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/> class.</summary>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="columns"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="rows"/> is less than 0.</exception>
            <example>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.DmFramework#Generics#DataStructures#General#IMatrix{T}#GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>  
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Clear">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Contains(`0)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <inheritdoc/>  
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.ValidateIsSquare">
            <summary>Validate that <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.IsSquare"/> is <c>true</c>.</summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.IsSquare"/> is <c>false</c>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.ToArray">
            <summary>Copies the elements of the Matrix to a new array</summary>
            <returns>An [n,m] array containing copies of the elements of the Matrix. </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Gets the sub matrix.</summary>
            <param name="rowStart">The row start.</param>
            <param name="columnStart">The column start.</param>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
            <returns>The sub matrix of the current matrix.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="rowCount"/> is less than or equal to 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="columnCount"/> is less than or equal to 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="rowStart"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="columnStart"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowStart"/> plus <paramref name="rowCount"/> is greater that <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Rows"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnStart"/> plus <paramref name="columnCount"/> is greater that <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Columns"/>.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="GetSubMatrix" lang="cs" title="The following example shows how to use the GetSubMatrix method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="GetSubMatrix" lang="vbnet" title="The following example shows how to use the GetSubMatrix method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.InterchangeRows(System.Int32,System.Int32)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="InterchangeRows" lang="cs" title="The following example shows how to use the InterchangeRows method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="InterchangeRows" lang="vbnet" title="The following example shows how to use the InterchangeRows method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.InterchangeColumns(System.Int32,System.Int32)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="InterchangeColumns" lang="cs" title="The following example shows how to use the InterchangeColumns method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="InterchangeColumns" lang="vbnet" title="The following example shows how to use the InterchangeColumns method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.GetRow(System.Int32)">
            <inheritdoc />   
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="GetRow" lang="cs" title="The following example shows how to use the GetRow method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="GetRow" lang="vbnet" title="The following example shows how to use the GetRow method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.GetColumn(System.Int32)">
            <inheritdoc />   
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="GetColumn" lang="cs" title="The following example shows how to use the GetColumn method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="GetColumn" lang="vbnet" title="The following example shows how to use the GetColumn method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.AddRows(System.Int32)">
            <inheritdoc />    
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="AddRows" lang="cs" title="The following example shows how to use the AddRows method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="AddRows" lang="vbnet" title="The following example shows how to use the AddRows method."/>
            </example>  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.AddRow">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="AddRow" lang="cs" title="The following example shows how to use the AddRow method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="AddRow" lang="vbnet" title="The following example shows how to use the AddRow method."/>
            </example>  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.AddColumn(`0[])">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="AddColumnValues" lang="cs" title="The following example shows how to use the AddColumn method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="AddColumnValues" lang="vbnet" title="The following example shows how to use the AddColumn method."/>
            </example>  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.AddColumns(System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="AddColumns" lang="cs" title="The following example shows how to use the AddColumns method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="AddColumns" lang="vbnet" title="The following example shows how to use the AddColumns method."/>
            </example>      
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.AddColumn">
            <inheritdoc /> 
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="AddColumn" lang="cs" title="The following example shows how to use the AddColumn method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="AddColumn" lang="vbnet" title="The following example shows how to use the AddColumn method."/>
            </example>      
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.AddRow(`0[])">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="AddRowValues" lang="cs" title="The following example shows how to use the AddRow method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="AddRowValues" lang="vbnet" title="The following example shows how to use the AddRow method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Resize(System.Int32,System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="Resize" lang="cs" title="The following example shows how to use the Resize method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="Resize" lang="vbnet" title="The following example shows how to use the Resize method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.DeleteRow(System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="DeleteRow" lang="cs" title="The following example shows how to use the DeleteRow method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="DeleteRow" lang="vbnet" title="The following example shows how to use the DeleteRow method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.DeleteColumn(System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="DeleteColumn" lang="cs" title="The following example shows how to use the DeleteColumn method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="DeleteColumn" lang="vbnet" title="The following example shows how to use the DeleteColumn method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.GetValue(System.Int32,System.Int32)">
            <summary>Gets the value at the specified indexes.</summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.SetValue(System.Int32,System.Int32,`0)">
            <summary>Gets the value at the specified indexes.</summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.GetOffset(System.Int32,System.Int32)">
            <summary>Gets the offset.</summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>The offset of <paramref name="row"/> and <paramref name="row"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.CheckIndexValid(System.Int32,System.Int32)">
            <summary>Checks whether the index supplied is valid.</summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Rows"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="j"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="j"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Columns"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.CopyData(`0[],System.Int32)">
            <summary>Copies the data.</summary>
            <param name="newData">The new data.</param>
            <param name="newColumnCount">The new column count.</param>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.IsSquare">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="IsSquare" lang="cs" title="The following example shows how to use the IsSquare property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="IsSquare" lang="vbnet" title="The following example shows how to use the IsSquare property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Item(System.Int32,System.Int32)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="Index" lang="cs" title="The following example shows how to use the Index property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="Index" lang="vbnet" title="The following example shows how to use the Index property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.System#Collections#Generic#ICollection{T}#Count">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.IsReadOnly">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Columns">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="Columns" lang="cs" title="The following example shows how to use the Columns property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="Columns" lang="vbnet" title="The following example shows how to use the Columns property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Rows">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\ObjectMatrixExamples.cs" region="Rows" lang="cs" title="The following example shows how to use the Rows property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\ObjectMatrixExamples.vb" region="Rows" lang="vbnet" title="The following example shows how to use the Rows property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Data">
            <summary>Gets the data.</summary>
            <value>The data.</value>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.General.Bag`1"/> datastructure.</summary>
            <typeparam name="T">The type of object to include in the bag.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.AddItem(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.RemoveItem(`0,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableBag`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2">
            <summary>An observable version of the <see cref="T:System.Collections.Generic.Dictionary`2"/> data structure.</summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.AddItem(`0,`1)">
            <summary>Protected virual method for adding items which can be overriden in subclasses</summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.RemoveItem(`0)">
            <summary>Protected virual method for removing items which can be overriden in subclasses</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.SetItem(`0,`1)">
            <summary>Protected virual method for setting items which can be overriden in subclasses</summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.ClearItems">
            <summary>Protected virual method for clearing items which can be overriden in subclasses</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.#ctor">
            <summary>default Constructor</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableDictionary`2.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.General.HashList`2"/> data structure.</summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.AddItem(`0,System.Collections.Generic.IList{`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.AddItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.RemoveItem(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.RemoveValueItem(`1)">
            <summary>Removes the first instance found of the value specified from the HashList.</summary>
            <param name="item">The item.</param>
            <returns>
            A value indicating whether or not an item matching the criteria was found and removed.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.RemoveItem(`0,`1)">
            <summary>Removes the item from this instance.</summary>
            <param name="key">The key.</param>
            <param name="item">The item to remove.</param>
            <returns>An indication of whether the item was found, and removed.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.RemoveAllItems(`1)">
            <summary>Removes all the specified values from the HashList.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableHashList`2.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.General.Heap`1"/> data structure.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.AddItem(`0)">
            <summary>Adds the item.</summary>
            <param name="item">The item to add.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the Add method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.RemoveRootItem(`0)">
            <summary>Removes the root item.</summary>
            <param name="item">The item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the RemoveRoot method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.#ctor(DmFramework.Generics.DataStructures.General.HeapType)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1"/> class.</summary>
            <param name="type">The type of Heap to create.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> is not either <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Maximum"/> or <see cref="F:DmFramework.Generics.DataStructures.General.HeapType.Minimum"/> .</exception>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\HeapExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\HeapExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.#ctor(DmFramework.Generics.DataStructures.General.HeapType,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.#ctor(DmFramework.Generics.DataStructures.General.HeapType,System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.#ctor(DmFramework.Generics.DataStructures.General.HeapType,System.Int32,System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.BlockReentrancy">
            <inheritdoc cref="!:ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.CheckReentrancy">
            <inheritdoc cref="!:ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableHeap`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.General.PascalSet"/>.</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.PascalSet">
            <summary>A data structure for representing a set of objects and common operations performed on sets.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.#ctor(System.Int32)">
            <param name="upperBound">The upper bound.  The lower bound defaults as 0.</param>
            <exception cref="T:System.ArgumentException"><paramref name="upperBound"/> is less than 1.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.#ctor(System.Int32,System.Int32[])">
            <param name="upperBound">The upper bound.  The lower bound defaults as 0.</param>
            <param name="initialValues">The initial values.</param>
            <exception cref="T:System.ArgumentException"><paramref name="upperBound"/> is less than 1.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.#ctor(System.Int32,System.Int32,System.Int32[])">
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="initialValues">The initial values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="initialValues"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="lowerBound"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="upperBound"/> is not greater than <paramref name="lowerBound"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.#ctor(System.Int32,System.Int32)">
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <exception cref="T:System.ArgumentException"><paramref name="lowerBound"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="upperBound"/> is not greater than <paramref name="lowerBound"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.#ctor(System.Collections.BitArray,System.Int32,System.Int32)">
            <param name="initialData">The initial data.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.Union(DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Computes the union of this set and the specified set.</summary>
            <param name="set">The set.</param>
            <returns>The union between this set and the set specified.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="set"/> is not in the same universe as this instance.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="Union" lang="cs" title="The following example shows how to use the Union method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="Union" lang="vbnet" title="The following example shows how to use the Union method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.Subtract(DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Computes the difference between this set and the specified set.</summary>
            <param name="set">The set.</param>
            <returns>The result of the difference operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="set"/> is not in the same universe as this instance.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="Subtract" lang="cs" title="The following example shows how to use the Subtract method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="Subtract" lang="vbnet" title="The following example shows how to use the Subtract method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.Intersection(DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Computes the intersection between this set and the specified set.</summary>
            <param name="set">The set.</param>
            <returns>The result of the intersection operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="set"/> is not in the same universe as this instance.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="Intersection" lang="cs" title="The following example shows how to use the Intersection method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="Intersection" lang="vbnet" title="The following example shows how to use the Intersection method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.Inverse">
            <summary>Returns a set with items not in this set.</summary>		
            <returns>The set with items not included in this set.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="Inverse" lang="cs" title="The following example shows how to use the Inverse method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="Inverse" lang="vbnet" title="The following example shows how to use the Inverse method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.IsSubsetOf(DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Determines whether this set is a subset of the specified set.</summary>
            <param name="set">The set to be compared against.</param>
            <returns>
            	<c>true</c> if this set is a subset of the specified set]; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="set"/> is not in the same universe as this instance.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="IsSubsetOf" lang="cs" title="The following example shows how to use the IsSubsetOf method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="IsSubsetOf" lang="vbnet" title="The following example shows how to use the IsSubsetOf method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.IsProperSubsetOf(DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Determines whether this set is a proper subset of the specified set.</summary>
            <param name="set">The set to be compared against.</param>
            <returns>
            	<c>true</c> if this is a proper subset of the specified set; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="set"/> is not in the same universe as this instance.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="IsProperSubsetOf" lang="cs" title="The following example shows how to use the IsProperSubsetOf method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="IsProperSubsetOf" lang="vbnet" title="The following example shows how to use the IsProperSubsetOf method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.IsSupersetOf(DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Determines whether this set is a superset of the specified set.</summary>
            <param name="set">The set to be compared against.</param>
            <returns>
            	<c>true</c> if this set is a superset of the specified set; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="set"/> is not in the same universe as this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.IsProperSupersetOf(DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Determines whether this set is a proper superset of the specified set.</summary>
            <param name="set">The set to be compared against.</param>
            <returns>
            	<c>true</c> if this is a proper superset of the specified set; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="set"/> is not in the same universe as this instance.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="IsProperSupersetOf" lang="cs" title="The following example shows how to use the IsProperSupersetOf method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="IsProperSupersetOf" lang="vbnet" title="The following example shows how to use the IsProperSupersetOf method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.op_Addition(DmFramework.Generics.DataStructures.General.PascalSet,DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Operator + : Performs a union between two sets.</summary>
            <param name="left">The left hand set.</param>
            <param name="right">The right hand set.</param>
            <returns>The result of the union operation.</returns>    
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>  
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>  
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are not in the same universe as this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.op_Subtraction(DmFramework.Generics.DataStructures.General.PascalSet,DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Operator - : Performs a difference operation between two sets.</summary>
            <param name="left">The left hand set.</param>
            <param name="right">The right hand set.</param>
            <returns>The result of the difference operation.</returns>  
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>      
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are not in the same universe as this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.op_Multiply(DmFramework.Generics.DataStructures.General.PascalSet,DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Operator * : Performs a intersection between two sets.</summary>
            <param name="left">The left hand set.</param>
            <param name="right">The right hand set.</param>
            <returns>The result of the intersection operation.</returns> 
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are not in the same universe as this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.op_LessThanOrEqual(DmFramework.Generics.DataStructures.General.PascalSet,DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Operator &lt;= : Checks if the left hand set is a subset of the right hand set.</summary>
            <param name="left">The left hand set.</param>
            <param name="right">The right hand set.</param>
            <returns>A value indicating whether the left hand set is a subset of the right hand set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are not in the same universe as this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.op_GreaterThanOrEqual(DmFramework.Generics.DataStructures.General.PascalSet,DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Operator &gt;= : Checks if the left hand set is a superset of the right hand set.</summary>
            <param name="left">The left hand set.</param>
            <param name="right">The right hand set.</param>
            <returns>A value indicating whether the left hand set is a superset of the right hand set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are not in the same universe as this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.op_LessThan(DmFramework.Generics.DataStructures.General.PascalSet,DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Operator &lt;= : Checks if the left hand set is a proper subset of the right hand set.</summary>
            <param name="left">The left hand set.</param>
            <param name="right">The right hand set.</param>
            <returns>A value indicating whether the left hand set is a proper subset of the right hand set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are not in the same universe as this instance.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.op_GreaterThan(DmFramework.Generics.DataStructures.General.PascalSet,DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Operator &gt;= : Checks if the left hand set is a proper superset of the right hand set.</summary>
            <param name="left">The left hand set.</param>
            <param name="right">The right hand set.</param>
            <returns>A value indicating whether the left hand set is a proper superset of the right hand set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="left"/> and <paramref name="right"/> are not in the same universe as this instance.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.op_LogicalNot(DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Operator ! : Performs the inverse operation on this set.</summary>
            <param name="set">The inverse of set.</param>
            <returns>The result of the inverse operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.GetOffSet(System.Int32)">
            <summary>Gets the offset of the specified index.</summary>
            <param name="item">The item.</param>
            <returns>The offset of the item at the specified index.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.IsUniverseTheSame(DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Determines whether [is universe the same] [the specified set].</summary>
            <param name="set">The set.</param>
            <returns>
            	<c>true</c> if [is universe the same] [the specified set]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.CheckIfUniverseTheSame(DmFramework.Generics.DataStructures.General.PascalSet)">
            <summary>Checks if the universe is the same.</summary>
            <param name="set">The set.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.IsIndexValid(System.Int32)">
            <summary>Determines whether [is index valid] [the specified index].</summary>
            <param name="index">The index.</param>
            <returns>
            	<c>true</c> if [is index valid] [the specified index]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.CheckValidIndex(System.Int32)">
            <summary>Checks if the value supplied is a valid index.</summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.Add(System.Int32)">
            <inheritdoc/>  
            <exception cref="T:System.ArgumentException"><paramref name="item"/> is not in the same universe.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.AddItem(System.Int32,System.Int32)">
            <summary>Adds the item to the set.</summary>
            <param name="item">The item to add.</param>
            <param name="offset">The offset in which to add the item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.PascalSet.Add(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.Remove(System.Int32)">
            <inheritdoc/>  
            <exception cref="T:System.ArgumentException"><paramref name="item"/> is not in the same universe.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="Remove" lang="cs" title="The following example shows how to use the Remove method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="Remove" lang="vbnet" title="The following example shows how to use the Remove method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.RemoveItem(System.Int32,System.Int32)">
            <summary>Removes the item from the set.</summary>
            <param name="item">The item to remove.</param>
            <param name="offset">The offset at which to remove the item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.PascalSet.Remove(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.Contains(System.Int32)">
            <inheritdoc/>  
            <exception cref="T:System.ArgumentException"><paramref name="item"/> is not in the same universe.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.Clear">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.ClearItems">
            <summary>Clears all the objects in this instance.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.PascalSet.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.CopyTo(System.Int32[],System.Int32)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.GetEnumerator">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.DmFramework#Generics#DataStructures#General#ISet#Subtract(DmFramework.Generics.DataStructures.General.ISet)">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.DmFramework#Generics#DataStructures#General#ISet#Intersection(DmFramework.Generics.DataStructures.General.ISet)">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.DmFramework#Generics#DataStructures#General#ISet#Inverse">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.DmFramework#Generics#DataStructures#General#ISet#IsProperSubsetOf(DmFramework.Generics.DataStructures.General.ISet)">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.DmFramework#Generics#DataStructures#General#ISet#IsProperSupersetOf(DmFramework.Generics.DataStructures.General.ISet)">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.DmFramework#Generics#DataStructures#General#ISet#IsSubsetOf(DmFramework.Generics.DataStructures.General.ISet)">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.DmFramework#Generics#DataStructures#General#ISet#IsSupersetOf(DmFramework.Generics.DataStructures.General.ISet)">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.DmFramework#Generics#DataStructures#General#ISet#Union(DmFramework.Generics.DataStructures.General.ISet)">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.PascalSet.Equals(DmFramework.Generics.DataStructures.General.PascalSet)">
            <inheritdoc />  
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.PascalSet.LowerBound">
            <summary>Gets the lower bound.</summary>
            <value>The lower bound.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="LowerBound" lang="cs" title="The following example shows how to use the LowerBound property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="LowerBound" lang="vbnet" title="The following example shows how to use the LowerBound property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.PascalSet.UpperBound">
            <summary>Gets the upper bound.</summary>
            <value>The upper bound.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="UpperBound" lang="cs" title="The following example shows how to use the UpperBound property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="UpperBound" lang="vbnet" title="The following example shows how to use the UpperBound property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.PascalSet.Capacity">
            <summary>Gets the capacity of the set (the amount of items that can be contained).</summary>
            <value>The capacity of the set.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="Capacity" lang="cs" title="The following example shows how to use the Capacity property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="Capacity" lang="vbnet" title="The following example shows how to use the Capacity property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.PascalSet.Item(System.Int32)">
            <summary>Indicates whether an item is present in this set.</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.PascalSet.Count">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.PascalSet.IsEmpty">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="IsEmpty" lang="cs" title="The following example shows how to use the IsEmpty property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="IsEmpty" lang="vbnet" title="The following example shows how to use the IsEmpty property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.PascalSet.IsFull">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="IsFull" lang="cs" title="The following example shows how to use the IsFull property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="IsFull" lang="vbnet" title="The following example shows how to use the IsFull property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.PascalSet.IsReadOnly">
            <inheritdoc />  
            <value>
            	Always <c>false</c>.
            </value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\PascalSetExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\PascalSetExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.AddItem(System.Int32,System.Int32)">
            <summary>Adds the item to the set.</summary>
            <param name="item">The item to add.</param>
            <param name="offset">The offset in which to add the item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the Add method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.RemoveItem(System.Int32,System.Int32)">
            <summary>Removes the item from the set.</summary>
            <param name="item">The item to remove.</param>
            <param name="offset">The offset at which to remove the item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the Remove method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.#ctor(System.Int32,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.#ctor(System.Int32,System.Int32,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.#ctor(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservablePascalSet.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.General.SkipList`2"/> data structure.</summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.SkipList`2">
            <summary>A Skip List data structure</summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.#ctor">
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="ConstructorComparer" lang="cs" title="The following example shows how to use the comparer constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="ConstructorComparer" lang="vbnet" title="The following example shows how to use the comparer constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.#ctor(System.Comparison{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.SkipList`2"/> class.</summary>
            <param name="comparison">The comparison.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.#ctor(System.Int32,System.Double,System.Comparison{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.General.SkipList`2"/> class.</summary>
            <param name="maximumLevel">The maximum level.</param>
            <param name="probability">The probability.</param>
            <param name="comparison">The comparison.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumLevel"/> is less than 1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="probability"/> is less than 0.1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="probability"/> is greater than 0.9.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.#ctor(System.Int32,System.Double,System.Collections.Generic.IComparer{`0})">
            <param name="maximumLevel">The maximum level.</param>
            <param name="probability">The probability.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumLevel"/> is less than 1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="probability"/> is less than 0.1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="probability"/> is greater than 0.9.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="AddKeyValue" lang="cs" title="The following example shows how to use the AddKeyValue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="AddKeyValue" lang="vbnet" title="The following example shows how to use the AddKeyValue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.Clear">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.ClearItems">
            <summary>Clears all the objects in this instance.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.SkipList`2.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />  	
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="ContainsKeyValue" lang="cs" title="The following example shows how to use the ContainsKeyValue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="ContainsKeyValue" lang="vbnet" title="The following example shows how to use the ContainsKeyValue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.Add(`0,`1)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.AddItem(`0,`1)">
            <summary>Adds the item to the collection.</summary>
            <param name="key">The key of the item.</param>
            <param name="value">The value to add to the colleciton.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.SkipList`2.Add(`0,`1)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.ContainsKey(`0)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="ContainsKey" lang="cs" title="The following example shows how to use the ContainsKey method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="ContainsKey" lang="vbnet" title="The following example shows how to use the ContainsKey method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.Remove(`0)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="Remove" lang="cs" title="The following example shows how to use the Remove method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="Remove" lang="vbnet" title="The following example shows how to use the Remove method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.RemoveItem(`0)">
            <summary>Removes the item from the collection.</summary>
            <param name="key">The key to remove.</param>
            <returns></returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.SkipList`2.Remove(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.TryGetValue(`0,`1@)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="TryGetValue" lang="cs" title="The following example shows how to use the TryGetValue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="TryGetValue" lang="vbnet" title="The following example shows how to use the TryGetValue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipList`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />  
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipList`2.IsEmpty">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="IsEmpty" lang="cs" title="The following example shows how to use the IsEmpty property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="IsEmpty" lang="vbnet" title="The following example shows how to use the IsEmpty property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipList`2.Count">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipList`2.IsReadOnly">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipList`2.Keys">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value></value>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="Keys" lang="cs" title="The following example shows how to use the Keys property."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="Keys" lang="vbnet" title="The following example shows how to use the Keys property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipList`2.Values">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value></value>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="Values" lang="cs" title="The following example shows how to use the Values property."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="Values" lang="vbnet" title="The following example shows how to use the Values property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipList`2.Item(`0)">
            <summary>Gets or sets the value with the specified key.</summary>
            <value></value>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="Item" lang="cs" title="The following example shows how to use the Item property."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="Item" lang="vbnet" title="The following example shows how to use the Item property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipList`2.Comparer">
            <summary>Gets the comparer used to compare items in this instance.</summary>
            <value>The comparer.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="Comparer" lang="cs" title="The following example shows how to use the Comparer property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="Comparer" lang="vbnet" title="The following example shows how to use the Comparer property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipList`2.Probability">
            <summary>Gets the probability.</summary>
            <value>The probability.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="Probability" lang="cs" title="The following example shows how to use the Probability property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="Probability" lang="vbnet" title="The following example shows how to use the Probability property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipList`2.MaximumListLevel">
            <summary>Gets the maximum level.</summary>
            <value>The maximum level.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="MaximumListLevel" lang="cs" title="The following example shows how to use the MaximumListLevel property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="MaximumListLevel" lang="vbnet" title="The following example shows how to use the MaximumListLevel property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipList`2.CurrentListLevel">
            <summary>Gets the current list level.</summary>
            <value>The current list level.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SkipListExamples.cs" region="CurrentListLevel" lang="cs" title="The following example shows how to use the CurrentListLevel property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SkipListExamples.vb" region="CurrentListLevel" lang="vbnet" title="The following example shows how to use the CurrentListLevel property."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.AddItem(`0,`1)">
            <summary>Adds the item to the collection.</summary>
            <param name="key">The key of the item.</param>
            <param name="value">The value to add to the colleciton.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the Add(TKey,TValue) method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.RemoveItem(`0)">
            <summary>Removes the item from the collection.</summary>
            <param name="key">The key to remove.</param>
            <returns></returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the Remove(TKey) method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.#ctor(System.Int32,System.Double,System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableSkipList`2.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.General.SortedList`1"/> data structure.</summary>
            <typeparam name="T">The type of elements in the sorted list.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.SortedList`1">
            <summary>
            An implementation of a SortedList data structure, which keeps any objects
            added to it sorted.
            </summary>
            <typeparam name="T">The type of elements in the sorted list.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.#ctor">
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <param name="comparer">The comparer to use.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="ConstructorComparer" lang="cs" title="The following example shows how to use the Comparer constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="ConstructorComparer" lang="vbnet" title="The following example shows how to use the Comparer constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.#ctor(System.Int32)">
            <param name="capacity">The initial capacity of the sorted list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>.
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="ConstructorCapacity" lang="cs" title="The following example shows how to use the constructor with an initial capacity."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="ConstructorCapacity" lang="vbnet" title="The following example shows how to use the constructor with an initial capacity."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <param name="capacity">The initial capacity of the sorted list.</param>
            <param name="comparer">The comparer to use.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>.
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <param name="collection">The collection to copy into the sorted list.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="ConstructorCollection" lang="cs" title="The following example shows how to use the collections constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="ConstructorCollection" lang="vbnet" title="The following example shows how to use the collections constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.RemoveAt(System.Int32)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="RemoveAt" lang="cs" title="The following example shows how to use the RemoveAt method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="RemoveAt" lang="vbnet" title="The following example shows how to use the RemoveAt method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.Add(`0)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.AddItem(`0)">
            <summary>Protected virual method for adding items which can be overriden in subclasses</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.Remove(`0)">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.Contains(`0)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds the elements of the specified collection to the end of the <see cref="T:DmFramework.Generics.DataStructures.General.SortedList`1"/>.</summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:DmFramework.Generics.DataStructures.General.SortedList`1"/>. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.Clear">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.IndexOf(`0)">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="IndexOf" lang="cs" title="The following example shows how to use the IndexOf method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="IndexOf" lang="vbnet" title="The following example shows how to use the IndexOf method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SortedList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <inheritdoc/>  
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SortedList`1.Comparer">
            <summary>Gets the comparer.</summary>
            <value>The comparer.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SortedList`1.IsEmpty">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="IsEmpty" lang="cs" title="The following example shows how to use the IsEmpty property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="IsEmpty" lang="vbnet" title="The following example shows how to use the IsEmpty property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SortedList`1.Count">
            <inheritdoc />  
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SortedList`1.Item(System.Int32)">
            <summary>Gets the item at the specified position.</summary>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is equal to or greater than <see cref="P:DmFramework.Generics.DataStructures.General.SortedList`1.Count"/>.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SortedList`1.IsReadOnly">
            <inheritdoc />  
            <remarks>Always returns <c>false</c>.</remarks>
            <value>
            	<c>false</c>.
            </value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SortedListExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SortedListExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SortedList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <inheritdoc/>  
            <exception cref="T:System.NotSupportedException">When set is called.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.AddItem(`0)">
            <summary>Adds the item to the collection.</summary>
            <param name="item">The item to add.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.General.SortedList`1.Add(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.Remove(`0)">
            <inheritdoc />  
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.General.Observable.ObservableSortedList`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Singleton`1">
            <summary>A generic Singleton pattern implementation.</summary>
            <typeparam name="T">The type of object to create a single instance of.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SingletonExamples.cs" region="Singleton" lang="cs" title="The following example shows how to use the Instance method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SingletonExamples.vb" region="Singleton" lang="vbnet" title="The following example shows how to use the Instance method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Singleton`1.ConstructWith">
            <summary>Sets a method of construction of the value of this singleton.</summary>
            <value>The construct with.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SingletonExamples.cs" region="ConstructWith" lang="cs" title="The following example shows how to use the ConstructWith property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SingletonExamples.vb" region="ConstructWith" lang="vbnet" title="The following example shows how to use the ConstructWith property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Singleton`1.Instance">
            <summary>Gets the instance.</summary>
            <value>The instance.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\SingletonExamples.cs" region="Singleton" lang="cs" title="The following example shows how to use the Instance method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\SingletonExamples.vb" region="Singleton" lang="vbnet" title="The following example shows how to use the Instance method."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Singleton`1.FactoryDelegate">
            <summary>A custom delegate for the creation of objects.  Used instead of Func for backwards compatibility with .NET 2.</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Singleton`1.Container">
            <summary>
            Internal container class fo the actual value - needed so that the CLR
            can guarantee thread safety.
            </summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.SkipListNode`2.#ctor(`0,`1)">
            <param name="key">The key.</param>
            <param name="val">The value.</param>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipListNode`2.Key">
            <summary>Gets or sets the key.</summary>
            <value>The key.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipListNode`2.Value">
            <summary>Gets or sets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipListNode`2.Right">
            <summary>Gets or sets the right node.</summary>
            <value>The right node.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.SkipListNode`2.Down">
            <summary>Gets or sets the down node.</summary>
            <value>The down node.</value>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.General.Vertex`1">
            <summary>A class representing a vertex in a graph.</summary>
            <typeparam name="T">The type contained in the vertex.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Vertex`1.#ctor(`0)">
            <remarks>The weight is 0 by default.</remarks>
            <param name="data">The data contained in the vertex.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Vertex`1.#ctor(`0,System.Double)">
            <param name="data">The data contained in the vertex</param>
            <param name="weight">The weight of the vertex.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="ConstructorWithWeight" lang="cs" title="The following example shows how to use the constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="ConstructorWithWeight" lang="vbnet" title="The following example shows how to use the constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Vertex`1.HasEmanatingEdgeTo(DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Determines whether this vertex has an emanating edge to the specified vertex.</summary>
            <param name="toVertex">The vertex to test connectivity to.</param>
            <returns>
            	<c>true</c> if this vertex has an emanating edge to the specified vertex; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="HasEmanatingEdgeTo" lang="cs" title="The following example shows how to use the HasEmanatingEdgeTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="HasEmanatingEdgeTo" lang="vbnet" title="The following example shows how to use the HasEmanatingEdgeTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Vertex`1.HasIncidentEdgeWith(DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Determines whether [has incident edge with] [the specified from vertex].</summary>
            <param name="fromVertex">From vertex.</param>
            <returns>
            	<c>true</c> if [has incident edge with] [the specified from vertex]; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="HasIncidentEdgeWith" lang="cs" title="The following example shows how to use the HasIncidentEdgeWith method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="HasIncidentEdgeWith" lang="vbnet" title="The following example shows how to use the HasIncidentEdgeWith method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Vertex`1.GetEmanatingEdgeTo(DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Gets the emanating edge to the specified vertex.</summary>
            <param name="toVertex">To to vertex.</param>
            <returns>The emanating edge to the vertex specified if found, otherwise null.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="GetEmanatingEdgeTo" lang="cs" title="The following example shows how to use the GetEmanatingEdgeTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="GetEmanatingEdgeTo" lang="vbnet" title="The following example shows how to use the GetEmanatingEdgeTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Vertex`1.GetIncidentEdgeWith(DmFramework.Generics.DataStructures.General.Vertex{`0})">
            <summary>Gets the incident edge to the specified vertex.</summary>
            <param name="toVertex">The to vertex.</param>
            <returns>The incident edge to the vertex specified if found, otherwise null.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="GetIncidentEdgeWith" lang="cs" title="The following example shows how to use the GetIncidentEdgeWith method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="GetIncidentEdgeWith" lang="vbnet" title="The following example shows how to use the GetIncidentEdgeWith method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Vertex`1.RemoveEdge(DmFramework.Generics.DataStructures.General.Edge{`0})">
            <summary>Removes the edge specified from the vertex.</summary>
            <param name="edge">The edge to be removed.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.General.Vertex`1.AddEdge(DmFramework.Generics.DataStructures.General.Edge{`0})">
            <summary>Adds the edge to the vertex.</summary>
            <param name="edge">The edge to add.</param>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Vertex`1.Weight">
            <summary>Gets or sets the weight.</summary>
            <value>The weight.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="Weight" lang="cs" title="The following example shows how to use the Weight property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="Weight" lang="vbnet" title="The following example shows how to use the Weight property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Vertex`1.Data">
            <summary>Gets or sets the data.</summary>
            <value>The data contained in the vertex.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="Data" lang="cs" title="The following example shows how to use the Data property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="Data" lang="vbnet" title="The following example shows how to use the Data property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Vertex`1.Degree">
            <summary>Gets the degree of this vertex (the number of emanating edges).</summary>
            <value>The degree.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="Degree" lang="cs" title="The following example shows how to use the Degree property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="Degree" lang="vbnet" title="The following example shows how to use the Degree property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Vertex`1.IncidentEdges">
            <summary>Gets the edges incident on this vertex.</summary>
            <value>The edges incident on this vertex.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="IncidentEdges" lang="cs" title="The following example shows how to use the IncidentEdges property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="IncidentEdges" lang="vbnet" title="The following example shows how to use the IncidentEdges property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Vertex`1.EmanatingEdges">
            <summary>Gets the emanating edges on this vertex.</summary>
            <value>The emanating edges on this vertex.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\General\VertexExamples.cs" region="EmanatingEdges" lang="cs" title="The following example shows how to use the EmanatingEdges property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\General\VertexExamples.vb" region="EmanatingEdges" lang="vbnet" title="The following example shows how to use the EmanatingEdges property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.General.Vertex`1.IncomingEdgeCount">
            <summary>Gets count of the incoming edges on this vertex.</summary>
            <value>The number of incoming edges resident on the vertex.</value>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.CholeskyDecomposition">
            <summary>Cholesky Decomposition of a rectangular Matrix.</summary>
            <remarks>
            Adapted from the JAMA package : http://math.nist.gov/javanumerics/jama/
            and from Numerical recipes
            </remarks>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.IDecomposition">
            <summary>
            Decomposition is the implementation of all  matrix decomposition methods
            (a matrix decomposition is a factorization of a matrix into some canonical form) 
            </summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IDecomposition.Solve(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Solves the specified equation.</summary>
            <param name="right">The right hand side of the equation.</param>
            <returns>The answer.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IDecomposition.Decompose(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Decomposes the specified matrix</summary>
            <param name="matrix">The matrix to decompose.</param>
            <returns>Decomposed matrix</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.IDecomposition.LeftFactorMatrix">
            <summary>Gets left factor of decomposition of original matrix.</summary>
            <returns>The left Factor</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.IDecomposition.RightFactorMatrix">
            <summary>Gets right factor of decomposition of original matrix.</summary>
            <returns>The right  factor</returns>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Mathematical.CholeskyDecomposition.dimension">
            <summary>
             Row and column dimension (square matrix).
             @serial matrix dimension.
            </summary> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.CholeskyDecomposition.#ctor(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Cholesky algorithm for symmetric and positive definite matrix.</summary>
            <param name="matrix">Square, symmetric matrix. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="matrix"/> is a not Symmetric.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="matrix"/> is a null Square.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.CholeskyDecomposition.Decompose(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>
            Given a positive-definite symmetric matrix <c>A[0..n][0..n]</c>, 
            this routine constructs its Cholesky decomposition,  <c> A = L*(L^T) </c>. 
            </summary>
            <remarks>
            The operations count is <c>(N^3)/6</c> executions of the inner loop (consisting of 
            one multiply and one subtract), with also N square roots. 
            This is about a factor 2 better than LU decomposition of <c>A</c> 
            (where its symmetry would be ignored).
            </remarks>
            <param name="matrix">Square Symmetric Definite-defined matrix A. 
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="matrix"/> is a not Symmetric.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="matrix"/> is a null Square.</exception>
            <returns> The Cholesky factor L is returned</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.CholeskyDecomposition.QuickDecompose(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>
            Given a positive-definite symmetric matrix <c>A[0..n][0..n]</c>, 
            this routine constructs its Cholesky decomposition,  <c> A = L*(L^T) </c>. 
            </summary>
            <remarks>
            The operations count is <c>(N^3)/6</c> executions of the inner loop (consisting of 
            one multiply and one subtract), with also N square roots. 
            This is about a factor 2 better than LU decomposition of <c>A</c> 
            (where its symmetry would be ignored).
            </remarks>
            <param name="a">Square Symmetric Definite-defined matrix A. 
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="a"/> is a not Symmetric.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="a"/> is a null Square.</exception>
            <returns> The Cholesky factor L is returned</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.CholeskyDecomposition.QuickSolveLinearEquation(DmFramework.Generics.DataStructures.Mathematical.Matrix,System.Double[])">
            <summary>Solves the set of <c>n</c> linear equations <c> A * x = b </c>.</summary>
            <param name="a">where a is a positive-definite symmetric matrix <c>[0..n][0..n]</c>  </param>
            <param name="b"> is input as the right-hand side vector <c>[0..n]</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="a"/> is a not Symmetric.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="a"/> is a null Square.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="b"/> and <paramref name="a"/> have different dimensions.</exception>
            <returns>The solution vector is returned as <c>[0..n]</c>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.CholeskyDecomposition.Solve(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>/** Solve A*X = B</summary>
            <param name="right">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X so that L*L'*X = B</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="right"/> is not square.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.CholeskyDecomposition.LeftFactorMatrix">
            <summary>Gets the lower triangular factor U^T, with A=U^T x U.</summary>
            <returns> L</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.CholeskyDecomposition.RightFactorMatrix">
            <summary>Gets the upper triangular factor U, with A=U^T x U.</summary>
            <returns> L</returns>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber">
            <summary>A Complex Number data structure.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.#ctor(System.Double,System.Double)">
            <param name="real">The real part of the number.</param>
            <param name="imaginary">The imaginary part of the number.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Equals(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="Equals" lang="cs" title="The following example shows how to use the Equals method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="Equals" lang="vbnet" title="The following example shows how to use the Equals method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Multiply(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Times the number according *.</summary>
            <param name="complex">The matrix to multiply this matrix with.</param>
            <returns>The result of the times operation.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="MultiplyComplexNumber" lang="cs" title="The following example shows how to use the Multiply method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="MultiplyComplexNumber" lang="vbnet" title="The following example shows how to use the Multiply method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Multiply(System.Double)">
            <summary>Times the numbers according to the operator *.</summary>
            <param name="number">The number to multiply this number with.</param>
            <returns>The result of the times operation.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="MultiplyDouble" lang="cs" title="The following example shows how to use the Multiply method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="MultiplyDouble" lang="vbnet" title="The following example shows how to use the Multiply method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Divide(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Divides the numbers according to the operator /.</summary>
            <param name="number">The number to divide this number with.</param>
            <returns>The result of the divide operation.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="DivideComplexNumber" lang="cs" title="The following example shows how to use the Divide method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="DivideComplexNumber" lang="vbnet" title="The following example shows how to use the Divide method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Divide(System.Double)">
            <summary>Divides the numbers according to the operator /.</summary>
            <param name="number">The number to divide this number with.</param>
            <returns>The result of the divide operation.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="DivideDouble" lang="cs" title="The following example shows how to use the Divide method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="DivideDouble" lang="vbnet" title="The following example shows how to use the Divide method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Add(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Adds two numbers according operator +.</summary>
            <param name="number">The number to add to this number.</param>
            <returns>The result of the addition operation.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Subtract(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Subtracts the number according -.</summary>
            <param name="complex">The matrix to subtract from this matrix.</param>
            <returns>The result of the subtraction.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="Subtract" lang="cs" title="The following example shows how to use the Subtract method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="Subtract" lang="vbnet" title="The following example shows how to use the Subtract method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.ToMatrix">
            <summary>Converts the current complex number to it's matrix representation.</summary>
            <returns>The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix"/> representation of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="ToMatrix" lang="cs" title="The following example shows how to use the ToMatrix method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="ToMatrix" lang="vbnet" title="The following example shows how to use the ToMatrix method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Addition(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Overload of the operator +</summary>
            <param name="left">The left hand number.</param>
            <param name="right">The right hand number.</param>
            <returns>The result of the addition.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="OperatorPlus" lang="cs" title="The following example shows how to use the plus operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="OperatorPlus" lang="vbnet" title="The following example shows how to use the plus operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Subtraction(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Overload of the operator -</summary>
            <param name="left">The left hand number.</param>
            <param name="right">The right hand number.</param>
            <returns>The result of the subtraction.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="OperatorMinus" lang="cs" title="The following example shows how to use the minus operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="OperatorMinus" lang="vbnet" title="The following example shows how to use the minus operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Multiply(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Overload of the operator *</summary>
            <param name="left">The left hand number.</param>
            <param name="right">The right hand number.</param>
            <returns>The result of the multiplication.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="OperatorMultiplyComplexNumberComplexNumber" lang="cs" title="The following example shows how to use the multiply operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="OperatorMultiplyComplexNumberComplexNumber" lang="vbnet" title="The following example shows how to use the multiply operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Division(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Overload of the operator /</summary>
            <param name="left">The left hand number.</param>
            <param name="right">The right hand number.</param>
            <returns>The result of the division.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="OperatorDivideComplexNumberComplexNumber" lang="cs" title="The following example shows how to use the divide operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="OperatorDivideComplexNumberComplexNumber" lang="vbnet" title="The following example shows how to use the divide operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Division(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,System.Double)">
            <summary>Overload of the operator /</summary>
            <param name="complexNumber">The left hand number.</param>
            <param name="number">The right hand number.</param>
            <returns>The result of the division.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="OperatorDivideComplexNumberDouble" lang="cs" title="The following example shows how to use the divide operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="OperatorDivideComplexNumberDouble" lang="vbnet" title="The following example shows how to use the divide operator overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Multiply(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,System.Double)">
            <summary>Overload of the operator *</summary>
            <param name="complexNumber">The number to be multiplied with.</param>
            <param name="number">The number.</param>
            <returns>The result of the multiplication.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="OperatorMultiplyComplexNumberDouble" lang="cs" title="The following example shows how to use the multiply operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="OperatorMultiplyComplexNumberDouble" lang="vbnet" title="The following example shows how to use the multiply operator overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Multiply(System.Double,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Overload of the operator *</summary>
            <param name="complexNumber">The number to be multiplied with.</param>
            <param name="number">The number.</param>
            <returns>The result of the multiplication.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="OperatorMultiplyDoubleComplexNumber" lang="cs" title="The following example shows how to use the multiply operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="OperatorMultiplyDoubleComplexNumber" lang="vbnet" title="The following example shows how to use the multiply operator overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Equality(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Equals operator.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><c>true</c> is <paramref name="left"/> is equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="OperatorEquals" lang="cs" title="The following example shows how to use the equals operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="OperatorEquals" lang="vbnet" title="The following example shows how to use the equals operator overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Inequality(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Not Equals operator.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><c>true</c> is <paramref name="left"/> is not equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="OperatorNotEquals" lang="cs" title="The following example shows how to use the not equals operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="OperatorNotEquals" lang="vbnet" title="The following example shows how to use the not equals operator overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Explicit(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)~System.String">
            <summary>Performs an explicit conversion from <see cref="T:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber"/> to <see cref="T:System.String"/>.</summary>
            <param name="complexNumber">The complex number.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.op_Implicit(System.Double)~DmFramework.Generics.DataStructures.Mathematical.ComplexNumber">
            <summary>Performs an implicit conversion from a <see cref="T:System.Double"/> to <see cref="T:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber"/>.</summary>
            <param name="real">The Double number that will form the real part of the complex number.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.System#IEquatable{DmFramework#Generics#DataStructures#Mathematical#ComplexNumber}#Equals(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.ToString">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="ToString" lang="cs" title="The following example shows how to use the ToString method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="ToString" lang="vbnet" title="The following example shows how to use the ToString method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Equals(System.Object)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="EqualsObject" lang="cs" title="The following example shows how to use the object.Equals overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="EqualsObject" lang="vbnet" title="The following example shows how to use the object.Equals overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.MultiplyInternal(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Internal multiplication function for multiplication between complex numbers.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.MultiplyInternal(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,System.Double)">
            <summary>Internal multiplication function for multiplication between a complex number and a number.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right side.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.DivideInternal(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,System.Double)">
            <summary>Internal division function for dividing a complex number with a number.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right side.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.DivideInternal(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Internal division function for division between complex numbers.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.AddInternal(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Internal addition function for the addition of complex numbers.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.SubtractInternal(DmFramework.Generics.DataStructures.Mathematical.ComplexNumber,DmFramework.Generics.DataStructures.Mathematical.ComplexNumber)">
            <summary>Internal subtraction function for the subtraction of complex numbers.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Conjugate">
            <summary>Returns the complex conjugate.</summary>
            <returns>The same number with imaginary part negated.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="Conjugate" lang="cs" title="The following example shows how to use the Conjugate property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="Conjugate" lang="vbnet" title="The following example shows how to use the Conjugate property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Modulus">
            <summary>Absolute value of a complex number</summary>
            <value>The modulus.</value>
            <returns>The result of the Abs operation.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="Modulus" lang="cs" title="The following example shows how to use the Modulus property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="Modulus" lang="vbnet" title="The following example shows how to use the Modulus property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Real">
            <summary>Gets or sets the real part of the complex number.</summary>
            <value>The real part.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="Real" lang="cs" title="The following example shows how to use the Real property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="Real" lang="vbnet" title="The following example shows how to use the Real property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Imaginary">
            <summary>Gets or sets the imaginary part of the complex number.</summary>
            <value>The imaginary part.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="Imaginary" lang="cs" title="The following example shows how to use the Imaginary property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="Imaginary" lang="vbnet" title="The following example shows how to use the Imaginary property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.AdditiveInverse">
            <summary>Computes the additive inverse of the current complex number.</summary>
            <returns>The additive inverse of the current complex number.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="AdditiveInverse" lang="cs" title="The following example shows how to use the AdditiveInverse property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="AdditiveInverse" lang="vbnet" title="The following example shows how to use the AdditiveInverse property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.AbsoluteValue">
            <summary>Computes the absolute value of the current complex number.</summary>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="AbsoluteValue" lang="cs" title="The following example shows how to use the AbsoluteValue property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="AbsoluteValue" lang="vbnet" title="The following example shows how to use the AbsoluteValue property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Reciprocal">
            <summary>Gets the reciprocal.</summary>
            <value>The reciprocal.</value>
            <exception cref="T:System.InvalidOperationException"><see cref="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Real"/> and <see cref="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.Imaginary"/> are 0.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="Reciprocal" lang="cs" title="The following example shows how to use the Reciprocal property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="Reciprocal" lang="vbnet" title="The following example shows how to use the Reciprocal property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.AdditiveIdentity">
            <summary>Gets the additive identity.</summary>
            <value>The additive identity.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="AdditiveIdentity" lang="cs" title="The following example shows how to use the AdditiveIdentity property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="AdditiveIdentity" lang="vbnet" title="The following example shows how to use the AdditiveIdentity property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.ComplexNumber.MultiplicativeIdentity">
            <summary>Gets the multiplicative identity.</summary>
            <value>The multiplicative identity.</value>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\ComplexNumberExamples.cs" region="MultiplicativeIdentity" lang="cs" title="The following example shows how to use the MultiplicativeIdentity property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\ComplexNumberExamples.vb" region="MultiplicativeIdentity" lang="vbnet" title="The following example shows how to use the MultiplicativeIdentity property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix">
            <summary>An interface for a Mathematical matrix as in Linear Algebra.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Inverse">
            <summary>Inverts this matrix.</summary>
            <returns>The inverted representation of this instance.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Determinant">
            <summary>Calculates the determinant of the matrix.</summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Negate">
            <summary>Negates (multiply all entries with -1) this matrix.</summary>
            <returns>The negated representation of the matrix.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Subtract(DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix)">
            <summary>Subtracts the matrices according to the linear algebra operator -.</summary>
            <param name="matrix">The result of the subtraction.</param>
            <returns>The result of the minus operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Add(DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix)">
            <summary>Adds to matrices according to the linear algebra operator +.</summary>
            <param name="matrix">The result of the addition.</param>
            <returns>The result of the plus operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Multiply(DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix)">
            <summary>Times the matrices according to the linear algebra operator *.</summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the times operation.</returns>
            <exception cref="T:System.ArgumentException"><see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Rows"/> is greater than <see cref="P:DmFramework.Generics.DataStructures.General.IMatrix`1.Rows"/> <paramref name="matrix"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Multiply(System.Double)">
            <summary>Times the matrices according to the linear algebra operator *.</summary>
            <param name="number">The number to multiply this matrix with.</param>
            <returns>The result of the times operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.MultiplyRow(System.Int32,System.Double)">
            <summary>Multiplies the row with the specified number.</summary>
            <param name="row">The index of the row to multiply.</param>
            <param name="number">The number to multiply each entry in the row with.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is negative or larger than the number of rows in the matrix.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.MultiplyColumn(System.Int32,System.Double)">
            <summary>Multiplies the column with the specified number.</summary>
            <param name="column">The index of the column to multiply.</param>
            <param name="number">The number to multiply each entry in the column with.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="column"/> is negative or larger than the number of columns in the matrix.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Transpose">
            <summary>Transposes the matrix.</summary>
            <returns>The transposed representation of this matrix.</returns>
            <value>The transposed matrix.</value>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Minor(System.Int32,System.Int32)">
            <summary>Calculate the minor of the entry specified.</summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The minor of the entry specified.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Adjoint">
            <summary>Calculates the adjoint (the transpose of the matrix formed by the cofactors of the elements of determinants) of the matrix.</summary>
            <returns>The adjoint of the matrix.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.Concatenate(DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix)">
            <summary>Concatenates two matrices in horizontal manner.</summary>
            <param name="rightMatrix">The right hand matrix to concatenate to the left hand matrix.</param>
            <returns>The result of the concatenate operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rightMatrix"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="rightMatrix"/> does not have the same amount of rows as this matrix.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.IsSymmetric">
            <summary>Gets a value indicating whether this matrix instance is symmetric.</summary>
            <value>
            	<c>true</c> if this matrix instance is symmetric; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix.IsSingular">
            <summary>Verifies whether the matrix is singular or not.</summary>
            <value>A boolean value indicating whether the matrix is singular or not.</value>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1">
            <summary>An interface describing a mathematical Vector.</summary>
            <typeparam name="T">The type of vector.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.AbsoluteMaximum">
            <summary>Get the value of the absolute maximum dimension.</summary>
            <returns>The value of the absolute maximum dimension</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.AbsoluteMaximumIndex">
            <summary>Get the index of the absolute minimum dimension.</summary>
            <returns>The index of the absolute minimum dimension</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.AbsoluteMinimum">
            <summary>Get the value of the absolute minimum dimension.</summary>
            <returns>The value of the absolute minimum dimension</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.AbsoluteMinimumIndex">
            <summary>Get the index of the absolute maximum dimension.</summary>
            <returns>The index of the absolute maximum dimension</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Add(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Adds a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to add to this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="vector"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Add(`0)">
            <summary>Adds a <typeparamref name="T"/> to each dimension.</summary>
            <param name="number">The <typeparamref name="T"/> to add to this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Clear">
            <summary>Sets the value of each dimension to zero.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.CrossProduct(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Get the cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> and <paramref name="vector"/>.</summary>
            <remarks>
            Consider two vectors, a = (1,2,3) and b = (4,5,6). The cross product a ?b is
            a ?b = (1,2,3) ?(4,5,6) = ((2 ?6 - 3 ?5),(3 ?4 - 1 ?6), (1 ?5 - 2 ?4)) = (-3,6,-3). 
            </remarks>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to calculate the cross product with.</param>
            <returns>The cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> and <paramref name="vector"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> does not equal 3.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of this <paramref name="vector"/> does not equal 3.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Decrement">
            <summary>Decrement each dimension by 1.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DotProduct(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Calculate the dot product.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to calculate the dot product with.</param>
            <returns>The dot product of the current instance and <paramref name="vector"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="vector"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Sum">
            <summary>Computes the sum of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <returns>The sum of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Product">
            <summary>Computes the product of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <returns>The product of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Increment">
            <summary>Increment each dimension by 1.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude">
            <summary>Gets the magnitude of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <returns>The magnitude of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Divide(`0)">
            <summary>Divide each dimension by a number.</summary>
            <param name="number">The <typeparamref name="T"/> to divide by.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Divide(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Divide by a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to divide by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="vector"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Negate">
            <summary>Negate each dimension.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Normalize">
            <summary>Normalize each dimension.</summary>
            <remarks>
            Results in the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> having a <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> of 1.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Maximum">
            <summary>Get the value of the maximum dimension.</summary>
            <returns>The value of the maximum dimension.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.MaximumIndex">
            <summary>Get the index of the maximum dimension.</summary>
            <returns>The index of the maximum dimension.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Minimum">
            <summary>Get the value of the minimum dimension.</summary>
            <returns>The value of the minimum dimension.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.MinimumIndex">
            <summary>Get the index of the minimum dimension.</summary>
            <returns>The index of the minimum dimension.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Multiply(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Multiply the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> with another <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to multiply by.</param>
            <returns>The result of the multiply operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="vector"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Multiply(`0)">
            <summary>Multiply the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> with a <typeparamref name="T"/>.</summary>
            <param name="number">The <typeparamref name="T"/> to multiply by.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Subtract(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Subtracts a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> from the current instance.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to subtract from this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Subtract(`0)">
            <summary>Subtracts a <typeparamref name="T"/> from the current instance.</summary>
            <param name="number">The <typeparamref name="T"/> to subtract from this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.SetValues(`0[])">
            <summary>Set the values of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/></summary>
            <param name="values">The values to set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="values"/> does not equal <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Swap(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Swap all the values with another <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="other">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to swap values with.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.ToArray">
            <summary>Copies the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to a new <typeparamref name="T"/> array.</summary>
            <returns>A <typeparamref name="T"/> array containing copies of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.ToMatrix">
            <summary>Copies the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to a new <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/>.</summary>
            <returns>A <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/> array containing copies of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Item(System.Int32)">
            <summary>Gets or sets the element in the specified dimension.</summary>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is &gt; <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/>.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount">
            <summary>Gets the dimension count of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition">
            <summary>LU decomposition (Gaussian elimination) of a rectangular Matrix.</summary>
            <remarks>
              For an m-by-n Matrix <c>A</c> with m >= n, the LU decomposition is an m-by-n
              unit lower triangular Matrix <c>L</c>, an n-by-n upper triangular Matrix <c>U</c>,
              and a permutation vector <c>piv</c> of length m so that <c>A(piv)=L*U</c>.
              If m &lt; n, then <c>L</c> is m-by-m and <c>U</c> is m-by-n.
            </remarks>
            <remarks>
            Adapted from the JAMA package : http://math.nist.gov/javanumerics/jama/
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.#ctor(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.Determinant">
            <summary>Calculates the determinant.</summary>
            <returns>The determinant.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.Rank">
            <summary>
             Description
            returns rank of matrix
            </summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.SolveInternal(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Solves the equation for the specified matrices.</summary>
            <param name="B">The result (B).</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.Decompose(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Decomposes the specified matrix using a LU decomposition.</summary>
            <param name="matrix">The matrix to decompose.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.GetLowerTriangularFactor">
            <summary>Gets the lower triangular factor (L).</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.GetUpperTriangularFactor">
            <summary>Gets the upper triangular factor (U).</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.Solve(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Solve A*X = B</summary>
            <param name="right">A Matrix with as many rows as A and any number of columns.</param>
            <returns>The Matrix X, so that A * X = B.</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.
            </exception>
            <exception cref="T:System.ArgumentException">Matrix is singular.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.NonSingular">
            <summary>Gets a value indicating whether the matrix is non singular.</summary>
            <value><c>true</c> if non singular; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.LeftFactorMatrix">
            <summary>Gets the lower triangular factor L, with A=LU.</summary>
            <value>The lower triangular factor.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.LUDecomposition.RightFactorMatrix">
            <summary>Gets the upper triangular factor U, with A=LU.</summary>
            <value>The upper triangular factor.</value>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.Matrix">
            <summary>A Matrix data structure corresponding to the mathematical matrix used in linear algebra.</summary>
            <remarks>
            Some of the members have been adapted from the JAMA package : http://math.nist.gov/javanumerics/jama/, which is in the public domain.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.#ctor(System.Int32,System.Int32)">
            <inheritdoc/>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/> class.</summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="data">The data to initialise the matrix with.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.#ctor(System.Int32,System.Int32,System.Double[0:,0:])">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/> class.</summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="data">The data to initialise the matrix with.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#General#IMatrix{System#Double}#GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#Mathematical#IMathematicalMatrix#Multiply(DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#Mathematical#IMathematicalMatrix#Multiply(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#Mathematical#IMathematicalMatrix#Add(DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#Mathematical#IMathematicalMatrix#Negate">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#Mathematical#IMathematicalMatrix#Inverse">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#Mathematical#IMathematicalMatrix#Minor(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#Mathematical#IMathematicalMatrix#Adjoint">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#Mathematical#IMathematicalMatrix#Concatenate(DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#Mathematical#IMathematicalMatrix#Subtract(DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.DmFramework#Generics#DataStructures#Mathematical#IMathematicalMatrix#Transpose">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Minor(System.Int32,System.Int32)">
            <summary>Calculate the minor of the entry specified.</summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The matrix without the row and column specified.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Minor" lang="cs" title="The following example shows how to use the Minor method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Minor" lang="vbnet" title="The following example shows how to use the Minor method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Determinant">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Determinant" lang="cs" title="The following example shows how to use the Determinant method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Determinant" lang="vbnet" title="The following example shows how to use the Determinant method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Rank">
            <summary>Calculates the rank of the matrix.</summary>
            <returns>the rank of the matrix.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.LinearSolve(DmFramework.Generics.DataStructures.Mathematical.Matrix,DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>
            Solves the equation
            A*x = B;
            Where A is a square matrix of arbitrary size n and x and b are vectors of size n.
            Returns the inverse of square non-singular matrix A.
            </summary>
            <param name="leftMatrix"> leftMatrix is a square matrix of arbitrary size n and x and.</param>
            <param name="rightMatrix"> rightMatrix is a vector of size n</param>
            <returns>The inverse of square non-singular matrix <paramref name="leftMatrix"/> as a vector of size n</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Adjoint">
            <summary>Calculates the adjoint (the transpose of the matrix formed by the cofactors of the elements of determinants) of the matrix.</summary>
            <returns>The Adjoint of the current matrix.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Adjoint" lang="cs" title="The following example shows how to use the Adjoint method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Adjoint" lang="vbnet" title="The following example shows how to use the Adjoint method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Multiply(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Times the matrices according to the linear algebra operator *.</summary>
            <param name="matrix">The matrix to multiply this matrix with.</param>
            <returns>The result of the times operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Columns"/> of the current instance do not equal the <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Columns"/> of <paramref name="matrix"/>.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="MultiplyMatrixMatrix" lang="cs" title="The following example shows how to use the Multiply method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="MultiplyMatrixMatrix" lang="vbnet" title="The following example shows how to use the Multiply method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Multiply(System.Double)">
            <summary>Times the matrices according to the linear algebra operator *.</summary>
            <param name="number">The number to multiply this matrix with.</param>
            <returns>The result of the times operation.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="MultiplyMatrixDouble" lang="cs" title="The following example shows how to use the Multiply method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="MultiplyMatrixDouble" lang="vbnet" title="The following example shows how to use the Multiply method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Add(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Adds to matrices according to the linear algebra operator +.</summary>
            <param name="matrix">The matrix to add to this matrix.</param>
            <returns>The result of the plus operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Columns"/> of the current instance do not equal the <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Columns"/> of <paramref name="matrix"/>.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Rows"/> of the current instance do not equal the <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Rows"/> of <paramref name="matrix"/>.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Negate">
            <summary>Negate (multiply all entries with -1) this instance.</summary>
            <returns>An negated representation of the current matrix.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Negate" lang="cs" title="The following example shows how to use the Negate method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Negate" lang="vbnet" title="The following example shows how to use the Negate method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Subtract(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Subtracts the matrices according to the linear algebra operator -.</summary>
            <param name="matrix">The matrix to subtract from this matrix.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Columns"/> of the current instance do not equal the <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Columns"/> of <paramref name="matrix"/>.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Rows"/> of the current instance do not equal the <see cref="P:DmFramework.Generics.DataStructures.General.ObjectMatrix`1.Rows"/> of <paramref name="matrix"/>.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Subtract" lang="cs" title="The following example shows how to use the Subtract method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Subtract" lang="vbnet" title="The following example shows how to use the Subtract method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Transpose">
            <summary>Transposes the matrix.</summary>
            <returns>The transposed matrix.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Transpose" lang="cs" title="The following example shows how to use the Transpose method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Transpose" lang="vbnet" title="The following example shows how to use the Transpose method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Inverse">
            <summary>Inverts this instance.</summary>
            <returns>An inverted representation of the current matrix.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Inverse" lang="cs" title="The following example shows how to use the Inverse method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Inverse" lang="vbnet" title="The following example shows how to use the Inverse method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Diagonal(System.Int32,System.Int32,System.Double)">
            <summary>Constructs a diagonal matrix of the specified size with the specified value.</summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="value">The value of diagonal elements.</param>
            <returns>An diagonal matrix of the specified size.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.IdentityMatrix(System.Int32,System.Int32)">
            <summary>Constructs an identity matrix of the specified size.</summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <returns>An identity matrix of the specified size.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Solve(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Calculates the LHS solution vector if the matrix is square or the least squares solution otherwise.</summary>
            <param name="rightHandSide">The right hand side.</param>
            <returns>Returns the LHS solution vector if the matrix is square or the least squares solution otherwise.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.MultiplyRow(System.Int32,System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="MultiplyRow" lang="cs" title="The following example shows how to use the MultiplyRow method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="MultiplyRow" lang="vbnet" title="The following example shows how to use the MultiplyRow method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.MultiplyColumn(System.Int32,System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="MultiplyColumn" lang="cs" title="The following example shows how to use the MultiplyColumn method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="MultiplyColumn" lang="vbnet" title="The following example shows how to use the MultiplyColumn method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Concatenate(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Concatenates two matrices in horizontal manner.</summary>
            <param name="rightMatrix">The right hand matrix to concatenate to the left hand matrix.</param>
            <returns>The result of the concatenate operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rightMatrix"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="rightMatrix"/> does not have the same amount of rows as this matrix.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Concatenate" lang="cs" title="The following example shows how to use the Concatenate method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Concatenate" lang="vbnet" title="The following example shows how to use the Concatenate method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Clone" lang="cs" title="The following example shows how to use the Clone method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Clone" lang="vbnet" title="The following example shows how to use the Clone method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.ChangeSignColumn(System.Int32)">
            <summary>Changes signs of all elements of specified column</summary>
            <param name="columnIndex">The index of the column to change the sign of.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.ChangeSignRow(System.Int32)">
            <summary>Changes signs of all elements of specified row</summary>
            <param name="rowIndex">The index of the row to change the sign of.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.GetSubMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Gets the sub matrix specified with the row indices, the start
            column, and the end column.
            </summary>
            <param name="rows">The row indices.</param>
            <param name="columnStart">The column start.</param>
            <param name="columnEnd">The column end.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.AddInternal(DmFramework.Generics.DataStructures.General.IMatrix{System.Double},DmFramework.Generics.DataStructures.General.IMatrix{System.Double})">
            <summary>Internal addition function.</summary>
            <param name="leftMatrix">The left matrix.</param>
            <param name="rightMatrix">The right matrix.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.ConcatenateInternal(DmFramework.Generics.DataStructures.General.IMatrix{System.Double},DmFramework.Generics.DataStructures.General.IMatrix{System.Double})">
            <summary>Internal method for concatenation.</summary>
            <param name="leftMatrix">The left hand side matrix.</param>
            <param name="rightMatrix">The right hand side matrix.</param>
            <returns>The result of the concatenation operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.op_Addition(DmFramework.Generics.DataStructures.Mathematical.Matrix,DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Overload of the operator + as in linear algebra.</summary>
            <param name="left">The left hand matrix.</param>
            <param name="right">The right hand matrix.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="OperatorPlus" lang="cs" title="The following example shows how to use the plus operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="OperatorPlus" lang="vbnet" title="The following example shows how to use the plus operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.op_Subtraction(DmFramework.Generics.DataStructures.Mathematical.Matrix,DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Overload of the operator - as in linear algebra.</summary>
            <param name="left">The left hand matrix.</param>
            <param name="right">The right hand matrix.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="OperatorMinus" lang="cs" title="The following example shows how to use the minus operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="OperatorMinus" lang="vbnet" title="The following example shows how to use the minus operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.op_Multiply(DmFramework.Generics.DataStructures.Mathematical.Matrix,DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Overload of the operator * as in linear algebra.</summary>
            <param name="left">The left hand matrix.</param>
            <param name="right">The right hand matrix.</param>
            <returns>The result of the multiplication.</returns>     
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>   
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="OperatorMultiplyMatrixMatrix" lang="cs" title="The following example shows how to use the multiply operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="OperatorMultiplyMatrixMatrix" lang="vbnet" title="The following example shows how to use the multiply operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.op_Multiply(System.Double,DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Overload of the operator * as in linear algebra.</summary>
            <param name="number">The number.</param>
            <param name="matrix">The right hand matrix.</param>
            <returns>The result of the multiplication.</returns> 
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="OperatorMultiplyMatrixDouble" lang="cs" title="The following example shows how to use the multiply operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="OperatorMultiplyMatrixDouble" lang="vbnet" title="The following example shows how to use the multiply operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.op_Multiply(DmFramework.Generics.DataStructures.Mathematical.Matrix,System.Double)">
            <summary>Overload of the operator * as in linear algebra.</summary>
            <param name="matrix">The number to be multiplied with.</param>
            <param name="number">The number.</param>
            <returns>The result of the multiplication.</returns>  
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="OperatorMultiplyMatrixDouble" lang="cs" title="The following example shows how to use the multiply operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="OperatorMultiplyMatrixDouble" lang="vbnet" title="The following example shows how to use the multiply operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.System#Collections#Generic#ICollection{System#Double}#Add(System.Double)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.System#Collections#Generic#ICollection{System#Double}#Remove(System.Double)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Gets the sub matrix.</summary>
            <param name="rowStart">The row start.</param>
            <param name="columnStart">The column start.</param>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
            <returns>The sub matrix of the current matrix.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="GetSubMatrix" lang="cs" title="The following example shows how to use the GetSubMatrix method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="GetSubMatrix" lang="vbnet" title="The following example shows how to use the GetSubMatrix method."/>
            </example>           
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Equals(DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Equals" lang="cs" title="The following example shows how to use the Equals method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Equals" lang="vbnet" title="The following example shows how to use the Equals method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Matrix.Equals(DmFramework.Generics.DataStructures.Mathematical.IMathematicalMatrix,System.Double)">
            <summary>Compares elements with precision factor to solve machine Double rounding problem.</summary>
            <param name="other">The other matrix to compare.</param>
            <param name="precision">The precision with which to compare.</param>
            <returns></returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="Equals" lang="cs" title="The following example shows how to use the Equals method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="Equals" lang="vbnet" title="The following example shows how to use the Equals method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Matrix.IsPositiveDefinite">
            <summary>Checks if matrix positive definite .</summary>
            <returns>true if matrix is  positive definite.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Matrix.IsSymmetric">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="IsSymmetric" lang="cs" title="The following example shows how to use the IsSymmetric property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="IsSymmetric" lang="vbnet" title="The following example shows how to use the IsSymmetric property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Matrix.IsSingular">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\MatrixExamples.cs" region="IsSingular" lang="cs" title="The following example shows how to use the IsSingular property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\MatrixExamples.vb" region="IsSingular" lang="vbnet" title="The following example shows how to use the IsSingular property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Matrix.IsDiagonal">
            <summary>Verifies whether the matrix is diagonal or not.</summary>
            <value>
            	A boolean value indicating whether the matrix is diagonal or not.
            </value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Matrix.IsTriangular">
            <summary>Verifies whether the matrix is Triangular or not.</summary>
            <value>
            A TriangularMatrixTypes enum value indicating whether the matrix is UpperTriangular, LowerTriangular, Diagonal or not.
            </value>      
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Matrix.Trace">
            <summary>Calculates the trace of the current matrix.</summary>
            <value>The sum of the diagonal elements of the matrix.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Matrix.OneNorm">
            <summary>Calculates the One Norm for the matrix.</summary>
            <value>The maximum column sum.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Matrix.InfinityNorm">
            <summary>Calculates infinity norm for the matrix.</summary>
            <value>The maximum row sum.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Matrix.FrobeniusNorm">
            <summary>Calculates the Frobenius Norm for the matrix.</summary>
            <value>The square root of sum of squares of all elements.</value>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.QRDecomposition">
            <summary>QR Decomposition.</summary>
            <remarks>
            For an qr.Rows-by-qr.Columns matrix A with qr.Rows >= qr.Columns, the QR decomposition is an qr.Rows-by-qr.Columns
            orthogonal matrix Q and an qr.Columns-by-qr.Columns upper triangular matrix R so that
            A = Q*R.
            </remarks>
            <remarks>
            The QR decomposition always exists, even if the matrix does not have
            full rank, so the constructor will never fail.  The primary use of the
            QR decomposition is in the least squares solution of non-square systems
            of simultaneous linear equations.  This will fail if isFullRank()
            returns <c>false</c>.
            </remarks>
            <remarks>
            Adapted from the JAMA package : http://math.nist.gov/javanumerics/jama/
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.QRDecomposition.#ctor(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <param name="matrix">A rectangular matrix.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.QRDecomposition.Decompose(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Decomposes the specified matrix, using a QR decomposition.</summary>
            <param name="matrix">The matrix to decompose.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.QRDecomposition.Solve(DmFramework.Generics.DataStructures.Mathematical.Matrix)">
            <summary>Least squares solution of A*X = B</summary>
            <param name="right">A Matrix with as many rows as A and any number of columns.</param>
            <returns>Matrix X that minimizes the two norm of Q*R*X-B.</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.ArgumentException">Matrix is rank deficient.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.QRDecomposition.IsFullRank">
            <summary>Gets a value indicating whether the matrix is full rank.</summary>
            <value><c>true</c> if R, and hence A, has full rank, else <c>false</c>..</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.QRDecomposition.H">
            <summary>Gets the Householder vectors.</summary>
            <value>Lower trapezoidal matrix whose columns define the reflections.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.QRDecomposition.UpperTriangularMatrix">
            <summary>Gets the the upper triangular factor.</summary>
            <returns>The upper triangular factor.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.QRDecomposition.OrthogonalFactor">
            <summary>Generate and return the (economy-sized) orthogonal factor.</summary>
            <returns>The (economy-sized) orthogonal factor.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.QRDecomposition.LeftFactorMatrix">
            <summary>Get the (economy-sized) orthogonal factor Q, with A=QR.</summary>
            <returns>the orthogonal factor.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.QRDecomposition.RightFactorMatrix">
            <summary>Gets the the upper triangular factor R, with A=QR.</summary>
            <returns>The upper triangular factor.</returns>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.TriangularMatrixType">
            <summary>Represents the different types of Triangular Matrices.</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Mathematical.TriangularMatrixType.None">
            <summary>Non-triangular Matrix</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Mathematical.TriangularMatrixType.Upper">
            <summary>Upper Triangular Matrixes</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Mathematical.TriangularMatrixType.Lower">
            <summary>Lower Triangular Matrixes</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Mathematical.TriangularMatrixType.Diagonal">
            <summary>Diagonal Matrixes</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D">
            <summary>A Vector data structure.</summary>
            <summary>A Vector data structure.</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1">
            <summary>A Vector data structure.</summary>
            <summary>A Vector data structure.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.#ctor(System.Int32)">
            <summary>Initialise a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1"/> class.</summary>
            <param name="dimensionCount">The number of dimensions.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dimensionCount"/> is less than 0.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Add(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.AddSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Adds a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to add to this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Add(`0)">
            <summary>Adds a <typeparamref name="T"/> to each dimension.</summary>
            <param name="number">The <typeparamref name="T"/> to add to this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.CheckDimensionsEqual(DmFramework.Generics.DataStructures.Mathematical.IVector{`0},DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Check if the dimensions of two <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>s are equal.</summary>
            <param name="left">The left hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
            <param name="right">The right hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
            <exception cref="T:System.ArgumentException">The left <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> does not equal the right <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.DeepClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.CrossProduct(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.CrossProductSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Get the cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> and <paramref name="vector"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to calculate the cross product with.</param>
            <returns>The cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> and <paramref name="vector"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Increment">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Magnitude">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Product">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Sum">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Decrement">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Divide(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Divide by a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to divide by.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.DivideSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Divide by a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to divide by.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Divide(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.DotProduct(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.DotProductSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Calculate the dot product.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to calculate the dot product with.</param>
            <returns>The dot product of the current instance and <paramref name="vector"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Equals(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.AbsoluteMaximum">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.AbsoluteMaximumIndex">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.AbsoluteMinimum">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.AbsoluteMinimumIndex">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Maximum">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.MaximumIndex">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Minimum">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.MinimumIndex">
            <summary>Get the index of the minimum dimension.</summary>
            <returns>The index of the minimum dimension.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Multiply(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.MultiplySafe(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Multiply the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> with another <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to multiply by.</param>
            <returns>The result of the multiply operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Multiply(`0)">
            <summary>Multiply the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> with a <typeparamref name="T"/>.</summary>
            <param name="number">The <typeparamref name="T"/> to multiply by.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Negate">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Normalize">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.SetValues(`0[])">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.SetValuesSafe(`0[])">
            <summary>Set the values of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/></summary>
            <remarks><paramref name="values"/> has already been checked for null and that it is of the correct length.</remarks>
            <param name="values">The values to set.</param>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.SetValues(`0[])"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Subtract(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Subtracts a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> from the current instance.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to subtract from this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.SubtractSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Subtracts a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> from the current instance.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to subtract from this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Subtract(`0)">
            <summary>Subtracts a <typeparamref name="T"/> from the current instance.</summary>
            <param name="number">The <typeparamref name="T"/> to subtract from this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Swap(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Swap all the values with another <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="other">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to swap values with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="other"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.SwapSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Swap all the values with another <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <remarks><paramref name="other"/> has been checked for null and that its dimensions match the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</remarks>
            <param name="other">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to swap value with.</param>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Swap(DmFramework.Generics.DataStructures.Mathematical.IVector{`0})"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.ToArray">
            <summary>Copies the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to a new <typeparamref name="T"/> array.</summary>
            <returns>A <typeparamref name="T"/> array containing copies of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.ToString">
            <summary>Returns a String representation of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <returns>
            A String representation of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.ToMatrix">
            <summary>Copies the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to a new <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/>.</summary>
            <returns>A <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/> array containing copies of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Equality(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0},DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Equals operator.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><c>true</c> is <paramref name="left"/> is equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Inequality(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0},DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Not Equals operator.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><c>true</c> is <paramref name="left"/> is not equal to <paramref name="right"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Division(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0},DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Overload of the operator /</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="left"/> does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="right"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Division(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0},`0)">
            <summary>Overload of the operator /</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Multiply(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0},DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Overload of the operator *</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="right"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Multiply(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0},`0)">
            <summary>Overload of the operator *</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Addition(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0},DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Overload of the operator +</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="right"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Increment(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0})">
            <summary>Overload of the operator ++</summary>
            <param name="right">The right hand side.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="right"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Addition(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0},`0)">
            <summary>Overload of the operator +</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Subtraction(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0},DmFramework.Generics.DataStructures.Mathematical.IVector{`0})">
            <summary>Overload of the operator -</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="right"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Subtraction(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0},`0)">
            <summary>Overload of the operator -</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_UnaryNegation(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0})">
            <summary>Overload of the operator -</summary>
            <param name="right">The right hand side.</param>
            <returns>The result of the negation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.op_Decrement(DmFramework.Generics.DataStructures.Mathematical.VectorBase{`0})">
            <summary>Overload of the operator --</summary>
            <param name="right">The right hand side.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="right"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.DimensionCount">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.#ctor">
            <inheritdoc/>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.#ctor(System.Double,System.Double)">
            <inheritdoc/>
            <param name="x">The X dimension.</param>
            <param name="y">The Y dimension.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="ConstructorInitValues" lang="cs" title="The following example shows how to use the initialize values constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="ConstructorInitValues" lang="vbnet" title="The following example shows how to use the initialize values constructor."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.AbsoluteMaximum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="AbsoluteMaximum" lang="cs" title="The following example shows how to use the AbsoluteMaximum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="AbsoluteMaximum" lang="vbnet" title="The following example shows how to use the AbsoluteMaximum method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.AbsoluteMaximumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="AbsoluteMaximumIndex" lang="cs" title="The following example shows how to use the AbsoluteMaximumIndex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="AbsoluteMaximumIndex" lang="vbnet" title="The following example shows how to use the AbsoluteMaximumIndex method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.AbsoluteMinimum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="AbsoluteMinimum" lang="cs" title="The following example shows how to use the AbsoluteMinimum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="AbsoluteMinimum" lang="vbnet" title="The following example shows how to use the AbsoluteMinimum method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.AbsoluteMinimumIndex">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Add(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="AddDouble" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="AddDouble" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Add(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Adds a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> to the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> to add to this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="AddVector" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="AddVector" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.AddSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Clear">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.CloneInternal">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.CrossProduct(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Get the cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> and <paramref name="vector"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to calculate the cross product with.</param>
            <returns>The cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> and <paramref name="vector"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="CrossProduct3D" lang="cs" title="The following example shows how to use the CrossProduct method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="CrossProduct3D" lang="vbnet" title="The following example shows how to use the CrossProduct method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.CrossProduct(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Get the cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> and <paramref name="vector"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> to calculate the cross product with.</param>
            <returns>The cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> and <paramref name="vector"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="CrossProduct2D" lang="cs" title="The following example shows how to use the CrossProduct method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="CrossProduct2D" lang="vbnet" title="The following example shows how to use the CrossProduct method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.CrossProductSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Decrement">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Decrement" lang="cs" title="The following example shows how to use the Decrement method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Decrement" lang="vbnet" title="The following example shows how to use the Decrement method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Divide(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="DivideDouble" lang="cs" title="The following example shows how to use the Divide method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="DivideDouble" lang="vbnet" title="The following example shows how to use the Divide method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Divide(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Divide each dimension by a number.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> to divide by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="DivideVector" lang="cs" title="The following example shows how to use the Divide method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="DivideVector" lang="vbnet" title="The following example shows how to use the Divide method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.DivideSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.DotProduct(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
             <summary>Calculate the dot product.</summary>
             <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to calculate the dot product with.</param>
             <returns>The dot product of the current instance and <paramref name="vector"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
             <example>
             <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="DotProduct" lang="cs" title="The following example shows how to use the DotProduct method."/>
             <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="DotProduct" lang="vbnet" title="The following example shows how to use the DotProduct method."/>
             </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.DotProductSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Increment">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Increment" lang="cs" title="The following example shows how to use the Increment method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Increment" lang="vbnet" title="The following example shows how to use the Increment method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Magnitude">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Magnitude" lang="cs" title="The following example shows how to use the Magnitude method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Magnitude" lang="vbnet" title="The following example shows how to use the Magnitude method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Maximum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Maximum" lang="cs" title="The following example shows how to use the Maximum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Maximum" lang="vbnet" title="The following example shows how to use the Maximum method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.MaximumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="MinimumIndex" lang="cs" title="The following example shows how to use the MinimumIndex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="MinimumIndex" lang="vbnet" title="The following example shows how to use the MinimumIndex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Minimum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Minimum" lang="cs" title="The following example shows how to use the Minimum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Minimum" lang="vbnet" title="The following example shows how to use the Minimum method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.MinimumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="MinimumIndex" lang="cs" title="The following example shows how to use the MinimumIndex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="MinimumIndex" lang="vbnet" title="The following example shows how to use the MinimumIndex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Multiply(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="MultiplyDouble" lang="cs" title="The following example shows how to use the Multiply method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="MultiplyDouble" lang="vbnet" title="The following example shows how to use the Multiply method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Multiply(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Multiply the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> with another <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> to multiply by.</param>
            <returns>The result of the multiply operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="MultiplyVector" lang="cs" title="The following example shows how to use the Multiple method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="MultiplyVector" lang="vbnet" title="The following example shows how to use the Multiple method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.MultiplySafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Negate">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Negate" lang="cs" title="The following example shows how to use the Negate method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Negate" lang="vbnet" title="The following example shows how to use the Negate method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Normalize">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Normalize" lang="cs" title="The following example shows how to use the Normalize method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Normalize" lang="vbnet" title="The following example shows how to use the Normalize method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.SetValuesSafe(System.Double[])">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Product">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Product" lang="cs" title="The following example shows how to use the Product method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Product" lang="vbnet" title="The following example shows how to use the Product method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Subtract(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="SubtractDouble" lang="cs" title="The following example shows how to use the Subtract method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="SubtractDouble" lang="vbnet" title="The following example shows how to use the Subtract method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Subtract(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Subtracts a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> from the current instance.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> to subtract from this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="SubtractVector" lang="cs" title="The following example shows how to use the Subtract method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="SubtractVector" lang="vbnet" title="The following example shows how to use the Subtract method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.SubtractSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Sum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Sum" lang="cs" title="The following example shows how to use the Sum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Sum" lang="vbnet" title="The following example shows how to use the Sum method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.SwapSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Swap(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Swap all the values with another <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</summary>
            <param name="other">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> to swap values with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Swap" lang="cs" title="The following example shows how to use the Swap method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Swap" lang="vbnet" title="The following example shows how to use the Swap method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.ToArray">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="ToArray" lang="cs" title="The following example shows how to use the ToArray method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="ToArray" lang="vbnet" title="The following example shows how to use the ToArray method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.ToMatrix">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="ToMatrix" lang="cs" title="The following example shows how to use the ToMatrix method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="ToMatrix" lang="vbnet" title="The following example shows how to use the ToMatrix method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Division(DmFramework.Generics.DataStructures.Mathematical.Vector2D,System.Double)">
            <summary>Overload of the operator /</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorDivideDouble" lang="cs" title="The following example shows how to use the divide operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorDivideDouble" lang="vbnet" title="The following example shows how to use the divide operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Division(DmFramework.Generics.DataStructures.Mathematical.Vector2D,DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Overload of the operator /</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorDivideVector" lang="cs" title="The following example shows how to use the divide operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorDivideVector" lang="vbnet" title="The following example shows how to use the divide operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Multiply(DmFramework.Generics.DataStructures.Mathematical.Vector2D,DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Overload of the operator *</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorMultiplyVector" lang="cs" title="The following example shows how to use the multiply operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorMultiplyVector" lang="vbnet" title="The following example shows how to use the multiply operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Multiply(DmFramework.Generics.DataStructures.Mathematical.Vector2D,System.Double)">
            <summary>Overload of the operator *</summary>
            <param name="left">The left hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorMultiplyDouble" lang="cs" title="The following example shows how to use the multiply operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorMultiplyDouble" lang="vbnet" title="The following example shows how to use the multiply operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Addition(DmFramework.Generics.DataStructures.Mathematical.Vector2D,System.Double)">
            <summary>Overload of the operator +</summary>
            <param name="left">The left hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <param name="right">The right hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorPlusDouble" lang="cs" title="The following example shows how to use the plus."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorPlusDouble" lang="vbnet" title="The following example shows how to use the plus."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Addition(DmFramework.Generics.DataStructures.Mathematical.Vector2D,DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Overload of the operator +</summary>
            <param name="left">The left hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <param name="right">The right hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorPlusVector" lang="cs" title="The following example shows how to use the plus."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorPlusVector" lang="vbnet" title="The following example shows how to use the plus."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Increment(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Overload of the operator ++</summary>
            <param name="right">The right hand side.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorIncrement" lang="cs" title="The following example shows how to use the increment."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorIncrement" lang="vbnet" title="The following example shows how to use the increment."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Subtraction(DmFramework.Generics.DataStructures.Mathematical.Vector2D,DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Overload of the operator -</summary>
            <param name="left">The left hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <param name="right">The right hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>        
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorSubtractVector" lang="cs" title="The following example shows how to use the minus."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorSubtractVector" lang="vbnet" title="The following example shows how to use the minus."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Subtraction(DmFramework.Generics.DataStructures.Mathematical.Vector2D,System.Double)">
            <summary>Overload of the operator -</summary>
            <param name="left">The left hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <param name="right">The right hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <returns>The result of the subtraction.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorSubtractDouble" lang="cs" title="The following example shows how to use the minus."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorSubtractDouble" lang="vbnet" title="The following example shows how to use the minus."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_UnaryNegation(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Overload of the operator -</summary>
            <param name="right">The right hand <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</param>
            <returns>The result of the negation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorNegate" lang="cs" title="The following example shows how to use the negate."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorNegate" lang="vbnet" title="The following example shows how to use the negate."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Decrement(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Overload of the operator --</summary>
            <param name="right">The right hand side.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorIncrement" lang="cs" title="The following example shows how to use the decrement."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorIncrement" lang="vbnet" title="The following example shows how to use the decrement."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Implicit(DmFramework.Generics.DataStructures.Mathematical.Vector2D)~DmFramework.Generics.DataStructures.Mathematical.Matrix">
            <summary>Copies the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> to a new <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> to convert.</param>
            <returns>A <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/> array containing copies of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorToMatrix" lang="cs" title="The following example shows how to use the convert to matrix."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorToMatrix" lang="vbnet" title="The following example shows how to use the convert to matrix."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_Explicit(DmFramework.Generics.DataStructures.General.ObjectMatrix{System.Double})~DmFramework.Generics.DataStructures.Mathematical.Vector2D">
            <summary>Copies the elements of the <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/> to a new <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</summary>
            <param name="matrix">The <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/> to convert.</param>
            <returns>A <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> array containing copies of the elements of the <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="matrix"/> has more than 1 column.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="matrix"/> has more than 2 rows.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorFromMatrix" lang="cs" title="The following example shows how to use the convert from matrix."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorFromMatrix" lang="vbnet" title="The following example shows how to use the convert from matrix."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_GreaterThan(DmFramework.Generics.DataStructures.Mathematical.Vector2D,DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> is greater than another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is greater than <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorGreaterThan" lang="cs" title="The following example shows how to use the &gt; operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorGreaterThan" lang="vbnet" title="The following example shows how to use the &gt; operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_LessThan(DmFramework.Generics.DataStructures.Mathematical.Vector2D,DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> is less than another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is less than <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorLessThan" lang="cs" title="The following example shows how to use the &lt; operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorLessThan" lang="vbnet" title="The following example shows how to use the &lt; operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_GreaterThanOrEqual(DmFramework.Generics.DataStructures.Mathematical.Vector2D,DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> is greater than or equal to another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is greater than or equal to <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorGreaterThanOrEqualTo" lang="cs" title="The following example shows how to use the &gt;= operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorGreaterThanOrEqualTo" lang="vbnet" title="The following example shows how to use the &gt;= operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector2D.op_LessThanOrEqual(DmFramework.Generics.DataStructures.Mathematical.Vector2D,DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/> is less than or equal to another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is less than or equal to <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.Operators.cs" region="OperatorLessThanOrEqualTo" lang="cs" title="The following example shows how to use the &lt;= operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.Operators.vb" region="OperatorLessThanOrEqualTo" lang="vbnet" title="The following example shows how to use the &lt;= operator."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Item(System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="Index" lang="cs" title="The following example shows how to use the index property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="Index" lang="vbnet" title="The following example shows how to use the index property."/>
            </example> 
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector2D.X">
            <summary>Gets or sets the x dimension</summary>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="NamedDimensions" lang="cs" title="The following example shows how to use the X property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="NamedDimensions" lang="vbnet" title="The following example shows how to use the X property."/>
            </example> 
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector2D.Y">
            <summary>Gets or sets the y dimension</summary>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="NamedDimensions" lang="cs" title="The following example shows how to use the Y property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="NamedDimensions" lang="vbnet" title="The following example shows how to use the Y property."/>
            </example> 
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector2D.UnitVector">
            <summary>Creates a unit <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</summary>
            <returns>A unit <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="GetUnitVector" lang="cs" title="The following example shows how to use the UnitVector property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="GetUnitVector" lang="vbnet" title="The following example shows how to use the UnitVector property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector2D.ZeroVector">
            <summary>Creates zeroed <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</summary>
            <returns>A zeroed <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector2D"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector2DExamples.cs" region="GetZeroVector" lang="cs" title="The following example shows how to use the ZeroVector property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector2DExamples.vb" region="GetZeroVector" lang="vbnet" title="The following example shows how to use the ZeroVector property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D">
            <summary>A Vector data structure.</summary>
            <summary>A Vector data structure.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.#ctor">
            <inheritdoc/>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <inheritdoc/>
            <param name="x">The X dimension.</param>
            <param name="y">The Y dimension.</param>
            <param name="z">The Z dimension.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="ConstructorInitValues" lang="cs" title="The following example shows how to use the initialize values constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="ConstructorInitValues" lang="vbnet" title="The following example shows how to use the initialize values constructor."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.AbsoluteMaximum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="AbsoluteMaximum" lang="cs" title="The following example shows how to use the AbsoluteMaximum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="AbsoluteMaximum" lang="vbnet" title="The following example shows how to use the AbsoluteMaximum method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.AbsoluteMaximumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="AbsoluteMaximumIndex" lang="cs" title="The following example shows how to use the AbsoluteMaximumIndex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="AbsoluteMaximumIndex" lang="vbnet" title="The following example shows how to use the AbsoluteMaximumIndex method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.AbsoluteMinimum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="AbsoluteMinimum" lang="cs" title="The following example shows how to use the AbsoluteMinimum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="AbsoluteMinimum" lang="vbnet" title="The following example shows how to use the AbsoluteMinimum method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.AbsoluteMinimumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="AbsoluteMinimumIndex" lang="cs" title="The following example shows how to use the AbsoluteMinimumIndex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="AbsoluteMinimumIndex" lang="vbnet" title="The following example shows how to use the AbsoluteMinimumIndex method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Add(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="AddDouble" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="AddDouble" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Add(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Adds a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to add to this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="AddVector" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="AddVector" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.AddSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Clear">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.CloneInternal">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.CrossProduct(DmFramework.Generics.DataStructures.Mathematical.Vector2D)">
            <summary>Get the cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> and <paramref name="vector"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to calculate the cross product with.</param>
            <returns>The cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> and <paramref name="vector"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="CrossProduct3D" lang="cs" title="The following example shows how to use the CrossProduct method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="CrossProduct3D" lang="vbnet" title="The following example shows how to use the CrossProduct method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.CrossProduct(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Get the cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> and <paramref name="vector"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to calculate the cross product with.</param>
            <returns>The cross product of this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> and <paramref name="vector"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="CrossProduct3D" lang="cs" title="The following example shows how to use the CrossProduct method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="CrossProduct3D" lang="vbnet" title="The following example shows how to use the CrossProduct method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.CrossProductSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Decrement">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Decrement" lang="cs" title="The following example shows how to use the Decrement method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Decrement" lang="vbnet" title="The following example shows how to use the Decrement method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Divide(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="DivideDouble" lang="cs" title="The following example shows how to use the Divide method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="DivideDouble" lang="vbnet" title="The following example shows how to use the Divide method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Divide(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Divide each dimension by a number.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to divide by.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="DivideVector" lang="cs" title="The following example shows how to use the Divide method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="DivideVector" lang="vbnet" title="The following example shows how to use the Divide method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.DivideSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.DotProduct(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Calculate the dot product.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to calculate the dot product with.</param>
            <returns>The dot product of the current instance and <paramref name="vector"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="DotProduct" lang="cs" title="The following example shows how to use the DotProduct method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="DotProduct" lang="vbnet" title="The following example shows how to use the DotProduct method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.DotProductSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Increment">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Increment" lang="cs" title="The following example shows how to use the Increment method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Increment" lang="vbnet" title="The following example shows how to use the Increment method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Magnitude">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Magnitude" lang="cs" title="The following example shows how to use the Increment method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Magnitude" lang="vbnet" title="The following example shows how to use the Increment method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Maximum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Maximum" lang="cs" title="The following example shows how to use the Maximum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Maximum" lang="vbnet" title="The following example shows how to use the Maximum method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.MaximumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="MinimumIndex" lang="cs" title="The following example shows how to use the MinimumIndex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="MinimumIndex" lang="vbnet" title="The following example shows how to use the MinimumIndex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Minimum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Minimum" lang="cs" title="The following example shows how to use the Minimum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Minimum" lang="vbnet" title="The following example shows how to use the Minimum method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.MinimumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="MinimumIndex" lang="cs" title="The following example shows how to use the MinimumIndex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="MinimumIndex" lang="vbnet" title="The following example shows how to use the MinimumIndex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Multiply(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="MultiplyDouble" lang="cs" title="The following example shows how to use the Multiply method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="MultiplyDouble" lang="vbnet" title="The following example shows how to use the Multiply method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Multiply(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Multiply the current <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> with another <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/></summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to multiply by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="MultiplyVector" lang="cs" title="The following example shows how to use the Multiply method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="MultiplyVector" lang="vbnet" title="The following example shows how to use the Multiply method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.MultiplySafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Negate">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Negate" lang="cs" title="The following example shows how to use the Negate method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Negate" lang="vbnet" title="The following example shows how to use the Negate method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Normalize">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Normalize" lang="cs" title="The following example shows how to use the Normalize method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Normalize" lang="vbnet" title="The following example shows how to use the Normalize method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Product">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Product" lang="cs" title="The following example shows how to use the Product method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Product" lang="vbnet" title="The following example shows how to use the Product method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.SubtractSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Sum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Sum" lang="cs" title="The following example shows how to use the Sum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Sum" lang="vbnet" title="The following example shows how to use the Sum method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.SetValuesSafe(System.Double[])">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Subtract(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="SubtractDouble" lang="cs" title="The following example shows how to use the Subtract method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="SubtractDouble" lang="vbnet" title="The following example shows how to use the Subtract method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Subtract(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Subtracts a <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> from the current instance.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to subtract from this <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="SubtractVector" lang="cs" title="The following example shows how to use the Subtract method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="SubtractVector" lang="vbnet" title="The following example shows how to use the Subtract method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Swap(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Swap all the values with another <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/>.</summary>
            <param name="other">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to swap values with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Swap" lang="cs" title="The following example shows how to use the Swap method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Swap" lang="vbnet" title="The following example shows how to use the Swap method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.SwapSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.ToArray">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="ToArray" lang="cs" title="The following example shows how to use the ToArray method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="ToArray" lang="vbnet" title="The following example shows how to use the ToArray method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.ToMatrix">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="ToMatrix" lang="cs" title="The following example shows how to use the ToMatrix method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="ToMatrix" lang="vbnet" title="The following example shows how to use the ToMatrix method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Division(DmFramework.Generics.DataStructures.Mathematical.Vector3D,System.Double)">
            <summary>Overload of the operator /</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorDivideDouble" lang="cs" title="The following example shows how to use the divide operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorDivideDouble" lang="vbnet" title="The following example shows how to use the divide operator overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Division(DmFramework.Generics.DataStructures.Mathematical.Vector3D,DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Overload of the operator /</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorDivideVector" lang="cs" title="The following example shows how to use the divide operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorDivideVector" lang="vbnet" title="The following example shows how to use the divide operator overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Multiply(DmFramework.Generics.DataStructures.Mathematical.Vector3D,DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Overload of the operator *</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorMultiplyVector" lang="cs" title="The following example shows how to use the multiply operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorMultiplyVector" lang="vbnet" title="The following example shows how to use the multiply operator overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Multiply(DmFramework.Generics.DataStructures.Mathematical.Vector3D,System.Double)">
            <summary>Overload of the operator *</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorMultiplyDouble" lang="cs" title="The following example shows how to use the multiply operator overload."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorMultiplyDouble" lang="vbnet" title="The following example shows how to use the multiply operator overload."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Addition(DmFramework.Generics.DataStructures.Mathematical.Vector3D,System.Double)">
            <summary>Overload of the operator +</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorPlusDouble" lang="cs" title="The following example shows how to use the plus operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorPlusDouble" lang="vbnet" title="The following example shows how to use the plus operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Addition(DmFramework.Generics.DataStructures.Mathematical.Vector3D,DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Overload of the operator +</summary>
            <param name="left">The left hand side</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorPlusVector" lang="cs" title="The following example shows how to use the plus operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorPlusVector" lang="vbnet" title="The following example shows how to use the plus operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Increment(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Overload of the operator ++</summary>
            <param name="right">The right hand side.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorIncrement" lang="cs" title="The following example shows how to use the increment operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorIncrement" lang="vbnet" title="The following example shows how to use the increment operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Subtraction(DmFramework.Generics.DataStructures.Mathematical.Vector3D,DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Overload of the operator -</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorSubtractVector" lang="cs" title="The following example shows how to use the minus operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorSubtractVector" lang="vbnet" title="The following example shows how to use the minus operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Subtraction(DmFramework.Generics.DataStructures.Mathematical.Vector3D,System.Double)">
            <summary>Overload of the operator -</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorSubtractDouble" lang="cs" title="The following example shows how to use the minus operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorSubtractDouble" lang="vbnet" title="The following example shows how to use the minus operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_UnaryNegation(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Overload of the operator -</summary>
            <param name="right">The right hand side.</param>
            <returns>The result of the negation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorNegate" lang="cs" title="The following example shows how to use the negate operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorNegate" lang="vbnet" title="The following example shows how to use the negate operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Decrement(DmFramework.Generics.DataStructures.Mathematical.Vector3D)">
            <summary>Overload of the operator --</summary>
            <param name="right">The right hand side.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorIncrement" lang="cs" title="The following example shows how to use the decrement operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorIncrement" lang="vbnet" title="The following example shows how to use the decrement operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Implicit(DmFramework.Generics.DataStructures.Mathematical.Vector3D)~DmFramework.Generics.DataStructures.Mathematical.Matrix">
            <summary>Copies the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to a new <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> to convert.</param>
            <returns>A <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/> array containing copies of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorToMatrix" lang="cs" title="The following example shows how to use the convert to matrix operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorToMatrix" lang="vbnet" title="The following example shows how to use the convert to matrix operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_Explicit(DmFramework.Generics.DataStructures.General.ObjectMatrix{System.Double})~DmFramework.Generics.DataStructures.Mathematical.Vector3D">
            <summary>Copies the elements of the <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/> to a new <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/>.</summary>
            <param name="matrix">The <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/> to convert.</param>
            <returns>A <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> array containing copies of the elements of the <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="matrix"/> has more than 1 column.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="matrix"/> has more than 3 rows.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorFromMatrix" lang="cs" title="The following example shows how to use the convert from matrix operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorFromMatrix" lang="vbnet" title="The following example shows how to use the convert from matrix operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_GreaterThan(DmFramework.Generics.DataStructures.Mathematical.Vector3D,DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> is greater than another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is greater than <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorGreaterThan" lang="cs" title="The following example shows how to use the &gt; operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorGreaterThan" lang="vbnet" title="The following example shows how to use the &gt; operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_LessThan(DmFramework.Generics.DataStructures.Mathematical.Vector3D,DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> is less than another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is less than <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorLessThan" lang="cs" title="The following example shows how to use the &lt; operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorLessThan" lang="vbnet" title="The following example shows how to use the &lt; operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_GreaterThanOrEqual(DmFramework.Generics.DataStructures.Mathematical.Vector3D,DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> is greater than or equal to another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is greater than or equal to <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorGreaterThanOrEqualTo" lang="cs" title="The following example shows how to use the &gt;= operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorGreaterThanOrEqualTo" lang="vbnet" title="The following example shows how to use the &gt;= operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.Vector3D.op_LessThanOrEqual(DmFramework.Generics.DataStructures.Mathematical.Vector3D,DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/> is less than or equal to another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is less than or equal to <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.Operators.cs" region="OperatorLessThanOrEqualTo" lang="cs" title="The following example shows how to use the &lt;= operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.Operators.vb" region="OperatorLessThanOrEqualTo" lang="vbnet" title="The following example shows how to use the &lt;= operator."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Item(System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="Index" lang="cs" title="The following example shows how to use the index property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="Index" lang="vbnet" title="The following example shows how to use the index property."/>
            </example> 
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector3D.X">
            <summary>Gets or sets the x dimension</summary>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="NamedDimensions" lang="cs" title="The following example shows how to use the X property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="NamedDimensions" lang="vbnet" title="The following example shows how to use the X property."/>
            </example> 
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Y">
            <summary>Gets or sets the y dimension</summary>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="NamedDimensions" lang="cs" title="The following example shows how to use the Y property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="NamedDimensions" lang="vbnet" title="The following example shows how to use the Y property."/>
            </example> 
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector3D.Z">
            <summary>Gets or sets the z dimension</summary>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="NamedDimensions" lang="cs" title="The following example shows how to use the Z property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="NamedDimensions" lang="vbnet" title="The following example shows how to use the Z property."/>
            </example> 
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector3D.ZeroVector">
            <summary>Creates zeroed <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/>.</summary>
            <returns>A zeroed <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="GetZeroVector" lang="cs" title="The following example shows how to use the ZeroVector property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="GetZeroVector" lang="vbnet" title="The following example shows how to use the ZeroVector property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.Vector3D.UnitVector">
            <summary>Creates unit <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/>.</summary>
            <returns>A unit <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Vector3D"/>.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\Vector3DExamples.cs" region="GetUnitVector" lang="cs" title="The following example shows how to use the ZeroVector property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\Vector3DExamples.vb" region="GetUnitVector" lang="vbnet" title="The following example shows how to use the ZeroVector property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Mathematical.VectorN">
            <summary>A Vector data structure.</summary>
            <summary>A Vector data structure.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.#ctor(System.Int32)">
            <inheritdoc/>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.AbsoluteMaximum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="AbsoluteMaximum" lang="cs" title="The following example shows how to use the AbsoluteMaximum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="AbsoluteMaximum" lang="vbnet" title="The following example shows how to use the AbsoluteMaximum method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.AbsoluteMaximumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="AbsoluteMaximumIndex" lang="cs" title="The following example shows how to use the AbsoluteMaximumIndex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="AbsoluteMaximumIndex" lang="vbnet" title="The following example shows how to use the AbsoluteMaximumIndex method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.AbsoluteMinimum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="AbsoluteMinimum" lang="cs" title="The following example shows how to use the AbsoluteMinimum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="AbsoluteMinimum" lang="vbnet" title="The following example shows how to use the AbsoluteMinimum method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.AbsoluteMinimumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="AbsoluteMinimumIndex" lang="cs" title="The following example shows how to use the AbsoluteMinimumIndex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="AbsoluteMinimumIndex" lang="vbnet" title="The following example shows how to use the AbsoluteMinimumIndex method."/>
            </example> 
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.AddSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Add(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="AddDouble" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="AddDouble" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.CrossProductSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Decrement">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Decrement" lang="cs" title="The following example shows how to use the Decrement method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Decrement" lang="vbnet" title="The following example shows how to use the Decrement method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.DivideSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Divide(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="DivideDouble" lang="cs" title="The following example shows how to use the Divide method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="DivideDouble" lang="vbnet" title="The following example shows how to use the Divide method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.DotProductSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.GetUnitVector(System.Int32)">
            <summary>Creates zeroed <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorN"/>.</summary>
            <param name="dimensionCount">The number of dimensions.</param>
            <returns>A zeroed <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorN"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dimensionCount"/> is less than 0.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="GetUnitVector" lang="cs" title="The following example shows how to use the GetZeroVector method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="GetUnitVector" lang="vbnet" title="The following example shows how to use the GetZeroVector method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.GetZeroVector(System.Int32)">
            <summary>Creates zeroed <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorN"/>.</summary>
            <param name="dimensionCount">The number of dimensions.</param>
            <returns>A zeroed <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorN"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dimensionCount"/> is less than 0.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="GetZeroVector" lang="cs" title="The following example shows how to use the GetZeroVector method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="GetZeroVector" lang="vbnet" title="The following example shows how to use the GetZeroVector method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Increment">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Increment" lang="cs" title="The following example shows how to use the Increment method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Increment" lang="vbnet" title="The following example shows how to use the Increment method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Magnitude">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Magnitude" lang="cs" title="The following example shows how to use the Magnitude method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Magnitude" lang="vbnet" title="The following example shows how to use the Magnitude method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.MaximumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Maximum" lang="cs" title="The following example shows how to use the Maximum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Maximum" lang="vbnet" title="The following example shows how to use the Maximum method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.MinimumIndex">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="MinimumIndex" lang="cs" title="The following example shows how to use the MinimumIndex method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="MinimumIndex" lang="vbnet" title="The following example shows how to use the MinimumIndex method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.MultiplySafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Multiply(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="MultiplyDouble" lang="cs" title="The following example shows how to use the Multiply method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="MultiplyDouble" lang="vbnet" title="The following example shows how to use the Multiply method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Negate">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Negate" lang="cs" title="The following example shows how to use the Negate method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Negate" lang="vbnet" title="The following example shows how to use the Negate method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Normalize">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Normalize" lang="cs" title="The following example shows how to use the Normalize method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Normalize" lang="vbnet" title="The following example shows how to use the Normalize method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Product">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Product" lang="cs" title="The following example shows how to use the Product method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Product" lang="vbnet" title="The following example shows how to use the Product method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Sum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Sum" lang="cs" title="The following example shows how to use the Sum method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Sum" lang="vbnet" title="The following example shows how to use the Sum method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.SubtractSafe(DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Subtract(System.Double)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="SubtractDouble" lang="cs" title="The following example shows how to use the Subtract method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="SubtractDouble" lang="vbnet" title="The following example shows how to use the Subtract method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.Swap(DmFramework.Generics.DataStructures.Mathematical.VectorN)">
            <summary>Swap all the values with another <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/> to swap value with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of <paramref name="vector"/> does not equal the <see cref="P:DmFramework.Generics.DataStructures.Mathematical.IVector`1.DimensionCount"/> of the current instance.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Swap" lang="cs" title="The following example shows how to use the Swap method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Swap" lang="vbnet" title="The following example shows how to use the Swap method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.ToArray">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="ToArray" lang="cs" title="The following example shows how to use the ToArray method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="ToArray" lang="vbnet" title="The following example shows how to use the ToArray method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.ToMatrix">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="ToMatrix" lang="cs" title="The following example shows how to use the ToMatrix method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="ToMatrix" lang="vbnet" title="The following example shows how to use the ToMatrix method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.op_Implicit(DmFramework.Generics.DataStructures.Mathematical.VectorN)~DmFramework.Generics.DataStructures.Mathematical.Matrix">
            <summary>Copies the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1"/> to a new <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/>.</summary>
            <param name="vector">The <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1"/> to convert.</param>
            <returns>A <see cref="T:DmFramework.Generics.DataStructures.Mathematical.Matrix"/> array containing copies of the elements of the <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vector"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.Operators.cs" region="OperatorToMatrix" lang="cs" title="The following example shows how to use the convert to matrix operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.Operators.vb" region="OperatorToMatrix" lang="vbnet" title="The following example shows how to use the convert to matrix operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.op_Explicit(DmFramework.Generics.DataStructures.General.ObjectMatrix{System.Double})~DmFramework.Generics.DataStructures.Mathematical.VectorN">
            <summary>Copies the elements of the <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/> to a new <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1"/>.</summary>
            <param name="matrix">The <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/> to convert.</param>
            <returns>A <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1"/> array containing copies of the elements of the <see cref="T:DmFramework.Generics.DataStructures.General.ObjectMatrix`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="matrix"/> has more than 1 column.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.Operators.cs" region="OperatorFromMatrix" lang="cs" title="The following example shows how to use the convert from matrix operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.Operators.vb" region="OperatorFromMatrix" lang="vbnet" title="The following example shows how to use the convert from matrix operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.op_GreaterThan(DmFramework.Generics.DataStructures.Mathematical.VectorN,DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1"/> is greater than another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorBase`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is greater than <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.Operators.cs" region="OperatorGreaterThan" lang="cs" title="The following example shows how to use the &gt; operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.Operators.vb" region="OperatorGreaterThan" lang="vbnet" title="The following example shows how to use the &gt; operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.op_LessThan(DmFramework.Generics.DataStructures.Mathematical.VectorN,DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorN"/> is less than another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is less than <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.Operators.cs" region="OperatorLessThan" lang="cs" title="The following example shows how to use the &lt; operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.Operators.vb" region="OperatorLessThan" lang="vbnet" title="The following example shows how to use the &lt; operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.op_GreaterThanOrEqual(DmFramework.Generics.DataStructures.Mathematical.VectorN,DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorN"/> is greater than or equal to another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is greater than or equal to <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.Operators.cs" region="OperatorGreaterThanOrEqualTo" lang="cs" title="The following example shows how to use the &gt;= operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.Operators.vb" region="OperatorGreaterThanOrEqualTo" lang="vbnet" title="The following example shows how to use the &gt;= operator."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Mathematical.VectorN.op_LessThanOrEqual(DmFramework.Generics.DataStructures.Mathematical.VectorN,DmFramework.Generics.DataStructures.Mathematical.IVector{System.Double})">
            <summary>Determines whether one specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.VectorN"/> is less than or equal to another specified <see cref="T:DmFramework.Generics.DataStructures.Mathematical.IVector`1"/>.</summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns><see langword="true"/> if the <paramref name="left"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/> is less than or equal to <paramref name="right"/>s <see cref="M:DmFramework.Generics.DataStructures.Mathematical.IVector`1.Magnitude"/>; otherwise, <see langword="false"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="left"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception> 
             <exception cref="T:System.ArgumentNullException"><paramref name="right"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.Operators.cs" region="OperatorLessThanOrEqualTo" lang="cs" title="The following example shows how to use the &lt;= operator."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.Operators.vb" region="OperatorLessThanOrEqualTo" lang="vbnet" title="The following example shows how to use the &lt;= operator."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Mathematical.VectorN.Item(System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Mathematical\VectorNExamples.cs" region="Index" lang="cs" title="The following example shows how to use the index property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Mathematical\VectorNExamples.vb" region="Index" lang="vbnet" title="The following example shows how to use the index property."/>
            </example> 
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Queues.CircularQueue`1">
            <summary>An implementation of a Circular Queue.</summary>
            <typeparam name="T">The type of the elements in the <see cref="T:DmFramework.Generics.DataStructures.Queues.CircularQueue`1"/>.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Queues.IQueue`1">
            <summary>A queue interface.</summary>
            <typeparam name="T">The type of the elements in the queue.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.IQueue`1.Enqueue(`0)">
            <summary>Enqueues the item at the back of the queue.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.IQueue`1.Dequeue">
            <summary>Dequeues the item at the front of the queue.</summary>
            <returns>The item at the front of the queue.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.Queues.Deque`1"/> is empty.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.IQueue`1.Peek">
            <summary>Peeks at the item in the front of the queue, without removing it.</summary>
            <returns>The item at the front of the queue.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.Queues.Deque`1"/> is empty.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.#ctor(System.Int32)">
            <param name="capacity">The initial capacity of the list.</param>
            <exception cref="T:System.ArgumentException"><paramref name="capacity"/> is less than 1.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Enqueue(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="Enqueue" lang="cs" title="The following example shows how to use the Enqueue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="Enqueue" lang="vbnet" title="The following example shows how to use the Enqueue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.EnqueueItem(`0)">
            <summary>Enqueues the item.</summary>
            <param name="item">The item to enqueue.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Enqueue(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Dequeue">
            <summary>Dequeues the item at the front of the queue.</summary>
            <returns>The item at the front of the queue.</returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="Dequeue" lang="cs" title="The following example shows how to use the Dequeue method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="Dequeue" lang="vbnet" title="The following example shows how to use the Dequeue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.DequeueItem">
            <summary>Dequeues the item.</summary>
            <returns>The item at the front of the queue.</returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Dequeue"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Peek">
            <summary>Peeks at the item in the front of the queue, without removing it.</summary>
            <returns>The item at the front of the queue.</returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="Peek" lang="cs" title="The following example shows how to use the Peek method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="Peek" lang="vbnet" title="The following example shows how to use the Peek method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Clear">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear property."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.ClearItems">
            <summary>Clears all the objects in this instance.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Contains(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Remove(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="Remove" lang="cs" title="The following example shows how to use the Remove method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="Remove" lang="vbnet" title="The following example shows how to use the Remove method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.RemoveItem(`0)">
            <summary>Removes the item.</summary>
            <param name="item">The item.</param>
            <returns>An indication of whether the item was found, and removed.</returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Remove(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.IsEmpty">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="IsEmpty" lang="cs" title="The following example shows how to use the IsEmpty property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="IsEmpty" lang="vbnet" title="The following example shows how to use the IsEmpty property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.IsFull">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="IsFull" lang="cs" title="The following example shows how to use the IsFull property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="IsFull" lang="vbnet" title="The following example shows how to use the IsFull property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Count">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.IsReadOnly">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.CircularQueue`1.Capacity">
            <summary>Gets the capacity.</summary>
            <value>The capacity.</value>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\CircularQueueExamples.cs" region="Capacity" lang="cs" title="The following example shows how to use the Capacity property."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\CircularQueueExamples.vb" region="Capacity" lang="vbnet" title="The following example shows how to use the Capacity property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Queues.ClassicPriorityQueue`1">
            <summary></summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2">
            <summary>An implementation of a Priority Queue (can be <see cref="F:DmFramework.Generics.DataStructures.Queues.PriorityQueueType.Minimum"/> or <see cref="F:DmFramework.Generics.DataStructures.Queues.PriorityQueueType.Maximum"/>).</summary>
            <typeparam name="TPriority">The type of the priority in the <see cref="T:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2"/>.</typeparam>
            <typeparam name="TValue">The type of the elements in the <see cref="T:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2"/>.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.#ctor(DmFramework.Generics.DataStructures.Queues.PriorityQueueType)">
            <param name="queueType">Type of the queue.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.#ctor(DmFramework.Generics.DataStructures.Queues.PriorityQueueType,System.Collections.Generic.IComparer{`1})">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.#ctor(DmFramework.Generics.DataStructures.Queues.PriorityQueueType,System.Comparison{`1})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2"/> class.</summary>
            <param name="queueType">Type of the queue.</param>
            <param name="comparison">The comparison.</param>
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Enqueue(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="Enqueue" lang="cs" title="The following example shows how to use the Enqueue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="Enqueue" lang="vbnet" title="The following example shows how to use the Enqueue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Enqueue(`0,`1)">
            <summary>Enqueues the specified item.</summary>
            <param name="item">The item.</param>
            <param name="priority">The priority.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="EnqueuePriority" lang="cs" title="The following example shows how to use the Enqueue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="EnqueuePriority" lang="vbnet" title="The following example shows how to use the Enqueue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Dequeue">
            <summary>Dequeues the item at the front of the queue.</summary>
            <returns>The item at the front of the queue.</returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="Dequeue" lang="cs" title="The following example shows how to use the Dequeue method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="Dequeue" lang="vbnet" title="The following example shows how to use the Dequeue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Peek">
            <summary>Peeks at the item in the front of the queue, without removing it.</summary>
            <returns>The item at the front of the queue.</returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="Peek" lang="cs" title="The following example shows how to use the Peek method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="Peek" lang="vbnet" title="The following example shows how to use the Peek method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Peek(`1@)">
            <summary>Peeks at the item in the front of the queue, without removing it.</summary>
            <param name="priority">The priority of the item.</param>
            <returns>The item at the front of the queue.</returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="PeekPriority" lang="cs" title="The following example shows how to use the Peek method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="PeekPriority" lang="vbnet" title="The following example shows how to use the Peek method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Contains(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.CopyTo(`0[],System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Add(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Add(`0,`1)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="priority">The priority of the item.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="AddPriority" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="AddPriority" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.GetKeyEnumerator">
            <summary>Returns an enumerator that iterates through the keys in the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the keys in the collection.</returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="GetKeyEnumerator" lang="cs" title="The following example shows how to use the GetKeyEnumerator method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="GetKeyEnumerator" lang="vbnet" title="The following example shows how to use the GetKeyEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Clear">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Dequeue(`1@)">
            <summary>Dequeues the item from the head of the queue.</summary>
            <param name="priority">The priority of the item to dequeue.</param>
            <returns>The item at the head of the queue.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2"/> is empty.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="DequeueWithPriority" lang="cs" title="The following example shows how to use the Dequeue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="DequeueWithPriority" lang="vbnet" title="The following example shows how to use the Dequeue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.DequeueItem(`1@)">
            <summary>Dequeues the item at the front of the queue.</summary>
            <returns>The item at the front of the queue.</returns>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Dequeue"/> or <see cref="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Dequeue(`1@)"/> methods.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Remove(`0,`1@)">
            <summary>Removes the first occurrence of the specified item from the property queue.</summary>
            <param name="item">The item to remove.</param>
            <param name="priority">The priority associated with the item.</param>
            <returns><c>true</c> if the item exists in the <see cref="T:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2"/> and has been removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.RemoveItem(`0,`1@)">
            <summary>Removes the item.</summary>
            <param name="item">The item to remove</param>
            <param name="priority">The priority of the item that was removed.</param>
            <returns>An indication of whether the item was found, and removed.</returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Remove(`0,`1@)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.RemovePriorityGroup(`1)">
            <summary>Removes the items with the specified priority.</summary>
            <param name="priority">The priority.</param>
            <returns><c>true</c> if the priority exists in the <see cref="T:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2"/> and has been removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.RemoveItems(`1)">
            <summary>Removes the items from the collection with the specified priority.</summary>
            <param name="priority">The priority to search for.</param>
            <returns>An indication of whether items were found having the specified priority.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.GetPriorityGroup(`1)">
            <summary>Removes the items with the specified priority.</summary>
            <param name="priority">The priority.</param>
            <returns>The items with the specified priority.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.AddPriorityGroup(System.Collections.Generic.IList{`0},`1)">
            <summary>Adds the specified items to the priority queue with the specified priority.</summary>
            <param name="items">The items.</param>
            <param name="priority">The priority.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.AddPriorityGroupItem(System.Collections.Generic.IList{`0},`1)">
            <summary>Adds the specified items to the priority queue with the specified priority.</summary>
            <param name="items">The items.</param>
            <param name="priority">The priority.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.AddPriorityGroup(System.Collections.Generic.IList{`0},`1)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.AddItem(`0,`1)">
            <summary>Adds the item to the queue.</summary>
            <param name="item">The item to add.</param>
            <param name="priority">The priority of the item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Add(`0,`1)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.ClearItems">
            <summary>Clears all the objects in this instance.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.CheckTreeNotEmpty">
            <summary>Checks if the list is not empty, and if it is, throw an exception.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.GetNextItem">
            <summary>Gets the next item.</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.IsReadOnly">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.Count">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2.DefaultPriority">
            <summary>Gets or sets the default priority.</summary>
            <value>The default priority.</value>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.ClassicPriorityQueue`1.#ctor(DmFramework.Generics.DataStructures.Queues.PriorityQueueType)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Queues.ClassicPriorityQueue`1"/> class.</summary>
            <param name="queueType">Type of the queue.</param>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\PriorityQueueExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\PriorityQueueExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Queues.Deque`1">
            <summary>A data structure much like a queue, except that you can enqueue and dequeue to both the head and the tail.</summary>
            <typeparam name="T">The type of the elements in the <see cref="T:DmFramework.Generics.DataStructures.Queues.Deque`1"/>.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Queues.IDeque`1">
            <summary>An interface for a deque</summary>
            <typeparam name="T">The type of the elements in the deque.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.IDeque`1.DequeueHead">
            <summary>Dequeues the head.</summary>
            <returns>The head of the deque.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.Queues.IDeque`1"/> is empty.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.IDeque`1.DequeueTail">
            <summary>Dequeues the tail.</summary>
            <returns>The tail of the deque.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.Queues.IDeque`1"/> is empty.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.IDeque`1.EnqueueHead(`0)">
            <summary>Enqueues the head.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.IDeque`1.EnqueueTail(`0)">
            <summary>Enqueues the tail.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.IDeque`1.Head">
            <summary>Gets the head.</summary>
            <value>The head.</value>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.Queues.IDeque`1"/> is empty.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.IDeque`1.Tail">
            <summary>Gets the tail.</summary>
            <value>The tail.</value>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.Queues.IDeque`1"/> is empty.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.#ctor">
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="Constructor" lang="cs" title="The following example shows how to use the default constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="Constructor" lang="vbnet" title="The following example shows how to use the default constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <param name="collection">A collection implementing the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="ConstructorCollection" lang="cs" title="The following example shows how to use the collection constructor."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="ConstructorCollection" lang="vbnet" title="The following example shows how to use the collection constructor."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.EnqueueHead(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="EnqueueHead" lang="cs" title="The following example shows how to use the EnqueueHead method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="EnqueueHead" lang="vbnet" title="The following example shows how to use the EnqueueHead method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.EnqueueHeadItem(`0)">
            <summary>Enqueues the head.</summary>
            <param name="item">The item.</param>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.Deque`1.EnqueueHead(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.DequeueHead">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="DequeueHead" lang="cs" title="The following example shows how to use the DequeueHead method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="DequeueHead" lang="vbnet" title="The following example shows how to use the DequeueHead method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.DequeueHeadItem">
            <summary>Dequeues the head.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.Deque`1.DequeueHead"/> method.
            </remarks>
            <returns>The head of the deque.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.EnqueueTail(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="EnqueueTail" lang="cs" title="The following example shows how to use the EnqueueTail method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="EnqueueTail" lang="vbnet" title="The following example shows how to use the EnqueueTail method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.EnqueueTailItem(`0)">
            <summary>Enqueues the tail.</summary>
            <param name="item">The obj.</param>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.Deque`1.EnqueueTail(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.DequeueTail">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="DequeueTail" lang="cs" title="The following example shows how to use the DequeueTail method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="DequeueTail" lang="vbnet" title="The following example shows how to use the DequeueTail method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.DequeueTailItem">
            <summary>Dequeues the tail item.</summary>
            <returns>The item that was dequeued.</returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.Deque`1.DequeueTail"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.Contains(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.Clear">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.ClearItems">
            <summary>Clears all the objects in this instance.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Queues.Deque`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.Deque`1.Head">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="Head" lang="cs" title="The following example shows how to use the Head property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="Head" lang="vbnet" title="The following example shows how to use the Head property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.Deque`1.Tail">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="Tail" lang="cs" title="The following example shows how to use the Tail property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="Tail" lang="vbnet" title="The following example shows how to use the Tail property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.Deque`1.Count">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.Deque`1.IsEmpty">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="IsEmpty" lang="cs" title="The following example shows how to use the IsEmpty property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="IsEmpty" lang="vbnet" title="The following example shows how to use the IsEmpty property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Queues.Deque`1.IsReadOnly">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Queues\DequeExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Queues\DequeExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.Queues.CircularQueue`1"/>.</summary>
            <typeparam name="T">The type of item to contain in the queue.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.EnqueueItem(`0)">
            <summary>Enqueues the item.</summary>
            <param name="item">The item to enqueue.</param>
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.DequeueItem">
            <summary>Dequeues the item.</summary>
            <returns>The item at the front of the queue.</returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the Dequeue method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.RemoveItem(`0)">
            <summary>Removes the item.</summary>
            <param name="item">The item.</param>
            <returns>
            An indication of whether the item was found, and removed.
            </returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the Remove method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservableCircularQueue`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.Queues.Deque`1"/> data structure.</summary>
            <typeparam name="T">The type of item to add to the deque.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.DequeueHeadItem">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.DequeueTailItem">
            <summary>Dequeues the tail item.</summary>
            <returns>The item that was dequeued.</returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the DequeueTail method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.EnqueueTailItem(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.EnqueueHeadItem(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservableDeque`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2"/>.</summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TPriority">The type of the priority.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.AddItem(`0,`1)">
            <summary>Adds the item to the queue.</summary>
            <param name="item">The item to add.</param>
            <param name="priority">The priority of the item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the Add(T,Int32) method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.RemoveItem(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.RemoveItems(`1)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.DequeueItem(`1@)">
            <summary>Dequeues the item at the front of the queue.</summary>
            <param name="priority"></param>
            <returns>The item at the front of the queue.</returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the Dequeue() or Dequeue(out Int32) methods.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.AddPriorityGroupItem(System.Collections.Generic.IList{`0},`1)">
            <summary>Adds the specified items to the priority queue with the specified priority.</summary>
            <param name="items">The items.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.#ctor(DmFramework.Generics.DataStructures.Queues.PriorityQueueType)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Queues.Observable.ObservablePriorityQueue`2.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Queues.PriorityQueueType">
            <summary>Specifies the Priority Queue type (min or max).</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Queues.PriorityQueueType.Minimum">
            <summary>Specify a Minimum <see cref="T:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2"/>.</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Queues.PriorityQueueType.Maximum">
            <summary>Specify a Maximum <see cref="T:DmFramework.Generics.DataStructures.Queues.PriorityQueue`2"/>.</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTree`2">
            <summary>An implementation of a Binary Search Tree data structure.</summary>
            <typeparam name="TKey">The type of the keys in the tree.</typeparam>
            <typeparam name="TValue">The type of the values in the tree.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2">
            <summary>A base class for all binary trees that use an algorithm to speed access of nodes.</summary>
            <typeparam name="TKey">The type of the keys in the tree.</typeparam>
            <typeparam name="TValue">The type of the values in the tree.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1">
            <summary>A base class for Binary Search Trees that store a single value in each node.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.ISearchTree`1">
            <summary>An interface for Search Trees that mimic a dictionary.</summary>
            <typeparam name="T">The type of element to hold in the tree.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.ISearchTree`1.DepthFirstTraversal(DmFramework.Generics.Patterns.Visitor.OrderedVisitor{`0})">
            <summary>Performs a depth first traversal on the search tree.</summary>
            <param name="visitor">The visitor to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="DepthFirstTraversal" lang="cs" title="The following example shows how to use the DepthFirstTraversal method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="DepthFirstTraversal" lang="vbnet" title="The following example shows how to use the DepthFirstTraversal method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.ISearchTree`1.GetOrderedEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="GetOrderedEnumerator" lang="cs" title="The following example shows how to use the GetOrderedEnumerator method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="GetOrderedEnumerator" lang="vbnet" title="The following example shows how to use the GetOrderedEnumerator method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.ISearchTree`1.Maximum">
            <summary>Gets the largest item in the tree.</summary>
            <value>The largest item in the tree.</value>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.Trees.ISearchTree`1"/> is empty.</exception>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.ISearchTree`1.Minimum">
            <summary>Gets the smallest item in the tree.</summary>
            <value>The smallest item in the tree.</value>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.Trees.ISearchTree`1"/> is empty.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1"/> class.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1"/> class.</summary>
            <param name="comparer">The comparer to use when comparing items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.#ctor(System.Comparison{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2"/> class.</summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.FindNode(`0)">
            <summary>Finds the node containing the specified data key.</summary>
            <param name="item">The item.</param>
            <returns>
            The node with the specified key if found.  If the key is not in the tree, this method returns null.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.FindNode``1(``0,DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase{`0}.CustomComparison{``0})">
            <summary>Finds the node that matches the custom delegate.</summary>
            <typeparam name="TSearch">The type of the search.</typeparam>
            <param name="value">The value.</param>
            <param name="customComparison">The custom comparison.</param>
            <returns>The item if  found, else null.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.RemoveItem(`0)">
            <summary>Removes the item from the tree.</summary>
            <param name="item">The item to remove.</param>
            <returns>An indication of whether the item has been removed from the tree.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.AddItem(`0)">
            <summary>Adds the item.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.FindMaximumNode">
            <summary>Find the maximum node.</summary>
            <returns>The maximum node.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.FindMinimumNode">
            <summary>Find the minimum node.</summary>
            <returns>The minimum node.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.FindMaximumNode(DmFramework.Generics.DataStructures.Trees.BinaryTree{`0})">
            <summary>Finds the maximum node.</summary>
            <param name="startNode">The start node.</param>
            <returns>The maximum node below this node.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.FindMinimumNode(DmFramework.Generics.DataStructures.Trees.BinaryTree{`0})">
            <summary>Finds the minimum node.</summary>
            <param name="startNode">The start node.</param>
            <returns>The minimum node below this node.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.VisitNode(DmFramework.Generics.DataStructures.Trees.BinaryTree{`0},DmFramework.Generics.Patterns.Visitor.OrderedVisitor{`0})">
            <summary>Visits the node in an in-order fashion.</summary>
            <param name="node">The node.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.DepthFirstTraversal(DmFramework.Generics.Patterns.Visitor.OrderedVisitor{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.GetOrderedEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.Clear">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Clear" lang="cs" title="The following example shows how to use the Clear method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Clear" lang="vbnet" title="The following example shows how to use the Clear method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.ClearItems">
            <summary>Clears all the objects in this instance.</summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="GetEnumerator" lang="cs" title="The following example shows how to use the GetEnumerator method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="GetEnumerator" lang="vbnet" title="The following example shows how to use the GetEnumerator method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.Add(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="AddKeyValuePair" lang="cs" title="The following example shows how to use the AddKeyValuePair method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="AddKeyValuePair" lang="vbnet" title="The following example shows how to use the AddKeyValuePair method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.Contains(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="CopyTo" lang="cs" title="The following example shows how to use the CopyTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="CopyTo" lang="vbnet" title="The following example shows how to use the CopyTo method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.Comparer">
            <summary>Gets the comparer.</summary>
            <value>The comparer.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.Tree">
            <summary>Gets or sets the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinaryTree`1"/> for this <see cref="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2"/>.</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.Minimum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Minimum" lang="cs" title="The following example shows how to use the Minimum property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Minimum" lang="vbnet" title="The following example shows how to use the Minimum property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.Maximum">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Maximum" lang="cs" title="The following example shows how to use the Maximum property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Maximum" lang="vbnet" title="The following example shows how to use the Maximum property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.IsEmpty">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="IsEmpty" lang="cs" title="The following example shows how to use the IsEmpty property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="IsEmpty" lang="vbnet" title="The following example shows how to use the IsEmpty property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.Count">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Count" lang="cs" title="The following example shows how to use the Count property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Count" lang="vbnet" title="The following example shows how to use the Count property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.IsReadOnly">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="IsReadOnly" lang="cs" title="The following example shows how to use the IsReadOnly property."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="IsReadOnly" lang="vbnet" title="The following example shows how to use the IsReadOnly property."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`1.CustomComparison`1">
            <summary>A custom comparison between some search value and the type of item that is kept in the tree.</summary>
            <typeparam name="TSearch">The type of the search.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.ISearchTreeDictionary`2">
            <summary>An interface for Search Trees that mimic a dictionary.</summary>
            <typeparam name="TKey">The type of the keys in the <see cref="T:DmFramework.Generics.DataStructures.Trees.ISearchTreeDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <see cref="T:DmFramework.Generics.DataStructures.Trees.ISearchTreeDictionary`2"/>.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2"/> class.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2"/> class.</summary>
            <param name="comparer">The comparer to use when comparing items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.#ctor(System.Comparison{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2"/> class.</summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.FindNode(`0)">
            <summary>Finds the node containing the specified data key.</summary>
            <param name="key">The key to search for.</param>
            <returns>The node with the specified key if found.  If the key is not in the tree, this method returns null.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.ManipulateKeys(System.Func{`0,`0})">
            <summary>Manipulates the keys.</summary>
            <param name="manipulator">The manipulator.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.Remove(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Remove" lang="cs" title="The following example shows how to use the Remove method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Remove" lang="vbnet" title="The following example shows how to use the Remove method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.Add(`0,`1)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Add" lang="cs" title="The following example shows how to use the Add method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Add" lang="vbnet" title="The following example shows how to use the Add method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.ContainsKey(`0)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="ContainsKey" lang="cs" title="The following example shows how to use the ContainsKey method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="ContainsKey" lang="vbnet" title="The following example shows how to use the ContainsKey method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.TryGetValue(`0,`1@)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="TryGetValue" lang="cs" title="The following example shows how to use the TryGetValue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="TryGetValue" lang="vbnet" title="The following example shows how to use the TryGetValue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.Keys">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value></value>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Keys" lang="cs" title="The following example shows how to use the Keys property."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Keys" lang="vbnet" title="The following example shows how to use the Keys property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.Values">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value></value>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Values" lang="cs" title="The following example shows how to use the Values property."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Values" lang="vbnet" title="The following example shows how to use the Values property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinarySearchTreeBase`2.Item(`0)">
            <summary>Gets or sets the value with the specified key.</summary>
            <value>The key of the item to set or get.</value>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTree`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTree`2.#ctor(System.Comparison{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTree`2.FindNode(`0,DmFramework.Generics.DataStructures.Trees.BinaryTree{System.Collections.Generic.KeyValuePair{`0,`1}}@)">
            <summary>Finds the node containing the specified data item.</summary>
            <param name="key">The key.</param>
            <param name="parent">The parent node of the item found.</param>
            <returns>The node in the tree with the specified key if found, otherwise null.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTree`2.FindMaximumNode(DmFramework.Generics.DataStructures.Trees.BinaryTree{System.Collections.Generic.KeyValuePair{`0,`1}},DmFramework.Generics.DataStructures.Trees.BinaryTree{System.Collections.Generic.KeyValuePair{`0,`1}}@)">
            <summary>Finds the maximum node.</summary>
            <param name="startNode">The start node.</param>
            <param name="parent">The parent of the node found.</param>
            <returns>The maximum node underneath the node specified.  If the node specified is a leaf node, it is returned.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTree`2.AddItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinarySearchTree`2.RemoveItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BinaryTree`1">
            <summary>An implementation of a Binary Tree data structure.</summary>
            <typeparam name="T">The type of elements in the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinaryTree`1"/>.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.ITree`1">
            <summary>An interface for the tree data structure</summary>
            <typeparam name="T">The type of elements in the tree.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.ITree`1.Add(DmFramework.Generics.DataStructures.Trees.ITree{`0})">
            <summary>Adds the specified child to the tree.</summary>
            <param name="child">The child to add..</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.ITree`1.GetChild(System.Int32)">
            <summary>Gets the child at the specified index.</summary>
            <param name="index">The index.</param>
            <returns>The child at the specified index.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.ITree`1.Remove(DmFramework.Generics.DataStructures.Trees.ITree{`0})">
            <summary>Removes the specified child.</summary>
            <param name="child">The child.</param>
            <returns>An indication of whether the child was found (and removed) from this tree.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.ITree`1.FindNode(System.Predicate{`0})">
            <summary>Finds the node for which the given predicate holds true.</summary>
            <param name="condition">The condition to test on the data item.</param>
            <returns>The fist node that matches the condition if found, otherwise null.</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.ITree`1.Data">
            <summary>Gets the data held in this node.</summary>
            <value>The data.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.ITree`1.Degree">
            <summary>Gets the degree of this node.</summary>
            <value>The degree of this node.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.ITree`1.Height">
            <summary>Gets the height of this tree.</summary>
            <value>The height of this tree.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.ITree`1.IsLeafNode">
            <summary>Gets a value indicating whether this instance is leaf node.</summary>
            <value>
            	<c>true</c> if this instance is leaf node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.ITree`1.Parent">
            <summary>Gets the parent of the current node.</summary>
            <value>The parent of the current node.</value>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.#ctor(`0)">
            <param name="data">The data contained in this node.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.#ctor(`0,`0,`0)">
            <param name="data">The data.</param>
            <param name="left">The data of the left subtree.</param>
            <param name="right">The data of the right subtree.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.#ctor(`0,DmFramework.Generics.DataStructures.Trees.BinaryTree{`0},DmFramework.Generics.DataStructures.Trees.BinaryTree{`0})">
            <param name="data">The data contained in this node.</param>
            <param name="left">The left subtree.</param>
            <param name="right">The right subtree.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.#ctor(`0,DmFramework.Generics.DataStructures.Trees.BinaryTree{`0},DmFramework.Generics.DataStructures.Trees.BinaryTree{`0},System.Boolean)">
            <param name="data">The data contained in this node.</param>
            <param name="left">The left subtree.</param>
            <param name="right">The right subtree.</param>
            <param name="validateData"><see langword="true"/> to validate <paramref name="data"/>; otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Remove(DmFramework.Generics.DataStructures.Trees.BinaryTree{`0})">
            <summary>Removes the specified child.</summary>
            <param name="child">The child.</param>
            <returns>A value indicating whether the child was found (and removed) from this tree.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.DmFramework#Generics#DataStructures#Trees#ITree{T}#Add(DmFramework.Generics.DataStructures.Trees.ITree{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.DmFramework#Generics#DataStructures#Trees#ITree{T}#GetChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.DmFramework#Generics#DataStructures#Trees#ITree{T}#Remove(DmFramework.Generics.DataStructures.Trees.ITree{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.DmFramework#Generics#DataStructures#Trees#ITree{T}#FindNode(System.Predicate{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.FindNode(System.Predicate{`0})">
            <summary>
            Finds the node with the specified condition.  If a node is not found matching
            the specified condition, null is returned.
            </summary>
            <param name="condition">The condition to test.</param>
            <returns>The first node that matches the condition supplied.  If a node is not found, null is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.GetChild(System.Int32)">
            <summary>Gets the child at the specified index.</summary>
            <param name="index">The index of the child in question.</param>
            <returns>The child at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> does not equal 0 or 1.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.DepthFirstTraversal(DmFramework.Generics.Patterns.Visitor.OrderedVisitor{`0})">
            <summary>Performs a depth first traversal on this tree with the specified visitor.</summary>
            <param name="orderedVisitor">The ordered visitor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="orderedVisitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.BreadthFirstTraversal(DmFramework.Generics.Patterns.Visitor.IVisitor{`0})">
            <summary>Performs a breadth first traversal on this tree with the specified visitor.</summary>
            <param name="visitor">The visitor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.RemoveLeft">
            <summary>Removes the left child.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.RemoveRight">
            <summary>Removes the left child.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Add(DmFramework.Generics.DataStructures.Trees.BinaryTree{`0})">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="subtree">The subtree.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DmFramework.Generics.DataStructures.Trees.BinaryTree`1"/> is full.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="subtree"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.AddItem(DmFramework.Generics.DataStructures.Trees.BinaryTree{`0})">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="subtree">The subtree.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.FindMaximumChildHeight">
            <summary>Finds the maximum height between the child nodes.</summary>
            <returns>The maximum height of the tree between all paths from this node and all leaf nodes.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.ToString">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.IsFull">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Count">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.DmFramework#Generics#DataStructures#Trees#ITree{T}#Parent">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Parent">
            <summary>Gets the parent of the current node..</summary>
            <value>The parent of the current node.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Left">
            <summary>Gets or sets the left subtree.</summary>
            <value>The left subtree.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Right">
            <summary>Gets or sets the right subtree.</summary>
            <value>The right subtree.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Data">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Degree">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Height">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.IsLeafNode">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.Item(System.Int32)">
            <summary>Gets the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinaryTree`1"/> at the specified index.</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BinaryTree`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2">
            <summary>
            BTreeAlgorithm is the core BTree class wrapper and implements BTree Collection interface.
            B-Tree data structure and algorithm are implemented in <see cref="!:BTreeAlgorithm.TreeNode">"TreeNode"</see> class
            </summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.CurrentItem">
            <summary>This holds the Current Item Address (Current Node and Current Slot index)</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.Root">
            <summary>This holds the Root Node (parentmost) of the TreeNodes</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.#ctor(System.Byte)">
            <summary>Constructor to use if you want to provide the number of slots per node of the tree</summary>
            <param name="SlotLen">number of slots per node</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.#ctor">
            <summary>Constructor to use if you want to use default number of slots per node (6)</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor to use if you want to provide your own Comparer object that defines
            how your records will be sorted/arranged
            </summary>
            <param name="Comparer">IComparer implementation that defines how records will be sorted</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.#ctor(System.Byte,System.Collections.Generic.IComparer{`0})">
            <summary>Constructor to use if you want to provide number of slots per node and your comparer object</summary>
            <param name="SlotLen">Number of slots per node</param>
            <param name="Comparer">compare object defining how records will be sorted</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.Clone">
            <summary>Returns a shallow copy of this BTreeAlgorithm</summary>
            <returns>Value of type BTreeAlgorithm</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.Clear">
            <summary>Set to null all collected items and their internal buffers.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.Search(`0)">
            <summary>
            Search btree for a certain record (Item). If current record is equal
            to Item then true will be returned without doing any search operation.
            This minimizes unnecessary BTree traversal. If Item is found, it becomes the current item.
            </summary>
            <param name="Key">record to search for</param>
            <returns>Returns true if found else, false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.Search(`0,System.Boolean)">
            <summary>
            Search btree for a certain record (Item). If current record is equal
            to Item then true will be returned without doing any search operation.
            This minimizes unnecessary BTree traversal. If Item is found, it becomes the current item.
            </summary>
            <param name="Key">record to search for</param>
            <param name="GoToFirstInstance">if true, will make first instance of duplicated keys the current record</param>
            <returns>Returns true if found else, false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.Remove(`0)">
            <summary>Remove "Item" from the tree. Doesn't throw exception if "Item" is not found</summary>
            <param name="Key">Record to remove</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.MoveFirst">
            <summary>Go to 1st item of the tree</summary>
            <returns>returns true if successful, else false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.MoveNext">
            <summary>Go to next item of the tree</summary>
            <returns>Returns true if successful, else, false. Also returns false if Current record is null.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.MovePrevious">
            <summary>Go to previous item of the tree</summary>
            <returns>Returns true if successful, else false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.MoveLast">
            <summary>Go to last item of the tree. If there is no item, returns false.</summary>
            <returns>Returns true if successful, else false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.Add(`0,`1)">
            <summary>
            Insert "Item" to the correct location in the tree. Tree is maintained to be balanced and sorted.
            Add and Delete methods cause Current Record to be invalid (set to null).
            </summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.Remove">
            <summary>Delete the current item from the tree. Tree is maintained to be balanced and sorted.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.SetCurrentItemAddress(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1}.TreeNode,System.Byte)">
            <summary>Utility function to assign/replace current item w/ a new item.</summary>
            <param name="ItemNode">node of the new item</param>
            <param name="ItemIndex">slot index of the new item</param>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.Count">
            <summary>Returns the number of collected items</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.CurrentEntry">
            <summary>Returns current item, null if end of Btree.</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.SlotLength">
            <summary>
            Get: returns the number of slots per node of all "TreeNodes"
            Set: assigns the number of slots per node of "TreeNodes"
            </summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode">
            <summary>
            TreeNode is where the actual B-Tree operation happens. Each object of TreeNode serves
            as the node of B-Tree tree
            </summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.Slots">
            <summary>Slots of this TreeNode</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.Parent">
            <summary>Parent of this TreeNode</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.Children">
            <summary>Children of this TreeNode</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.#ctor(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>
            Protected Constructor. This is used to construct the root node of the tree.
            (has null parent)
            </summary>
            <param name="oBTree"></param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.#ctor(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1}.TreeNode)">
            <summary>
            Constructor expecting ParentTree and ParentNode params.
            This form is invoked from another instance of this class when node 
            splitting occurs. Normally, node split occurs to accomodate new items that
            could not be loaded to the node since the node is already full. 
            Calls <see cref="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.Initialize(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1}.TreeNode)"/> to prepare class variables/objects
            </summary>
            <param name="ParentTree">Parent B-Tree instance</param>
            <param name="ParentNode">Parent Node instance</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.ResetArray``1(``0[],``0)">
            <summary>Reset all elements of the array to Value</summary>
            <param name="Array">Array to reset all elements of</param>
            <param name="Value">Value to assign to each element of the array</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.Initialize(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1}.TreeNode)">
            <summary>Do class variable/object initialization. Usually invoked from this class' constructor.</summary>
            <param name="Btree">Parent BTree</param>
            <param name="ParentObj">Parent Node</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.Promote(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},System.Byte)">
            <summary>
            This gets called when the node's slots are overflowed and break up
            is needed. This does the necessary recursive promotion of the 
            newly born nodes as affected by the break up.<br/>
            Uses caller Btree object's Temporary Slots and Children nodes
            which are accessible via GetTempSlot() and _GetTempParentChildren()
            as storage of Parent and newly born siblings.<br/><br/>
            NOTE: Uses Temporary Slots and Children nodes which are accessible via GetTempSlot() and _GetTempParentChildren() as storage of Parent and newly born siblings.
            </summary>
            <param name="ParentBTree">parent BTree</param>
            <param name="Position">Position of the broken apart node in its parent node's slots</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.FixTheVacatedSlot(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>
            Overwrite the current item with the item from the next or previous slot.
            Attempts to free the TreeNode object by setting Parent, Children and Slots to null.
            </summary>
            <param name="ParentBTree">Parent BTree</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.Add(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},DmFramework.Generics.DataStructures.Trees.BTreeItem{`0,`1})">
            <summary>Recursive Add function. Actual addition of node item happens at the outermost level !</summary>
            <param name="ParentBTree">Parent BTree</param>
            <param name="Item">Item to add to the tree</param>
            <throws>Exception if No Comparer or Mem Alloc err is encountered.</throws>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.Search(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},DmFramework.Generics.DataStructures.Trees.BTreeItem{`0,`1},System.Boolean)">
            <summary>
            Search BTreeAlgorithm for the item pointed to by Item. 
            NOTE: this should be invoked from root node.
            </summary>
            <param name="ParentBTree">Parent BTree</param>
            <param name="Item">Item to search in tree</param>
            <param name="GoToFirstInstance">true tells BTree to go to First Instance of Key, else any key instance matching will match</param>
            <returns>true if item found, else false</returns>
        </member>
        <!-- 对于成员“M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.Remove(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})”忽略有格式错误的 XML 注释 -->
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.Clear(System.Boolean)">
            <summary>Clear the whole tree.</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.MoveFirst(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>Make the first item the current item. This member should be called from Root.</summary>
            <param name="ParentBTree">BTree instance this Node is a part of</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.MoveNext(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>Make the next item in the tree the current item.</summary>
            <param name="ParentBTree">Parent BTree</param>
            <returns>true if successful, else false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.MovePrevious(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>Make previous item in the tree current item.</summary>
            <param name="ParentBTree">Parent BTree</param>
            <returns>true if successful, else false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.MoveLast(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>Make the last item in the tree the current item.</summary>
            <param name="ParentBTree">Parent BTree</param>
            <returns>true if successful, else false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.MoveArrayElements``1(``0[],System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            "Shallow" move elements of an array. 
            "MoveArrayElements" moves a group (Count) of elements of an array from
            source index to destination index.
            </summary>
            <param name="Array">Array whose elements will be moved</param>
            <param name="srcIndex">Source index of the 1st element to move</param>
            <param name="destIndex">Target index of the 1st element to move to</param>
            <param name="Count">Number of elements to move</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.CopyArrayElements``1(``0[],System.UInt16,``0[],System.UInt16,System.UInt16)">
            <summary>"CopyArrayElements" copies elements of an array (Source) to destination array (Destination).</summary>
            <param name="Source">Array to copy elements from</param>
            <param name="srcIndex">Index of the 1st element to copy</param>
            <param name="Destination">Array to copy elements to</param>
            <param name="destIndex">Index of the 1st element to copy to</param>
            <param name="Count">Number of elements to copy</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.ShiftSlots``1(``0[],System.Byte,System.Byte)">
            <summary>
            Skud over one slot all items to the right.
            The 1st element moved will then be vacated ready for an occupant.
            </summary>
            <param name="Slots">"Slots" to skud over its contents</param>
            <param name="Position">1st element index to skud over</param>
            <param name="NoOfOccupiedSlots">Number of occupied slots</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.SetParent(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1}.TreeNode)">
            <summary>Make "NewParent" the parent of this Node.</summary>
            <param name="NewParent">New Parent TreeNode</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.IsFull(System.Byte)">
            <summary>Returns true if slots are all occupied, else false</summary>
            <param name="SlotLength">Number of slots per node</param>
            <returns>true if full, else false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.GetIndexOfNode(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>Returns index of this node relative to parent. </summary>
            <param name="ParentBTree" type="DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm">
            <para></para>
            </param>
            <returns>Index of this node per its parent</returns>
            <remarks>Note: you must call this after you check that there is a parent node.</remarks>
        </member>
        <!-- 对于成员“M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.GetLeftSibling(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})”忽略有格式错误的 XML 注释 -->
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.GetRightSibling(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>Returns right sibling or null if finished traversing right nodes.</summary>
            <param name="ParentBTree">Number of slots per node</param>
            <returns>Right sibling TreeNode reference</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.IsThereVacantSlotInLeft(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},System.Boolean@)">
            <summary>Returns true if a slot is available in left side siblings of this node modified to suit possible unbalanced branch.</summary>
            <param name="ParentBTree">Parent BTree</param>
            <param name="IsUnBalanced">Will be updated to true if this branch is detected to be "unbalanced", else false</param>
            <returns>true if there is a vacant slot, else false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.IsThereVacantSlotInRight(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},System.Boolean@)">
            <summary>Returns true if a slot is available in right side siblings of this node modified to suit possible unbalanced branch.</summary>
            <param name="ParentBTree">Parent BTree</param>
            <param name="IsUnBalanced">Will be updated to true if this branch is detected to be "unbalanced", else false</param>
            <returns>true if there is a vacant slot, else false</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.DistributeToLeft(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},DmFramework.Generics.DataStructures.Trees.BTreeItem{`0,`1})">
            <summary>
            Distribute to left siblings the item if the current slots are  all filled up.
            Used when balancing the nodes' load of the current sub-tree.
            </summary>
            <param name="ParentBTree">Number of slots per node</param>
            <param name="Item">Item to distribute to left sibling node</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.DistributeToRight(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},DmFramework.Generics.DataStructures.Trees.BTreeItem{`0,`1})">
            <summary>
            Distribute to right siblings the item if the current slots are all filled up.
            Used when balancing the nodes' load of the current sub-tree.
            </summary>
            <param name="ParentBTree">Number of slots per node</param>
            <param name="Item">Item to distribute to right sibling</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.PullFromLeft(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>
            Recursively pull item from left side. Modified to process unbalanced branch - 10/31/97.
            Pull an item from the left siblings. Used when this node run out of loaded items and instead of destroying itself, will pull an item from the left siblings to maintain the balanceness of this sub-tree.
            </summary>
            <param name="ParentBTree">Parent BTree</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.PullFromRight(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>
            Recursively pull item from right side. Modified to process unbalanced branch - 10/31/97
            Same as above except that the pull is from the right siblings.
            </summary>
            <param name="ParentBTree">Paren BTree</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.SearchForPullableItem(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1},System.Byte@)">
            <summary>
            Search for a pullable item from sibling nodes of this node. Modified for unbalanced branch's correct detection of pullable item. -10/31/97
            Find a pullable item. Will return true if there is one.
            </summary>
            <param name="SlotLength">Number of slots per node</param>
            <param name="Index">Will be updated of the pullable item's index in the slot</param>
            <returns>true if there is pullable item, else false</returns>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.ItemAddress">
            <summary>A BTreeAlgorithm's item address is composed of the node's address + the item's index in the Slots.</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.ItemAddress.Node">
            <summary>Node Reference (low-level is equivalent to Node Address)</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeNode.ItemAddress.NodeItemIndex">
            <summary>Index of the item in the Node's Slots</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeRootNode">
            <summary>
            The root node class. Encapsulates behavior specific to root nodes. 
            Also, since we support tree reuse, this adds attributes to support reuse.
            </summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeRootNode.#ctor(DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm{`0,`1})">
            <summary>Constructor</summary>
            <param name="ParentTree">Paren BTree</param>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeRootNode.Count">
            <summary>
            Get: returns the number of loaded items in the tree<br/>
            Set: assigns the number of loaded items in the tree
            </summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeAlgorithm`2.TreeRootNode.Clear">
            <summary>Destroy all collected items and shell(slots) excluding the root shell. This renders the btree empty.</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2">
            <summary>
            BTreeDictionary is a SortedDictionary that allows insertion of 
            duplicate Keys and provides Iterator methods to iterate through
            the set of records within the Dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.IBTreeDictionary`2">
            <summary>Extends the Collections.BTreeICollection interface and adds Dictionary related api</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.IBaseCollection`1">
            <summary>Extends the Collections.BTreeICollection interface and adds Dictionary related api</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.IBaseCollection`1.MoveNext">
            <summary>MoveNext makes the next entry the current one</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.IBaseCollection`1.MovePrevious">
            <summary>MovePrevious makes the previous entry the current one</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.IBaseCollection`1.MoveFirst">
            <summary>MoveFirst makes the first entry in the Collection the current one</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.IBaseCollection`1.MoveLast">
            <summary>MoveLast makes the last entry in the Collection the current one</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.IBaseCollection`1.Search(`0)">
            <summary>Search the Collection for existence of ObjectToSearch</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.IBTreeDictionary`2.Remove">
            <summary>Remove currently selected Item</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.IBTreeDictionary`2.Search(`0,System.Boolean)">
            <summary>Search btree for the entry having its key equal to 'Key'</summary>
            <param name="Key">Key of record to search for</param>
            <param name="GoToFirstInstance">if true and Key is duplicated, will make first instance of duplicated 
            keys the current record so one can easily get/traverse all records having the same keys using 'MoveNext' function</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.IBTreeDictionary`2.SortOrder">
            <summary>
            Returns current sort order. Setting to a different sort order will 
            reset BTree. First item according to sort order will be current item.
            </summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.IBTreeDictionary`2.CurrentEntry">
            <summary>Returns the Current entry</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.IBTreeDictionary`2.CurrentKey">
            <summary>Returns the Current entry's key</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.IBTreeDictionary`2.CurrentValue">
            <summary>Returns the Current entry's Value</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor to use if you want to provide your own Comparer object that defines
            how your records will be sorted/arranged
            </summary>
            <param name="Comparer">IComparer implementation that defines how records will be sorted</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.#ctor(System.Byte)">
            <summary>Constructor to use if you want to provide the number of slots per node of the tree</summary>
            <param name="SlotLen">number of slots per node</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.#ctor">
            <summary>Constructor to use if you want to use default number of slots per node (6)</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.#ctor(System.Byte,System.Collections.Generic.IComparer{`0})">
            <summary>Constructor to use if you want to provide number of slots per node and your comparer object</summary>
            <param name="SlotLen">Number of slots per node</param>
            <param name="Comparer">compare object defining how records will be sorted</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.Remove">
            <summary>Delete currently selected entry of BTree</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.Search(`0,System.Boolean)">
            <summary>Search btree for the entry having its key equal to 'Key'</summary>
            <param name="Key">Key of record to search for</param>
            <param name="GoToFirstInstance">if true and Key is duplicated, will make first instance of duplicated 
            keys the current record so one can easily get/traverse all records having the same keys using 'MoveNext' function</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Contains determines whether this collection contains an entry with the specified key.</summary>
            <param name="key">key to look for</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.Add(`0,`1)">
            <summary>
            Add adds an entry with the provided key and value into the BTree.
            Duplicate keys are allowed in BTree unlike in a Dictionary/HashTable
            where key is required to be unique.
            </summary>
            <param name="key">key of item you want to add to the collection</param>
            <param name="value">item you want to add to the collection</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.Remove(`0)">
            <summary>Removes entry with key.</summary>
            <param name="key">key of entry to delete from collection</param>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.Item(`0)">
            <summary>
            BTree indexer. Given a key, will return its value.
            If key is not found, will add a new entry having passed 
            params key and value.
            </summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.SortOrder">
            <summary>
            Returns current sort order. Setting to a different sort order will 
            reset BTree. First item according to sort order will be current item.
            </summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.BTreeEnumerator`1">
            <summary>The B-Tree enumerator</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.BTreeEnumerator`1.#ctor(DmFramework.Generics.DataStructures.Trees.BTreeDictionary{`0,`1})">
            <summary>Constructor. Pass the B-Tree instance you want to enumerate its items/elements on.</summary>
            <param name="BTree">BTree instance items will be enumerated</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.BTreeEnumerator`1.MoveNext">
            <summary>Make the next record current</summary>
            <returns>Returns true if successul, false otherwise</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.BTreeEnumerator`1.Reset">
            <summary>Reset enumerator. You will need to call MoveNext to get to first record.</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.BTreeEnumerator`1.Current">
            <summary>Returns Current record</summary>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException exception if Reset was called without calling MoveNext</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.BTreeEnumeratorValue.#ctor(DmFramework.Generics.DataStructures.Trees.BTreeDictionary{`0,`1})">
            <summary>Constructor. Pass the B-Tree instance you want to enumerate its items/elements on.</summary>
            <param name="BTree">BTree instance items will be enumerated</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.BTreeEnumeratorKey.#ctor(DmFramework.Generics.DataStructures.Trees.BTreeDictionary{`0,`1})">
            <summary>Constructor. Pass the B-Tree instance you want to enumerate its items/elements on.</summary>
            <param name="BTree">BTree instance items will be enumerated</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.BTreeDictionary`2.BTreeEnumeratorDefault.#ctor(DmFramework.Generics.DataStructures.Trees.BTreeDictionary{`0,`1})">
            <summary>Constructor. Pass the B-Tree instance you want to enumerate its items/elements on.</summary>
            <param name="BTree">BTree instance items will be enumerated</param>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BTreeSortOrderType">
            <summary>Traversal/sort order enum</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeSortOrderType.Ascending">
            <summary>Sort order is ascending</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeSortOrderType.Descending">
            <summary>Sort order is descending</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.BTreeChildNodes">
            <summary>Child nodes enumeration</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeChildNodes.LeftChild">
            <summary>Left child</summary>
        </member>
        <member name="F:DmFramework.Generics.DataStructures.Trees.BTreeChildNodes.RightChild">
            <summary>Right child</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.GeneralTree`1">
            <summary>A general tree data structure that can hold any amount of nodes.</summary>
            <typeparam name="T">The type of elements in the <see cref="T:DmFramework.Generics.DataStructures.Trees.GeneralTree`1"/>.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.Sorting.ISortable`1">
            <summary>An interface implemented that can be implemented by sortable collections.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ISortable`1.Sort(DmFramework.Generics.Sorting.ISorter{`0})">
            <summary>Sorts using the specified sorter.</summary>
            <param name="sorter">The sorter to use in the sorting process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sorter"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ISortable`1.Sort(DmFramework.Generics.Sorting.ISorter{`0},DmFramework.Generics.Sorting.SortOrder)">
            <summary>Sorts using the specified sorter.</summary>
            <param name="sorter">The sorter to use in the sorting process.</param>
            <param name="order">The order in which to sort.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sorter"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ISortable`1.Sort(DmFramework.Generics.Sorting.IComparisonSorter{`0},System.Comparison{`0})">
            <summary>Sorts using the specified sorter.</summary>
            <param name="sorter">The sorter to use in the sorting process.</param>
            <param name="comparison">The comparison.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sorter"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ISortable`1.Sort(DmFramework.Generics.Sorting.IComparisonSorter{`0},System.Collections.Generic.IComparer{`0})">
            <summary>Sorts using the specified sorter.</summary>
            <param name="sorter">The sorter to use in the sorting process.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sorter"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.#ctor(`0)">
            <param name="data">The data held in this tree.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.InsertItem(System.Int32,DmFramework.Generics.DataStructures.Trees.GeneralTree{`0})">
            <summary>Inserts the item.</summary>
            <param name="index">The index to insert the item into.</param>
            <param name="item">The item to insert.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Add(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.RemoveItem(`0)">
            <summary>Removes the item form the tree.</summary>
            <param name="item">The item to remove.</param>
            <returns>An indication of whether the item was found, and removed.</returns>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Remove(`0)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.DmFramework#Generics#DataStructures#Trees#ITree{T}#Add(DmFramework.Generics.DataStructures.Trees.ITree{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.DmFramework#Generics#DataStructures#Trees#ITree{T}#GetChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.DmFramework#Generics#DataStructures#Trees#ITree{T}#Remove(DmFramework.Generics.DataStructures.Trees.ITree{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.DmFramework#Generics#DataStructures#Trees#ITree{T}#FindNode(System.Predicate{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.FindNode(System.Predicate{`0})">
            <summary>
            Finds the node with the specified condition.  If a node is not found matching
            the specified condition, null is returned.
            </summary>
            <param name="condition">The condition to test.</param>
            <returns>The first node that matches the condition supplied.  If a node is not found, null is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.GetChild(System.Int32)">
            <summary>Gets the child at the specified index.</summary>
            <param name="index">The index.</param>
            <returns>The child at the specified index.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.GetPath">
            <summary>Gets the path.</summary>
            <returns>The path found to this node.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.GetPath``1(System.Converter{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0},``0})">
            <summary>Gets the path to the specified node.</summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="converter">The converter.</param>
            <returns>A list (of converted) General Trees that form the path to this node from the root.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.DepthFirstTraversal(DmFramework.Generics.Patterns.Visitor.OrderedVisitor{`0})">
            <summary>Performs a depth first traversal on this tree with the specified visitor.</summary>
            <param name="orderedVisitor">The ordered visitor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="orderedVisitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.BreadthFirstTraversal(DmFramework.Generics.Patterns.Visitor.IVisitor{`0})">
            <summary>Performs a breadth first traversal on this tree with the specified visitor.</summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Add(DmFramework.Generics.DataStructures.Trees.GeneralTree{`0})">
            <summary>Adds the child tree to this node.</summary>
            <param name="child">The child tree to add.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Remove(DmFramework.Generics.DataStructures.Trees.GeneralTree{`0})">
            <summary>Removes the specified child node from the tree.</summary>
            <param name="child">The child tree to remove.</param>
            <returns>A value indicating whether the child was found (and removed) from this tree.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.RemoveAt(System.Int32)">
            <summary>Removes the child at the specified index.</summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.RemoveItem(System.Int32,DmFramework.Generics.DataStructures.Trees.GeneralTree{`0})">
            <summary>Removes the item from the tree.</summary>
            <param name="index">The index.</param>
            <param name="item">The item to remove.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.RemoveAt(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.SortAllDescendants(DmFramework.Generics.Sorting.IComparisonSorter{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}},System.Comparison{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}})">
            <summary>Sorts all descendants using the specified sorter.</summary>
            <param name="sorter">The sorter to use in the sorting process.</param>
            <param name="comparison">The comparison.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sorter"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.SortAllDescendants(DmFramework.Generics.Sorting.IComparisonSorter{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}},System.Collections.Generic.IComparer{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}})">
            <summary>Sorts all descendants using the specified sorter.</summary>
            <param name="sorter">The sorter to use in the sorting process.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sorter"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.SortAllDescendants(DmFramework.Generics.Sorting.ISorter{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}},DmFramework.Generics.Sorting.SortOrder)">
            <summary>Sorts all descendants using the specified sorter.</summary>
            <param name="sorter">The sorter to use in the sorting process.</param>
            <param name="order">The order in which to sort.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sorter"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.GetPath``1(System.Converter{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0},``0},System.Boolean)">
            <summary>Gets the path to the specified node.</summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="converter">The converter.</param>
            <param name="includeThis">if set to <c>true</c> include this node in the path.</param>
            <returns>A list (of converted) General Trees that form the path to this node from the root.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.FindMaximumChildHeight">
            <summary>Finds the maximum height between the child nodes.</summary>
            <returns>The maximum height of all paths between this node and all leaf nodes.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.DmFramework#Generics#Sorting#ISortable{DmFramework#Generics#DataStructures#Trees#GeneralTree{T}}#Sort(DmFramework.Generics.Sorting.ISorter{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}})">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Sort(DmFramework.Generics.Sorting.IComparisonSorter{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}},System.Comparison{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Sort(DmFramework.Generics.Sorting.IComparisonSorter{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}},System.Collections.Generic.IComparer{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Sort(DmFramework.Generics.Sorting.ISorter{DmFramework.Generics.DataStructures.Trees.GeneralTree{`0}},DmFramework.Generics.Sorting.SortOrder)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.ToString">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Count">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.DmFramework#Generics#DataStructures#Trees#ITree{T}#Parent">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Ancestors">
            <summary>
            Retrieves the Ancestors of this node, in the same order
            as the path from the current node to the root.
            </summary>
            <value>The ancestors.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.ChildNodes">
            <summary>Gets the child nodes of this node.</summary>
            <value>The child nodes.</value>
            <remarks>The ChildNodes list returned is read-only.</remarks>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Parent">
            <summary>Gets the parent of this node.</summary>
            <value>The parent of this node.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Degree">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Height">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Data">
            <summary>Gets the data held in this node.</summary>
            <value>The data.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.IsLeafNode">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.GeneralTree`1.Item(System.Int32)">
            <summary>Gets the <see cref="T:DmFramework.Generics.DataStructures.Trees.GeneralTree`1"/> at the specified index.</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.IBTreeCollection`1">
            <summary>Extends the Collections.BTreeICollection interface and adds Dictionary related api</summary>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.IBTreeCollection`1.Add(`0)">
            <summary>Add Key and Value as entry to the Dictionary/Collection</summary>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.IBTreeCollection`1.CurrentEntry">
            <summary>Returns the Current entry</summary>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinarySearchTree`2"/>.</summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.AddItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.RemoveItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinarySearchTree`2.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinaryTree`1"/>.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.RemoveLeft">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.RemoveRight">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.AddItem(DmFramework.Generics.DataStructures.Trees.BinaryTree{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.#ctor(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.#ctor(`0,`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.#ctor(`0,DmFramework.Generics.DataStructures.Trees.BinaryTree{`0},DmFramework.Generics.DataStructures.Trees.BinaryTree{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableBinaryTree`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.Trees.GeneralTree`1"/>.</summary>
            <typeparam name="T">The type of item the tree contains.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.InsertItem(System.Int32,DmFramework.Generics.DataStructures.Trees.GeneralTree{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.RemoveItem(System.Int32,DmFramework.Generics.DataStructures.Trees.GeneralTree{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.RemoveItem(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.#ctor(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableGeneralTree`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2">
            <summary>An observable version of the <see cref="T:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2"/></summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2">
            <summary>An implementation of a Red-Black tree.</summary>
            <typeparam name="TKey">The type of the keys in the <see cref="T:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <see cref="T:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2"/>.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1">
            <summary>An implementation of a Red-Black tree.</summary>
            <typeparam name="T">The type of element to keep in the tree.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1.#ctor(System.Comparison{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1.AddItem(`0)">
            <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1.RemoveItem(`0)">
            <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="item">The item to remove.</param>
            <returns>
            	<c>true</c> if the element is successfully removed; otherwise, <c>false</c>.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1.IsRed(DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode{`0})">
            <summary>Determines whether the specified node is red.</summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if the specified node is red; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1.IsBlack(DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode{`0})">
            <summary>Determines whether the specified node is black.</summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if the specified node is black; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1.InsertNode(DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode{`0},`0)">
            <summary>A recursive implementation of insertion of a node into the tree.</summary>
            <param name="node">The start node.</param>
            <param name="item">The item.</param>
            <returns>The node created in the insertion.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1.SingleRotation(DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode{`0},System.Boolean)">
            <summary>Perform a single rotation on the node provided..</summary>
            <param name="node">The node on which to focus the rotation.</param>
            <param name="direction">The direction of the rotation.  If direction is equal to true, a right rotation is performed.  Other wise, a left rotation.</param>
            <returns>The new root of the cluster.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`1.DoubleRotation(DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode{`0},System.Boolean)">
            <summary>Perform a Double rotation on the node provided..</summary>
            <param name="node">The node on which to focus the rotation.</param>
            <param name="direction">The direction of the rotation.  If direction is equal to true, a right rotation is performed.  Other wise, a left rotation.</param>
            <returns>The new root of the cluster.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.#ctor(System.Comparison{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.Remove(`0)">
            <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.Add(`0,`1)">
            <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.</summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.TryGetValue(`0,`1@)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="TryGetValue" lang="cs" title="The following example shows how to use the TryGetValue method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="TryGetValue" lang="vbnet" title="The following example shows how to use the TryGetValue method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Contains" lang="cs" title="The following example shows how to use the Contains method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Contains" lang="vbnet" title="The following example shows how to use the Contains method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.Keys">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value></value>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Keys" lang="cs" title="The following example shows how to use the Keys property."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Keys" lang="vbnet" title="The following example shows how to use the Keys property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.Values">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <value></value>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Values" lang="cs" title="The following example shows how to use the Values property."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Values" lang="vbnet" title="The following example shows how to use the Values property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2.Item(`0)">
            <summary>Gets or sets the value with the specified key.</summary>
            <value>The key of the item to set or get.</value>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.AddItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.RemoveItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.BlockReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.CheckReentrancy">
            <inheritdoc cref="!:System.Collections.ObjectModel.ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableRedBlackTree`2.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2">
            <summary>Represents a dynamic data <see cref="T:DmFramework.Generics.DataStructures.Trees.SplayTree`2"/> that provides notifications when items get added, removed, or when the whole list is refreshed.</summary>
            <typeparam name="TKey">The type of the keys in the <see cref="T:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <see cref="T:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2"/>.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.SplayTree`2">
            <summary>An implementation of a Splay Tree data structure.</summary>
            <remarks>
            http://en.wikipedia.org/wiki/Splay_tree
            </remarks>
            <typeparam name="TKey">The type of the keys in the <see cref="T:DmFramework.Generics.DataStructures.Trees.SplayTree`2"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <see cref="T:DmFramework.Generics.DataStructures.Trees.SplayTree`2"/>.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.SplayTree`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.SplayTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.SplayTree`2.#ctor(System.Comparison{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.SplayTree`2.FindNode(`0)">
            <summary>Finds the node containing the specified data key.</summary>
            <param name="key">The key to search for.</param>
            <returns>The node with the specified key if found.  If the key is not in the tree, this method returns null.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.SplayTree`2.AddItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.SplayTree`2.RemoveItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="item">The item to remove.</param>
            <returns>
            	<c>true</c> if the element is successfully removed; otherwise, <c>false</c>.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.SplayTree`2.Maximum">
            <inheritdoc/>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Maximum" lang="cs" title="The following example shows how to use the Maximum property."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Maximum" lang="vbnet" title="The following example shows how to use the Maximum property."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.SplayTree`2.Minimum">
            <inheritdoc/>
            <example>
            	<code source="..\..\Source\Examples\ExampleLibraryCSharp\DataStructures\Trees\BinarySearchTreeBaseExamples.cs" region="Minimum" lang="cs" title="The following example shows how to use the Minimum property."/>
            	<code source="..\..\Source\Examples\ExampleLibraryVB\DataStructures\Trees\BinarySearchTreeBaseExamples.vb" region="Minimum" lang="vbnet" title="The following example shows how to use the Minimum property."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.AddItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.RemoveItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.CollectionChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.OnPropertyChanged(System.String[])">
            <summary>Called when the specified properties change.</summary>
            <param name="propertyNames">The property names.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.PropertyChanged"/> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.BlockReentrancy">
            <inheritdoc cref="!:ObservableCollection&lt;T&gt;.BlockReentrancy"/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.CheckReentrancy">
            <inheritdoc cref="!:ObservableCollection&lt;T&gt;.CheckReentrancy"/>
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:DmFramework.Generics.DataStructures.Trees.Observable.ObservableSplayTree`2.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.RedBlackTreeList`2">
            <summary>A RedBlack Tree list variant.  Equivalent to <see cref="T:DmFramework.Generics.DataStructures.Trees.RedBlackTree`2"/> where TValue is a <see cref="T:System.Collections.Generic.LinkedList`1"/>.</summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTreeList`2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Trees.RedBlackTreeList`2"/> class.</summary>
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTreeList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTreeList`2.#ctor(System.Comparison{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTreeList`2.ContainsValue(`1)">
            <summary>Determines whether the specified value contains value.</summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTreeList`2.GetValueEnumerator">
            <summary>Gets the value enumerator.</summary>
            <returns>An enumerator to enumerate through the values contained in this instance.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTreeList`2.GetKeyEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTreeList`2.Remove(`1,`0@)">
            <summary>Removes the specified value.</summary>
            <param name="value">The value.</param>
            <param name="key">The key under which the item was found.</param>
            <returns>A value indicating whether the item was found or not.</returns>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTreeList`2.TraverseItems(DmFramework.Generics.DataStructures.Trees.RedBlackTreeList{`0,`1}.NodeAction)">
            <summary>Traverses the items.</summary>
            <param name="shouldStop">A predicate that performs an action on the list, and indicates whether the enumeration of items should stop or not.</param>
            <returns>An indication of whether the enumeration was stopped prematurely.</returns>
        </member>
        <member name="T:DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode`1">
            <summary>A container class, used for the RedBlackTree.</summary>
            <typeparam name="T">The type of element.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode`1"/> class.</summary>
            <param name="data">The data contained in this node.</param>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode`1.Color">
            <summary>Gets or sets the color of the current node.</summary>
            <value>The color of the node.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode`1.Item(System.Boolean)">
            <summary>Gets or sets the <see cref="T:DmFramework.Generics.DataStructures.Trees.BinaryTree`1"/> with the specified direction.</summary>
            <value></value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode`1.Left">
            <summary>Gets or sets the left subtree.</summary>
            <value>The left subtree.</value>
        </member>
        <member name="P:DmFramework.Generics.DataStructures.Trees.RedBlackTreeNode`1.Right">
            <summary>Gets or sets the right subtree.</summary>
            <value>The right subtree.</value>
        </member>
        <member name="T:DmFramework.Generics.Extensions.DoubleExtensions">
            <summary>Provides extension methods to the Double type.</summary>
        </member>
        <member name="F:DmFramework.Generics.Extensions.DoubleExtensions.DefaultPrecision">
            <summary>The default precision catered for in checking whether or not values are similar.</summary>
        </member>
        <member name="M:DmFramework.Generics.Extensions.DoubleExtensions.IsSimilarTo(System.Double,System.Double)">
            <summary>
            Checks if arguments are very close in values. If true we could assume they 
            refer to the same value. 
            </summary>
            <param name="arg1">The 1st argument value to check.</param>
            <param name="arg2">The 1st argument value to check.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Extensions\DoubleExtensionsExamples.cs" region="IsSimilarTo" lang="cs" title="The following example shows how to use the IsSimilarTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Extensions\DoubleExtensionsExamples.vb" region="IsSimilarTo" lang="vbnet" title="The following example shows how to use the IsSimilarTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Extensions.DoubleExtensions.IsSimilarTo(System.Double,System.Double,System.Double)">
            <summary>
            Checks if arguments are very close in values using given precision perimeters. If true we could assume they 
            refer to the same value. 
            </summary>
            <param name="arg1">The 1st argument value to check.</param>
            <param name="arg2">The 1st argument value to check.</param>
            <param name="precision">The precision.</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Extensions\DoubleExtensionsExamples.cs" region="IsSimilarWithPrecision" lang="cs" title="The following example shows how to use the IsSimilarTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Extensions\DoubleExtensionsExamples.vb" region="IsSimilarWithPrecision" lang="vbnet" title="The following example shows how to use the IsSimilarTo method."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.Extensions.EnumerableChain`1">
            <summary>A simple chainer for enumerators.</summary>
            <typeparam name="T">The type of item to enumerate.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Extensions.EnumerableChain`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Extensions.EnumerableChain`1"/> class.</summary>
            <param name="links">The links.</param>
        </member>
        <member name="M:DmFramework.Generics.Extensions.EnumerableChain`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.EnumerableChain`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:DmFramework.Generics.Extensions.EnumerableExtensions">
            <summary>Extensions for the IEnumerable interface.</summary>
        </member>
        <member name="M:DmFramework.Generics.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Performs the specified action on each element of the collection.</summary>
            <typeparam name="T">The type of the elements of <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">The collection to enumerate over.</param>
            <param name="action">The action to perform on each item..</param>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Extensions\IEnumerableExtensionsExamples.cs" region="ForEach" lang="cs" title="The following example shows how to use the ForEach method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Extensions.EnumerableExtensions.ConcatToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>Concatenates all the values into a String using ", " as in betweeen each value.</summary>
            <typeparam name="T">The type of the elements of <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to concatenate.</param>
            <param name="func">A <see cref="T:System.Func`2"/> to convert each <typeparamref name="T"/> to a String.</param>
            <returns>All values concatenated into a String using ", " as in betweeen each value.</returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.EnumerableExtensions.ConcatToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>Concatenates all the values into a String using <paramref name="joinString"/> as in betweeen each value.</summary>
            <typeparam name="T">The type of the elements of <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to concatenate.</param>
            <param name="func">A <see cref="T:System.Func`2"/> to convert each <typeparamref name="T"/> to a String.</param>
            <param name="joinString">The <see cref="T:System.String"/> to use in between each value.</param>
            <returns>All values concatenated into a String using ", " as in betweeen each value.</returns>
        </member>
        <member name="T:DmFramework.Generics.Extensions.ListExtensions">
            <summary>Extensions for the generic <see cref="T:System.Collections.Generic.List`1"/> class.</summary>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.GetRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds the range of items to the list.</summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="list">The list to add the items to.</param>
            <param name="collection">The collection of items to add.</param>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.FindIndex``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>Finds the index of the first item in the list that matches the specified predicate.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="match">The matching predicate.</param>
            <returns>The index of the first item in the list that matches the specified predicate, -1 if none was found.</returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.FindIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})">
            <summary>Finds the index of the first item in the list that matches the specified predicate.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="startIndex">The start index.</param>
            <param name="match">The matching predicate.</param>
            <returns>
            The index of the first item in the list that matches the specified predicate, -1 if none was found.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.FindIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Predicate{``0})">
            <summary>Finds the index of the first item in the list that matches the specified predicate.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The number of items to inspect from the start index.</param>
            <param name="match">The matching predicate.</param>
            <returns>
            The index of the first item in the list that matches the specified predicate, -1 if none was found.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.FindLastIndex``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>Finds the index of the last item in the list that matches the specified predicate.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="match">The matching predicate.</param>
            <returns>
            The index of the last item in the list that matches the specified predicate if any was found, -1.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.FindLastIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})">
            <summary>Finds the index of the last item in the list that matches the specified predicate.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="startIndex">The start index.</param>
            <param name="match">The matching predicate.</param>
            <returns>
            The index of the last item in the list that matches the specified predicate if any was found, -1.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.FindLastIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Predicate{``0})">
            <summary>Finds the index of the last item in the list that matches the specified predicate.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The number of items to inspect from the start index.</param>
            <param name="match">The matching predicate.</param>
            <returns>
            The index of the last item in the list that matches the specified predicate if any was found, -1.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>Performs the specified action on each item in the list.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list to enumerate over.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.InsertRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})"/>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.Sort``1(System.Collections.Generic.IList{``0})">
            <summary>Sorts the specified list.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list.</param>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},DmFramework.Generics.Sorting.SortOrder)">
            <summary>Sorts the specified list.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list.</param>
            <param name="sortOrder">The order in which to sort the list.</param>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Sorts the specified list.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>Sorts the specified list.</summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Comparison{``0},DmFramework.Generics.Sorting.SortOrder)">
            <summary>Sorts the specified list.</summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="comparison">The comparison.</param>
            <param name="sortOrder">The order in which to sort the list.</param>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Linq.Expressions.Expression{System.Func{``0,System.IComparable}})">
            <summary>Sorts the specified list.</summary>
            <param name="list">The list.</param>
            <param name="property">The target property to use to sort the list.</param>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Linq.Expressions.Expression{System.Func{``0,System.IComparable}},DmFramework.Generics.Sorting.SortOrder)">
            <summary>Sorts the specified list.</summary>
            <param name="list">The list.</param>
            <param name="sortOrder">The order in which to sort the list.</param>
            <param name="property">The target property to use to sort the list.</param>
        </member>
        <member name="T:DmFramework.Generics.Extensions.ObjectExtensions">
            <summary>Extensions methods on the <see cref="T:System.Object"/> class.</summary>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ObjectExtensions.ConvertTo``1(System.Object)">
            <summary>Converts the specified value into the type specified by the generic parameter if possible.</summary>
            <typeparam name="T">The type to convert the object into.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">When no compatible type converter is found for the operation.</exception>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Extensions\ObjectExtensionsExamples.cs" region="ConvertTo" lang="cs" title="The following example shows how to use the ConvertTo method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Extensions\ObjectExtensionsExamples.vb" region="ConvertTo" lang="vbnet" title="The following example shows how to use the ConvertTo method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ObjectExtensions.Serialize``1(``0)">
            <summary>Serializes any Serializable Object to XMLString</summary>
            <remarks>Uses <see cref="T:System.Xml.Serialization.XmlSerializer"/>.</remarks>
            <typeparam name="T">The type of object to serialize.</typeparam>
            <param name="obj">The object to serialize.</param>
            <returns>A serialized representation of the object.</returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ObjectExtensions.Deserialize``1(System.String)">
            <summary>Deserializes object from String</summary>
            <remarks>Uses <see cref="T:System.Xml.Serialization.XmlSerializer"/>.</remarks>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="xml">The XML to deserialize the object from.</param>
            <returns>ready populated object</returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ObjectExtensions.DeepCopy``1(``0)">
            <summary>Performs a deep copy the specified serializable object.</summary>
            <typeparam name="T">The type of object to perform a deep copy on.</typeparam>
            <param name="obj">The object to perform a deep copy on.</param>
            <returns>A copy of the specified object.</returns>
            <remarks>This method relies on serialization (<see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>) for a generic deep copy routine - if performance is needed, rather implement <see cref="T:System.ICloneable"/>.</remarks>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ObjectExtensions.ToList``1(``0)">
            <summary>Wraps an object in an <see cref="T:System.Collections.Generic.List`1"/>.</summary>
            <typeparam name="T">The type of object to wrap.</typeparam>
            <param name="obj">The object to wrap.</param>
            <returns>A new <see cref="T:System.Collections.Generic.List`1"/> containing the object.</returns>
        </member>
        <member name="M:DmFramework.Generics.Extensions.ObjectExtensions.ToIList``1(``0)">
            <summary>Wraps an object in an <see cref="T:System.Collections.Generic.List`1"/>.</summary>
            <typeparam name="T">The type of object to wrap.</typeparam>
            <param name="obj">The object to wrap.</param>
            <returns>A new <see cref="T:System.Collections.Generic.List`1"/> containing the object.</returns>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Conversion.ConverterExtensions">
            <summary>Extensions on the IConverter interface.</summary>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Conversion.ConverterExtensions.ConvertAll``2(DmFramework.Generics.Patterns.Conversion.IConverter{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts all.</summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="converter">The converter.</param>
            <param name="input">The input.</param>
            <returns>The converted representation of the input.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Conversion.ConverterExtensions.ConvertAll``2(DmFramework.Generics.Patterns.Conversion.IBidirectionalConverter{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts all.</summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="converter">The converter.</param>
            <param name="input">The input.</param>
            <returns>The converted representation of the input.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Conversion.ConverterExtensions.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},DmFramework.Generics.Patterns.Conversion.IConverter{``0,``1})">
            <summary>Converts the specified value.</summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="value">The value.</param>
            <param name="converter">The converter.</param>
            <returns>The converted representation of the input.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Conversion.ConverterExtensions.Convert``2(System.Collections.Generic.IEnumerable{``0},DmFramework.Generics.Patterns.Conversion.IConverter{``0,``1})">
            <summary>Converts the specified items.</summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="items">The items.</param>
            <param name="converter">The converter.</param>
            <returns>The converted representation of the input.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Conversion.ConverterExtensions.Convert``2(System.Collections.Generic.IEnumerable{``0},DmFramework.Generics.Patterns.Conversion.IBidirectionalConverter{``0,``1})">
            <summary>Converts the specified items.</summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="items">The items.</param>
            <param name="converter">The converter.</param>
            <returns>The converted representation of the input.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Conversion.ConverterExtensions.Convert``2(``0,DmFramework.Generics.Patterns.Conversion.IConverter{``0,``1})">
            <summary>Converts the specified value.</summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="value">The value.</param>
            <param name="converter">The converter.</param>
            <returns>The converted representation of the input.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Conversion.ConverterExtensions.ConvertInternal``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>Converts the internal.</summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="input">The input.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Conversion.IBidirectionalConverter`2">
            <summary>A bidirectional converter.</summary>
            <typeparam name="T1">The type of the one item.</typeparam>
            <typeparam name="T2">The type of the other item.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Conversion.IBidirectionalConverter`2.Convert(`1)">
            <summary>Converts the specified input.</summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Conversion.IBidirectionalConverter`2.Convert(`0)">
            <summary>Converts the specified input.</summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Conversion.IConverter`2">
            <summary>A simple interface for conversions between types.</summary>
            <typeparam name="TInput">The from type.</typeparam>
            <typeparam name="TOutput">The to type.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Conversion.IConverter`2.Convert(`0)">
            <summary>Converts the specified input to the specified output type.</summary>
            <param name="input">The input to convert..</param>
            <returns>A converted instance of the output type.</returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Patterns\Conversion\ConverterExamples.cs" region="Convert" lang="cs" title="The following example shows how to use the Convert method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Patterns\Conversion\ConverterExamples.vb" region="Convert" lang="vbnet" title="The following example shows how to use the Convert method."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1">
            <summary>An abstract common base class for all specifications.</summary>
            <typeparam name="T">The type of item to apply the specification to.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Specification.ISpecification`1">
            <summary>An implementation of the specification pattern.  See http://en.wikipedia.org/wiki/Specification_pattern for a detailed description.</summary>
            <typeparam name="T">The type of item the specification is evaluated on.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>Determines whether the specification is satisfied by the specified item.</summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the specification is satisfied by the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.ISpecification`1.And(DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Performs the AND operation on this specification and the other.</summary>
            <param name="right">The right hand side of the operation.</param>
            <returns>The result of the AND operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.ISpecification`1.Or(DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Performs the OR operation this specification and the other.</summary>
            <param name="right">The right hand side of the operation.</param>
            <returns>The result of the OR operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.ISpecification`1.Xor(DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Performs the XOR operation on the current specification.</summary>
            <param name="right">The right hand side of the operation..</param>
            <returns>The result of the XOR operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.ISpecification`1.Not">
            <summary>Performs the NOT operation on the current specification.</summary>
            <returns>The result of the NOT operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.IsSatisfiedBy(`0)">
            <summary>Determines whether the specification is satisfied by the specified item.</summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the specification is satisfied by the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.DmFramework#Generics#Patterns#Specification#ISpecification{T}#And(DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Performs the AND operation on this specification and the other.</summary>
            <param name="right">The right hand side of the operation.</param>
            <returns>The result of the AND operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.DmFramework#Generics#Patterns#Specification#ISpecification{T}#Or(DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Performs the OR operation this specification and the other.</summary>
            <param name="right">The right hand side of the operation.</param>
            <returns>The result of the OR operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.DmFramework#Generics#Patterns#Specification#ISpecification{T}#Xor(DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Performs the XOR operation on the current specification.</summary>
            <param name="right">The right hand side of the operation..</param>
            <returns>The result of the XOR operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.DmFramework#Generics#Patterns#Specification#ISpecification{T}#Not">
            <summary>Performs the NOT operation on the current specification.</summary>
            <returns>The result of the NOT operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.op_BitwiseAnd(DmFramework.Generics.Patterns.Specification.AbstractSpecification{`0},DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Implements the operator &amp;.</summary>
            <param name="left">The left hand side specification.</param>
            <param name="right">The right hand side specification.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.op_BitwiseAnd(DmFramework.Generics.Patterns.Specification.AbstractSpecification{`0},System.Predicate{`0})">
            <summary>Implements the operator &amp;.</summary>
            <param name="left">The left hand side specification.</param>
            <param name="right">The right hand side predicate.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.op_BitwiseOr(DmFramework.Generics.Patterns.Specification.AbstractSpecification{`0},DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Implements the operator OR.</summary>
            <param name="left">The left hand side specification.</param>
            <param name="right">The right hand side specification.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.op_BitwiseOr(DmFramework.Generics.Patterns.Specification.AbstractSpecification{`0},System.Predicate{`0})">
            <summary>Implements the operator OR.</summary>
            <param name="left">The left hand side specification.</param>
            <param name="right">The right hand side predicate.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.op_LogicalNot(DmFramework.Generics.Patterns.Specification.AbstractSpecification{`0})">
            <summary>Implements the operator NOT.</summary>
            <param name="operand">The operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.op_ExclusiveOr(DmFramework.Generics.Patterns.Specification.AbstractSpecification{`0},DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Implements the operator XOR.</summary>
            <param name="left">The left hand side specification.</param>
            <param name="right">The right hand side specification.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.op_ExclusiveOr(DmFramework.Generics.Patterns.Specification.AbstractSpecification{`0},System.Predicate{`0})">
            <summary>Implements the operator XOR.</summary>
            <param name="left">The left hand side specification.</param>
            <param name="right">The right hand side predicate.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.And(DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Performs the AND operation on this specification and the other.</summary>
            <param name="right">The right hand side of the operation.</param>
            <returns>The result of the AND operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.Or(DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Performs the OR operation this specification and the other.</summary>
            <param name="right">The right hand side of the operation.</param>
            <returns>The result of the OR operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.Xor(DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Performs the XOR operation on the current specification.</summary>
            <param name="right">The right hand side of the operation..</param>
            <returns>The result of the XOR operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.Not">
            <summary>Performs the NOT operation on the current specification.</summary>
            <returns>The result of the NOT operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.And(System.Predicate{`0})">
            <summary>Performs the AND operation on this specification and the other.</summary>
            <param name="right">The right hand side of the operation.</param>
            <returns>The result of the AND operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.Or(System.Predicate{`0})">
            <summary>Performs the OR operation this specification and the other.</summary>
            <param name="right">The right hand side of the operation.</param>
            <returns>The result of the OR operation.</returns>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AbstractSpecification`1.Xor(System.Predicate{`0})">
            <summary>Performs the XOR operation on the current specification.</summary>
            <param name="right">The right hand side of the operation..</param>
            <returns>The result of the XOR operation.</returns>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Specification.AndSpecification`1">
            <summary>Performs an AND operation between two specifications.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Specification.CompositeSpecification`1">
            <summary>Provides a composite specification container.</summary>
            <typeparam name="T">The type of item to apply this specification to.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.CompositeSpecification`1.#ctor(DmFramework.Generics.Patterns.Specification.ISpecification{`0},DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Patterns.Specification.CompositeSpecification`1"/> class.</summary>
            <param name="left">The left specification.</param>
            <param name="right">The right specification.</param>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Specification.CompositeSpecification`1.Left">
            <summary>Gets or sets the left specification.</summary>
            <value>The left specification.</value>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Specification.CompositeSpecification`1.Right">
            <summary>Gets or sets the right specification.</summary>
            <value>The right specification</value>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AndSpecification`1.#ctor(DmFramework.Generics.Patterns.Specification.ISpecification{`0},DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Patterns.Specification.AndSpecification`1"/> class.</summary>
            <param name="left">The left specification.</param>
            <param name="right">The right specification.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.AndSpecification`1.IsSatisfiedBy(`0)">
            <summary>Determines whether the specification is satisfied by the specified item.</summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the specification is satisfied by the specified item; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Patterns\Specification\AndSpecificationExamples.cs" region="IsSatisfiedBy" lang="cs" title="The following example shows how to use the IsSatisfiedBy method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Patterns\Specification\AndSpecificationExamples.vb" region="IsSatisfiedBy" lang="vbnet" title="The following example shows how to use the IsSatisfiedBy method."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Specification.NotSpecification`1">
            <summary>Performs an OR operation between two specifications.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.NotSpecification`1.#ctor(DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Patterns.Specification.NotSpecification`1"/> class.</summary>
            <param name="specification">The specification.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.NotSpecification`1.IsSatisfiedBy(`0)">
            <summary>Determines whether the specification is satisfied by the specified item.</summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the specification is satisfied by the specified item; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Patterns\Specification\NotSpecificationExamples.cs" region="IsSatisfiedBy" lang="cs" title="The following example shows how to use the IsSatisfiedBy method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Patterns\Specification\NotSpecificationExamples.vb" region="IsSatisfiedBy" lang="vbnet" title="The following example shows how to use the IsSatisfiedBy method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Specification.NotSpecification`1.Specification">
            <summary>Gets the specification.</summary>
            <value>The specification.</value>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Specification.OrSpecification`1">
            <summary>Performs an OR operation between two specifications.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.OrSpecification`1.#ctor(DmFramework.Generics.Patterns.Specification.ISpecification{`0},DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Patterns.Specification.OrSpecification`1"/> class.</summary>
            <param name="left">The left specification.</param>
            <param name="right">The right specification.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.OrSpecification`1.IsSatisfiedBy(`0)">
            <summary>Determines whether the specification is satisfied by the specified item.</summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the specification is satisfied by the specified item; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Patterns\Specification\OrSpecificationExamples.cs" region="IsSatisfiedBy" lang="cs" title="The following example shows how to use the IsSatisfiedBy method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Patterns\Specification\OrSpecificationExamples.vb" region="IsSatisfiedBy" lang="vbnet" title="The following example shows how to use the IsSatisfiedBy method."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Specification.PredicateSpecification`1">
            <summary>A simple specification that operates on a predicate.</summary>
            <typeparam name="T">The type of predicate to accept.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.PredicateSpecification`1.#ctor(System.Predicate{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Patterns.Specification.PredicateSpecification`1"/> class.</summary>
            <param name="predicate">The predicate to use as a specification.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.PredicateSpecification`1.IsSatisfiedBy(`0)">
            <summary>Determines whether the specification is satisfied by the specified item.</summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the specification is satisfied by the specified item; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Patterns\Specification\PredicateSpecificationExamples.cs" region="IsSatisfiedBy" lang="cs" title="The following example shows how to use the IsSatisfiedBy method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Patterns\Specification\PredicateSpecificationExamples.vb" region="IsSatisfiedBy" lang="vbnet" title="The following example shows how to use the IsSatisfiedBy method."/>
            </example>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Specification.PredicateSpecification`1.Predicate">
            <summary>Gets the predicate.</summary>
            <value>The predicate.</value>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Specification.XorSpecification`1">
            <summary>Performs an AND operation between two specifications.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.XorSpecification`1.#ctor(DmFramework.Generics.Patterns.Specification.ISpecification{`0},DmFramework.Generics.Patterns.Specification.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Patterns.Specification.XorSpecification`1"/> class.</summary>
            <param name="left">The left specification.</param>
            <param name="right">The right specification.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Specification.XorSpecification`1.IsSatisfiedBy(`0)">
            <summary>Determines whether the specification is satisfied by the specified item.</summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the specification is satisfied by the specified item; otherwise, <c>false</c>.
            </returns>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Patterns\Specification\XorSpecificationExamples.cs" region="IsSatisfiedBy" lang="cs" title="The following example shows how to use the IsSatisfiedBy method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Patterns\Specification\XorSpecificationExamples.vb" region="IsSatisfiedBy" lang="vbnet" title="The following example shows how to use the IsSatisfiedBy method."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.ActionVisitor`1">
            <summary>A general visitor that executes the specified <see cref="T:System.Action`1"/> delegate.</summary>
            <typeparam name="T">The type of item to visit.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.IVisitor`1">
            <summary>Provides an interface for visitors.</summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.IVisitor`1.Visit(`0)">
            <summary>Visits the specified object.</summary>
            <param name="obj">The object to visit.</param>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.IVisitor`1.HasCompleted">
            <summary>Gets a value indicating whether this instance is done performing it's work..</summary>
            <value><c>true</c> if this instance is done; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.ActionVisitor`1.#ctor(System.Action{`0})">
            <param name="action">The <see cref="T:System.Action`1"/> delegate.  The return value is used to indicate whether the visitor has completed.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.ActionVisitor`1.Visit(`0)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.ActionVisitor`1.HasCompleted">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.ComparableFindingVisitor`1">
            <summary>A visitor that searches objects for an equality, using the <see cref="T:System.IComparable"/> interface.</summary>	
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.ComparableFindingVisitor`1.#ctor(`0)">
            <param name="searchValue">The search value.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.ComparableFindingVisitor`1.Visit(`0)">
            <summary>Visits the specified object.</summary>
            <param name="obj">The object to visit.</param>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.ComparableFindingVisitor`1.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.ComparableFindingVisitor`1.Found">
            <summary>Gets a value indicating whether this <see cref="T:DmFramework.Generics.Patterns.Visitor.ComparableFindingVisitor`1"/> is found.</summary>
            <value><c>true</c> if found; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.ComparableFindingVisitor`1.SearchValue">
            <summary>Gets the search value.</summary>
            <value>The search value.</value>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.CountingVisitor`1">
            <summary>A Visitor that counts items in a visitable collection.</summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.CountingVisitor`1.Visit(`0)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.CountingVisitor`1.ResetCount">
            <summary>Resets the count to zero.</summary>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.CountingVisitor`1.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.CountingVisitor`1.Count">
            <summary>Gets the count.</summary>
            <value>The current count value.</value>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.DummyVisitor`1">
            <summary>
            A dummy visitor - that does absolutely nothing with visits.
            Believe it or not, it's actually useful in some situations.
            </summary>
            <typeparam name="T">The type of item to visit.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.DummyVisitor`1.Visit(`0)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.DummyVisitor`1.HasCompleted">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.GeneralVisitor`1">
            <summary>A general visitor that executes the specified <see cref="T:System.Predicate`1"/> delegate.</summary>
            <typeparam name="T">The type of item to visit.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.GeneralVisitor`1.#ctor(System.Predicate{`0})">
            <param name="hasCompletedPredicate">The <see cref="T:System.Predicate`1"/> delegate.  The return value is used to indicate whether the visitor has completed.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.GeneralVisitor`1.Visit(`0)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.GeneralVisitor`1.HasCompleted">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.InOrderVisitor`1">
            <summary>An in order implementation of the <see cref="T:DmFramework.Generics.Patterns.Visitor.OrderedVisitor`1"/> class.</summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.OrderedVisitor`1">
            <summary>
            A visitor that visits objects in order (PreOrder, PostOrder, or InOrder).
            Used primarily as a base class for Visitors specializing in a specific order type.
            </summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.OrderedVisitor`1.#ctor(DmFramework.Generics.Patterns.Visitor.IVisitor{`0})">
            <param name="visitorToUse">The visitor to use when visiting the object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitorToUse"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.OrderedVisitor`1.VisitPreOrder(`0)">
            <summary>Visits the object in pre order.</summary>
            <param name="obj">The obj.</param>         
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.OrderedVisitor`1.VisitPostOrder(`0)">
            <summary>Visits the object in post order.</summary>
            <param name="obj">The obj.</param>        
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.OrderedVisitor`1.VisitInOrder(`0)">
            <summary>Visits the object in order.</summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.OrderedVisitor`1.Visit(`0)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.OrderedVisitor`1.HasCompleted">
            <summary>Determines whether this visitor is done.</summary>
            <value></value>
            <returns>
            	<c>true</c> if this visitor is done; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.OrderedVisitor`1.VisitorToUse">
            <summary>Gets the visitor to use.</summary>
            <value>The visitor to use.</value>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.InOrderVisitor`1.#ctor(DmFramework.Generics.Patterns.Visitor.IVisitor{`0})">
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.InOrderVisitor`1.VisitPostOrder(`0)">
            <summary>Visits the object in post order.</summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.InOrderVisitor`1.VisitPreOrder(`0)">
            <summary>Visits the object in pre order.</summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.KeyTrackingVisitor`2">
            <summary>A visitor that tracks (stores) keys from KeyValuePAirs in the order they were visited.</summary>
            <typeparam name="TKey">The type of the keys for the items to be visited.</typeparam>
            <typeparam name="TValue">The type of the values for the items to be visited.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.KeyTrackingVisitor`2.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.KeyTrackingVisitor`2.Visit(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.KeyTrackingVisitor`2.TrackingList">
            <summary>Gets the tracking list.</summary>
            <value>The tracking list.</value>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.KeyTrackingVisitor`2.HasCompleted">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.PostOrderVisitor`1">
            <summary>An Post order implementation of the <see cref="T:DmFramework.Generics.Patterns.Visitor.OrderedVisitor`1"/> class.</summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.PostOrderVisitor`1.#ctor(DmFramework.Generics.Patterns.Visitor.IVisitor{`0})">
            <param name="visitor">The visitor to use when visiting the object.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.PostOrderVisitor`1.VisitInOrder(`0)">
            <summary>Visits the object in order.</summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.PostOrderVisitor`1.VisitPreOrder(`0)">
            <summary>Visits the object in pre order.</summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.PreOrderVisitor`1">
            <summary>A visitor that visits objects only in pre order.</summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.PreOrderVisitor`1.#ctor(DmFramework.Generics.Patterns.Visitor.IVisitor{`0})">
            <param name="visitor">The visitor to use when visiting the object.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.PreOrderVisitor`1.VisitInOrder(`0)">
            <summary>Visits the object in order.</summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.PreOrderVisitor`1.VisitPostOrder(`0)">
            <summary>Visits the object in post order.</summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.SumVisitor">
            <summary>A visitor that sums integers in any collection of type Int32.</summary>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.SumVisitor.Visit(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.SumVisitor.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.SumVisitor.Sum">
            <summary>Gets the sum accumulated by this <see cref="T:DmFramework.Generics.Patterns.Visitor.SumVisitor"/>.</summary>
            <value>The sum.</value>
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.TrackingVisitor`1">
            <summary>
            A visitor that tracks (stores) objects in the order they were visited.
            Handy for demonstrating and testing different ordered visits implementations on
            data structures.
            </summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.TrackingVisitor`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.TrackingVisitor`1.Visit(`0)">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.TrackingVisitor`1.HasCompleted">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.TrackingVisitor`1.TrackingList">
            <summary>Gets the tracking list.</summary>
            <value>The tracking list.</value>        
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.ValueTrackingVisitor`2">
            <summary>A visitor that tracks (stores) keys from KeyValuePairs in the order they were visited.</summary>
            <typeparam name="TKey">The type of key of the KeyValuePair.</typeparam>
            <typeparam name="TValue">The type of value of the KeyValuePair.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.ValueTrackingVisitor`2.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.ValueTrackingVisitor`2.Visit(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.ValueTrackingVisitor`2.TrackingList">
            <summary>Gets the tracking list.</summary>
            <value>The tracking list.</value>
        </member>
        <member name="P:DmFramework.Generics.Patterns.Visitor.ValueTrackingVisitor`2.HasCompleted">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Patterns.Visitor.VisitorExtensions">
            <summary>Visitor related extensions.</summary>
        </member>
        <member name="M:DmFramework.Generics.Patterns.Visitor.VisitorExtensions.AcceptVisitor``1(System.Collections.Generic.IEnumerable{``0},DmFramework.Generics.Patterns.Visitor.IVisitor{``0})">
            <summary>Accepts the visitor into the collection, visiting each item.</summary>
            <typeparam name="T">The type of item to visit.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="visitor">The visitor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="T:DmFramework.Generics.Sorting.BubbleSorter`1">
            <summary>A Bubble Sorter.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\BubbleSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\BubbleSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.Sorting.ComparisonSorter`1">
            <summary>The base class used for all comparison based Sorters in the library.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\SorterExamples.cs" region="SortList" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\SorterExamples.vb" region="SortList" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="T:DmFramework.Generics.Sorting.Sorter`1">
            <summary>The base class for all sorters.</summary>
            <typeparam name="T">The type of element to be sorted.</typeparam>
        </member>
        <member name="T:DmFramework.Generics.Sorting.ISorter`1">
            <summary>An interface for a Sorter.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ISorter`1.Sort(System.Collections.Generic.IList{`0})">
            <summary>Sorts the specified list.</summary>
            <param name="list">The list to sort.</param>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ISorter`1.Sort(System.Collections.Generic.IList{`0},DmFramework.Generics.Sorting.SortOrder)">
            <summary>Sorts the specified list.</summary>
            <param name="list">The list to sort.</param>
            <param name="order">The order in which to sort the list.</param>
        </member>
        <member name="M:DmFramework.Generics.Sorting.Sorter`1.Sort(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.Sorting.Sorter`1.Sort(System.Collections.Generic.IList{`0},DmFramework.Generics.Sorting.SortOrder)">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.Sorting.Sorter`1.ValidateSortOrder(DmFramework.Generics.Sorting.SortOrder)">
            <summary>
             Validates <paramref name="sortOrder"/> variable that it has a valid value
            </summary>
            <param name="sortOrder"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:DmFramework.Generics.Sorting.IComparisonSorter`1">
            <summary>An interface for sorters that make the use of Comparers or Comparisons.</summary>
            <typeparam name="T">The element type the sorter w</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Sorting.IComparisonSorter`1.Sort(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <summary>Sorts the specified list.</summary>
            <param name="list">The list to sort.</param>
            <param name="comparer">The comparer to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference.</exception>
        </member>
        <member name="M:DmFramework.Generics.Sorting.IComparisonSorter`1.Sort(System.Collections.Generic.IList{`0},System.Comparison{`0})">
            <summary>Sorts the specified list.</summary>
            <param name="list">The list to sort.</param>
            <param name="comparison">The comparison to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is a null reference.</exception>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ComparisonSorter`1.Sort(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\SorterExamples.cs" region="SortListComparer" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\SorterExamples.vb" region="SortListComparer" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ComparisonSorter`1.Sort(System.Collections.Generic.IList{`0},System.Comparison{`0})">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\SorterExamples.cs" region="SortListDelegate" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\SorterExamples.vb" region="SortListDelegate" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ComparisonSorter`1.Sort(System.Collections.Generic.IList{`0},System.Comparison{`0},DmFramework.Generics.Sorting.SortOrder)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\SorterExamples.cs" region="SortListDelegate" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\SorterExamples.vb" region="SortListDelegate" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ComparisonSorter`1.Sort(System.Collections.Generic.IList{`0},DmFramework.Generics.Sorting.SortOrder)">
            <inheritdoc />
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\SorterExamples.cs" region="SortListOrder" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\SorterExamples.vb" region="SortListOrder" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ComparisonSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <summary>Sorts the specified list.</summary>
            <param name="list">The list.</param>
            <param name="comparer">The comparer to use in comparing items.</param>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ComparisonSorter`1.Swap(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>Swaps items in the specified list.</summary>
            <param name="list">The list.</param>
            <param name="pos1">The position of the first item.</param>
            <param name="pos2">The position of the last item.</param>
        </member>
        <member name="M:DmFramework.Generics.Sorting.BubbleSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.BucketSorter">
            <summary>A sorter that implements the Bucket Sort algorithm.</summary>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\BucketSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\BucketSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\BucketSorterExamples.cs" region="SortWithSortOrder" lang="cs" title="The following example shows how to use the Sort method with a SortOrder."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\BucketSorterExamples.vb" region="SortWithSortOrder" lang="vbnet" title="The following example shows how to use the Sort method with a SortOrder."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.BucketSorter.#ctor(System.Int32)">
            <param name="maximumUniverse">The maximum universe.(Obsolete)</param> 
        </member>
        <member name="M:DmFramework.Generics.Sorting.BucketSorter.#ctor">
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\BubbleSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\BubbleSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.BucketSorter.Sort(System.Collections.Generic.IList{System.Int32},DmFramework.Generics.Sorting.SortOrder)">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.CocktailSorter`1">
            <summary>A Bi-Directional Bubble sorter.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\CocktailSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\CocktailSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.CocktailSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.CombSorter`1">
            <summary>A comb sorter.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\CombSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\CombSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.CombSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.GnomeSorter`1">
            <summary>A sorter implementing the Gnome sort algorithm.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\GnomeSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\GnomeSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.GnomeSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.HeapSorter`1">
            <summary>An sorter for the Heap Sort algorithm.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\HeapSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\HeapSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.HeapSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.InsertionSorter`1">
            <summary>A sorter that implements the Insertion sort algorithm.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\InsertionSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\InsertionSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.InsertionSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <summary>Sorts the specified list.</summary>
            <param name="list">The list.</param>
            <param name="comparer">The comparer to use in comparing items.</param>
        </member>
        <member name="M:DmFramework.Generics.Sorting.InsertionSorter`1.Insert(System.Collections.Generic.IList{`0},System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>Inserts the specified item into the list in the correct position.</summary>
            <param name="list">The list.</param>
            <param name="sortedSequenceLength">Length of the sorted sequence.</param>
            <param name="val">The item to insert.</param>
            <param name="comparer">The comparer to use.</param>
        </member>
        <member name="M:DmFramework.Generics.Sorting.InsertionSorter`1.Sort(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0},System.Int32,System.Int32)">
            <summary>Sorts the specified list.</summary>
            <param name="list">The list.</param>
            <param name="comparer">The comparer.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="T:DmFramework.Generics.Sorting.MergeSorter`1">
            <summary>A merge sorter.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\MergeSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\MergeSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.MergeSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.Sorting.MergeSorter`1.MergeSort(System.Int32,System.Int32,System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <summary>Performs a merge sort.</summary>
            <param name="leftBoundary">The left boundary.</param>
            <param name="rightBoundary">The right boundary.</param>
            <param name="list">The list.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="T:DmFramework.Generics.Sorting.OddEvenTransportSorter`1">
            <summary>An OddEvenTransport sorter.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\OddEvenTransportSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\OddEvenTransportSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.OddEvenTransportSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.QuickSorter`1">
            <summary>A Quick Sort sorter.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\QuickSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\QuickSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.QuickSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:DmFramework.Generics.Sorting.QuickSorter`1.QuickSort(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0},System.Int32,System.Int32)">
            <summary>Quicks the sort.</summary>
            <param name="list">The list.</param>
            <param name="comparer">The comparer.</param>
            <param name="leftBoundary">The left boundary.</param>
            <param name="rightBoundary">The right boundary.</param>
        </member>
        <member name="M:DmFramework.Generics.Sorting.QuickSorter`1.GetPivot(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0},System.Int32,System.Int32)">
            <summary>Gets the pivot.</summary>
            <param name="list">The list.</param>
            <param name="comparer">The comparer.</param>
            <param name="leftBoundary">The left boundary.</param>
            <param name="rightBoundary">The right boundary.</param>
        </member>
        <member name="T:DmFramework.Generics.Sorting.RadixSorter">
            <summary>
            A sorter implementing Radix Sort.
            Adapted from Wikipedia : see http://en.wikipedia.org/wiki/Radix_sort.
            </summary>    
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\RadixSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\RadixSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.RadixSorter.Sort(System.Collections.Generic.IList{System.Int32},DmFramework.Generics.Sorting.SortOrder)">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.SelectionSorter`1">
            <summary>A sorter implementing the Selection Sort algorithm.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\SelectionSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\SelectionSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.SelectionSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.ShakerSorter`1">
            <summary>A Shaker Sorter.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\ShakerSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\ShakerSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ShakerSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.ShellSorter`1">
            <summary>A sorter that implements the Shell Sort algorithm.</summary>
            <typeparam name="T">The type of the elements to be sorted.</typeparam>
            <example>
            <code source="..\..\Source\Examples\ExampleLibraryCSharp\Sorting\ShellSorterExamples.cs" region="Sort" lang="cs" title="The following example shows how to use the Sort method."/>
            <code source="..\..\Source\Examples\ExampleLibraryVB\Sorting\ShellSorterExamples.vb" region="Sort" lang="vbnet" title="The following example shows how to use the Sort method."/>
            </example>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ShellSorter`1.SortItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <inheritdoc />
        </member>
        <member name="T:DmFramework.Generics.Sorting.ListExtensions">
            <summary>Provides extensions to lists.</summary>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},DmFramework.Generics.Sorting.ISorter{``0})">
            <summary>Sorts the specified list.</summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="list">The list.</param>
            <param name="sorter">The sorter.</param>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},DmFramework.Generics.Sorting.ISorter{``0},DmFramework.Generics.Sorting.SortOrder)">
            <summary>Sorts the specified list.</summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="list">The list.</param>
            <param name="sorter">The sorter.</param>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},DmFramework.Generics.Sorting.IComparisonSorter{``0},System.Comparison{``0})">
            <summary>Sorts using the specified sorter.</summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="sorter">The sorter to use in the sorting process.</param>
            <param name="comparison">The comparison.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sorter"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:DmFramework.Generics.Sorting.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},DmFramework.Generics.Sorting.IComparisonSorter{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Sorts using the specified sorter.</summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="list">The list.</param>
            <param name="sorter">The sorter to use in the sorting process.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sorter"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="T:DmFramework.Generics.Sorting.SortOrder">
            <summary>Specifies the sorting order.</summary>
        </member>
        <member name="F:DmFramework.Generics.Sorting.SortOrder.Ascending">
            <summary>Sort in ascending order.</summary>
        </member>
        <member name="F:DmFramework.Generics.Sorting.SortOrder.Descending">
            <summary>Sort in descending order.</summary>
        </member>
        <member name="T:DmFramework.Generics.Threading.AsyncCompletedEventArgs`1">
            <summary>Event for when async operations complete.</summary>
            <typeparam name="TState">The type of the state.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Threading.AsyncCompletedEventArgs`1.#ctor(System.Exception,System.Boolean,`0)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Threading.AsyncCompletedEventArgs`1"/> class.</summary>
            <param name="error">The error.</param>
            <param name="cancelled">if set to <c>true</c> [cancelled].</param>
            <param name="userState">State of the user.</param>
        </member>
        <member name="M:DmFramework.Generics.Threading.AsyncCompletedEventArgs`1.RaiseExceptionIfNecessary">
            <summary>Raises the exception if necessary.</summary>
        </member>
        <member name="P:DmFramework.Generics.Threading.AsyncCompletedEventArgs`1.Cancelled">
            <summary>Gets or sets a value indicating whether this <see cref="T:DmFramework.Generics.Threading.AsyncCompletedEventArgs`1"/> is cancelled.</summary>
            <value><c>true</c> if cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DmFramework.Generics.Threading.AsyncCompletedEventArgs`1.Error">
            <summary>Gets or sets the error.</summary>
            <value>The error.</value>
        </member>
        <member name="P:DmFramework.Generics.Threading.AsyncCompletedEventArgs`1.UserState">
            <summary>Gets or sets the state of the user.</summary>
            <value>The state of the user.</value>
        </member>
        <member name="T:DmFramework.Generics.Threading.BackgroundWorker`3">
            <summary>Generic Implementation for BackgroundWorker. Executes an operation on a separate thread.</summary>
            <remarks>
            This is a temporary solution until one is included in the .net framework. See http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=93696.
            </remarks>
            <typeparam name="TInput">The type of the argument that will be passed to the background operation.</typeparam>
            <typeparam name="TOutput">The type of the return value from the background operation.</typeparam>
            <typeparam name="TProgress">The type of state that will be passed back to notify the calling thread of a change in progress.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> class.</summary>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.CancelAsync">
            <summary>Requests cancellation of a pending background operation.</summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.WorkerSupportsCancellation"/> is <see langword="false"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.ReportProgress(System.Int32)">
            <summary>Calls the <see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.ProgressChanged"/> delegate.</summary>
            <param name="percentProgress">The percentage, from 0 to 100, of the background operation that is complete.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.WorkerReportsProgress"/> property is set to false.</exception>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.ReportProgress(System.Int32,`2)">
            <summary>Calls the <see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.ProgressChanged"/> delegate.</summary>
            <param name="percentProgress">The percentage, from 0 to 100, of the background operation that is complete.</param>
            <param name="userState">The state to pass to <see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.ProgressChanged"/>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.WorkerReportsProgress"/> property is set to false.</exception>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.SleepWhileBusy">
            <summary>Blocks the calling <see cref="T:System.Threading.Thread"/> until <see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.IsBusy"/> is false.</summary>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.ExecuteOnCallingThread``1(System.Action{``0},``0)">
            <summary>Executes an <see cref="T:System.Action`1"/> on the calling thread.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="action">The <see cref="T:System.Action`1"/> to execute.</param>
            <param name="arg">Thee argument to pass to <paramref name="action"/></param>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.RunWorkerAsync">
            <summary>Starts execution of a background operation.</summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.IsBusy"/> is <see langword="true"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.RunWorkerAsync(`0)">
            <summary>Starts execution of a background operation.</summary>
            <param name="argument">The argument to pass to <see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.DoWork"/>.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.IsBusy"/> is <see langword="true"/>.</exception>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.OnDoWork(DmFramework.Generics.Threading.DoWorkEventArgs{`0,`1})">
            <summary>Calls the <see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.DoWork"/> delegate.</summary>
            <param name="eventArgs">An EventArgs that contains the event data.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.DoWork"/> is null.</exception>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.OnProgressChanged(DmFramework.Generics.Threading.ProgressChangedEventArgs{`2})">
            <summary>Calls the <see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.ProgressChanged"/> delegate.</summary>
            <param name="eventArgs">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.OnRunWorkerCompleted(DmFramework.Generics.Threading.RunWorkerCompletedEventArgs{`1})">
            <summary>Calls the <see cref="P:DmFramework.Generics.Threading.BackgroundWorker`3.ProgressChanged"/> delegate.</summary>
            <param name="eventArgs">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:DmFramework.Generics.Threading.BackgroundWorker`3.AsyncOperationCompleted(System.Object)">
            <summary>Event handler for when the operation complets.</summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="P:DmFramework.Generics.Threading.BackgroundWorker`3.AsyncOperation">
            <summary>Gets or sets the async operation.</summary>
            <value>The async operation.</value>
        </member>
        <member name="P:DmFramework.Generics.Threading.BackgroundWorker`3.CancellationPending">
            <summary>Gets a value indicating whether the application has requested cancellation of a background operation.</summary>
            <returns><see langword="true"/> if the application has requested cancellation of a background operation; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</returns>
        </member>
        <member name="P:DmFramework.Generics.Threading.BackgroundWorker`3.IsBusy">
            <summary>Gets a value indicating whether the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> is running an asynchronous operation.</summary>
            <returns><see langword="true"/>, if the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> is running an asynchronous operation; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:DmFramework.Generics.Threading.BackgroundWorker`3.WorkerReportsProgress">
            <summary>Gets or sets a value indicating whether the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> can report progress updates.</summary>
            <return><see langword="true"/> if the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> supports progress updates; otherwise <see langword="false"/>. The default is <see langword="false"/>.</return>
        </member>
        <member name="P:DmFramework.Generics.Threading.BackgroundWorker`3.ThrowExceptionOnCompleted">
            <summary>Gets or sets whether to throw the <see cref="T:System.Exception"/> on <see cref="M:DmFramework.Generics.Threading.BackgroundWorker`3.OnRunWorkerCompleted(DmFramework.Generics.Threading.RunWorkerCompletedEventArgs{`1})"/> if one exists in <see cref="P:DmFramework.Generics.Threading.AsyncCompletedEventArgs`1.Error"/>.</summary>
            <return><see langword="true"/> if the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> throws the <see cref="T:System.Exception"/> on <see cref="M:DmFramework.Generics.Threading.BackgroundWorker`3.OnRunWorkerCompleted(DmFramework.Generics.Threading.RunWorkerCompletedEventArgs{`1})"/> if one exists in <see cref="P:DmFramework.Generics.Threading.AsyncCompletedEventArgs`1.Error"/>; otherwise <see langword="false"/>. The default is <see langword="true"/>.</return>
        </member>
        <member name="P:DmFramework.Generics.Threading.BackgroundWorker`3.WorkerSupportsCancellation">
            <summary>Gets or sets a value indicating whether the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> supports asynchronous cancellation.</summary>
            <return>
            <see langword="true"/> if the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> supports cancellation; otherwise <see langword="false"/>. The default is <see langword="false"/>.
            </return>
        </member>
        <member name="P:DmFramework.Generics.Threading.BackgroundWorker`3.DoWork">
            <summary>The <see cref="T:System.Func`2"/> to execute on the background <see cref="T:System.Threading.Thread"/>.</summary>
            <remarks>
            Executed on a background <see cref="T:System.Threading.Thread"/>. 
            The first parameter will be the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> that is executing the delegate.
            </remarks>
        </member>
        <member name="P:DmFramework.Generics.Threading.BackgroundWorker`3.ProgressChanged">
            <summary>Notifies the calling <see cref="T:System.Threading.Thread"/> of a progress change on the background <see cref="T:System.Threading.Thread"/>.</summary>
            <remarks>
            Called on the same thread that <see cref="M:DmFramework.Generics.Threading.BackgroundWorker`3.RunWorkerAsync"/> was called on.
            The first parameter will be the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> that is executing the delegate.
            </remarks>
        </member>
        <member name="P:DmFramework.Generics.Threading.BackgroundWorker`3.RunWorkerCompleted">
            <summary>Notifies the calling <see cref="T:System.Threading.Thread"/> that the background operation has completed, has been canceled, or has raised an exception.</summary>
            <remarks>
            Called on the same thread that <see cref="M:DmFramework.Generics.Threading.BackgroundWorker`3.RunWorkerAsync"/> was called on.
            The first parameter will be the <see cref="T:DmFramework.Generics.Threading.BackgroundWorker`3"/> that is executing the delegate.
            </remarks>
        </member>
        <member name="T:DmFramework.Generics.Threading.DoWorkEventArgs`2">
            <summary>The information for an event when work begins.</summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Threading.DoWorkEventArgs`2.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Threading.DoWorkEventArgs`2"/> class.</summary>
            <param name="argument">The argument.</param>
        </member>
        <member name="P:DmFramework.Generics.Threading.DoWorkEventArgs`2.Argument">
            <summary>Gets or sets the argument.</summary>
            <value>The argument.</value>
        </member>
        <member name="P:DmFramework.Generics.Threading.DoWorkEventArgs`2.Result">
            <summary>Gets or sets the result.</summary>
            <value>The result.</value>
        </member>
        <member name="T:DmFramework.Generics.Threading.ProgressChangedEventArgs`1">
            <summary>An event argument for when the progress of the task changed.</summary>
            <typeparam name="TState">The type of the state.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Threading.ProgressChangedEventArgs`1.#ctor(System.Int32,`0)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Threading.ProgressChangedEventArgs`1"/> class.</summary>
            <param name="progressPercentage">The progress percentage.</param>
            <param name="userState">State of the user.</param>
        </member>
        <member name="P:DmFramework.Generics.Threading.ProgressChangedEventArgs`1.ProgressPercentage">
            <summary>Gets or sets the progress percentage.</summary>
            <value>The progress percentage.</value>
        </member>
        <member name="P:DmFramework.Generics.Threading.ProgressChangedEventArgs`1.UserState">
            <summary>Gets or sets the state of the user.</summary>
            <value>The state of the user.</value>
        </member>
        <member name="T:DmFramework.Generics.Threading.RunWorkerCompletedEventArgs`1">
            <summary>An event argument fo when the worker has completed running.</summary>
            <typeparam name="TState">The type of the state.</typeparam>
        </member>
        <member name="M:DmFramework.Generics.Threading.RunWorkerCompletedEventArgs`1.#ctor(`0,System.Exception,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:DmFramework.Generics.Threading.RunWorkerCompletedEventArgs`1"/> class.</summary>
            <param name="result">The result.</param>
            <param name="error">The error.</param>
            <param name="cancelled">if set to <c>true</c> [cancelled].</param>
        </member>
        <member name="P:DmFramework.Generics.Threading.RunWorkerCompletedEventArgs`1.UserState">
            <summary>Gets or sets the state of the user.</summary>
            <value>The state of the user.</value>
        </member>
        <member name="T:DmFramework.Generics.Util.PLUtil">
            <summary>A holder class for various internal utility functions that need to be shared.</summary>
        </member>
        <member name="M:DmFramework.Generics.Util.PLUtil.IsCloneableType(System.Type,System.Boolean@)">
            <summary>
            Determine if a type is cloneable: either a value type or implementing
            ICloneable.
            </summary>
            <param name="type">Type to check.</param>
            <param name="isValue">Returns if the type is a value type, and does not implement ICloneable.</param>
            <returns>True if the type is cloneable.</returns>
        </member>
        <member name="M:DmFramework.Generics.Util.PLUtil.SimpleClassName(System.Type)">
            <summary>Returns the simple name of the class, for use in exception messages.</summary>
            <returns>The simple name of this class.</returns>
        </member>
        <member name="M:DmFramework.Generics.Util.PLUtil.CreateEnumerableWrapper``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wrap an enumerable so that clients can't get to the underlying
            implementation via a down-case
            </summary>
            <param name="wrapped">Enumerable to wrap.</param>
            <returns>A wrapper around the enumerable.</returns>
        </member>
        <member name="M:DmFramework.Generics.Util.PLUtil.GetHashCode``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets the hash code for an object using a comparer. Correctly handles
            null.
            </summary>
            <param name="item">Item to get hash code for. Can be null.</param>
            <param name="equalityComparer">The comparer to use.</param>
            <returns>The hash code for the item.</returns>
        </member>
        <member name="T:DmFramework.Generics.Util.PLUtil.WrapEnumerable`1">
            <summary>
            Wrap an enumerable so that clients can't get to the underlying 
            implementation via a down-cast.
            </summary>
        </member>
        <member name="M:DmFramework.Generics.Util.PLUtil.WrapEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Create the wrapper around an enumerable.</summary>
            <param name="wrapped">IEnumerable to wrap.</param>
        </member>
        <member name="T:DmFramework.Generics.Util.Swapper">
            <summary>Utility class for swapping values</summary>
        </member>
        <member name="M:DmFramework.Generics.Util.Swapper.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>Swaps items in the specified positions in the given list.</summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="pos1">The position of the first item.</param>
            <param name="pos2">The position of the second item.</param>
        </member>
        <member name="T:DmFramework.IO.HttpStreamClient">
            <summary>基于Http协议的数据流客户端</summary>
        </member>
        <member name="T:DmFramework.IO.StreamClient">
            <summary>数据流客户端，用于与服务端的数据流处理器通讯</summary>
        </member>
        <member name="M:DmFramework.IO.StreamClient.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:DmFramework.IO.StreamClient.#ctor(System.Uri)">
            <summary>实例化</summary>
            <param name="uri"></param>
        </member>
        <member name="M:DmFramework.IO.StreamClient.#ctor(System.String)">
            <summary>实例化</summary>
            <param name="url"></param>
        </member>
        <member name="M:DmFramework.IO.StreamClient.Send(System.Byte[])">
            <summary>同步发送数据</summary>
            <param name="data">待发送数据</param>
            <returns>服务端响应数据</returns>
        </member>
        <member name="M:DmFramework.IO.StreamClient.SendAsync(System.Byte[])">
            <summary>异步发送数据，服务端响应数据将由数据流总线处理</summary>
            <param name="data">待发送数据</param>
        </member>
        <member name="M:DmFramework.IO.StreamClient.Process(System.IO.Stream)">
            <summary>处理数据流</summary>
            <param name="stream"></param>
        </member>
        <member name="F:DmFramework.IO.StreamClient._Stream">
            <summary>内部数据流</summary>
        </member>
        <member name="M:DmFramework.IO.StreamClient.GetStream">
            <summary>获取用于收发数据的数据流</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.IO.StreamClient.Uri">
            <summary>服务端地址</summary>
        </member>
        <member name="P:DmFramework.IO.StreamClient.StreamHandlerName">
            <summary>数据流总线名称</summary>
        </member>
        <member name="T:DmFramework.IO.StreamClient.InternalStream">
            <summary>内部数据流。重写输入行为，然后使用一个内存流作为输出。</summary>
        </member>
        <member name="T:DmFramework.IO.ReadWriteStream">
            <summary>读写流。内部包含输入流和输出流两个流，实际读取从输入流读取，写入则写入到输出流</summary>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>初始化</summary>
            <param name="inputStream"></param>
            <param name="outputStream"></param>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.Flush">
            <summary>刷新输出流写入的数据</summary>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>从输入流中读取数据</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>在输入流中搜索</summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.SetLength(System.Int64)">
            <summary>设置输出流的长度</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>把数据写入到输出流中</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>开始异步读操作</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.EndRead(System.IAsyncResult)">
            <summary>等待挂起的异步读完成</summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>开始异步写操作</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.EndWrite(System.IAsyncResult)">
            <summary>等待挂起的异步写完成</summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:DmFramework.IO.ReadWriteStream.CheckArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>检查参数</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:DmFramework.IO.ReadWriteStream.InputStream">
            <summary>输入流</summary>
        </member>
        <member name="P:DmFramework.IO.ReadWriteStream.OutputStream">
            <summary>输出流</summary>
        </member>
        <member name="P:DmFramework.IO.ReadWriteStream.CanRead">
            <summary>输入流是否可读</summary>
        </member>
        <member name="P:DmFramework.IO.ReadWriteStream.CanSeek">
            <summary>输入流是否可移动</summary>
        </member>
        <member name="P:DmFramework.IO.ReadWriteStream.CanWrite">
            <summary>输出流是否可写</summary>
        </member>
        <member name="P:DmFramework.IO.ReadWriteStream.Length">
            <summary>输入流总长度</summary>
        </member>
        <member name="P:DmFramework.IO.ReadWriteStream.Position">
            <summary>输入流位置</summary>
        </member>
        <member name="P:DmFramework.IO.StreamClient.InternalStream.Client">
            <summary>数据流客户端</summary>
        </member>
        <member name="M:DmFramework.IO.HttpStreamClient.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:DmFramework.IO.HttpStreamClient.#ctor(System.Uri)">
            <summary>实例化</summary>
            <param name="uri"></param>
        </member>
        <member name="M:DmFramework.IO.HttpStreamClient.#ctor(System.String)">
            <summary>实例化</summary>
            <param name="url"></param>
        </member>
        <member name="M:DmFramework.IO.HttpStreamClient.Send(System.Byte[])">
            <summary>同步发送数据</summary>
            <param name="data">待发送数据</param>
            <returns>服务端响应数据</returns>
        </member>
        <member name="M:DmFramework.IO.HttpStreamClient.SendAsync(System.Byte[])">
            <summary>异步发送数据，服务端响应数据将由数据流总线处理</summary>
            <param name="data">待发送数据</param>
        </member>
        <member name="P:DmFramework.IO.HttpStreamClient.Client">
            <summary>客户端</summary>
        </member>
        <member name="T:DmFramework.IO.IStreamHandler">
            <summary>数据流处理器接口</summary>
        </member>
        <member name="M:DmFramework.IO.IStreamHandler.Process(System.IO.Stream)">
            <summary>处理数据流</summary>
            <param name="stream">待处理数据流</param>
            <returns>转发给下一个处理器的数据流，如果不想让后续处理器处理，返回空</returns>
        </member>
        <member name="P:DmFramework.IO.IStreamHandler.IsReusable">
            <summary>是否可以重用。</summary>
        </member>
        <member name="T:DmFramework.IO.StreamHandler">
            <summary>数据流处理器</summary>
        </member>
        <member name="M:DmFramework.IO.StreamHandler.Process(System.IO.Stream)">
            <summary>处理数据流</summary>
            <param name="stream"></param>
            <returns>转发给下一个处理器的数据流，如果不想让后续处理器处理，返回空</returns>
        </member>
        <member name="M:DmFramework.IO.StreamHandler.Register(System.String,DmFramework.IO.IStreamHandler,System.Boolean)">
            <summary>
            注册数据流处理器。
            数据流到达时将进入指定通道的每一个处理器。
            不同通道名称的处理器互不干扰。
            不提供注册到指定位置的功能，如果需要，再以多态方式实现。
            </summary>
            <param name="name">通道名称，用于区分数据流总线</param>
            <param name="handler">数据流处理器</param>
            <param name="cover">是否覆盖原有同类型处理器</param>
        </member>
        <member name="M:DmFramework.IO.StreamHandler.QueryRegister(System.String)">
            <summary>查询注册，返回指定通道的处理器数组。</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.StreamHandler.GetHandler">
            <summary>获取配置文件指定的处理器</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.StreamHandler.LoadConfig">
            <summary>从配置文件中加载工厂</summary>
        </member>
        <member name="M:DmFramework.IO.StreamHandler.Process(System.String,System.IO.Stream)">
            <summary>处理数据流。Http、Tcp、Udp等所有数据流都将到达这里，多种传输方式汇聚于此，由数据流总线统一处理！</summary>
            <param name="name"></param>
            <param name="stream"></param>
        </member>
        <member name="P:DmFramework.IO.StreamHandler.IsReusable">
            <summary>是否可以重用</summary>
        </member>
        <member name="T:DmFramework.IO.StreamHttpHandler">
            <summary>数据流Http处理器。可以在web.config中配置一个处理器指向该类。</summary>
        </member>
        <member name="M:DmFramework.IO.StreamHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>处理请求</summary>
            <param name="context"></param>
        </member>
        <member name="M:DmFramework.IO.StreamHttpHandler.OnProcess(System.Web.HttpContext)">
            <summary>处理请求</summary>
            <param name="context"></param>
        </member>
        <member name="M:DmFramework.IO.StreamHttpHandler.GetName(System.Web.HttpContext)">
            <summary>从Http上下文获取数据流总线名称</summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.StreamHttpHandler.GetStream(System.Web.HttpContext)">
            <summary>从Http上下文获取数据流</summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.StreamHttpHandler.ToHex(System.Byte[])">
            <summary>加密</summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.StreamHttpHandler.FromHex(System.String)">
            <summary>解密</summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.IO.StreamHttpHandler.IsReusable">
            <summary>是否可以重用</summary>
        </member>
        <member name="T:DmFramework.IO.FileHelper">
            <summary>　常用工具类——文件操作类</summary>
        </member>
        <member name="M:DmFramework.IO.FileHelper.FileIsExists(System.String)">
            <summary>返回文件是否存在</summary>
            <param name="filename">文件名</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.FileExists(System.String)">
            <summary>
            Checks if file exists. If linux, checks with case-insenstively (linux is case-sensitive).
            Returns actual file (In linux it may differ from requested file, because of case-sensitivity.)
            or null if file doesn't exist.
            </summary>
            <param name="fileName">File to check.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.IsImgFilename(System.String)">
            <summary>判断文件名是否为浏览器可以直接显示的图片文件名</summary>
            <param name="filename">文件名</param>
            <returns>是否可以直接显示</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.IsHiddenFile(System.String)">
            <summary>判断是否是隐藏文件</summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.CopyFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>复制指定目录的所有文件</summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
            <param name="copySubDir">如果为true,包含目录,否则不包含</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.MoveFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>移动指定目录的所有文件</summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
            <param name="moveSubDir">如果为true,包含目录,否则不包含</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.DeleteFiles(System.String)">
            <summary>删除指定目录下的指定文件</summary>
            <param name="TargetFileDir">指定文件的目录</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.BackupFile(System.String,System.String)">
            <summary>备份文件,当目标文件存在时覆盖</summary>
            <param name="sourceFileName">源文件名</param>
            <param name="destFileName">目标文件名</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.BackupFile(System.String,System.String,System.Boolean)">
            <summary>备份文件</summary>
            <param name="sourceFileName">源文件名</param>
            <param name="destFileName">目标文件名</param>
            <param name="overwrite">当目标文件存在时是否覆盖</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.RestoreFile(System.String,System.String,System.String)">
            <summary>恢复文件</summary>
            <param name="backupFileName">备份文件名</param>
            <param name="targetFileName">要恢复的文件名</param>
            <param name="backupTargetFileName">要恢复文件再次备份的名称,如果为null,则不再备份恢复文件</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.GetFileWriteTime(System.String)">
            <summary>获取文件最后修改时间</summary>
            <param name="FileUrl">文件真实路径</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.ConvertSimpleFileName(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>转换长文件名为短文件名</summary>
            <param name="filename"></param>
            <param name="repstring"></param>
            <param name="leftnum"></param>
            <param name="rightnum"></param>
            <param name="charnum"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.GetFileExtName(System.String)">
            <summary>获取指定文件的扩展名</summary>
            <param name="fileName">指定文件名</param>
            <returns>扩展名</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.ReadFile(System.String,System.Text.Encoding)">
            <summary>读取文件</summary>
            <param name="filePath">文件默认完路径名</param>
            <param name="encoding">读取文件编码方式（默认为utf-8）</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.ReadFile(System.String)">
            <summary>读取文件</summary>
            <param name="filePath">文件默认完路径名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.ReadFileWithLine(System.String,System.Text.Encoding)">
            <summary>读取文本文件（带换行符,能读取被锁住的文件）</summary>
            <param name="filePath"></param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.ReadFileEx(System.String)">
            <summary>将文件转换为二进制数组</summary>
            <param name="FilePath">文件完整路径</param>
            <returns>二进制数组</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.WriteFile(System.String,System.String,System.IO.FileMode)">
            <summary>写文件</summary>
            <param name="filePath">文件完全限定路径</param>
            <param name="content">需要写入的内容</param>
            /// <param name="fileModel">如果文件存在则设置添加模式(默认为追加)</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.WriteFile(System.String,System.String,System.IO.FileMode,System.Text.Encoding)">
            <summary>写文件</summary>
            <param name="filePath">文件完全限定路径</param>
            <param name="content">需要写入的内容</param>
            <param name="fileModel">如果文件存在则设置添加模式(默认为追加)</param>
            <param name="encoding">编码</param>
            <returns>成功：空；失败：错误消息</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.WriteFile(System.String,System.String)">
            <summary>写文件</summary>
            <param name="filePath">文件完全限定路径</param>
            <param name="content">需要写入的内容</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.WriteFileEx(System.String,System.String,System.Boolean)">
            <summary>向指定文件中添加内容。这个是扩展以前的方法，以UTF8的行式写内容，不会出现乱码。</summary>
            <param name="filePath"></param>
            <param name="content"></param>
            <param name="append"></param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.WriteFile(System.String,System.Byte[])">
            <summary>二进制数组转为文件</summary>
            <param name="FilePath">转到的文件完整路径</param>
            <param name="Buffer">二进制数组</param>
            <returns>转换是否成功</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.GetFileSize(System.IO.FileInfo)">
            <summary>获取文件大小并以B，KB，GB，TB方式表示</summary>
            <param name="File">文件(FileInfo类型)</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.GetFileSize(System.String)">
            <summary>获取文件大小并以B，KB，GB，TB方式表示</summary>
            <param name="FilePath">文件的具体路径</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.FindNoUTF8File(System.String)">
            <summary>返回指定目录下的非 UTF8 字符集文件</summary>
            <param name="Path">路径</param>
            <returns>文件名的字符串数组</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.IsUTF8(System.IO.FileStream)">
            <summary>判断文件流是否为UTF8字符集</summary>
            <param name="sbInputStream">文件流</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.FilesUpload(System.Web.UI.WebControls.FileUpload,System.String[],System.Int32,System.String,System.String)">
            <summary>工具方法：ASP.NET上传文件的方法</summary>
            <param name="myFileUpload">上传控件的ID</param>
            <param name="allowExtensions">允许上传的扩展文件名类型,如：String[] allowExtensions = { ".doc", ".xls", ".ppt", ".jpg", ".gif" };</param>
            <param name="maxLength">允许上传的最大大小，以M为单位</param>
            <param name="savePath">保存文件的目录，注意是绝对路径,如：Server.MapPath("~/upload/");</param>
            <param name="saveName">保存的文件名，如果是""则以原文件名保存</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.DownLoadFiles(System.String)">
            <summary>下载文件</summary>
            <param name="FileFullPath">下载文件下载的完整路径及名称</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.PathFix(System.String)">
            <summary>Fixes path separator, replaces / \ with platform separator Char.</summary>
            <param name="path">Path to fix.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.DeleteDirectoryFiles(System.String,System.Boolean)">
            <summary>删除指定目录的所有文件和子目录</summary>
            <param name="TargetDir">操作目录</param>
            <param name="delSubDir">如果为true,包含对子目录的操作</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.DirectoryExists(System.String)">
            <summary>
            Checks if directory exists. If linux, checks with case-insenstively (linux is case-sensitive).
            Returns actual dir (In linux it may differ from requested directory, because of case-sensitivity.)
            or null if directory doesn't exist.
            </summary>
            <param name="dirName">Directory to check.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.EnsureDirectory(System.String)">
            <summary>
            Ensures that specified folder exists, if not it will be created.
            Returns actual dir (In linux it may differ from requested directory, because of case-sensitivity.).
            </summary>
            <param name="folder">Folder name with path.</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.DirectoryIsExists(System.String)">
            <summary>检测目录是否存在</summary>
            <param name="StrPath">路径</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.DirectoryIsExists(System.String,System.Boolean)">
            <summary>检测目录是否存在</summary>
            <param name="StrPath">路径</param>
            <param name="Create">如果不存在，是否创建</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.CreateDirectory(System.String)">
            <summary>创建指定目录</summary>
            <param name="targetDir"></param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.CreateDirectory(System.String,System.String)">
            <summary>建立子目录</summary>
            <param name="parentDir">目录路径</param>
            <param name="subDirName">子目录名称</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>复制文件夹</summary>
            <param name="sourcePath">原始文件夹路径</param>
            <param name="destinationPath">新文件夹路径</param>
            <param name="overwriteexisting">是否覆盖(默认true)</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.CopyDirectory(System.String,System.String)">
            <summary>复制文件夹</summary>
            <param name="sourcePath">原始文件夹路径</param>
            <param name="destinationPath">新文件夹路径</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.ReNameFloder(System.String,System.String)">
            <summary>重命名文件夹</summary>
            <param name="OldFloderName">原路径文件夹名称</param>
            <param name="NewFloderName">新路径文件夹名称</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.DeleteDirectory(System.String)">
            <summary>删除指定目录</summary>
            <param name="targetDir">目录路径</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.DeleteSubDirectory(System.String)">
            <summary>删除指定目录的所有子目录,不包括对当前目录文件的删除</summary>
            <param name="targetDir">目录路径</param>
        </member>
        <member name="M:DmFramework.IO.FileHelper.GetLocalDrives">
            <summary>获取本地驱动器名列表</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.GetAppCurrentDirectory">
            <summary>获取应用程序当前可执行文件的路径</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileHelper.NormalizePath(System.String)">
            <summary>
            Gets the normalized version of fileName.
            Slashes are replaced with backslashes, backreferences "." and ".." are 'evaluated'.
            </summary>
        </member>
        <member name="M:DmFramework.IO.FileHelper.GetRelativePath(System.String,System.String)">
            <summary>
            Converts a given absolute path and a given base path to a path that leads
            from the base path to the absoulte path. (as a relative path)
            </summary>
        </member>
        <member name="M:DmFramework.IO.FileHelper.GetAbsolutePath(System.String,System.String)">
            <summary>Combines baseDirectoryPath with relPath and normalizes the resulting path.</summary>
        </member>
        <member name="M:DmFramework.IO.FileHelper.SearchDirectory(System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary>
            Finds all files which are valid to the mask <paramref name="filemask"/> in the path
            <paramref name="directory"/> and all subdirectories
            (if <paramref name="searchSubdirectories"/> is true).
            The found files are added to the List&lt;String&gt;
            <paramref name="collection"/>.
            If <paramref name="ignoreHidden"/> is true, hidden files and folders are ignored.
            </summary>
        </member>
        <member name="M:DmFramework.IO.FileHelper.IsValidPath(System.String)">
            <summary>This method checks if a path (full or relative) is valid.</summary>
        </member>
        <member name="M:DmFramework.IO.FileHelper.IsValidDirectoryName(System.String)">
            <summary>Checks that a single directory name (not the full path) is valid.</summary>
        </member>
        <member name="M:DmFramework.IO.FileHelper.IsValidDirectoryEntryName(System.String)">
            <summary>Checks that a single directory name (not the full path) is valid.</summary>
        </member>
        <member name="P:DmFramework.IO.FileHelper.ApplicationStartupPath">
            <summary>返回应用程序执行路径</summary>
        </member>
        <member name="P:DmFramework.IO.FileHelper.AppDomainBaseDirectory">
            <summary>返回应用程序执行路径，同ApplicationStartupPath</summary>
        </member>
        <member name="P:DmFramework.IO.FileHelper.ExecutingAssemblyLocation">
            <summary>返回当前程序集(DmFramework.dll)所在路径</summary>
        </member>
        <member name="T:DmFramework.IO.FileName">
            <summary>
            Represents a directory path or filename.
            The equality operator is overloaded to compare for path equality (case insensitive, normalizing paths with '..\')
            </summary>
        </member>
        <member name="M:DmFramework.IO.FileName.Create(System.String)">
            <summary>
            Creates a FileName instance from the String.
            It is valid to pass null or an empty String to this method (in that case, a null reference will be returned).
            </summary>
        </member>
        <member name="T:DmFramework.IO.FileSource">
            <summary>文件资源</summary>
        </member>
        <member name="M:DmFramework.IO.FileSource.ReleaseFile(System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>释放文件</summary>
            <param name="asm"></param>
            <param name="filenName"></param>
            <param name="dest"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:DmFramework.IO.FileSource.ReleaseFolder(System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>释放文件夹</summary>
            <param name="asm"></param>
            <param name="prefix"></param>
            <param name="dest"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:DmFramework.IO.FileSource.ReleaseFolder(System.Reflection.Assembly,System.String,System.String,System.Boolean,System.Func{System.String,System.String})">
            <summary>释放文件夹</summary>
            <param name="asm"></param>
            <param name="prefix"></param>
            <param name="dest"></param>
            <param name="overWrite"></param>
            <param name="filenameResolver"></param>
        </member>
        <member name="M:DmFramework.IO.FileSource.FileExists(System.Reflection.Assembly,System.String)">
            <summary>判断指定的资源文件是否存在</summary>
            <param name="asm"></param>
            <param name="filenName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetFileResource(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>获取文件资源</summary>
            <param name="asm"></param>
            <param name="filenName"></param>
            <param name="checkFileExist"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetFileResource(System.Reflection.Assembly,System.Type,System.String)">
            <summary>获取文件资源</summary>
            <param name="asm"></param>
            <param name="type"></param>
            <param name="filenName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetBitmap(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>获取资源图片</summary>
            <param name="asm"></param>
            <param name="filenName"></param>
            <param name="checkFileExist"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetBitmap(System.Reflection.Assembly,System.Type,System.String)">
            <summary>获取资源图片</summary>
            <param name="asm"></param>
            <param name="type"></param>
            <param name="filenName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetImage(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>获取资源图片</summary>
            <param name="asm"></param>
            <param name="filenName"></param>
            <param name="checkFileExist"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetImage(System.Reflection.Assembly,System.Type,System.String)">
            <summary>获取资源图片</summary>
            <param name="asm"></param>
            <param name="type"></param>
            <param name="filenName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetIcon(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>获取资源Icon</summary>
            <param name="asm"></param>
            <param name="filenName"></param>
            <param name="checkFileExist"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetIcon(System.Reflection.Assembly,System.String,System.Drawing.Size,System.Boolean)">
            <summary>获取资源Icon</summary>
            <param name="asm"></param>
            <param name="filenName"></param>
            <param name="size"></param>
            <param name="checkFileExist"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetIcon(System.Reflection.Assembly,System.String,System.Int32,System.Boolean)">
            <summary>获取资源Icon</summary>
            <param name="asm"></param>
            <param name="filenName"></param>
            <param name="sizeWH"></param>
            <param name="checkFileExist"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetIcon(System.Reflection.Assembly,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>获取资源Icon</summary>
            <param name="asm"></param>
            <param name="filenName"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="checkFileExist"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetIcon(System.Reflection.Assembly,System.Type,System.String)">
            <summary>获取资源Icon</summary>
            <param name="asm"></param>
            <param name="type"></param>
            <param name="filenName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetIcon(System.Reflection.Assembly,System.Type,System.String,System.Drawing.Size)">
            <summary>获取资源Icon</summary>
            <param name="asm"></param>
            <param name="type"></param>
            <param name="filenName"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetIcon(System.Reflection.Assembly,System.Type,System.String,System.Int32)">
            <summary>获取资源Icon</summary>
            <param name="asm"></param>
            <param name="type"></param>
            <param name="filenName"></param>
            <param name="sizeWH"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.FileSource.GetIcon(System.Reflection.Assembly,System.Type,System.String,System.Int32,System.Int32)">
            <summary>获取资源Icon</summary>
            <param name="asm"></param>
            <param name="type"></param>
            <param name="filenName"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="T:System.IOHelper">
            <summary>IO工具类</summary>
        </member>
        <member name="M:System.IOHelper.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>压缩数据流</summary>
            <param name="inStream">输入流</param>
            <param name="outStream">输出流</param>
        </member>
        <member name="M:System.IOHelper.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>解压缩数据流</summary>
            <param name="inStream">输入流</param>
            <param name="outStream">输出流</param>
        </member>
        <member name="M:System.IOHelper.Compress(System.Byte[])">
            <summary>压缩字节数组</summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.Decompress(System.Byte[])">
            <summary>解压缩字节数组</summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>复制数据流</summary>
            <param name="src">源数据流</param>
            <param name="des">目的数据流</param>
            <param name="bufferSize">缓冲区大小，也就是每次复制的大小</param>
            <param name="max">最大复制字节数</param>
            <returns>返回复制的总字节数</returns>
        </member>
        <member name="M:System.IOHelper.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>复制数组</summary>
            <param name="src">源数组</param>
            <param name="offset">起始位置</param>
            <param name="count">复制字节数</param>
            <returns>返回复制的总字节数</returns>
        </member>
        <member name="M:System.IOHelper.ReadBytes(System.IO.Stream,System.Int64)">
            <summary>流转为字节数组</summary>
            <param name="stream">数据流</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.ReadTo(System.IO.Stream,System.Byte[],System.Int64,System.Int64)">
            <summary>从数据流中读取字节数组，直到遇到指定字节数组</summary>
            <param name="stream">数据流</param>
            <param name="buffer">字节数组</param>
            <param name="offset">字节数组中的偏移</param>
            <param name="length">字节数组中的查找长度</param>
            <returns>未找到时返回空，0位置范围大小为0的字节数组</returns>
        </member>
        <member name="M:System.IOHelper.ReadTo(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>从数据流中读取字节数组，直到遇到指定字节数组</summary>
            <param name="stream">数据流</param>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.ReadLine(System.IO.Stream,System.Text.Encoding)">
            <summary>从数据流中读取一行，直到遇到换行</summary>
            <param name="stream">数据流</param>
            <param name="encoding"></param>
            <returns>未找到返回null，0位置返回String.Empty</returns>
        </member>
        <member name="M:System.IOHelper.ToStr(System.IO.Stream,System.Text.Encoding)">
            <summary>流转换为字符串</summary>
            <param name="stream">目标流</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.IndexOf(System.IO.Stream,System.Byte[],System.Int64,System.Int64)">
            <summary>在数据流中查找字节数组的位置，流指针会移动到结尾</summary>
            <param name="stream">数据流</param>
            <param name="buffer">字节数组</param>
            <param name="offset">字节数组中的偏移</param>
            <param name="length">字节数组中的查找长度</param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.IndexOf(System.Byte[],System.Byte[],System.Int64,System.Int64)">
            <summary>在字节数组中查找另一个字节数组的位置，不存在则返回-1</summary>
            <param name="source">字节数组</param>
            <param name="buffer">另一个字节数组</param>
            <param name="offset">偏移</param>
            <param name="length">查找长度</param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.IndexOf(System.Byte[],System.Int64,System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>在字节数组中查找另一个字节数组的位置，不存在则返回-1</summary>
            <param name="source">字节数组</param>
            <param name="start">源数组起始位置</param>
            <param name="count">查找长度</param>
            <param name="buffer">另一个字节数组</param>
            <param name="offset">偏移</param>
            <param name="length">查找长度</param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.CompareTo(System.Byte[],System.Byte[])">
            <summary>比较两个字节数组大小。相等返回0，不等则返回不等的位置，如果位置为0，则返回1。</summary>
            <param name="source"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.CompareTo(System.Byte[],System.Int64,System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>比较两个字节数组大小。相等返回0，不等则返回不等的位置，如果位置为0，则返回1。</summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.StartsWith(System.IO.Stream,System.Byte[])">
            <summary>一个数据流是否以另一个数组开头。如果成功，指针移到目标之后，否则保持指针位置不变。</summary>
            <param name="source"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.EndsWith(System.IO.Stream,System.Byte[])">
            <summary>一个数据流是否以另一个数组结尾。如果成功，指针移到目标之后，否则保持指针位置不变。</summary>
            <param name="source"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.StartsWith(System.Byte[],System.Byte[])">
            <summary>一个数组是否以另一个数组开头</summary>
            <param name="source"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:System.IOHelper.EndsWith(System.Byte[],System.Byte[])">
            <summary>一个数组是否以另一个数组结尾</summary>
            <param name="source"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.IO.Json">
            <summary>Json</summary>
        </member>
        <member name="M:DmFramework.IO.Json.ConvertToType``1(System.Object)">
            <summary></summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.Json.ConvertToType(System.Object,System.Type)">
            <summary></summary>
            <param name="obj"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.Json.Deserialize``1(System.String)">
            <summary></summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.Json.Deserialize(System.String,System.Type)">
            <summary></summary>
            <param name="input"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.Json.DeserializeObject(System.String)">
            <summary></summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.Json.Serialize(System.Object)">
            <summary></summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.Json.Serialize(System.Object,System.Text.StringBuilder)">
            <summary></summary>
            <param name="obj"></param>
            <param name="output"></param>
        </member>
        <member name="P:DmFramework.IO.Json.MaxJsonLength">
            <summary>最大长度</summary>
        </member>
        <member name="P:DmFramework.IO.Json.RecursionLimit">
            <summary>递归限制</summary>
        </member>
        <member name="T:System.IO.PathHelper">
            <summary>路径操作帮助</summary>
        </member>
        <member name="M:System.IO.PathHelper.GetFullPath(System.String)">
            <summary>获取文件或目录的全路径，过滤相对目录</summary>
            <remarks>不确保目录后面一定有分隔符，是否有分隔符由原始路径末尾决定</remarks>
            <param name="path">文件或目录</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathHelper.EnsureDirectory(System.String,System.Boolean)">
            <summary>确保目录存在，若不存在则创建</summary>
            <remarks>
            斜杠结尾的路径一定是目录，无视第二参数；
            默认是文件，这样子只需要确保上一层目录存在即可，否则如果把文件当成了目录，目录的创建会导致文件无法创建。
            </remarks>
            <param name="path">文件路径或目录路径，斜杠结尾的路径一定是目录，无视第二参数</param>
            <param name="isfile">该路径是否是否文件路径。文件路径需要取目录部分</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathHelper.CombinePath(System.String,System.String[])">
            <summary>合并多段路径</summary>
            <param name="path"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.IO.ReadWriteMemoryStream">
            <summary>读写流，继承自内存流，读写指针分开</summary>
            <remarks>
            注意资源锁，读写不可同时进行，会出现抢锁的情况。
            </remarks>
        </member>
        <member name="M:DmFramework.IO.ReadWriteMemoryStream.SeekForWrite(System.Int64,System.IO.SeekOrigin)">
            <summary>已重载。</summary>
            <param name="offset"></param>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.ReadWriteMemoryStream.ResetLength">
            <summary>重设长度，</summary>
        </member>
        <member name="M:DmFramework.IO.ReadWriteMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>已重载。</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.ReadWriteMemoryStream.ReadByte">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.IO.ReadWriteMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>已重载。</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:DmFramework.IO.ReadWriteMemoryStream.WriteByte(System.Byte)">
            <summary>已重载。</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.IO.ReadWriteMemoryStream.Dispose(System.Boolean)">
            <summary>资源释放，关闭事件量</summary>
            <param name="disposing"></param>
        </member>
        <member name="P:DmFramework.IO.ReadWriteMemoryStream.ReadTimeout">
            <summary>获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试读取多长时间。</summary>
        </member>
        <member name="P:DmFramework.IO.ReadWriteMemoryStream.PositionForWrite">
            <summary>写位置</summary>
        </member>
        <member name="P:DmFramework.IO.ReadWriteMemoryStream.MaxLength">
            <summary>最大长度，超过次长度时清空缓冲区</summary>
        </member>
        <member name="P:DmFramework.IO.ReadWriteMemoryStream.AvailableData">
            <summary>可用数据</summary>
        </member>
        <member name="T:DmFramework.IO.StreamReaderX">
            <summary>增强的数据流读取器</summary>
            <remarks>
            StreamReader太恶心了，自动把流给关闭了，还没有地方设置。
            </remarks>
        </member>
        <member name="M:DmFramework.IO.StreamReaderX.#ctor(System.IO.Stream)">
            <summary>为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例。</summary>
            <param name="stream">要读取的流。</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream" /> 不支持读取。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 null。</exception>
        </member>
        <member name="M:DmFramework.IO.StreamReaderX.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>用指定的字符编码为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的一个新实例。</summary>
            <param name="stream">要读取的流。</param>
            <param name="encoding">要使用的字符编码。</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream" /> 不支持读取。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 或 <paramref name="encoding" /> 为 null。</exception>
        </member>
        <member name="M:DmFramework.IO.StreamReaderX.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>为指定的流初始化 <see cref="T:System.IO.StreamReader" /> 类的新实例，带有指定的字符编码、字节顺序标记检测选项和缓冲区大小。</summary>
            <param name="stream">要读取的流。</param>
            <param name="encoding">要使用的字符编码。</param>
            <param name="closable">是否关闭数据流。</param>
            <exception cref="T:System.ArgumentException">流不支持读取。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 或 <paramref name="encoding" /> 为 null。</exception>
        </member>
        <member name="P:DmFramework.IO.StreamReaderX.Closable">
            <summary>是否在最后关闭流</summary>
        </member>
        <member name="P:DmFramework.IO.StreamReaderX.CharPosition">
            <summary>字符位置。因为涉及字符编码，所以跟流位置可能不同。对于ASCII编码没有问题。</summary>
        </member>
        <member name="T:DmFramework.IO.StreamWriterX">
            <summary>增强的数据流写入器</summary>
            <remarks>
            StreamWriter太恶心了，自动把流给关闭了，还没有地方设置。
            </remarks>
        </member>
        <member name="M:DmFramework.IO.StreamWriterX.#ctor(System.IO.Stream)">
            <summary>用 UTF-8 编码及默认缓冲区大小，为指定的流初始化 <see cref="T:System.IO.StreamWriter" /> 类的一个新实例。</summary>
            <param name="stream">要写入的流。</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream" /> 不可写。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 null。</exception>
        </member>
        <member name="M:DmFramework.IO.StreamWriterX.#ctor(System.String)">
            <summary>使用默认编码和缓冲区大小，为指定路径上的指定文件初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例。</summary>
            <param name="path">要写入的完整文件路径。<paramref name="path" /> 可以是一个文件名。</param>
            <exception cref="T:System.UnauthorizedAccessException">访问被拒绝。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> 为空字符串 ("")。- 或 -<paramref name="path" /> 包含系统设备的名称（com1、com2 等等）。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path" /> 包含不正确或无效的文件名、目录名或卷标的语法。</exception>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:DmFramework.IO.StreamWriterX.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>用指定的编码及默认缓冲区大小，为指定的流初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例。</summary>
            <param name="stream">要写入的流。</param>
            <param name="encoding">要使用的字符编码。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 或 <paramref name="encoding" /> 为 null。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream" /> 不可写。</exception>
        </member>
        <member name="M:DmFramework.IO.StreamWriterX.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>用指定的编码及缓冲区大小，为指定的流初始化 <see cref="T:System.IO.StreamWriter" /> 类的新实例。</summary>
            <param name="stream">要写入的流。</param>
            <param name="encoding">要使用的字符编码。</param>
            <param name="closable">是否关闭数据流。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 或 <paramref name="encoding" /> 为 null。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream" /> 不可写。</exception>
        </member>
        <member name="P:DmFramework.IO.StreamWriterX.Closable">
            <summary>是否在最后关闭流</summary>
        </member>
        <member name="T:DmFramework.Log.LogAction">
            <summary>根据需要扩展日志类型</summary>
        </member>
        <member name="T:DmFramework.Log.TextLogManager">
            <summary>
            作者: cl.carl wopani@gmail.com
            日期: 2010-06-02
            URL：http://www.cnblogs.com/kcitwm/archive/2012/02/27/log.html
            完全开源,敬请保留我的签名.
            修改：苦苦的苦瓜
            日期：2012-07-21
            </summary>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Create(System.String)">
            <summary>每个目录的日志实例应该只有一个，所以采用静态创建</summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Create(System.String,System.String,System.Int32)">
            <summary>每个目录的日志实例应该只有一个，所以采用静态创建</summary>
            <param name="path">日志路径</param>
            <param name="bakPath">日子备份路径</param>
            <param name="allowLogAction">允许存储的日志类型</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Write(DmFramework.Log.LogAction,DmFramework.Log.WriteLogEventArgs)">
            <summary>输出日志</summary>
            <param name="action">日志类型</param>
            <param name="e">信息实体</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Write(DmFramework.Log.LogAction,System.String)">
            <summary>写日志</summary>
            <param name="action"></param>
            <param name="msg"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Write(DmFramework.Log.LogAction,System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="action"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Write(DmFramework.Log.LogAction,System.Exception)">
            <summary>输出日志</summary>
            <param name="action"></param>
            <param name="ex"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Write(DmFramework.Log.LogAction,System.Exception,System.String)">
            <summary>输出日志</summary>
            <param name="action">日志类型</param>
            <param name="msg">信息</param>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Write(DmFramework.Log.LogAction,System.Exception,System.String,System.Object[])">
            <summary>输出带格式信息的日志</summary>
            <param name="action"></param>
            <param name="ex"></param>
            <param name="formatMsg"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.WriteLine(DmFramework.Log.WriteLogEventArgs)">
            <summary>输出日志</summary>
            <param name="e"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.WriteLine(System.String)">
            <summary>输出日志</summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.WriteLine(System.String,System.Object[])">
            <summary>输出带格式信息的日志</summary>
            <param name="formatMsg"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Info(System.String)">
            <summary>输出Info日志</summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Info(System.String,System.Object[])">
            <summary>输出带格式信息的Info日志</summary>
            <param name="formatMsg"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Error(System.String)">
            <summary>输出异常日志</summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Error(System.String,System.Object[])">
            <summary>输出带格式信息的异常日志</summary>
            <param name="formatMsg"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Error(System.Exception)">
            <summary>输出异常日志</summary>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Error(System.Exception,System.String)">
            <summary>输出异常日志</summary>
            <param name="ex">异常信息</param>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Error(System.Exception,System.String,System.Object[])">
            <summary>输出带格式信息的异常日志</summary>
            <param name="ex"></param>
            <param name="formatMsg"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Warn(System.String)">
            <summary>输出警告日志</summary>
            <param name="msg">警告信息</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.Warn(System.String,System.Object[])">
            <summary>输出带格式信息的Warn日志</summary>
            <param name="formatMsg"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.SQL(System.String)">
            <summary>输出SQL日志</summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.SQL(System.String,System.Object[])">
            <summary>输出带格式信息的SQL日志</summary>
            <param name="formatMsg"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.PushLog(DmFramework.Log.LogAction,DmFramework.Log.WriteLogEventArgs)">
            <summary>把日志信息推入队列</summary>
            <param name="action">日志类型</param>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.TextLogManager.FormatLogMsg(System.String,System.Object[])">
            <summary>格式化信息</summary>
        </member>
        <member name="P:DmFramework.Log.TextLogManager.FilePath">
            <summary>文件路径</summary>
        </member>
        <member name="P:DmFramework.Log.TextLogManager.BakPath">
            <summary>备份文件路径</summary>
        </member>
        <member name="P:DmFramework.Log.TextLogManager.LogPath">
            <summary>日志目录</summary>
        </member>
        <member name="P:DmFramework.Log.TextLogManager.LogBakPath">
            <summary>日志备份目录</summary>
        </member>
        <member name="T:DmFramework.Log.TraceStream">
            <summary>跟踪流。包装一个基础数据流，主要用于重写Read/Write等行为，跟踪程序操作数据流的过程</summary>
        </member>
        <member name="M:DmFramework.Log.TraceStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>写入</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:DmFramework.Log.TraceStream.WriteByte(System.Byte)">
            <summary>写入一个字节</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Log.TraceStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>读取</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Log.TraceStream.ReadByte">
            <summary>读取一个字节</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Log.TraceStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>异步开始读</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Log.TraceStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>异步开始写</summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Log.TraceStream.EndRead(System.IAsyncResult)">
            <summary>异步读结束</summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Log.TraceStream.EndWrite(System.IAsyncResult)">
            <summary>异步写结束</summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:DmFramework.Log.TraceStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>设置流位置</summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Log.TraceStream.Close">
            <summary>关闭数据流</summary>
        </member>
        <member name="M:DmFramework.Log.TraceStream.Flush">
            <summary>刷新缓冲区</summary>
        </member>
        <member name="M:DmFramework.Log.TraceStream.SetLength(System.Int64)">
            <summary>设置长度</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Log.TraceStream.#ctor">
            <summary>实例化跟踪流</summary>
        </member>
        <member name="M:DmFramework.Log.TraceStream.#ctor(System.IO.Stream)">
            <summary>实例化跟踪流</summary>
            <param name="stream"></param>
        </member>
        <member name="P:DmFramework.Log.TraceStream.BaseStream">
            <summary>基础流</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.TraceMembers">
            <summary>跟踪的成员</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.IsLittleEndian">
            <summary>是否小端字节序。x86系列则采用Little-Endian方式存储数据；网络协议都是Big-Endian；</summary>
            <remarks>
            网络协议都是Big-Endian；
            Java编译的都是Big-Endian；
            Motorola的PowerPC是Big-Endian；
            x86系列则采用Little-Endian方式存储数据；
            ARM同时支持 big和little，实际应用中通常使用Little-Endian。
            </remarks>
        </member>
        <member name="P:DmFramework.Log.TraceStream.ShowPositionStep">
            <summary>显示位置的步长，位移超过此长度后输出位置。默认10，设为0不输出位置</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.CanRead">
            <summary>可读</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.CanSeek">
            <summary>可搜索</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.CanTimeout">
            <summary>可超时</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.CanWrite">
            <summary>可写</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.ReadTimeout">
            <summary>可读</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.WriteTimeout">
            <summary>读写超时</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.Length">
            <summary>长度</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.Position">
            <summary>位置</summary>
        </member>
        <member name="E:DmFramework.Log.TraceStream.OnAction">
            <summary>操作时触发</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.UseConsole">
            <summary>是否使用控制台</summary>
        </member>
        <member name="P:DmFramework.Log.TraceStream.Encoding">
            <summary>编码</summary>
        </member>
        <member name="T:DmFramework.Log.WriteLogEventArgs">
            <summary>写日志事件参数</summary>
        </member>
        <member name="M:DmFramework.Log.WriteLogEventArgs.#ctor">
            <summary>实例化一个日志事件参数</summary>
        </member>
        <member name="M:DmFramework.Log.WriteLogEventArgs.#ctor(System.String)">
            <summary>构造函数</summary>
            <param name="message">日志</param>
        </member>
        <member name="M:DmFramework.Log.WriteLogEventArgs.#ctor(System.String,System.Exception)">
            <summary>构造函数</summary>
            <param name="message">日志</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:DmFramework.Log.WriteLogEventArgs.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>构造函数</summary>
            <param name="message">日志</param>
            <param name="exception">异常</param>
            <param name="isNewLine">是否换行</param>
        </member>
        <member name="M:DmFramework.Log.WriteLogEventArgs.Set(System.String,System.Exception,System.Boolean)">
            <summary>初始化为新日志</summary>
            <param name="message">日志</param>
            <param name="exception">异常</param>
            <param name="isNewLine">是否换行</param>
            <returns>返回自身，链式写法</returns>
        </member>
        <member name="M:DmFramework.Log.WriteLogEventArgs.Clear">
            <summary>清空日志特别是异常对象，避免因线程静态而导致内存泄漏</summary>
        </member>
        <member name="M:DmFramework.Log.WriteLogEventArgs.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Log.WriteLogEventArgs.Message">
            <summary>日志信息</summary>
        </member>
        <member name="P:DmFramework.Log.WriteLogEventArgs.Exception">
            <summary>异常</summary>
        </member>
        <member name="P:DmFramework.Log.WriteLogEventArgs.IsNewLine">
            <summary>是否换行</summary>
        </member>
        <member name="P:DmFramework.Log.WriteLogEventArgs.Time">
            <summary>时间</summary>
        </member>
        <member name="P:DmFramework.Log.WriteLogEventArgs.ThreadID">
            <summary>线程编号</summary>
        </member>
        <member name="P:DmFramework.Log.WriteLogEventArgs.IsPoolThread">
            <summary>是否线程池线程</summary>
        </member>
        <member name="P:DmFramework.Log.WriteLogEventArgs.IsWeb">
            <summary>是否Web线程</summary>
        </member>
        <member name="P:DmFramework.Log.WriteLogEventArgs.ThreadName">
            <summary>线程名</summary>
        </member>
        <member name="P:DmFramework.Log.WriteLogEventArgs.Current">
            <summary>线程专有实例。线程静态，每个线程只用一个，避免GC浪费</summary>
        </member>
        <member name="T:DmFramework.Log.HmTrace">
             <summary>日志类，包含跟踪调试功能</summary>
             <remarks>
             该静态类包括写日志、写调用栈和Dump进程内存等调试功能。
            
             默认写日志到文本文件，可通过挂接<see cref="E:DmFramework.Log.HmTrace.OnWriteLog"/>事件来增加日志输出方式。
             改变日志输出方式后，可通过<see cref="P:DmFramework.Log.HmTrace.UseFileLog"/>不再向文本文件输出日志。
             对于控制台工程，可以直接通过<see cref="M:DmFramework.Log.HmTrace.UseConsole(System.Boolean)"/>方法，把日志输出重定向为控制台输出，并且可以为不同线程使用不同颜色。
             </remarks>
        </member>
        <member name="F:DmFramework.Log.HmTrace.Log">
            <summary>文本文件日志</summary>
        </member>
        <member name="M:DmFramework.Log.HmTrace.Write(DmFramework.Log.LogAction,System.String)">
            <summary>写日志</summary>
            <param name="action"></param>
            <param name="msg"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.Write(DmFramework.Log.LogAction,System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="action"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.Write(DmFramework.Log.LogAction,System.Exception)">
            <summary>写日志</summary>
            <param name="action"></param>
            <param name="ex"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.Write(DmFramework.Log.LogAction,System.Exception,System.String)">
            <summary>写日志</summary>
            <param name="action"></param>
            <param name="ex"></param>
            <param name="msg"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.Write(DmFramework.Log.LogAction,System.Exception,System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="action"></param>
            <param name="ex"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteLine(System.String)">
            <summary>输出日志</summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteLine(System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteInfo(System.String)">
            <summary>输出日志</summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteInfo(System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteException(System.Exception)">
            <summary>输出异常日志</summary>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteException(System.String)">
            <summary>输出日志</summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteException(System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteException(System.Exception,System.String)">
            <summary>输出异常日志</summary>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteException(System.Exception,System.String,System.Object[])">
            <summary>输出异常日志</summary>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteWarn(System.String)">
            <summary>输出日志</summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteWarn(System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteDebug(System.String)">
            <summary>输出日志</summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteDebug(System.String,System.Object[])">
            <summary>写日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteDebug(System.Exception)">
            <summary>输出异常日志</summary>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteDebug(System.Exception,System.String)">
            <summary>输出异常日志</summary>
            <param name="ex" type="System.Exception">
            <para>异常信息</para>
            </param>
            <param name="msg" type="string">
            <para>错误信息</para>
            </param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteDebug(System.Exception,System.String,System.Object[])">
            <summary>输出异常日志</summary>
            <param name="ex" type="System.Exception">
            <para>异常信息</para>
            </param>
            <param name="format" type="string">
            <para></para>
            </param>
            <param name="args" type="object[]">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteSQL(System.String)">
            <summary>输出SQL日志</summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteSQL(System.String,System.Object[])">
            <summary>写SQL日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.UseConsole(System.Boolean)">
            <summary>使用控制台输出日志，只能调用一次</summary>
            <param name="useColor"></param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.UseWinForm(System.Boolean)">
            <summary>拦截WinForm异常并记录日志，可指定是否用<see cref="T:System.Windows.Forms.MessageBox"/>显示。</summary>
            <param name="showErrorMessage">发为捕获异常时，是否显示提示，默认显示</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.UseWinFormControl(System.Windows.Forms.Control,System.EventHandler{DmFramework.Log.WriteLogEventArgs},System.Int32)">
            <summary>在WinForm控件上输出日志，主要考虑非UI线程操作</summary>
            <remarks>不是常用功能，为了避免干扰常用功能，保持UseWinForm开头</remarks>
            <param name="control">要绑定日志输出的WinForm控件</param>
            <param name="handler">默认采用e.ToString()输出日志，除非外部自定义handler</param>
            <param name="maxlength">最大长度</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.UseWinFormWriteLog(System.Windows.Forms.Control,System.String,System.Int32)">
            <summary>在WinForm控件上输出日志，主要考虑非UI线程操作</summary>
            <remarks>不是常用功能，为了避免干扰常用功能，保持UseWinForm开头</remarks>
            <param name="control">要绑定日志输出的WinForm控件</param>
            <param name="msg">日志</param>
            <param name="maxlength">最大长度</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.WriteMiniDump(System.String)">
            <summary>写当前线程的MiniDump</summary>
            <param name="dumpFile">如果不指定，则自动写入日志目录</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.DebugStack">
            <summary>堆栈调试。
            输出堆栈信息，用于调试时处理调用上下文。
            本方法会造成大量日志，请慎用。
            </summary>
        </member>
        <member name="M:DmFramework.Log.HmTrace.DebugStack(System.Int32)">
            <summary>堆栈调试。</summary>
            <param name="maxNum">最大捕获堆栈方法数</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.DebugStack(System.Int32,System.Int32)">
            <summary>堆栈调试</summary>
            <param name="start">开始方法数，0是DebugStack的直接调用者</param>
            <param name="maxNum">最大捕获堆栈方法数</param>
        </member>
        <member name="M:DmFramework.Log.HmTrace.GetCaller(System.Int32,System.Int32,System.String)">
            <summary>获取调用栈</summary>
            <param name="start"></param>
            <param name="maxNum"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Log.HmTrace.UseFileLog">
            <summary>使用文件日志</summary>
        </member>
        <member name="P:DmFramework.Log.HmTrace.LogPath">
            <summary>日志路径</summary>
        </member>
        <member name="E:DmFramework.Log.HmTrace.OnWriteLog">
            <summary>写日志事件。</summary>
        </member>
        <member name="P:DmFramework.Log.HmTrace.Debug">
            <summary>是否调试。如果代码指定了值，则只会使用代码指定的值，否则每次都读取配置。</summary>
        </member>
        <member name="P:DmFramework.Log.HmTrace.TempPath">
            <summary>临时目录</summary>
        </member>
        <member name="T:DmFramework.Log.HmTrace.MiniDump">
            <summary>
            该类要使用在windows 5.1 以后的版本，如果你的windows很旧，就把Windbg里面的dll拷贝过来，一般都没有问题。
            DbgHelp.dll 是windows自带的 dll文件 。
            </summary>
        </member>
        <member name="T:DmFramework.Log.HmTrace.MiniDump.MinidumpExceptionInfo">
            <summary>MINIDUMP_EXCEPTION_INFORMATION</summary>
        </member>
        <member name="T:DmFramework.MatchHelper">
            <summary>常用工具类——验证类</summary>
        </member>
        <member name="M:DmFramework.MatchHelper.StrIsNullOrEmpty(System.String)">
            <summary>字段串是否为Null或为""(空)</summary>
            <param name="str">校验的字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsWhiteSpace(System.String)">
            <summary>Determines whether the String is all white space. Empty String will return false.</summary>
            <param name="s">The String to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the String is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsEmail(System.String)">
            <summary>检测是否符合email格式,需引用：using System.Text.RegularExpressions;</summary>
            <param name="strEmail">要判断的email字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsURL(System.String)">
            <summary>检测是否是正确的Url,需引用：using System.Text.RegularExpressions;</summary>
            <param name="strUrl">要验证的Url</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsIP(System.String)">
            <summary>是否为ip</summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsBase64String(System.String)">
            <summary>判断是否为base64字符串</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsColorValue(System.String)">
            <summary>检查颜色值是否为3/6位的合法颜色</summary>
            <param name="color">待检查的颜色</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsChinaPhone(System.String)">
            <summary>是否中国电话号码类型正确格式为："XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX"</summary>
            <param name="tel">要验证的电话号码字符串</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsChinesePostalCode(System.String)">
            <summary>是否中国邮政编码（6位数字 /d{6}）</summary>
            <param name="code">要检测的邮政编码字符串</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsChineseMobile(System.String)">
            <summary>是否中国移动电话号码（13开头的总11位数字 13/d{9}）</summary>
            <param name="phone">要检测的邮政编码字符串</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsChineseWord(System.String)">
            <summary>是否中文字符（[/u4e00-/u9fa5]）</summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsWideWord(System.String)">
            <summary>是否全角字符（[^/x00-/xff]）：包括汉字在内</summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsNarrowWord(System.String)">
            <summary>是否半角字符（[^/x00-/xff]）：包括汉字在内</summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsSafeSqlString(System.String)">
            <summary>检测是否有Sql危险字符,,需引用：using System.Text.RegularExpressions;</summary>
            <param name="str">要判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsSafeUserInfoString(System.String)">
            <summary>检测是否有危险的可能用于链接的字符串</summary>
            <param name="str">要判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsStartWithNumber(System.String)">
            <summary>检测字符串是否以数字开头</summary>
            <param name="str">要判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsOnlyNumber(System.String)">
            <summary>是否是数字（0到9的数字[/d]+）：不包括符号"."和"-"</summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsUpperCaseChar(System.String)">
            <summary>只能输入由26个大写英文字母组成的字符串</summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsLowerCaseChar(System.String)">
            <summary>只能输入由26个小写英文字母组成的字符串</summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsCharAndNumber(System.String)">
            <summary>字符串是否是字符和数字</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsUserPWD(System.String)">
            <summary>验证用户密码，正确格式为：以字母开头，长度在6~18之间，只能包含字符、数字和下划线。</summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsStringModel_01(System.String)">
            <summary>是否只包含数字，英文和下划线（[/w]+）</summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsStringModel_02(System.String)">
            <summary>是否大写首字母的英文字母（[A-Z][a-z]+）</summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsSByte(System.String)">
            <summary>判断字符串是否为SByte类型（8 位的有符号整数）： -128 到 +127 之间的整数</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsSByte(System.String,System.SByte@)">
            <summary>判断字符串是否为SByte类型（8 位的有符号整数）： -128 到 +127 之间的整数</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的SByte类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsByte(System.String)">
            <summary>判断字符串是否为Byte类型（8 位的无符号整数）： 0 和 255 之间的无符号整数</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsByte(System.String,System.Byte@)">
            <summary>判断字符串是否为Byte类型（8 位的无符号整数）： 0 和 255 之间的无符号整数</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的Byte类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsShort(System.String)">
            <summary>判断字符串是否为Int16类型（16 位的有符号整数）： -32768 到 +32767 之间的有符号整数</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsShort(System.String,System.Int16@)">
            <summary>判断字符串是否为Int16类型（16 位的有符号整数）： -32768 到 +32767 之间的有符号整数</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的Int16类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsUShort(System.String)">
            <summary>判断字符串是否为UInt16类型（16 位的无符号整数）： 0 到 65535 之间的有符号整数</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsUShort(System.String,System.UInt16@)">
            <summary>判断字符串是否为UInt16类型（16 位的无符号整数）： 0 到 65535 之间的有符号整数</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的UShort类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsInt(System.String)">
            <summary>判断字符串是否为Int32类型（32 位的有符号整数）：-2,147,483,648 到 +2,147,483,647 之间的有符号整数</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsInt(System.String,System.Int32@)">
            <summary>判断字符串是否为Int32类型（32 位的有符号整数）：-2,147,483,648 到 +2,147,483,647 之间的有符号整数</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的Int32类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsUInt(System.String)">
            <summary>判断字符串是否为UInt32类型（32 位的无符号整数）：0 到 4,294,967,295 之间的有符号整数</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsUInt(System.String,System.UInt32@)">
            <summary>判断字符串是否为UInt32类型（32 位的无符号整数）：0 到 4,294,967,295 之间的有符号整数</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的UInt32类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsLong(System.String)">
            <summary>判断字符串是否为Int64类型（64 位的有符号整数）： -9,223,372,036,854,775,808 到 +9,223,372,036,854,775,807 之间的整数</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsLong(System.String,System.Int64@)">
            <summary>判断字符串是否为Int64类型（64 位的有符号整数）： -9,223,372,036,854,775,808 到 +9,223,372,036,854,775,807 之间的整数</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的Int64类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsULong(System.String)">
            <summary>判断字符串是否为UInt64类型（64 位的无符号整数）： 0 到 18,446,744,073,709,551,615 之间的整数</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsULong(System.String,System.UInt64@)">
            <summary>判断字符串是否为UInt64类型（64 位的无符号整数）： 0 到 18,446,744,073,709,551,615 之间的整数</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的UInt64类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsFloat(System.String)">
            <summary>判断字符串是否为Single类型（单精度（32 位）浮点数字）： -3.402823e38 和 +3.402823e38 之间的单精度 32 位数字</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsFloat(System.String,System.Single@)">
            <summary>判断字符串是否为Single类型（单精度（32 位）浮点数字）： -3.402823e38 和 +3.402823e38 之间的单精度 32 位数字</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的Single类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsDouble(System.String)">
            <summary>判断字符串是否为Double类型（单精度（64 位）浮点数字）： -1.79769313486232e308 和 +1.79769313486232e308 之间的双精度 64 位数字</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsDouble(System.String,System.Double@)">
            <summary>判断字符串是否为Double类型（单精度（64 位）浮点数字）： -1.79769313486232e308 和 +1.79769313486232e308 之间的双精度 64 位数字</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的Double类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsDecimal(System.String)">
            <summary>判断字符串是否为Decimal类型（96 位十进制值）：从正 79,228,162,514,264,337,593,543,950,335 到负 79,228,162,514,264,337,593,543,950,335 之间的十进制数</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsDecimal(System.String,System.Decimal@)">
            <summary>判断字符串是否为Decimal类型（96 位十进制值）：从正 79,228,162,514,264,337,593,543,950,335 到负 79,228,162,514,264,337,593,543,950,335 之间的十进制数</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的Decimal类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsBoolen(System.String)">
            <summary>字符串能否转为Boolen类型</summary>
            <param name="Str">字符串,一般为True或False</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsChar(System.String)">
            <summary>字符串能否转为Char类型（Unicode（16 位）字符）：该 16 位数字的值范围为从十六进制值 0x0000 到 0xFFFF</summary>
            <param name="str">字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsChar(System.String,System.Char@)">
            <summary>字符串能否转为Char类型（Unicode（16 位）字符）：该 16 位数字的值范围为从十六进制值 0x0000 到 0xFFFF</summary>
            <param name="str">字符串</param>
            <param name="result">转换成功后的UInt32类型数值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsTime(System.String)">
            <summary>是否为时间格式</summary>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsDate(System.String)">
            <summary>是否为日期格式：2009-09-03</summary>
            <param name="DateStr">日期字符串</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsDateTime(System.String)">
            <summary>是否为日期加时间格式：2009-09-03 12:12:12</summary>
            <param name="DateTimeStr">日期加时间字符串</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.MatchHelper.IsDateString(System.String)">
            <summary>判断字符串是否是yy-mm-dd字符串</summary>
            <param name="str">待判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="T:DmFramework.Messaging.ChannelMessage">
            <summary>通道消息。封装带有通道编号的消息</summary>
        </member>
        <member name="T:DmFramework.Messaging.Message">
             <summary>消息实体基类</summary>
             <remarks>
             用消息实体来表达行为和数据，更加直观。
             同时，指定一套序列化和反序列化机制，实现消息实体与传输形式（二进制数据、XML、Json）的互相转换。
             如果消息较为简单，建议重载<see cref="M:DmFramework.Messaging.Message.OnWrite(System.IO.Stream,DmFramework.Serialization.RWKinds)"/>和<see cref="M:DmFramework.Messaging.Message.OnRead(System.IO.Stream,DmFramework.Serialization.RWKinds)"/>以得到更好的性能。
            
             消息实体仿照Windows消息来设计，拥有一部分系统内置消息，同时允许用户自定义消息。
             </remarks>
        </member>
        <member name="M:DmFramework.Messaging.Message.Init">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Messaging.Message.Write(System.IO.Stream,DmFramework.Serialization.RWKinds)">
            <summary>序列化当前消息到流中</summary>
            <param name="stream">数据流</param>
            <param name="rwkind">序列化类型</param>
        </member>
        <member name="M:DmFramework.Messaging.Message.OnWrite(System.IO.Stream,DmFramework.Serialization.RWKinds)">
            <summary>把消息写入流中，默认调用序列化框架</summary>
            <param name="stream">数据流</param>
            <param name="rwkind">序列化类型</param>
        </member>
        <member name="M:DmFramework.Messaging.Message.GetStream(DmFramework.Serialization.RWKinds)">
            <summary>序列化为数据流</summary>
            <param name="rwkind"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.Message.Read(System.IO.Stream,DmFramework.Serialization.RWKinds,System.Boolean)">
            <summary>从流中读取消息</summary>
            <param name="stream">数据流</param>
            <param name="rwkind"></param>
            <param name="ignoreException">忽略异常。如果忽略异常，读取失败时将返回空，并还原数据流位置</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.Message.OnRead(System.IO.Stream,DmFramework.Serialization.RWKinds)">
            <summary>从流中读取消息内容，默认调用序列化框架</summary>
            <param name="stream"></param>
            <param name="rwkind"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.Message.Read``1(System.IO.Stream)">
            <summary>从流中读取消息</summary>
            <typeparam name="TMessage"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.Message.OnReadWriteSet(DmFramework.Serialization.IReaderWriter)">
            <summary>读写前设置。每个消息可根据自己需要进行调整</summary>
            <param name="rw"></param>
        </member>
        <member name="M:DmFramework.Messaging.Message.PeekKind(System.IO.Stream)">
            <summary>探测消息类型，不移动流指针</summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.Message.PeekType(System.IO.Stream)">
            <summary>探测消息类型，不移动流指针</summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.Message.CopyFrom(DmFramework.Messaging.Message)">
            <summary>从源消息克隆设置和可序列化成员数据</summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.Message.ResolveAll">
            <summary>返回所有已注册消息</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.Message.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.Message.Kind">
            <summary>消息类型</summary>
            <remarks>第一个字节的第一位决定是否存在消息头。</remarks>
        </member>
        <member name="P:DmFramework.Messaging.Message.UserState">
            <summary>在消息处理过程中附带的用户对象。不参与序列化</summary>
        </member>
        <member name="P:DmFramework.Messaging.Message.Debug">
            <summary>是否调试，输出序列化过程</summary>
        </member>
        <member name="P:DmFramework.Messaging.Message.DumpStreamWhenError">
            <summary>出错时Dump数据流到文件中</summary>
        </member>
        <member name="T:DmFramework.Serialization.IAccessor">
             <summary>序列化访问器。接口实现者可以在这里完全自定义行为（返回true），也可以通过设置事件来影响行为（返回false）</summary>
             <example>
             显式实现接口默认代码：
             <code>
             Boolean IAccessor.Read(IReader reader) { return false; }
            
             Boolean IAccessor.ReadComplete(IReader reader, Boolean success) { return success; }
            
             Boolean IAccessor.Write(IWriter writer) { return false; }
            
             Boolean IAccessor.WriteComplete(IWriter writer, Boolean success) { return success; }
             </code>
             </example>
        </member>
        <member name="M:DmFramework.Serialization.IAccessor.Read(DmFramework.Serialization.IReader)">
            <summary>从读取器中读取数据到对象。接口实现者可以在这里完全自定义行为（返回true），也可以通过设置事件来影响行为（返回false）</summary>
            <param name="reader">读取器</param>
            <returns>是否读取成功，若返回成功读取器将不再读取该对象</returns>
        </member>
        <member name="M:DmFramework.Serialization.IAccessor.ReadComplete(DmFramework.Serialization.IReader,System.Boolean)">
            <summary>从读取器中读取数据到对象后执行。接口实现者可以在这里取消Read阶段设置的事件</summary>
            <param name="reader">读取器</param>
            <param name="success">是否读取成功</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.IAccessor.Write(DmFramework.Serialization.IWriter)">
            <summary>把对象数据写入到写入器。接口实现者可以在这里完全自定义行为（返回true），也可以通过设置事件来影响行为（返回false）</summary>
            <param name="writer">写入器</param>
            <returns>是否写入成功，若返回成功写入器将不再读写入对象</returns>
        </member>
        <member name="M:DmFramework.Serialization.IAccessor.WriteComplete(DmFramework.Serialization.IWriter,System.Boolean)">
            <summary>把对象数据写入到写入器后执行。接口实现者可以在这里取消Write阶段设置的事件</summary>
            <param name="writer">写入器</param>
            <param name="success">是否写入成功</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Messaging.ChannelMessage.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.ChannelMessage.Kind">
            <summary>消息类型</summary>
        </member>
        <member name="P:DmFramework.Messaging.ChannelMessage.Channel">
            <summary>消息通道</summary>
        </member>
        <member name="P:DmFramework.Messaging.ChannelMessage.SessionID">
            <summary>会话编号</summary>
        </member>
        <member name="P:DmFramework.Messaging.ChannelMessage.Message">
            <summary>内部消息对象</summary>
        </member>
        <member name="T:DmFramework.Messaging.CompressionMessage">
            <summary>经过压缩的消息</summary>
            <remarks>因为写入一个字节的对象引用，所以<see cref="P:DmFramework.Messaging.CompressionMessage.Message"/>为空时后面不怕有其它包</remarks>
        </member>
        <member name="M:DmFramework.Messaging.CompressionMessage.OnWrite(System.IO.Stream,DmFramework.Serialization.RWKinds)">
            <summary>已重载。</summary>
            <param name="stream">数据流</param>
            <param name="rwkind">序列化类型</param>
        </member>
        <member name="M:DmFramework.Messaging.CompressionMessage.OnRead(System.IO.Stream,DmFramework.Serialization.RWKinds)">
            <summary>已重载。</summary>
            <param name="stream">数据流</param>
            <param name="rwkind">序列化类型</param>
        </member>
        <member name="M:DmFramework.Messaging.CompressionMessage.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.CompressionMessage.Kind">
            <summary>消息类型</summary>
        </member>
        <member name="P:DmFramework.Messaging.CompressionMessage.Message">
            <summary>内部消息对象</summary>
        </member>
        <member name="T:DmFramework.Messaging.DataMessage">
            <summary>指定长度的字节数据消息</summary>
            <remarks>
            一般用于对数据进行二次包装，理论上，这是一个万能消息。
            数据长度由<see cref="P:DmFramework.Messaging.DataMessage.Data"/>决定，以编码整数来存储。
            </remarks>
        </member>
        <member name="M:DmFramework.Messaging.DataMessage.OnWrite(System.IO.Stream,DmFramework.Serialization.RWKinds)">
            <summary>已重载。</summary>
            <param name="stream">数据流</param>
            <param name="rwkind">序列化类型</param>
        </member>
        <member name="M:DmFramework.Messaging.DataMessage.OnReadWriteSet(DmFramework.Serialization.IReaderWriter)">
            <summary>读写前设置。不使用对象引用</summary>
            <param name="rw"></param>
        </member>
        <member name="M:DmFramework.Messaging.DataMessage.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.DataMessage.Kind">
            <summary>消息类型</summary>
        </member>
        <member name="P:DmFramework.Messaging.DataMessage.Data">
            <summary>数据</summary>
        </member>
        <member name="T:DmFramework.Messaging.EntitiesMessage">
            <summary>指定类型的实体对象数组消息</summary>
            <remarks>
            有些列表对象不适合直接序列化，并且不方便每次都进行转换，（如XCode的EntityList），此时适合用实体数组消息。
            实体对象个数由<see cref="P:DmFramework.Messaging.EntitiesMessage.Values"/>决定，以编码整数来存储。
            不写长度，所以<see cref="T:DmFramework.Messaging.Message"/>为空时后面不能有其它包
            </remarks>
        </member>
        <member name="M:DmFramework.Messaging.EntitiesMessage.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.EntitiesMessage.Kind">
            <summary>消息类型</summary>
        </member>
        <member name="P:DmFramework.Messaging.EntitiesMessage.Type">
            <summary>实体类型。可以是接口或抽象类型（要求对象容器能识别）</summary>
        </member>
        <member name="P:DmFramework.Messaging.EntitiesMessage.Values">
            <summary>实体列表</summary>
        </member>
        <member name="T:DmFramework.Messaging.EntityMessage">
            <summary>指定类型的对象消息</summary>
            <remarks>
            一般用于打包单个对象，理论上，这是一个万能消息。
            需要注意的是：本消息的设计，允许通讯双方使用不同的类，只要这两个类继承相同的接口或者抽象类。
            不写长度，所以<see cref="T:DmFramework.Messaging.Message"/>为空时后面不能有其它包
            </remarks>
        </member>
        <member name="M:DmFramework.Messaging.EntityMessage.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.EntityMessage.Kind">
            <summary>消息类型</summary>
        </member>
        <member name="P:DmFramework.Messaging.EntityMessage.Type">
            <summary>实体类型。可以是接口或抽象类型（要求对象容器能识别）</summary>
        </member>
        <member name="P:DmFramework.Messaging.EntityMessage.Value">
            <summary>对象值</summary>
        </member>
        <member name="T:DmFramework.Messaging.ExceptionMessage">
            <summary>异常消息</summary>
        </member>
        <member name="M:DmFramework.Messaging.ExceptionMessage.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.ExceptionMessage.Kind">
            <summary>消息类型</summary>
        </member>
        <member name="P:DmFramework.Messaging.ExceptionMessage.Value">
            <summary>异常对象</summary>
        </member>
        <member name="T:DmFramework.Messaging.GroupMessage">
            <summary>组消息</summary>
            <remarks>
            对于超长消息，可拆分为多个组消息进行传输，然后在目的地重组。
            </remarks>
        </member>
        <member name="M:DmFramework.Messaging.GroupMessage.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.GroupMessage.Kind">
            <summary>消息类型</summary>
        </member>
        <member name="P:DmFramework.Messaging.GroupMessage.Identity">
            <summary>唯一标识</summary>
        </member>
        <member name="P:DmFramework.Messaging.GroupMessage.Index">
            <summary>在组中的索引位置</summary>
        </member>
        <member name="P:DmFramework.Messaging.GroupMessage.Count">
            <summary>分组数</summary>
        </member>
        <member name="P:DmFramework.Messaging.GroupMessage.Data">
            <summary>数据</summary>
        </member>
        <member name="T:DmFramework.Messaging.MessageGroup">
            <summary>消息组。</summary>
            <remarks>
            20120421，连续两天半，完成消息分片组装算法，尽可能的让分片占用最大大小。
            </remarks>
        </member>
        <member name="M:DmFramework.Messaging.MessageGroup.Add(DmFramework.Messaging.GroupMessage)">
            <summary>添加组消息，返回是否已收到所有组消息。</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.MessageGroup.GetStream">
            <summary>获取整个数据流</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.MessageGroup.GetMessage">
            <summary>获取整个消息</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.MessageGroup.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.MessageGroup.Identity">
            <summary>唯一标识</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageGroup.Items">
            <summary>消息集合</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageGroup.First">
            <summary>第一个组消息，上面有总记录数</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageGroup.Total">
            <summary>总的组消息数</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageGroup.Count">
            <summary>组消息个数</summary>
        </member>
        <member name="T:DmFramework.Messaging.HttpClientMessageProvider">
            <summary>Http客户端消息提供者</summary>
        </member>
        <member name="T:DmFramework.Messaging.MessageProvider">
            <summary>消息提供者基类</summary>
        </member>
        <member name="T:DmFramework.Messaging.IMessageProvider">
             <summary>消息提供者接口</summary>
             <remarks>
             同步结构使用<see cref="M:DmFramework.Messaging.IMessageProvider.SendAndReceive(DmFramework.Messaging.Message,System.Int32)"/>；
             异步结构使用<see cref="M:DmFramework.Messaging.IMessageProvider.Send(DmFramework.Messaging.Message)"/>和<see cref="E:DmFramework.Messaging.IMessageProvider.OnReceived"/>；
             异步结构中也可以使用<see cref="M:DmFramework.Messaging.IMessageProvider.SendAndReceive(DmFramework.Messaging.Message,System.Int32)"/>，但是因为通过事件量完成，会极为不稳定。
            
             如果只需要操作某个通道的消息，可通过<see cref="M:IMessageConsumer Register(Byte channel)"/>实现。
            
             <see cref="M:DmFramework.Messaging.IMessageProvider.SendAndReceive(DmFramework.Messaging.Message,System.Int32)"/>适合客户端的大多数情况，比如同步Http、同步Tcp。
             如果内部实现是异步模型，则等待指定时间获取异步返回的第一条消息，该消息不再触发消息到达事件<see cref="E:DmFramework.Messaging.IMessageProvider.OnReceived"/>。
             </remarks>
        </member>
        <member name="M:DmFramework.Messaging.IMessageProvider.SendAndReceive(DmFramework.Messaging.Message,System.Int32)">
            <summary>发送并接收消息。主要用于应答式的请求和响应。该方法的实现不是线程安全的，使用时一定要注意。</summary>
            <remarks>如果内部实现是异步模型，则等待指定时间获取异步返回的第一条消息，该消息不再触发消息到达事件<see cref="E:DmFramework.Messaging.IMessageProvider.OnReceived"/>。</remarks>
            <param name="message"></param>
            <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite"/> (-1)，表示无限期等待。默认0表示不等待</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.IMessageProvider.Send(DmFramework.Messaging.Message)">
            <summary>发送消息。如果有响应，可在消息到达事件<see cref="E:DmFramework.Messaging.IMessageProvider.OnReceived"/>中获得。</summary>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.Messaging.IMessageProvider.Register(DmFramework.Messaging.MessageKind,DmFramework.Messaging.MessageKind)">
            <summary>注册消息消费者，仅消费指定范围的消息</summary>
            <param name="start">消息范围的起始</param>
            <param name="end">消息范围的结束</param>
            <returns>消息消费者</returns>
        </member>
        <member name="M:DmFramework.Messaging.IMessageProvider.Register(DmFramework.Messaging.MessageKind[])">
            <summary>注册消息消费者，仅消费指定范围的消息</summary>
            <param name="kinds">消息类型的集合</param>
            <returns>消息消费者</returns>
        </member>
        <member name="M:DmFramework.Messaging.IMessageProvider.Register(System.Byte)">
            <summary>注册消息消费者，仅消费指定通道的消息</summary>
            <param name="channel">通道</param>
            <returns>消息消费者</returns>
        </member>
        <member name="P:DmFramework.Messaging.IMessageProvider.MaxMessageSize">
            <summary>最大消息大小，超过该大小将分包发送。0表示不限制。</summary>
        </member>
        <member name="P:DmFramework.Messaging.IMessageProvider.AutoJoinGroup">
            <summary>是否自动组合<see cref="T:DmFramework.Messaging.GroupMessage"/>消息。</summary>
        </member>
        <member name="P:DmFramework.Messaging.IMessageProvider.JoinGroupTimeout">
            <summary>组合组消息超时时间，毫秒。对于<see cref="T:DmFramework.Messaging.GroupMessage"/>，如果后续包不能在当前时间之内到达，则认为超时，放弃该组。</summary>
        </member>
        <member name="E:DmFramework.Messaging.IMessageProvider.OnReceived">
            <summary>消息到达时触发</summary>
        </member>
        <member name="M:DmFramework.Messaging.IMessageProvider2.Process(DmFramework.Messaging.Message,System.Object)">
            <summary>收到消息时调用该方法</summary>
            <param name="message">消息</param>
            <param name="remoteIdentity">远程标识</param>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.Send(DmFramework.Messaging.Message)">
            <summary>发送消息。如果有响应，可在消息到达事件<see cref="E:DmFramework.Messaging.MessageProvider.OnReceived"/>中获得。这里会实现大消息分包。</summary>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.OnSend(System.IO.Stream)">
            <summary>发送数据流。</summary>
            <param name="stream"></param>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.Process(System.IO.Stream,System.Object,System.Object)">
            <summary>收到消息时调用该方法</summary>
            <param name="stream">数据流</param>
            <param name="state">用户状态</param>
            <param name="remoteIdentity">远程标识</param>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.Process(DmFramework.Messaging.Message,System.Object)">
            <summary>收到消息时调用该方法</summary>
            <param name="message">消息</param>
            <param name="remoteIdentity">远程标识</param>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.JoinGroup(DmFramework.Messaging.GroupMessage,System.Object)">
            <summary>组合组消息</summary>
            <param name="message">消息</param>
            <param name="remoteIdentity">远程标识</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.SendAndReceive(DmFramework.Messaging.Message,System.Int32)">
            <summary>发送并接收消息。主要用于应答式的请求和响应。</summary>
            <remarks>如果内部实现是异步模型，则等待指定时间获取异步返回的第一条消息，该消息不再触发消息到达事件<see cref="E:DmFramework.Messaging.MessageProvider.OnReceived"/>。</remarks>
            <param name="message"></param>
            <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite"/> (-1)，表示无限期等待。默认0表示不等待</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.Register(System.Byte)">
            <summary>注册消息消费者，仅消费指定通道的消息</summary>
            <param name="channel">通道</param>
            <returns>消息消费者</returns>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.Register(DmFramework.Messaging.MessageKind,DmFramework.Messaging.MessageKind)">
            <summary>注册消息消费者，仅消费指定范围的消息</summary>
            <param name="start">消息范围的起始</param>
            <param name="end">消息范围的结束</param>
            <returns>消息消费者</returns>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.Register(DmFramework.Messaging.MessageKind[])">
            <summary>注册消息消费者，仅消费指定范围的消息</summary>
            <param name="kinds">消息类型的集合</param>
            <returns>消息消费者</returns>
        </member>
        <member name="P:DmFramework.Messaging.MessageProvider.MaxMessageSize">
            <summary>最大消息大小，超过该大小将分包发送。0表示不限制。</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageProvider.AutoJoinGroup">
            <summary>是否自动组合<see cref="T:DmFramework.Messaging.GroupMessage"/>消息。</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageProvider.JoinGroupTimeout">
            <summary>组合组消息超时时间，毫秒。对于<see cref="T:DmFramework.Messaging.GroupMessage"/>，如果后续包不能在当前时间之内到达，则认为超时，放弃该组。</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageProvider.Parent">
            <summary>消息提供者</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageProvider.Kinds">
            <summary>响应的消息类型集合</summary>
        </member>
        <member name="E:DmFramework.Messaging.MessageProvider.OnReceived">
            <summary>消息到达时触发。这里将得到所有消息</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageProvider.Consumers2">
            <summary>消费者集合</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageProvider.Consumers">
            <summary>消费者集合</summary>
        </member>
        <member name="T:DmFramework.Messaging.IMessageConsumer">
            <summary>消息消费接口</summary>
        </member>
        <member name="M:DmFramework.Messaging.IMessageConsumer.SendAndReceive(DmFramework.Messaging.Message,System.Int32)">
            <summary>发送并接收消息。主要用于应答式的请求和响应。该方法的实现不是线程安全的，使用时一定要注意。</summary>
            <remarks>如果内部实现是异步模型，则等待指定时间获取异步返回的第一条消息，该消息不再触发消息到达事件<see cref="E:DmFramework.Messaging.IMessageConsumer.OnReceived"/>。</remarks>
            <param name="message"></param>
            <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite"/> (-1)，表示无限期等待。默认0表示不等待</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.IMessageConsumer.Send(DmFramework.Messaging.Message)">
            <summary>发送消息。如果有响应，可在消息到达事件<see cref="E:DmFramework.Messaging.IMessageConsumer.OnReceived"/>中获得。</summary>
            <param name="message"></param>
        </member>
        <member name="E:DmFramework.Messaging.IMessageConsumer.OnReceived">
            <summary>消息到达时触发</summary>
        </member>
        <member name="P:DmFramework.Messaging.IMessageConsumer.Channel">
            <summary>通道</summary>
        </member>
        <member name="P:DmFramework.Messaging.IMessageConsumer.Provider">
            <summary>消息提供者</summary>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.MessageConsumer2.Send(DmFramework.Messaging.Message)">
            <summary>发送消息</summary>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.MessageConsumer2.SendAndReceive(DmFramework.Messaging.Message,System.Int32)">
            <summary>发送并接收消息。主要用于应答式的请求和响应。</summary>
            <remarks>如果内部实现是异步模型，则等待指定时间获取异步返回的第一条消息，该消息不再触发消息到达事件<see cref="E:DmFramework.Messaging.MessageProvider.MessageConsumer2.OnReceived"/>。</remarks>
            <param name="message"></param>
            <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite"/> (-1)，表示无限期等待。默认0表示不等待</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.MessageConsumer2.Process(DmFramework.Messaging.Message)">
            <summary>收到消息时调用该方法</summary>
            <param name="message"></param>
        </member>
        <member name="P:DmFramework.Messaging.MessageProvider.MessageConsumer2.Channel">
            <summary>通道</summary>
        </member>
        <member name="P:DmFramework.Messaging.MessageProvider.MessageConsumer2.Provider">
            <summary>消息提供者</summary>
        </member>
        <member name="E:DmFramework.Messaging.MessageProvider.MessageConsumer2.OnReceived">
            <summary>消息到达时触发。这里将得到所有消息</summary>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.MessageConsumer.Send(DmFramework.Messaging.Message)">
            <summary>发送消息</summary>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.Messaging.MessageProvider.MessageConsumer.OnSend(System.IO.Stream)">
            <summary>发送数据流。</summary>
            <param name="stream"></param>
        </member>
        <member name="M:DmFramework.Messaging.HttpClientMessageProvider.SendAndReceive(DmFramework.Messaging.Message,System.Int32)">
            <summary>发送并接收消息。主要用于应答式的请求和响应。</summary>
            <param name="message"></param>
            <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。默认0表示不等待</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.HttpClientMessageProvider.OnSend(System.IO.Stream)">
            <summary>发送数据流。</summary>
            <param name="stream"></param>
        </member>
        <member name="P:DmFramework.Messaging.HttpClientMessageProvider.Uri">
            <summary>地址</summary>
        </member>
        <member name="P:DmFramework.Messaging.HttpClientMessageProvider.Client">
            <summary>客户端</summary>
        </member>
        <member name="T:DmFramework.Messaging.HttpMessageProviderHandler">
            <summary>Http消息提供者处理器。为消息提供者提供承载，核心是调用<see cref="M:HttpServerMessageProvider.Instance.Process"/></summary>
        </member>
        <member name="M:DmFramework.Messaging.HttpMessageProviderHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>处理。</summary>
            <param name="context"></param>
        </member>
        <member name="P:DmFramework.Messaging.HttpMessageProviderHandler.IsReusable">
            <summary>是否可重用。</summary>
        </member>
        <member name="T:DmFramework.Messaging.HttpServerMessageProvider">
            <summary>Http服务器消息提供者。单例模式，通过静态属性<see cref="P:DmFramework.Messaging.HttpServerMessageProvider.Instance"/>访问单一实例。</summary>
            <remarks>不支持<see cref="M:SendAnReceive"/>方法</remarks>
        </member>
        <member name="M:DmFramework.Messaging.HttpServerMessageProvider.OnSend(System.IO.Stream)">
            <summary>发送数据流。</summary>
            <param name="stream"></param>
        </member>
        <member name="M:DmFramework.Messaging.HttpServerMessageProvider.SendAndReceive(DmFramework.Messaging.Message,System.Int32)">
            <summary>已重载。不支持。</summary>
            <param name="message"></param>
            <param name="millisecondsTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.HttpServerMessageProvider.Process">
            <summary>处理。</summary>
        </member>
        <member name="P:DmFramework.Messaging.HttpServerMessageProvider.Context">
            <summary>上下文</summary>
        </member>
        <member name="P:DmFramework.Messaging.HttpServerMessageProvider.Instance">
            <summary>静态实例</summary>
        </member>
        <member name="T:DmFramework.Messaging.MessageEventArgs">
            <summary>消息事件参数</summary>
        </member>
        <member name="M:DmFramework.Messaging.MessageEventArgs.#ctor(DmFramework.Messaging.Message)">
            <summary>实例化</summary>
            <param name="message"></param>
        </member>
        <member name="P:DmFramework.Messaging.MessageEventArgs.Message">
            <summary>消息</summary>
        </member>
        <member name="T:DmFramework.Messaging.MessageKind">
            <summary>消息类型</summary>
            <remarks>定义一些常用的消息类型，其它用户自定义类型用数字代替</remarks>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.Null">
            <summary>空消息</summary>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.Data">
            <summary>指定长度的字节数据消息</summary>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.String">
            <summary>字符串</summary>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.Entity">
            <summary>指定类型的实体对象消息</summary>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.Entities">
            <summary>指定类型的实体对象数组消息</summary>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.Exception">
            <summary>异常消息</summary>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.Compression">
            <summary>经过压缩的消息</summary>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.Method">
            <summary>远程方法调用消息</summary>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.Group">
            <summary>组消息</summary>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.Channel">
            <summary>通道消息</summary>
        </member>
        <member name="F:DmFramework.Messaging.MessageKind.UserDefine">
            <summary>用户自定义消息在此基础上增加</summary>
        </member>
        <member name="T:DmFramework.Messaging.MethodMessage">
             <summary>远程方法调用消息</summary>
             <remarks>
             根据方法名<see cref="P:DmFramework.Messaging.MethodMessage.Name"/>在类型<see cref="P:DmFramework.Messaging.MethodMessage.Type"/>中找到方法，如果有多个签名，还得根据参数数组<see cref="P:DmFramework.Messaging.MethodMessage.Parameters"/>来选择。
             仅支持无返回或单一返回，不支持out/ref等参数。
            
             在服务端，通过调用消息的<see cref="M:DmFramework.Messaging.MethodMessage.Invoke"/>方法执行调用。
             如有异常，返回异常消息；
             如返回空，返回空消息；
             否则返回实体消息<see cref="T:DmFramework.Messaging.EntityMessage"/>
             </remarks>
        </member>
        <member name="M:DmFramework.Messaging.MethodMessage.Create(System.String,System.Object[])">
            <summary>根据包括类型和方法名的完整方法名，以及参数，创建方法消息</summary>
            <param name="fullMethodName">完整方法名</param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.MethodMessage.Invoke">
            <summary>处理消息</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Messaging.MethodMessage.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.MethodMessage.Kind">
            <summary>消息类型</summary>
        </member>
        <member name="P:DmFramework.Messaging.MethodMessage.Type">
            <summary>实体类型。可以是接口或抽象类型（要求对象容器能识别）</summary>
        </member>
        <member name="P:DmFramework.Messaging.MethodMessage.TypeName">
            <summary>实体类型名。可以是接口或抽象类型（要求对象容器能识别）</summary>
        </member>
        <member name="P:DmFramework.Messaging.MethodMessage.Name">
            <summary>方法名</summary>
        </member>
        <member name="P:DmFramework.Messaging.MethodMessage.Parameters">
            <summary>参数数组</summary>
        </member>
        <member name="P:DmFramework.Messaging.MethodMessage.Method">
            <summary>方法对象</summary>
        </member>
        <member name="T:DmFramework.Messaging.NullMessage">
            <summary>空消息。最短消息，只占一个字节</summary>
        </member>
        <member name="M:DmFramework.Messaging.NullMessage.OnWrite(System.IO.Stream,DmFramework.Serialization.RWKinds)">
            <summary>已重载。</summary>
            <param name="stream">数据流</param>
            <param name="rwkind">序列化类型</param>
        </member>
        <member name="M:DmFramework.Messaging.NullMessage.OnRead(System.IO.Stream,DmFramework.Serialization.RWKinds)">
            <summary>已重载。</summary>
            <param name="stream">数据流</param>
            <param name="rwkind">序列化类型</param>
        </member>
        <member name="P:DmFramework.Messaging.NullMessage.Kind">
            <summary>消息类型</summary>
        </member>
        <member name="T:DmFramework.Messaging.StringMessage">
            <summary>字符串消息。封装一个字符串，UTF8编码。</summary>
        </member>
        <member name="M:DmFramework.Messaging.StringMessage.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Messaging.StringMessage.Kind">
            <summary>消息类型</summary>
        </member>
        <member name="P:DmFramework.Messaging.StringMessage.Value">
            <summary>字符串</summary>
        </member>
        <member name="T:System.Action`5">
            <summary>五个参数</summary>
        </member>
        <member name="T:System.Action`6">
            <summary>六个参数</summary>
        </member>
        <member name="T:System.Action`7">
            <summary>七个参数</summary>
        </member>
        <member name="T:System.Action`8">
            <summary>八个参数</summary>
        </member>
        <member name="T:System.Func`6">
            <summary>具有指定五个参数和返回的委托</summary>
        </member>
        <member name="T:System.Func`7">
            <summary>具有指定六个参数和返回的委托</summary>
        </member>
        <member name="T:System.Func`8">
            <summary>具有指定七个参数和返回的委托</summary>
        </member>
        <member name="T:System.Func`9">
            <summary>具有指定八个参数和返回的委托</summary>
        </member>
        <member name="T:System.Action`9">
            <summary>九个参数</summary>
        </member>
        <member name="T:System.Action`10">
            <summary>十个参数</summary>
        </member>
        <member name="T:System.Action`11">
            <summary>十一个参数</summary>
        </member>
        <member name="T:System.Action`12">
            <summary>十二个参数</summary>
        </member>
        <member name="T:System.Action`13">
            <summary>十三个参数</summary>
        </member>
        <member name="T:System.Action`14">
            <summary>十四个参数</summary>
        </member>
        <member name="T:System.Action`15">
            <summary>十五个参数</summary>
        </member>
        <member name="T:System.Action`16">
            <summary>十六个参数</summary>
        </member>
        <member name="T:System.Func`10">
            <summary>具有指定九个参数和返回的委托</summary>
        </member>
        <member name="T:System.Func`11">
            <summary>具有指定十个参数和返回的委托</summary>
        </member>
        <member name="T:System.Func`12">
            <summary>具有指定十一个参数和返回的委托</summary>
        </member>
        <member name="T:System.Func`13">
            <summary>具有指定十二个参数和返回的委托</summary>
        </member>
        <member name="T:System.Func`14">
            <summary>具有指定十三个参数和返回的委托</summary>
        </member>
        <member name="T:System.Func`15">
            <summary>具有指定十四个参数和返回的委托</summary>
        </member>
        <member name="T:System.Func`16">
            <summary>具有指定十五个参数和返回的委托</summary>
        </member>
        <member name="T:System.Func`17">
            <summary>具有指定十六个参数和返回的委托</summary>
        </member>
        <member name="T:DmFramework.Model.IObjectContainer">
             <summary>对象容器接口</summary>
             <remarks>
             1，如果容器里面没有这个类型，则返回空；
             2，如果容器里面包含这个类型，<see cref="M:DmFramework.Model.IObjectContainer.ResolveInstance(System.Type,System.Object,System.Boolean)"/>返回单例；
             3，如果容器里面包含这个类型，<see cref="M:DmFramework.Model.IObjectContainer.Resolve(System.Type,System.Object,System.Boolean)"/>创建对象返回多实例；
             4，如果有带参数构造函数，则从容器内获取各个参数的实例，最后创建对象返回。
            
             这里有一点跟大多数对象容器非常不同，其它对象容器会控制对象的生命周期，在对象不再使用时收回到容器里面。
             这里的对象容器主要是为了用于解耦，所以只有最简单的功能实现。
            
             代码注册的默认优先级是0；
             配置注册的默认优先级是1；
             自动注册的外部实现（非排除项）的默认优先级是1，排除项的优先级是0；
             所以，配置注册的优先级最高
             </remarks>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.Register(System.Type,System.Type,System.Object,System.Object,System.Int32)">
            <summary>注册类型和名称</summary>
            <param name="from">接口类型</param>
            <param name="to">实现类型</param>
            <param name="instance">实例</param>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.Register``2(System.Object,System.Int32)">
            <summary>注册类型和名称</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <typeparam name="TImplement">实现类型</typeparam>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.Register``1(System.Object,System.Object,System.Int32)">
            <summary>注册类型指定名称的实例</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="instance">实例</param>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.AutoRegister(System.Type,System.Type[])">
            <summary>遍历所有程序集的所有类型，自动注册实现了指定接口或基类的类型。如果没有注册任何实现，则默认注册第一个排除类型</summary>
            <remarks>自动注册一般用于单实例功能扩展型接口</remarks>
            <param name="from">接口或基类</param>
            <param name="excludeTypes">要排除的类型，一般是内部默认实现</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.AutoRegister(System.Type,System.Func{System.Object,System.Object},System.Object,System.Int32,System.Type[])">
            <summary>遍历所有程序集的所有类型，自动注册实现了指定接口或基类的类型。如果没有注册任何实现，则默认注册第一个排除类型</summary>
            <param name="from">接口或基类</param>
            <param name="getidCallback">用于从外部类型对象中获取标识的委托</param>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <param name="excludeTypes">要排除的类型，一般是内部默认实现</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.AutoRegister``2">
            <summary>遍历所有程序集的所有类型，自动注册实现了指定接口或基类的类型。如果没有注册任何实现，则默认注册第一个排除类型</summary>
            <remarks>自动注册一般用于单实例功能扩展型接口</remarks>
            <typeparam name="TInterface">接口类型</typeparam>
            <typeparam name="TImplement">要排除的类型，一般是内部默认实现</typeparam>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.AutoRegister``2(System.Func{System.Object,System.Object},System.Object,System.Int32)">
            <summary>遍历所有程序集的所有类型，自动注册实现了指定接口或基类的类型。如果没有注册任何实现，则默认注册第一个排除类型</summary>
            <remarks>自动注册一般用于单实例功能扩展型接口</remarks>
            <typeparam name="TInterface">接口类型</typeparam>
            <typeparam name="TImplement">要排除的类型，一般是内部默认实现</typeparam>
            <param name="getidCallback">用于从外部类型对象中获取标识的委托</param>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.Resolve(System.Type,System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <param name="from">接口类型</param>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，id为null而找不到时，采用第一个注册项；id不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.Resolve``1(System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，id为null而找不到时，采用第一个注册项；id不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.ResolveInstance(System.Type,System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <param name="from">接口类型</param>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，id为null而找不到时，采用第一个注册项；id不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.ResolveInstance``1(System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，id为null而找不到时，采用第一个注册项；id不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.ResolveAll(System.Type)">
            <summary>解析类型所有已注册的实例</summary>
            <param name="from">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.ResolveAll``1">
            <summary>解析类型所有已注册的实例</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.ResolveType(System.Type,System.Object,System.Boolean)">
            <summary>解析接口指定名称的实现类型</summary>
            <param name="from">接口类型</param>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，id为null而找不到时，采用第一个注册项；id不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.ResolveType``1(System.Object,System.Boolean)">
            <summary>解析接口指定名称的实现类型</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，id为null而找不到时，采用第一个注册项；id不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.ResolveAllTypes(System.Type)">
            <summary>解析接口所有已注册的实现类型</summary>
            <param name="from">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.IObjectContainer.ResolveAllMaps(System.Type)">
            <summary>解析接口所有已注册的对象映射</summary>
            <param name="from">接口类型</param>
            <returns></returns>
        </member>
        <member name="E:DmFramework.Model.IObjectContainer.OnRegistering">
            <summary>注册前事件</summary>
        </member>
        <member name="E:DmFramework.Model.IObjectContainer.OnRegistered">
            <summary>注册后事件</summary>
        </member>
        <member name="T:DmFramework.Model.IObjectMap">
            <summary>对象映射接口</summary>
        </member>
        <member name="P:DmFramework.Model.IObjectMap.Identity">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Model.IObjectMap.ImplementType">
            <summary>实现类型</summary>
        </member>
        <member name="P:DmFramework.Model.IObjectMap.Instance">
            <summary>对象实例</summary>
        </member>
        <member name="T:DmFramework.Model.IPlugin">
            <summary>通用插件接口</summary>
            <remarks>
            为了方便构建一个简单通用的插件系统，先规定如下：
            1，负责加载插件的宿主，在加载插件后会进行插件实例化，此时可在插件构造函数中做一些事情，但不应该开始业务处理，因为宿主的准备工作可能尚未完成
            2，宿主一切准备就绪后，会顺序调用插件的Init方法，并将宿主标识传入，插件通过标识区分是否自己的目标宿主。插件的Init应尽快完成。
            3，如果插件实现了<see cref="T:System.IDisposable"/>接口，宿主最后会清理资源。
            </remarks>
        </member>
        <member name="M:DmFramework.Model.IPlugin.Init(System.String,System.IServiceProvider)">
            <summary>初始化</summary>
            <param name="identity">插件宿主标识</param>
            <param name="provider">服务提供者</param>
            <returns>返回初始化是否成功。如果当前宿主不是所期待的宿主，这里返回false</returns>
        </member>
        <member name="T:DmFramework.Model.PluginAttribute">
            <summary>插件特性。用于判断某个插件实现类是否支持某个宿主</summary>
        </member>
        <member name="M:DmFramework.Model.PluginAttribute.#ctor(System.String)">
            <summary>实例化</summary>
            <param name="identity"></param>
        </member>
        <member name="P:DmFramework.Model.PluginAttribute.Identity">
            <summary>插件宿主标识</summary>
        </member>
        <member name="T:DmFramework.Model.PluginManager">
            <summary>插件管理器</summary>
        </member>
        <member name="M:DmFramework.Model.PluginManager.#ctor">
            <summary>实例化一个插件管理器</summary>
        </member>
        <member name="M:DmFramework.Model.PluginManager.#ctor(System.Object)">
            <summary>使用宿主对象实例化一个插件管理器</summary>
            <param name="host"></param>
        </member>
        <member name="M:DmFramework.Model.PluginManager.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
            因为该方法只会被调用一次，所以该参数的意义不太大。</param>
        </member>
        <member name="M:DmFramework.Model.PluginManager.Load">
            <summary>加载插件。此时是加载所有插件，无法识别哪些是需要的</summary>
        </member>
        <member name="M:DmFramework.Model.PluginManager.Init">
            <summary>开始初始化。初始化之后，不属于当前宿主的插件将会被过滤掉</summary>
        </member>
        <member name="P:DmFramework.Model.PluginManager.Identity">
            <summary>宿主标识，用于供插件区分不同宿主</summary>
        </member>
        <member name="P:DmFramework.Model.PluginManager.Provider">
            <summary>宿主服务提供者</summary>
        </member>
        <member name="P:DmFramework.Model.PluginManager.Plugins">
            <summary>插件集合</summary>
        </member>
        <member name="T:DmFramework.Model.IServer">
            <summary>服务接口。</summary>
            <remarks>服务代理XAgent可以附加代理实现了IServer接口的服务。</remarks>
        </member>
        <member name="M:DmFramework.Model.IServer.Start">
            <summary>开始</summary>
        </member>
        <member name="M:DmFramework.Model.IServer.Stop">
            <summary>停止</summary>
        </member>
        <member name="T:DmFramework.Model.ModelExtension">
            <summary>模型扩展</summary>
        </member>
        <member name="M:DmFramework.Model.ModelExtension.GetService``1(System.IServiceProvider)">
            <summary>获取指定类型的服务对象</summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Model.ObjectContainer">
             <summary>实现 <seealso cref="T:DmFramework.Model.IObjectContainer"/> 接口的对象容器</summary>
             <remarks>
             1，如果容器里面没有这个类型，则返回空；
             2，如果容器里面包含这个类型，<see cref="M:DmFramework.Model.ObjectContainer.ResolveInstance(System.Type,System.Object,System.Boolean)"/>返回单例；
             3，如果容器里面包含这个类型，<see cref="M:DmFramework.Model.ObjectContainer.Resolve(System.Type,System.Object,System.Boolean)"/>创建对象返回多实例；
             4，如果有带参数构造函数，则从容器内获取各个参数的实例，最后创建对象返回。
            
             这里有一点跟大多数对象容器非常不同，其它对象容器会控制对象的生命周期，在对象不再使用时收回到容器里面。
             这里的对象容器主要是为了用于解耦，所以只有最简单的功能实现。
            
             代码注册的默认优先级是0；
             配置注册的默认优先级是1；
             自动注册的外部实现（非排除项）的默认优先级是1，排除项的优先级是0；
             所以，配置注册的优先级最高
             </remarks>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.#ctor">
            <summary>初始化一个对象容器实例，自动从配置文件中加载注册</summary>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.Register(System.Type,System.Type,System.Object,System.Object,System.Int32)">
            <summary>注册</summary>
            <param name="from">接口类型</param>
            <param name="to">实现类型</param>
            <param name="instance">实例</param>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.Register(System.Type,System.Type,System.Object,System.String,DmFramework.Model.ObjectContainer.ModeFlags,System.Object,System.Int32)">
            <summary>注册</summary>
            <param name="from">接口类型</param>
            <param name="to">实现类型</param>
            <param name="instance">实例</param>
            <param name="typeName">类型名称</param>
            <param name="mode">模式</param>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.Register``2(System.Object,System.Int32)">
            <summary>注册类型和名称</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <typeparam name="TImplement">实现类型</typeparam>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.Register``1(System.Object,System.Object,System.Int32)">
            <summary>注册类型指定名称的实例</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="instance">实例</param>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.AutoRegister(System.Type,System.Type[])">
            <summary>遍历所有程序集的所有类型，自动注册实现了指定接口或基类的类型。如果没有注册任何实现，则默认注册第一个排除类型</summary>
            <remarks>自动注册一般用于单实例功能扩展型接口</remarks>
            <param name="from">接口或基类</param>
            <param name="excludeTypes">要排除的类型，一般是内部默认实现</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.AutoRegister(System.Type,System.Func{System.Object,System.Object},System.Object,System.Int32,System.Type[])">
            <summary>遍历所有程序集的所有类型，自动注册实现了指定接口或基类的类型。如果没有注册任何实现，则默认注册第一个排除类型</summary>
            <param name="from">接口或基类</param>
            <param name="getidCallback">用于从外部类型对象中获取标识的委托</param>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <param name="excludeTypes">要排除的类型，一般是内部默认实现</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.AutoRegister``2">
            <summary>遍历所有程序集的所有类型，自动注册实现了指定接口或基类的类型。如果没有注册任何实现，则默认注册第一个排除类型</summary>
            <remarks>自动注册一般用于单实例功能扩展型接口</remarks>
            <typeparam name="TInterface">接口类型</typeparam>
            <typeparam name="TImplement">要排除的类型，一般是内部默认实现</typeparam>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.AutoRegister``2(System.Func{System.Object,System.Object},System.Object,System.Int32)">
            <summary>遍历所有程序集的所有类型，自动注册实现了指定接口或基类的类型。如果没有注册任何实现，则默认注册第一个排除类型</summary>
            <remarks>自动注册一般用于单实例功能扩展型接口</remarks>
            <typeparam name="TInterface">接口类型</typeparam>
            <typeparam name="TImplement">要排除的类型，一般是内部默认实现</typeparam>
            <param name="getidCallback">用于从外部类型对象中获取标识的委托</param>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.Resolve(System.Type,System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <param name="from">接口类型</param>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，id为null而找不到时，采用第一个注册项；id不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.Resolve``1(System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，name为null而找不到时，采用第一个注册项；name不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.ResolveInstance(System.Type,System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <param name="from">接口类型</param>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，id为null而找不到时，采用第一个注册项；id不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.ResolveInstance``1(System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，name为null而找不到时，采用第一个注册项；name不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.ResolveAll(System.Type)">
            <summary>解析类型所有已注册的实例</summary>
            <param name="from">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.ResolveAll``1">
            <summary>解析类型所有已注册的实例</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.ResolveType(System.Type,System.Object,System.Boolean)">
            <summary>解析接口指定名称的实现类型</summary>
            <param name="from">接口类型</param>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，name为null而找不到时，采用第一个注册项；name不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.ResolveType``1(System.Object,System.Boolean)">
            <summary>解析接口指定名称的实现类型</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，name为null而找不到时，采用第一个注册项；name不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.ResolveAllTypes(System.Type)">
            <summary>解析类型所有已注册的实例</summary>
            <param name="from">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.ResolveAllMaps(System.Type)">
            <summary>解析接口所有已注册的对象映射</summary>
            <param name="from">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.LoadConfig">
            <summary>加载配置</summary>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.GetConfig(DmFramework.Configuration.SystemConfigInfo.ObjectContainerItem)">
            <summary></summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ObjectContainer.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Model.ObjectContainer.Current">
            <summary>当前容器</summary>
        </member>
        <member name="E:DmFramework.Model.ObjectContainer.OnRegistering">
            <summary>注册前事件</summary>
        </member>
        <member name="E:DmFramework.Model.ObjectContainer.OnRegistered">
            <summary>注册后事件</summary>
        </member>
        <member name="P:DmFramework.Model.ObjectContainer.Map.Identity">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Model.ObjectContainer.Map.TypeName">
            <summary>类型名</summary>
        </member>
        <member name="P:DmFramework.Model.ObjectContainer.Map.ImplementType">
            <summary>实现类型</summary>
        </member>
        <member name="P:DmFramework.Model.ObjectContainer.Map.Priority">
            <summary>优先级</summary>
        </member>
        <member name="P:DmFramework.Model.ObjectContainer.Map.Instance">
            <summary>实例</summary>
        </member>
        <member name="P:DmFramework.Model.ObjectContainer.Map.Mode">
            <summary>模式</summary>
        </member>
        <member name="T:DmFramework.Model.ObjectContainer.ModeFlags">
            <summary>模式标记</summary>
        </member>
        <member name="F:DmFramework.Model.ObjectContainer.ModeFlags.Extend">
            <summary>是否扩展，扩展注册将附加在该接口的第一个注册项之后</summary>
        </member>
        <member name="T:DmFramework.Model.ServiceContainer`1">
            <summary>服务容器基类。使用泛型基类，仅仅是为了引发子类的静态构造函数。</summary>
            <typeparam name="TService">具体服务容器类</typeparam>
            <remarks>
            建议各个组件通过继承当前类实现一个私有的服务定位器，用于为组件内提供服务定位服务。
            组件内部的默认实现可以在静态构造函数中进行无覆盖注册。
            作为约定，组件内部的服务定位全部通过该类完成，保证服务在使用前已完成了注册。
            </remarks>
        </member>
        <member name="M:DmFramework.Model.ServiceContainer`1.Register``2(System.Object,System.Int32)">
            <summary>注册类型和名称</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <typeparam name="TImplement">实现类型</typeparam>
            <param name="id">标识</param>
            <param name="priority">优先级</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ServiceContainer`1.Register``1(System.Type,System.Object)">
            <summary>注册</summary>
            <typeparam name="T"></typeparam>
            <param name="impl"></param>
            <param name="id">标识</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ServiceContainer`1.Resolve(System.Type,System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <param name="type"></param>
            <param name="id">标识</param>
            <param name="extend"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ServiceContainer`1.Resolve``1(System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，name为null而找不到时，采用第一个注册项；name不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ServiceContainer`1.ResolveInstance(System.Type,System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <param name="type"></param>
            <param name="id">标识</param>
            <param name="extend"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ServiceContainer`1.ResolveInstance``1(System.Object,System.Boolean)">
            <summary>解析类型指定名称的实例</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，name为null而找不到时，采用第一个注册项；name不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Model.ServiceContainer`1.ResolveType``1(System.Object,System.Boolean)">
            <summary>解析类型</summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="id">标识</param>
            <param name="extend">扩展。若为ture，name为null而找不到时，采用第一个注册项；name不为null而找不到时，采用null注册项</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Model.ServiceContainer`1.Container">
            <summary>当前对象容器</summary>
        </member>
        <member name="F:DmFramework.AssemblyInfo.VersionShort">
            <summary>1.x</summary>
        </member>
        <member name="F:DmFramework.AssemblyInfo.Version">
            <summary>1.x.1</summary>
        </member>
        <member name="F:DmFramework.AssemblyInfo.StaticVersion">
            <summary>1.x.1.168</summary>
        </member>
        <member name="F:DmFramework.AssemblyInfo.FileVersion">
            <summary>1.x.1</summary>
        </member>
        <member name="F:DmFramework.AssemblyInfo.VSuffixWithoutSeparator">
            <summary>v1.x</summary>
        </member>
        <member name="F:DmFramework.AssemblyInfo.VSuffix">
            <summary>.v1.x</summary>
        </member>
        <member name="F:DmFramework.AssemblyInfo.VSuffixDesign">
            <summary>.v1.x.Design</summary>
        </member>
        <member name="F:DmFramework.AssemblyInfo.VSuffixWin">
            <summary>1x</summary>
        </member>
        <member name="T:DmFramework.HmExceptionBase">
            <summary>HmExceptionBase is the base exception class for the DmFramework.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:DmFramework.HmExceptionBase.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.HmExceptionBase.#ctor(System.String)">
            <summary>初始化</summary>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.HmExceptionBase.#ctor(System.String,System.Object[])">
            <summary>初始化</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.HmExceptionBase.#ctor(System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:DmFramework.HmExceptionBase.#ctor(System.Exception,System.String,System.Object[])">
            <summary>初始化</summary>
            <param name="innerException"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.HmExceptionBase.#ctor(System.Exception)">
            <summary>初始化</summary>
            <param name="innerException"></param>
        </member>
        <member name="M:DmFramework.HmExceptionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DmFramework.Reflection.ApiHook">
             <summary>API钩子</summary>
             <remarks>
             实现上，是两个方法的非托管指针互换，为了方便后面换回来。
             但是很奇怪，UnHook换回来后，执行的代码还是更换后的，也就是无法复原。
            
             一定要注意，在vs中调试会导致Hook失败，尽管换了指针，也无法变更代码执行流程。
             </remarks>
        </member>
        <member name="M:DmFramework.Reflection.ApiHook.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
            因为该方法只会被调用一次，所以该参数的意义不太大。</param>
        </member>
        <member name="M:DmFramework.Reflection.ApiHook.Hook">
            <summary>挂钩</summary>
        </member>
        <member name="M:DmFramework.Reflection.ApiHook.UnHook">
            <summary>取消挂钩</summary>
        </member>
        <member name="M:DmFramework.Reflection.ApiHook.GetMethodAddress(System.Reflection.MethodBase)">
            <summary>获取方法在JIT编译后的地址(JIT Stubs)</summary>
            <remarks>
            MethodBase.DeclaringType.TypeHandle.Value: 指向该类型方法表(编译后)在 JIT Stubs 的起始位置。
            Method.MethodHandle.Value: 表示该方法的索引序号。
            CLR 2.0 SP2 (2.0.50727.3053) 及其后续版本中，该地址的内存布局发生了变化。直接用 "Method.MethodHandle.Value + 2" 即可得到编译后的地址。
            </remarks>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ApiHook.ReplaceMethod(System.Reflection.MethodBase,System.Reflection.MethodBase)">
            <summary>替换方法</summary>
            <remarks>
            Method Address 处所存储的 Native Code Address 是可以修改的，也就意味着我们完全可以用另外一个具有相同签名的方法来替代它，从而达到偷梁换柱(Injection)的目的。
            </remarks>
            <param name="src"></param>
            <param name="des"></param>
        </member>
        <member name="P:DmFramework.Reflection.ApiHook.OriMethod">
            <summary>原始方法</summary>
        </member>
        <member name="P:DmFramework.Reflection.ApiHook.NewMethod">
            <summary>新方法</summary>
        </member>
        <member name="T:DmFramework.Reflection.AsmX86">
            <summary>X86内联汇编</summary>
        </member>
        <member name="F:DmFramework.Reflection.AsmX86.Builder">
            <summary>汇编代码</summary>
        </member>
        <member name="M:DmFramework.Reflection.AsmX86.SUB_ESP(System.Int32)">
            <summary>Sub ESP</summary>
            <param name="addre"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AsmX86.JMP_EAX">
            <summary>跳转</summary>
        </member>
        <member name="M:DmFramework.Reflection.AsmX86.Run(System.Int32)">
            <summary>在目标进程上执行</summary>
            <param name="pid"></param>
        </member>
        <member name="T:DmFramework.Reflection.AssemblyX">
            <summary>程序集辅助类。使用Create创建，保证每个程序集只有一个辅助类</summary>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.Create(System.Reflection.Assembly)">
            <summary>创建程序集辅助对象</summary>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.GetCustomAttribute``1">
            <summary>获取自定义属性</summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.GetCustomAttributeValue``2">
            <summary>获取自定义属性的值。可用于ReflectionOnly加载的程序集</summary>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.GetType(System.String)">
            <summary>从程序集中查找指定名称的类型</summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.GetTypeInternal(System.String)">
            <summary>在程序集中查找类型</summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.FindPlugins``1">
            <summary>查找插件</summary>
            <typeparam name="TPlugin"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.FindPlugins(System.Type)">
            <summary>查找插件，带缓存</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.FindAllPlugins(System.Type)">
            <summary>查找所有非系统程序集中的所有插件</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.FindAllPlugins(System.Type,System.Boolean)">
            <summary>查找所有非系统程序集中的所有插件</summary>
            <remarks>继承类所在的程序集会引用baseType所在的程序集，利用这一点可以做一定程度的性能优化。</remarks>
            <param name="baseType"></param>
            <param name="isLoadAssembly">是否从未加载程序集中获取类型。使用仅反射的方法检查目标类型，如果存在，则进行常规加载</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.FindAllPlugins(System.Type,System.Boolean,System.Boolean)">
            <summary>查找所有非系统程序集中的所有插件</summary>
            <remarks>继承类所在的程序集会引用baseType所在的程序集，利用这一点可以做一定程度的性能优化。</remarks>
            <param name="baseType"></param>
            <param name="isLoadAssembly">是否从未加载程序集中获取类型。使用仅反射的方法检查目标类型，如果存在，则进行常规加载</param>
            <param name="excludeGlobalTypes">指示是否应检查来自所有引用程序集的类型。如果为 false，则检查来自所有引用程序集的类型。 否则，只检查来自非全局程序集缓存 (GAC) 引用的程序集的类型。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.IsReferencedFrom(System.Reflection.Assembly,System.String)">
            <summary><paramref name="asm"/> 是否引用了 <paramref name="baseAsmName"/></summary>
            <param name="asm">程序集</param>
            <param name="baseAsmName">被引用程序集全名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.GetAssemblies(System.AppDomain)">
            <summary>获取指定程序域所有程序集</summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.GetAssemblies">
            <summary>获取当前程序域所有程序集</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.ReflectionOnlyGetAssemblies">
            <summary>获取当前程序域所有只反射程序集的辅助类</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.ReflectionOnlyLoad(System.String)">
            <summary>只反射加载指定路径的所有程序集</summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.GetMyAssemblies">
            <summary>获取当前应用程序的所有程序集，不包括系统程序集，仅限本目录</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.AssemblyX.Equal(System.Reflection.Assembly,System.Reflection.Assembly)">
            <summary>判断两个程序集是否相同，避免引用加载和执行上下文加载的相同程序集显示不同</summary>
            <param name="asm1"></param>
            <param name="asm2"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.Asm">
            <summary>程序集</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.Version">
            <summary>程序集版本</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.Title">
            <summary>程序集标题</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.FileVersion">
            <summary>文件版本</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.Compile">
            <summary>编译时间</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.CompileVersion">
            <summary>编译版本</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.Company">
            <summary>公司名称</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.Description">
            <summary>说明</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.Location">
            <summary>获取包含清单的已加载文件的路径或 UNC 位置。</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.Types">
            <summary>类型集合，当前程序集的所有类型，包括私有和内嵌，非内嵌请直接调用Asm.GetTypes()</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.TypeXs">
            <summary>类型集合，当前程序集的所有类型</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.IsSystemAssembly">
            <summary>是否系统程序集</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.Entry">
            <summary>入口程序集</summary>
        </member>
        <member name="P:DmFramework.Reflection.AssemblyX.AssemblyPaths">
            <summary>程序集目录集合</summary>
        </member>
        <member name="T:System.AttributeX">
            <summary>特性辅助类</summary>
        </member>
        <member name="M:System.AttributeX.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>获取自定义特性，带有缓存功能，避免因.Net内部GetCustomAttributes没有缓存而带来的损耗</summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="member"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:System.AttributeX.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>获取自定义属性</summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="member"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:System.AttributeX.GetCustomAttributes``1(System.Reflection.Assembly)">
            <summary>获取自定义属性，带有缓存功能，避免因.Net内部GetCustomAttributes没有缓存而带来的损耗</summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:System.AttributeX.GetCustomAttribute``1(System.Reflection.Assembly)">
            <summary>获取自定义属性</summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:System.AttributeX.GetCustomAttributeValue``2(System.Reflection.Assembly)">
            <summary>获取自定义属性的值。可用于ReflectionOnly加载的程序集</summary>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.AttributeX.GetCustomAttributeValue``2(System.Reflection.MemberInfo,System.Boolean)">
            <summary>获取自定义属性的值。可用于ReflectionOnly加载的程序集</summary>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="target"></param>
            <param name="inherit">是否递归</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Reflection.DuckTyping">
            <summary>鸭子类型。用于解决编写插件时必须实现插件接口的问题。使用适配器模式，动态生成代理类。</summary>
        </member>
        <member name="M:DmFramework.Reflection.DuckTyping.Implement``1(System.Object[])">
            <summary>转换多个对象</summary>
            <typeparam name="TInterface"></typeparam>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.DuckTyping.Implement``1(System.Object)">
            <summary>转换单个对象</summary>
            <typeparam name="TInterface"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.DuckTyping.Implement(System.Object,System.Type)">
            <summary>转换单个对象</summary>
            <param name="obj"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.DuckTyping.PrepareDuckTypes``1(System.Type[])">
            <summary>准备鸭子类型</summary>
            <typeparam name="TInterface"></typeparam>
            <param name="duckedTypes"></param>
        </member>
        <member name="M:DmFramework.Reflection.DuckTyping.CreateDuckTypes(System.Type,System.Type[])">
            <summary>Core-Creation of the DuckTypes. It asumes that all arguments are validated before the method is called.</summary>
            <param name="interfaceType"></param>
            <param name="duckedTypes">a distinct list of Types to create the Duck-Types</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Reflection.DynamicAssembly">
            <summary>全局方法程序集</summary>
        </member>
        <member name="M:DmFramework.Reflection.DynamicAssembly.AddGlobalMethod(System.Reflection.MethodInfo,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>添加全局方法</summary>
            <param name="method"></param>
            <param name="fun"></param>
        </member>
        <member name="M:DmFramework.Reflection.DynamicAssembly.Save(System.String)">
            <summary>保存</summary>
            <param name="fileName"></param>
        </member>
        <member name="P:DmFramework.Reflection.DynamicAssembly.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Reflection.DynamicAssembly.AsmBuilder">
            <summary>程序集创建器</summary>
        </member>
        <member name="P:DmFramework.Reflection.DynamicAssembly.ModBuilder">
            <summary>模块创建器</summary>
        </member>
        <member name="P:DmFramework.Reflection.DynamicAssembly.TypeBuilder">
            <summary>类型创建器</summary>
        </member>
        <member name="T:DmFramework.Reflection.EmitHelper">
            <summary>动态生成代码Emit助手。仅提供扩展功能，不封装基本功能</summary>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Ldc_I4(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>基于Ldc_I4指令的整数推送，自动选择最合适的指令</summary>
            <param name="IL">指令</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Ldarg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>基于Ldarg指令的参数加载，自动选择最合适的指令</summary>
            <param name="IL">指令</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Stloc(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>基于Stloc指令的弹栈，自动选择最合适的指令</summary>
            <param name="IL">指令</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Ldloc(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>基于Ldloc指令的压栈，自动选择最合适的指令</summary>
            <param name="IL">指令</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Ldfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>查找对象中其引用当前位于计算堆栈的字段的值。</summary>
            <param name="IL">指令</param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Ldind(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>间接加载到计算堆栈</summary>
            <param name="IL">指令</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Stind(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>间接加载到计算堆栈</summary>
            <param name="IL">指令</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Ldelem_Ref(System.Reflection.Emit.ILGenerator)">
            <summary>将位于指定数组索引处的包含对象引用的元素作为 O 类型（对象引用）加载到计算堆栈的顶部。</summary>
            <param name="IL">指令</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Stelem_Ref(System.Reflection.Emit.ILGenerator)">
            <summary>用计算堆栈上的对象 ref 值（O 类型）替换给定索引处的数组元素。</summary>
            <param name="IL">指令</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.CastFromObject(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>把一个类型转为指定类型，值类型装箱，引用类型直接Cast</summary>
            <param name="IL">指令</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.BoxIfValueType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>装箱</summary>
            <param name="IL">指令</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>调用</summary>
            <param name="IL">指令</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Ldnull(System.Reflection.Emit.ILGenerator)">
            <summary>加载空</summary>
            <param name="IL">指令</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.Ret(System.Reflection.Emit.ILGenerator)">
            <summary>返回</summary>
            <param name="IL">指令</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.NewValueType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>创建值类型，对象位于栈上</summary>
            <param name="IL">指令</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.NewArray(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>创建数组，参数必须是Object[]</summary>
            <param name="IL">指令</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.NewObj(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>创建对象</summary>
            <param name="IL">指令</param>
            <param name="constructor"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.CreateLocalsForByRefParams(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>为引用参数声明本地变量</summary>
            <param name="IL">指令</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.AssignByRefParamsToArray(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>将引用参数赋值到数组</summary>
            <param name="IL">指令</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.PushParamsOrLocalsToStack(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>将参数压栈</summary>
            <param name="IL">指令</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.PushParams(System.Reflection.Emit.ILGenerator,System.Int32,System.Reflection.MethodBase)">
            <summary>将指定参数位置的数组参数按照方法参数要求压栈</summary>
            <param name="IL">指令</param>
            <param name="paramIndex"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.EmitHelper.PushParams(System.Reflection.Emit.ILGenerator,System.Int32,System.Type[])">
            <summary>将指定参数位置的数组参数一个个压栈</summary>
            <param name="IL">指令</param>
            <param name="paramIndex"></param>
            <param name="paramTypes"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Reflection.FastIndexAccessor">
            <summary>快速索引器接口的默认实现</summary>
        </member>
        <member name="T:DmFramework.Reflection.IIndexAccessor">
            <summary>
            索引器接访问口。
            该接口用于通过名称快速访问对象属性或字段（属性优先）。
            </summary>
        </member>
        <member name="P:DmFramework.Reflection.IIndexAccessor.Item(System.String)">
            <summary>获取/设置 指定名称的属性或字段的值</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FastIndexAccessor.GetValue(System.Object,System.String)">
            <summary>获取目标对象指定属性字段的值</summary>
            <param name="target">目标对象</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FastIndexAccessor.TryGetValue(System.Object,System.String,System.Object@)">
            <summary>尝试获取目标对象指定属性字段的值，返回是否成功</summary>
            <param name="target">目标对象</param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FastIndexAccessor.GetValue``1(System.String)">
            <summary>获取目标对象指定属性字段的值</summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FastIndexAccessor.TryGetValue``1(System.String,``0@)">
            <summary>尝试获取目标对象指定属性字段的值，返回是否成功</summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FastIndexAccessor.SetValue(System.Object,System.String,System.Object)">
            <summary>设置目标对象指定属性字段的值</summary>
            <param name="target">目标对象</param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.FastIndexAccessor.TrySetValue(System.Object,System.String,System.Object)">
            <summary>尝试设置目标对象指定属性字段的值，返回是否成功</summary>
            <param name="target">目标对象</param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.FastIndexAccessor.Item(System.String)">
            <summary>
            获取/设置 字段值。
            一个索引，反射实现。
            派生实体类可重写该索引，以避免发射带来的性能损耗
            </summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Reflection.ILInstruction">
            <summary>IL指令</summary>
        </member>
        <member name="M:DmFramework.Reflection.ILInstruction.ToString">
            <summary>已重载。返回指令的字符串形式</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ILInstruction.FixType(System.Type)">
            <summary>取得类型的友好名</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.ILInstruction.Code">
            <summary>指令</summary>
        </member>
        <member name="P:DmFramework.Reflection.ILInstruction.Operand">
            <summary>操作</summary>
        </member>
        <member name="P:DmFramework.Reflection.ILInstruction.OperandData">
            <summary>操作数据</summary>
        </member>
        <member name="P:DmFramework.Reflection.ILInstruction.Offset">
            <summary>偏移</summary>
        </member>
        <member name="T:DmFramework.Reflection.MethodBodyReader">
            <summary>方法体读取器</summary>
        </member>
        <member name="M:DmFramework.Reflection.MethodBodyReader.#ctor(System.Reflection.MethodInfo)">
            <summary>为方法信息创建方法体读取器</summary>
            <param name="method"></param>
        </member>
        <member name="M:DmFramework.Reflection.MethodBodyReader.ConstructInstructions(System.Reflection.MethodInfo)">
            <summary>通过IL字节码构建指令集合</summary>
            <param name="mi"></param>
        </member>
        <member name="M:DmFramework.Reflection.MethodBodyReader.GetBodyCode">
            <summary>获取方法体IL代码</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodBodyReader.GetCode">
            <summary>获取方法IL代码，包括签名</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodBodyReader.LoadOpCodes">
            <summary>加载操作码</summary>
        </member>
        <member name="P:DmFramework.Reflection.MethodBodyReader.Method">
            <summary>方法</summary>
        </member>
        <member name="P:DmFramework.Reflection.MethodBodyReader.Instructions">
            <summary>指令集合</summary>
        </member>
        <member name="T:DmFramework.Reflection.ScriptEngine">
             <summary>脚本引擎</summary>
             <remarks>
             三大用法：
             1，单个表达式，根据参数计算表达式结果并返回
             2，多个语句，最后有返回语句
             3，多个方法，有一个名为Execute的静态方法作为入口方法
            
             脚本引擎禁止实例化，必须通过<see cref="M:DmFramework.Reflection.ScriptEngine.Create(System.String,System.Boolean)"/>方法创建，以代码为键进行缓存，避免重复创建反复编译形成泄漏。
             其中<see cref="M:DmFramework.Reflection.ScriptEngine.Create(System.String,System.Boolean)"/>方法的第二个参数为true表示前两种用法，为false表示第三种用法。
             </remarks>
             <example>
             最简单而完整的用法：
             <code>
             // 根据代码创建脚本实例，相同代码只编译一次
             var se = ScriptEngine.Create("a+b");
             // 如果Method为空说明未编译，可设置参数
             if (se.Method == null)
             {
                 se.Parameters.Add("a", typeof(Int32));
                 se.Parameters.Add("b", typeof(Int32));
             }
             // 脚本固定返回Object类型，需要自己转换
             var n = (Int32)se.Invoke(2, 3);
             Console.WriteLine("2+3={0}", n);
             </code>
            
             无参数快速调用：
             <code>
             var n = (Int32)ScriptEngine.Execute("2*3");
             </code>
            
             约定参数快速调用：
             <code>
             var n = (Int32)ScriptEngine.Execute("p0*p1", new Object[] { 2, 3 });
             Console.WriteLine("2*3={0}", n);
             </code>
             </example>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.#ctor(System.String,System.Boolean)">
            <summary>构造函数私有，禁止外部越过Create方法直接创建实例</summary>
            <param name="code">代码片段</param>
            <param name="isExpression">是否表达式，表达式将编译成为一个Main方法</param>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.Create(System.String,System.Boolean)">
            <summary>为指定代码片段创建脚本引擎实例。采用缓存，避免同一脚本重复创建引擎。</summary>
            <param name="code">代码片段</param>
            <param name="isExpression">是否表达式，表达式将编译成为一个Main方法</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.Execute(System.String)">
            <summary>执行表达式，返回结果</summary>
            <param name="code">代码片段</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.Execute(System.String,System.String[],System.Type[],System.Object[])">
            <summary>执行表达式，返回结果</summary>
            <param name="code">代码片段</param>
            <param name="names">参数名称</param>
            <param name="parameterTypes">参数类型</param>
            <param name="parameters">参数值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.Execute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>执行表达式，返回结果</summary>
            <param name="code">代码片段</param>
            <param name="parameters">参数名值对</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.Execute(System.String,System.Object[])">
            <summary>执行表达式，返回结果。参数名默认为p0/p1/p2/pn</summary>
            <param name="code"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.GenerateCode">
            <summary>生成代码。根据<see cref="P:DmFramework.Reflection.ScriptEngine.Code"/>完善得到最终代码<see cref="P:DmFramework.Reflection.ScriptEngine.FinalCode"/></summary>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.Compile">
            <summary>编译</summary>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.Compile(System.String,System.CodeDom.Compiler.CompilerParameters)">
            <summary>编译</summary>
            <param name="classCode"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.Invoke(System.Object[])">
            <summary>按照传入参数执行代码</summary>
            <param name="parameters">参数</param>
            <returns>结果</returns>
        </member>
        <member name="M:DmFramework.Reflection.ScriptEngine.ParseNameSpace(System.String)">
            <summary>分析命名空间</summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.ScriptEngine.Code">
            <summary>代码</summary>
        </member>
        <member name="P:DmFramework.Reflection.ScriptEngine.IsExpression">
            <summary>是否表达式</summary>
        </member>
        <member name="P:DmFramework.Reflection.ScriptEngine.Parameters">
            <summary>参数集合。编译后就不可修改。</summary>
        </member>
        <member name="P:DmFramework.Reflection.ScriptEngine.FinalCode">
            <summary>最终代码</summary>
        </member>
        <member name="P:DmFramework.Reflection.ScriptEngine.Method">
            <summary>根据代码编译出来可供直接调用的方法</summary>
        </member>
        <member name="P:DmFramework.Reflection.ScriptEngine.Mix">
            <summary>快速反射</summary>
        </member>
        <member name="P:DmFramework.Reflection.ScriptEngine.NameSpaces">
            <summary>命名空间集合</summary>
        </member>
        <member name="P:DmFramework.Reflection.ScriptEngine.ReferencedAssemblies">
            <summary>引用程序集集合</summary>
        </member>
        <member name="T:DmFramework.Reflection.ConstructorInfoX">
            <summary>快速调用构造函数。基于DynamicMethod和Emit实现。</summary>
        </member>
        <member name="T:DmFramework.Reflection.MemberInfoX">
            <summary>快速访问成员</summary>
        </member>
        <member name="F:DmFramework.Reflection.MemberInfoX.DefaultBinding">
            <summary>默认查找标志</summary>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.#ctor(System.Reflection.MemberInfo)">
            <summary>初始化快速访问成员</summary>
            <param name="member"></param>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.Create(System.Reflection.MemberInfo)">
            <summary>创建快速访问成员</summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.Create(System.Type,System.String)">
            <summary>通过指定类型和成员名称，创建快速访问成员。按照属性、字段、构造、方法、事件的顺序</summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.Invoke(System.Object,System.Object[])">
            <summary>执行方法</summary>
            <param name="obj"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.GetValue(System.Object)">
            <summary>取值</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.SetValue(System.Object,System.Object)">
            <summary>赋值</summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.GetValue">
            <summary>静态 取值</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.SetValue(System.Object)">
            <summary>静态 赋值</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.CreateInstance(System.Object[])">
            <summary>创建实例</summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.op_Implicit(DmFramework.Reflection.MemberInfoX)~System.Reflection.MemberInfo">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.op_Implicit(System.Reflection.MemberInfo)~DmFramework.Reflection.MemberInfoX">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.HasRefParam(System.Reflection.MethodBase)">
            <summary>是否有引用参数</summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MemberInfoX.GetCustomAttributeValue``2">
            <summary>获取自定义属性的值。可用于ReflectionOnly加载的程序集</summary>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.MemberInfoX.Member">
            <summary>成员</summary>
        </member>
        <member name="P:DmFramework.Reflection.MemberInfoX.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Reflection.MemberInfoX.Type">
            <summary>成员类型</summary>
        </member>
        <member name="P:DmFramework.Reflection.MemberInfoX.TargetType">
            <summary>目标类型</summary>
        </member>
        <member name="P:DmFramework.Reflection.MemberInfoX.IsType">
            <summary>是否类型</summary>
        </member>
        <member name="P:DmFramework.Reflection.MemberInfoX.DocName">
            <summary>文档名</summary>
        </member>
        <member name="P:DmFramework.Reflection.MemberInfoX.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="P:DmFramework.Reflection.MemberInfoX.Description">
            <summary>说明</summary>
        </member>
        <member name="P:DmFramework.Reflection.MemberInfoX.Item(System.Object)">
            <summary>属性/字段 索引器</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.MemberInfoX.Value">
            <summary>静态 属性/字段 值</summary>
        </member>
        <member name="M:DmFramework.Reflection.ConstructorInfoX.Create(System.Reflection.ConstructorInfo)">
            <summary>创建</summary>
            <param name="constructor"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ConstructorInfoX.Create(System.Type,System.Type[])">
            <summary>创建</summary>
            <param name="type"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ConstructorInfoX.Create(System.Type)">
            <summary>创建</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ConstructorInfoX.CreateInstance(System.Object[])">
            <summary>创建实例</summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ConstructorInfoX.op_Implicit(DmFramework.Reflection.ConstructorInfoX)~System.Reflection.ConstructorInfo">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.ConstructorInfoX.op_Implicit(System.Reflection.ConstructorInfo)~DmFramework.Reflection.ConstructorInfoX">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.ConstructorInfoX.Constructor">
            <summary>目标方法</summary>
        </member>
        <member name="P:DmFramework.Reflection.ConstructorInfoX.Handler">
            <summary>快速调用委托，延迟到首次使用才创建</summary>
        </member>
        <member name="T:DmFramework.Reflection.EventInfoX">
            <summary>事件扩展</summary>
        </member>
        <member name="M:DmFramework.Reflection.EventInfoX.Create(System.Reflection.EventInfo)">
            <summary>创建</summary>
            <param name="ev"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.EventInfoX.Event">
            <summary>事件</summary>
        </member>
        <member name="T:DmFramework.Reflection.FastMethod">
            <summary>通过委托对常见方法进行快速方法调用</summary>
        </member>
        <member name="P:DmFramework.Reflection.FastMethod.Method">
            <summary>方法</summary>
        </member>
        <member name="P:DmFramework.Reflection.FastMethod.Supported">
            <summary>是否支持</summary>
        </member>
        <member name="T:DmFramework.Reflection.FastMethod.IFastHandler">
            <summary>快速调用委托</summary>
        </member>
        <member name="T:DmFramework.Reflection.FastMethod.IFastProvider">
            <summary>提供者。如果支持该方法，则创建实际IFastHandler</summary>
        </member>
        <member name="T:DmFramework.Reflection.FieldInfoX">
            <summary>快速字段访问</summary>
        </member>
        <member name="M:DmFramework.Reflection.FieldInfoX.Create(System.Reflection.FieldInfo)">
            <summary>创建</summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FieldInfoX.Create(System.Type,System.String)">
            <summary>创建</summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FieldInfoX.GetValue(System.Object)">
            <summary>取值</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FieldInfoX.SetValue(System.Object,System.Object)">
            <summary>赋值</summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.FieldInfoX.GetValue``1(System.Object,System.String)">
            <summary>静态快速取值。若字段不存在，会抛出异常。不确定字段是否存在时，建议使用Create方法</summary>
            <typeparam name="TResult"></typeparam>
            <param name="target"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FieldInfoX.GetValue``2(System.String)">
            <summary>快速获取静态字段。若字段不存在，会抛出异常。不确定字段是否存在时，建议使用Create方法</summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FieldInfoX.SetValue(System.Object,System.String,System.Object)">
            <summary>静态快速赋值。若字段不存在，会抛出异常。不确定字段是否存在时，建议使用Create方法</summary>
            <param name="target"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.FieldInfoX.SetValue``1(System.String,System.Object)">
            <summary>快速设置静态字段。若字段不存在，会抛出异常。不确定字段是否存在时，建议使用Create方法</summary>
            <typeparam name="TTarget"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.FieldInfoX.op_Implicit(DmFramework.Reflection.FieldInfoX)~System.Reflection.FieldInfo">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.FieldInfoX.op_Implicit(System.Reflection.FieldInfo)~DmFramework.Reflection.FieldInfoX">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.FieldInfoX.Field">
            <summary>目标字段</summary>
        </member>
        <member name="P:DmFramework.Reflection.FieldInfoX.GetHandler">
            <summary>快速调用委托，延迟到首次使用才创建</summary>
        </member>
        <member name="P:DmFramework.Reflection.FieldInfoX.SetHandler">
            <summary>快速调用委托，延迟到首次使用才创建</summary>
        </member>
        <member name="T:DmFramework.Reflection.MethodInfoX">
            <summary>快速调用。基于DynamicMethod和Emit实现。</summary>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.Create(System.Reflection.MethodBase)">
            <summary>创建</summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.Create(System.Type,System.String)">
            <summary>创建</summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.Create(System.Type,System.String,System.Type[])">
            <summary>创建</summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="paramTypes">参数类型</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.Invoke(System.Object,System.Object[])">
            <summary>参数调用</summary>
            <param name="obj"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.InvokeByDictionaryParameter(System.Object,System.Collections.IDictionary)">
            <summary>通过字典参数调用</summary>
            <param name="obj"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.Invoke``1(System.Object,System.String,System.Object[])">
            <summary>快速调用方法成员</summary>
            <typeparam name="TResult"></typeparam>
            <param name="target"></param>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.Invoke``2(System.String,System.Object[])">
            <summary>快速调用静态方法</summary>
            <typeparam name="TTarget">目标类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.InvokeByDictionaryParameter``1(System.Object,System.String,System.Collections.IDictionary)">
            <summary>通过传入参数字典快速调用方法</summary>
            <typeparam name="TResult"></typeparam>
            <param name="target"></param>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.InvokeByDictionaryParameter``2(System.String,System.Collections.IDictionary)">
            <summary>通过传入参数字典快速调用静态方法</summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.op_Implicit(DmFramework.Reflection.MethodInfoX)~System.Reflection.MethodInfo">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.MethodInfoX.op_Implicit(System.Reflection.MethodInfo)~DmFramework.Reflection.MethodInfoX">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.MethodInfoX.Method">
            <summary>目标方法</summary>
        </member>
        <member name="P:DmFramework.Reflection.MethodInfoX.Parameters">
            <summary>参数数组</summary>
        </member>
        <member name="P:DmFramework.Reflection.MethodInfoX.Handler">
            <summary>快速调用委托，延迟到首次使用才创建</summary>
        </member>
        <member name="P:DmFramework.Reflection.MethodInfoX.Name">
            <summary>类型名称。主要处理泛型</summary>
        </member>
        <member name="P:DmFramework.Reflection.MethodInfoX.FullName">
            <summary>完整类型名称。包含命名空间，但是不包含程序集信息</summary>
        </member>
        <member name="P:DmFramework.Reflection.MethodInfoX.TinyName">
            <summary>不带定义类型的精简类型名称。主要处理泛型</summary>
        </member>
        <member name="T:DmFramework.Reflection.MethodInfoX.FastInvokeHandler">
            <summary>快速调用委托</summary>
            <param name="obj"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Reflection.PropertyInfoX">
            <summary>快速属性访问</summary>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.Create(System.Reflection.PropertyInfo)">
            <summary>创建</summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.Create(System.Type,System.String)">
            <summary>创建</summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.GetValue(System.Object)">
            <summary>取值</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.SetValue(System.Object,System.Object)">
            <summary>赋值</summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.GetValue(System.Type,System.Object,System.String)">
            <summary>快速获取静态属性。若属性不存在，会抛出异常。不确定属性是否存在时，建议使用Create方法</summary>
            <param name="type"></param>
            <param name="target"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.SetValue(System.Type,System.Object,System.String,System.Object)">
            <summary>静态快速赋值。若属性不存在，会抛出异常。不确定属性是否存在时，建议使用Create方法</summary>
            <param name="type"></param>
            <param name="target"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.GetValue(System.Type,System.String)">
            <summary>快速获取静态属性。若属性不存在，会抛出异常。不确定属性是否存在时，建议使用Create方法</summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.SetValue(System.Type,System.String,System.Object)">
            <summary>静态属性快速赋值。若属性不存在，会抛出异常。不确定属性是否存在时，建议使用Create方法</summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.GetValue``1(System.Object,System.String)">
            <summary>静态快速取值。若属性不存在，会抛出异常。不确定属性是否存在时，建议使用Create方法</summary>
            <typeparam name="TResult"></typeparam>
            <param name="target"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.GetValue``2(System.String)">
            <summary>快速获取静态属性。若属性不存在，会抛出异常。不确定属性是否存在时，建议使用Create方法</summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.SetValue(System.Object,System.String,System.Object)">
            <summary>成员属性快速赋值。若属性不存在，会抛出异常。不确定属性是否存在时，建议使用Create方法</summary>
            <param name="target"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.SetValue``1(System.String,System.Object)">
            <summary>快速设置静态属性。若属性不存在，会抛出异常。不确定属性是否存在时，建议使用Create方法</summary>
            <typeparam name="TTarget"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.op_Implicit(DmFramework.Reflection.PropertyInfoX)~System.Reflection.PropertyInfo">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.PropertyInfoX.op_Implicit(System.Reflection.PropertyInfo)~DmFramework.Reflection.PropertyInfoX">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.PropertyInfoX.Property">
            <summary>目标属性</summary>
        </member>
        <member name="P:DmFramework.Reflection.PropertyInfoX.GetMethod">
            <summary>读取方法</summary>
        </member>
        <member name="P:DmFramework.Reflection.PropertyInfoX.SetMethod">
            <summary>设置方法</summary>
        </member>
        <member name="P:DmFramework.Reflection.PropertyInfoX.GetHandler">
            <summary>快速调用委托，延迟到首次使用才创建</summary>
        </member>
        <member name="P:DmFramework.Reflection.PropertyInfoX.SetHandler">
            <summary>快速调用委托，延迟到首次使用才创建</summary>
        </member>
        <member name="T:DmFramework.Reflection.TypeX">
            <summary>类型辅助类</summary>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.Create(System.Type)">
            <summary>创建类型辅助对象</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.CreateInstance(System.Object[])">
            <summary>创建实例</summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.CreateInstance(System.Type,System.Object[])">
            <summary>快速反射创建指定类型的实例</summary>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.CreateInstance``1(System.Object[])">
            <summary>快速反射创建指定类型的实例</summary>
            <typeparam name="T"></typeparam>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.GetValue(System.Object)">
            <summary>取值，返回自己</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.IsPlugin(System.Type)">
            <summary>是否指定类型的插件</summary>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.GetType(System.String)">
            <summary>根据名称获取类型</summary>
            <param name="typeName">类型名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.GetType(System.String,System.Boolean)">
            <summary>根据名称获取类型</summary>
            <param name="typeName">类型名</param>
            <param name="isLoadAssembly">是否从未加载程序集中获取类型。使用仅反射的方法检查目标类型，如果存在，则进行常规加载</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.GetMethod(System.Type,System.String,System.Type[])">
            <summary>获取方法。</summary>
            <remarks>用于具有多个签名的同名方法的场合，不确定是否存在性能问题，不建议普通场合使用</remarks>
            <param name="type"></param>
            <param name="name"></param>
            <param name="paramTypes"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.GetMethod(System.String,System.Type[])">
            <summary>获取方法。</summary>
            <remarks>用于具有多个签名的同名方法的场合，不确定是否存在性能问题，不建议普通场合使用</remarks>
            <param name="name"></param>
            <param name="paramTypes"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.Equal(System.Type,System.Type)">
            <summary>判断两个类型是否相同，避免引用加载和执行上下文加载的相同类型显示不同</summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.ChangeType(System.Object,System.Type)">
            <summary>类型转换</summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.ChangeType``1(System.Object)">
            <summary>类型转换</summary>
            <typeparam name="TResult"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.IsNullable(System.Type)">
            <summary>判断某个类型是否可空类型</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.GetTypeArray(System.Object[])">
            <summary>从参数数组中获取类型数组</summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.GetElementType">
            <summary>获取元素类型</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.GetElementType(System.Type)">
            <summary>获取一个类型的元素类型</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.op_Implicit(DmFramework.Reflection.TypeX)~System.Type">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.op_Implicit(System.Type)~DmFramework.Reflection.TypeX">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Reflection.TypeX.IsSubclassOf(System.Type)">
            <summary>确定当前 <see cref="T:System.Type" /> 表示的类是否是从指定的 <see cref="T:System.Type" /> 表示的类派生的。</summary>
            <returns>如果 Type 由 <paramref name="c" /> 参数表示并且当前的 Type 表示类，并且当前的 Type 所表示的类是从 <paramref name="c" /> 所表示的类派生的，则为 true；否则为 false。如果 <paramref name="c" /> 和当前的 Type 表示相同的类，则此方法还返回 false。</returns>
            <param name="c">与当前的 Type 进行比较的 Type。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="c" /> 参数为 null。</exception>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.Type">
            <summary>类型</summary>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.Handler">
            <summary>快速调用委托，延迟到首次使用才创建</summary>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.Name">
            <summary>类型名称。主要处理泛型</summary>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.FullName">
            <summary>完整类型名称。包含命名空间，但是不包含程序集信息</summary>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.IsSystemType">
            <summary>是否系统类型</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.Binder">
            <summary>专用绑定器</summary>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.Properties">
            <summary>属性集合</summary>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.BaseType">
            <summary>基类。因计算类型基类极慢，故缓存</summary>
            <remarks><see cref="P:Type.BaseType"/>实在太慢了</remarks>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.Code">
            <summary>基础类型代码</summary>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.IsEnum">
            <summary>获取一个值，该值指示当前的 <see cref="T:System.Type" /> 是否表示枚举。</summary>
            <returns>如果当前 <see cref="T:System.Type" /> 表示枚举，则为 true；否则为 false。</returns>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.IsInt">
            <summary>是否整型。从Int16到UInt64共六种</summary>
        </member>
        <member name="P:DmFramework.Reflection.TypeX.IsValueType">
            <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为值类型。</summary>
            <returns>如果 <see cref="T:System.Type" /> 是值类型，则为 true；否则为 false。</returns>
        </member>
        <member name="T:DmFramework.Reflection.TypeX._">
            <summary>常用类型</summary>
        </member>
        <member name="F:DmFramework.Reflection.TypeX._.Type">
            <summary>类型</summary>
        </member>
        <member name="F:DmFramework.Reflection.TypeX._.ValueType">
            <summary>值类型</summary>
        </member>
        <member name="F:DmFramework.Reflection.TypeX._.Enum">
            <summary>枚举类型</summary>
        </member>
        <member name="F:DmFramework.Reflection.TypeX._.Object">
            <summary>对象类型</summary>
        </member>
        <member name="F:DmFramework.Reflection.TypeX._.String">
            <summary>字符串类型</summary>
        </member>
        <member name="T:DmFramework.SerializationHelper">
            <summary>数据序列化帮助类</summary>
        </member>
        <member name="M:DmFramework.SerializationHelper.ConvertToString(System.Object,System.Boolean)">
            <summary>xml序列化成字符串</summary>
            <param name="obj">对象</param>
            <returns>xml字符串</returns>
        </member>
        <member name="M:DmFramework.SerializationHelper.ConvertToString(System.Object,System.String,System.String)">
            <summary>输出Xml</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.SerializationHelper.ConvertToObject(System.Type,System.String)">
            <summary>反序列化</summary>
            <param name="type"></param>
            <param name="s">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.SerializationHelper.ConvertToBytes(System.Object)">
            <summary>转Byte[]</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.SerializationHelper.ConvertToObject(System.Byte[])">
            <summary>Byte[]转obj</summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.SerializationHelper.LoadXMLFile(System.Type,System.String)">
            <summary>反序列化</summary>
            <param name="type">对象类型</param>
            <param name="filename">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.SerializationHelper.LoadXMLFile``1(System.String)">
            <summary>反序列化XML文件</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="file">需要反序列化的文件路径</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.SerializationHelper.SaveAsXML(System.Object,System.String,System.Boolean)">
            <summary>序列化XML文件</summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="T:DmFramework.Security.Certificate">
            <summary>证书</summary>
            <remarks>http://blogs.msdn.com/b/dcook/archive/2008/11/25/creating-a-self-signed-certificate-in-c.aspx</remarks>
        </member>
        <member name="M:DmFramework.Security.Certificate.CreateSelfSignCertificatePfx(System.String)">
            <summary>建立自签名证书</summary>
            <param name="x500"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.Certificate.CreateSelfSignCertificatePfx(System.String,System.DateTime,System.DateTime)">
            <summary>建立自签名证书</summary>
            <param name="x500"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.Certificate.CreateSelfSignCertificatePfx(System.String,System.DateTime,System.DateTime,System.String)">
            <summary>建立自签名证书</summary>
            <param name="x500"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="insecurePassword"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.Certificate.CreateSelfSignCertificatePfx(System.String,System.DateTime,System.DateTime,System.Security.SecureString)">
            <summary>建立自签名证书</summary>
            <param name="x500">例如CN=SelfSignCertificate;C=China;OU=DmFramework;O=Development Team;E=nnhy@vip.qq.com，其中CN是显示名</param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.Certificate.CreateSelfSignCertificatePfx(System.Security.Cryptography.X509Certificates.X500DistinguishedName,System.DateTime,System.DateTime,System.Security.SecureString)">
            <summary>建立自签名证书</summary>
            <param name="distName"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Security.CRC16">
            <summary>CRC16校验</summary>
        </member>
        <member name="F:DmFramework.Security.CRC16.CrcTable">
            <summary>CRC16表</summary>
        </member>
        <member name="F:DmFramework.Security.CRC16.crc">
            <summary>校验值</summary>
        </member>
        <member name="M:DmFramework.Security.CRC16.Reset">
            <summary>重置清零</summary>
        </member>
        <member name="M:DmFramework.Security.CRC16.Update(System.Int16)">
            <summary>添加整数进行校验</summary>
            <param name = "value">
            the Byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:DmFramework.Security.CRC16.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>添加字节数组进行校验</summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="M:DmFramework.Security.CRC16.Update(System.IO.Stream,System.Int64)">
            <summary>添加数据流进行校验</summary>
            <param name="stream"></param>
            <param name="count"></param>
        </member>
        <member name="P:DmFramework.Security.CRC16.Value">
            <summary>校验值</summary>
        </member>
        <member name="T:DmFramework.Security.Crc32">
             <summary>CRC32校验</summary>
             <remarks>
             Generate a table for a Byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a Byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             Byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a Byte at a time for all
             combinations of CRC register values and incoming bytes.
             </remarks>
        </member>
        <member name="F:DmFramework.Security.Crc32.crc">
            <summary>校验值</summary>
        </member>
        <member name="M:DmFramework.Security.Crc32.Reset">
            <summary>重置清零</summary>
        </member>
        <member name="M:DmFramework.Security.Crc32.Update(System.Int32)">
            <summary>添加整数进行校验</summary>
            <param name = "value">
            the Byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:DmFramework.Security.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>添加字节数组进行校验</summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="M:DmFramework.Security.Crc32.Update(System.IO.Stream,System.Int64)">
            <summary>添加数据流进行校验</summary>
            <param name="stream"></param>
            <param name="count"></param>
        </member>
        <member name="P:DmFramework.Security.Crc32.Value">
            <summary>校验值</summary>
        </member>
        <member name="T:DmFramework.Security.DataHelper">
            <summary>数据助手</summary>
        </member>
        <member name="M:DmFramework.Security.DataHelper.Hash(System.String)">
            <summary>MD5散列</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.HashFile(System.String)">
            <summary>文件散列</summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.Encrypt(System.String,System.String)">
            <summary>TripleDES加密</summary>
            <param name="content">UTD8编码的明文</param>
            <param name="key">密码字符串经MD5散列后作为DES密码</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.Encrypt(System.Byte[],System.String)">
            <summary>TripleDES加密</summary>
            <param name="data"></param>
            <param name="key">密码字符串经MD5散列后作为DES密码</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.Descrypt(System.String,System.String)">
            <summary>TripleDES解密</summary>
            <param name="content">UTD8编码的密文</param>
            <param name="key">密码字符串经MD5散列后作为DES密码</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.Descrypt(System.Byte[],System.String)">
            <summary>TripleDES解密</summary>
            <param name="data"></param>
            <param name="key">密码字符串经MD5散列后作为DES密码</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.RC4(System.Byte[],System.String)">
            <summary>RC4加密解密</summary>
            <param name="data">数据</param>
            <param name="pass">UTF8编码的密码</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.GetKey(System.Byte[],System.Int32)">
            <summary>打乱密码</summary>
            <param name="pass">密码</param>
            <param name="kLen">密码箱长度</param>
            <returns>打乱后的密码</returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.Sign(System.Byte[],System.String)">
            <summary>签名</summary>
            <param name="data"></param>
            <param name="priKey"></param>
            <returns>Base64编码的签名</returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.Verify(System.Byte[],System.String,System.String)">
            <summary>验证签名</summary>
            <param name="data">待验证的数据</param>
            <param name="signdata">Base64编码的签名</param>
            <param name="pubKey">公钥</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.ToHex(System.Byte[],System.Int32,System.Int32)">
            <summary>把字节数组编码为十六进制字符串</summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Security.DataHelper.FromHex(System.String)">
            <summary>解密</summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.BinaryPropertyDeserializer">
            <summary>
              Contains logic to deserialize data from a binary format. Format can vary according to the used IBinaryWriter.
              For data serialized with BurstBinaryWriter you use BurstBinaryReader and for SizeOptimizedBinaryWriter you use SizeOptimizedBinaryReader
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.Deserializing.IPropertyDeserializer">
            <summary>Deserializes a stream and gives back a Property</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Deserializing.IPropertyDeserializer.Open(System.IO.Stream)">
            <summary>Open the stream to read</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Deserializing.IPropertyDeserializer.Deserialize">
            <summary>Reading the stream</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Deserializing.IPropertyDeserializer.Close">
            <summary>Cleans all</summary>
        </member>
        <member name="F:DmFramework.Serialization.Advanced.BinaryPropertyDeserializer._propertyCache">
            <summary>Properties already processed. Used for reference resolution.</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertyDeserializer.#ctor(DmFramework.Serialization.Advanced.Binary.IBinaryReader)">
            <summary>
            </summary>
            <param name = "reader"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertyDeserializer.Open(System.IO.Stream)">
            <summary>Open the stream to read</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertyDeserializer.Deserialize">
            <summary>Reading the property</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertyDeserializer.Close">
            <summary>Cleans all</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.BinaryPropertySerializer">
            <summary>
              Contains logic to serialize data to a binary format. Format varies according to the used IBinaryWriter.
              Actually there are BurstBinaryWriter and SizeOptimizedBinaryWriter (see the constructor)
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.Serializing.PropertySerializer">
            <summary>Base class for all Serializers (Xml, Binary, ...). XmlPropertySerializer inherits from this class</summary>
            <remarks></remarks>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.Serializing.IPropertySerializer">
            <summary>Serializes property to a stream</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.IPropertySerializer.Open(System.IO.Stream)">
            <summary>Open the stream for writing</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.IPropertySerializer.Serialize(DmFramework.Serialization.Core.Property)">
            <summary>Serializes property</summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.IPropertySerializer.Close">
            <summary>Cleaning, but the stream can be used further</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.Serialize(DmFramework.Serialization.Core.Property)">
            <summary>Serializes property</summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.Open(System.IO.Stream)">
            <summary>Open the stream for writing</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.Close">
            <summary>Cleaning, but the stream can be used further</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.SerializeCore(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.Property})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.SerializeNullProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.NullProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.SerializeSimpleProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.SimpleProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.SerializeMultiDimensionalArrayProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.MultiDimensionalArrayProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.SerializeSingleDimensionalArrayProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.SingleDimensionalArrayProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.SerializeDictionaryProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.DictionaryProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.SerializeCollectionProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.CollectionProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.SerializeComplexProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.ComplexProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.PropertySerializer.SerializeReference(DmFramework.Serialization.Core.ReferenceTargetProperty)">
            <summary></summary>
            <param name="referenceTarget"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.#ctor(DmFramework.Serialization.Advanced.Binary.IBinaryWriter)">
            <summary>
            </summary>
            <param name = "writer"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.Open(System.IO.Stream)">
            <summary>Open the stream for writing</summary>
            <param name = "stream" />
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.Close">
            <summary>Closes the stream</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.SerializeNullProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.NullProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.SerializeSimpleProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.SimpleProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.SerializeMultiDimensionalArrayProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.MultiDimensionalArrayProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.SerializeSingleDimensionalArrayProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.SingleDimensionalArrayProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.SerializeDictionaryProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.DictionaryProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.SerializeCollectionProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.CollectionProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.SerializeComplexProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.ComplexProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BinaryPropertySerializer.SerializeReference(DmFramework.Serialization.Core.ReferenceTargetProperty)">
            <summary></summary>
            <param name="referenceTarget"></param>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.Binary.IBinaryReader">
            <summary>Reads from a binary format</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryReader.ReadElementId">
            <summary>Reads single Byte</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryReader.ReadType">
            <summary>Read type</summary>
            <returns>null if no type defined</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryReader.ReadNumber">
            <summary>Read integer which was saved as 1,2 or 4 bytes, according to its size</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryReader.ReadNumbers">
            <summary>Read array of integers which were saved as 1,2 or 4 bytes, according to their size</summary>
            <returns>empty array if no numbers defined</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryReader.ReadName">
            <summary>Reads property name</summary>
            <returns>null if no name defined</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryReader.ReadValue(System.Type)">
            <summary>Reads simple value (value of a simple property)</summary>
            <param name = "expectedType"></param>
            <returns>null if no value defined</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryReader.Open(System.IO.Stream)">
            <summary>Opens the stream for reading</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryReader.Close">
            <summary>Does nothing, the stream can be further used and has to be manually closed</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.Binary.IBinaryWriter">
            <summary>Writes in a binary format</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryWriter.WriteElementId(System.Byte)">
            <summary>Writes Element Id</summary>
            <param name = "id"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryWriter.WriteType(System.Type)">
            <summary>Writes type</summary>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryWriter.WriteName(System.String)">
            <summary>Writes property name</summary>
            <param name = "name"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryWriter.WriteValue(System.Object)">
            <summary>Writes a simple value (value of a simple property)</summary>
            <param name = "value"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryWriter.WriteNumber(System.Int32)">
            <summary>Writes an integer. It saves the number with the least required bytes</summary>
            <param name = "number"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryWriter.WriteNumbers(System.Int32[])">
            <summary>Writes an array of numbers. It saves numbers with the least required bytes</summary>
            <param name = "numbers"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryWriter.Open(System.IO.Stream)">
            <summary>Opens the stream for writing</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Binary.IBinaryWriter.Close">
            <summary>Saves the data to the stream, the stream is not closed and can be further used</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.BurstBinaryReader">
            <summary>Reads data which was stored with the BurstBinaryWriter</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryReader.#ctor(DmFramework.Serialization.Advanced.Serializing.ITypeNameConverter,System.Text.Encoding)">
            <summary>
            </summary>
            <param name="typeNameConverter"></param>
            <param name="encoding"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryReader.ReadName">
            <summary>Reads property name</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryReader.ReadElementId">
            <summary>Reads single Byte</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryReader.ReadType">
            <summary>Read type</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryReader.ReadNumber">
            <summary>Read integer which was saved as 1,2 or 4 bytes, according to its size</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryReader.ReadNumbers">
            <summary>Read array of integers which were saved as 1,2 or 4 bytes, according to their size</summary>
            <returns>Empty array if there are no indexes</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryReader.ReadValue(System.Type)">
            <summary>Reads simple value (value of a simple property)</summary>
            <param name = "expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryReader.Open(System.IO.Stream)">
            <summary>Opens the stream for reading</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryReader.Close">
            <summary>Does nothing, the stream can be further used and has to be manually closed</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.BurstBinaryWriter">
            <summary>
              Stores data in a binary format. All types and property names which describe an object are stored together with the object.
              If there are more objects to store, their types are multiple stored, what increases the file size.
              This format is simple and has small overhead.
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryWriter.#ctor(DmFramework.Serialization.Advanced.Serializing.ITypeNameConverter,System.Text.Encoding)">
            <summary>
            </summary>
            <param name="typeNameConverter"></param>
            <param name="encoding"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryWriter.WriteElementId(System.Byte)">
            <summary>Writes Element Id</summary>
            <param name = "id"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryWriter.WriteNumber(System.Int32)">
            <summary>Writes an integer. It saves the number with the least required bytes</summary>
            <param name = "number"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryWriter.WriteNumbers(System.Int32[])">
            <summary>Writes an array of numbers. It saves numbers with the least required bytes</summary>
            <param name = "numbers"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryWriter.WriteType(System.Type)">
            <summary>Writes type</summary>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryWriter.WriteName(System.String)">
            <summary>Writes property name</summary>
            <param name = "name"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryWriter.WriteValue(System.Object)">
            <summary>Writes a simple value (value of a simple property)</summary>
            <param name = "value"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryWriter.Open(System.IO.Stream)">
            <summary>Opens the stream for writing</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.BurstBinaryWriter.Close">
            <summary>Saves the data to the stream, the stream is not closed and can be further used</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.DefaultXmlReader">
            <summary>Reads data which was stored with DefaultXmlWriter</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.Xml.IXmlReader">
            <summary>Reads data from Xml or other node oriented format</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.ReadElement">
            <summary>Reads next valid element</summary>
            <returns>null if nothing was found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.ReadSubElements">
            <summary>Reads all sub elements of the current element</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.GetAttributeAsString(System.String)">
            <summary>Reads attribute as String</summary>
            <param name = "attributeName"></param>
            <returns>null if nothing was found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.GetAttributeAsType(System.String)">
            <summary>Reads attribute and converts it to type</summary>
            <param name = "attributeName"></param>
            <returns>null if nothing found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.GetAttributeAsInt(System.String)">
            <summary>Reads attribute and converts it to integer</summary>
            <param name = "attributeName"></param>
            <returns>0 if nothing found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.GetAttributeAsArrayOfInt(System.String)">
            <summary>Reads attribute and converts it as array of Int32</summary>
            <param name = "attributeName"></param>
            <returns>empty array if nothing found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.GetAttributeAsObject(System.String,System.Type)">
            <summary>Reads attribute and converts it to object of the expectedType</summary>
            <param name = "attributeName"></param>
            <param name = "expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.Open(System.IO.Stream)">
            <summary>Open the stream</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.Open(System.String)">
            <summary>Open the Uri</summary>
            <param name="inputUri" type="System.IO.Stream">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.Open(System.IO.TextReader)">
            <summary>Open the textreader</summary>
            <param name="input" type="System.IO.TextReader">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlReader.Close">
            <summary>Stream can be further used</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.#ctor(DmFramework.Serialization.Advanced.Serializing.ITypeNameConverter,DmFramework.Serialization.Advanced.Xml.ISimpleValueConverter,System.Xml.XmlReaderSettings)">
            <summary>
            </summary>
            <param name="typeNameConverter"></param>
            <param name="valueConverter"></param>
            <param name="settings"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.ReadElement">
            <summary>Reads next valid element</summary>
            <returns>null if nothing was found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.ReadSubElements">
            <summary>Reads all sub elements of the current element</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.GetAttributeAsString(System.String)">
            <summary>Reads attribute as String</summary>
            <param name = "attributeName"></param>
            <returns>null if nothing was found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.GetAttributeAsType(System.String)">
            <summary>Reads attribute and converts it to type</summary>
            <param name = "attributeName"></param>
            <returns>null if nothing found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.GetAttributeAsInt(System.String)">
            <summary>Reads attribute and converts it to integer</summary>
            <param name = "attributeName"></param>
            <returns>0 if nothing found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.GetAttributeAsArrayOfInt(System.String)">
            <summary>Reads attribute and converts it as array of Int32</summary>
            <param name = "attributeName"></param>
            <returns>empty array if nothing found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.GetAttributeAsObject(System.String,System.Type)">
            <summary>Reads attribute and converts it to object of the expectedType</summary>
            <param name = "attributeName"></param>
            <param name = "expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.Open(System.IO.Stream)">
            <summary>Open the stream</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.Open(System.String)">
            <summary>Open the Uri</summary>
            <param name="inputUri" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.Open(System.IO.TextReader)">
            <summary>Open the TextReader</summary>
            <param name="input" type="System.IO.TextReader">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.Close">
            <summary>Stream can be further used</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.popCurrentReader">
            <summary>Remove one reader from stack and reset the current reader</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.pushCurrentReader(System.Xml.XmlReader)">
            <summary>Add reader to stack and set it the current reader</summary>
            <param name = "reader"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlReader.getArrayOfIntFromText(System.String)">
            <summary>Converts text in form "1,2,3,4,5" to Int32[] {1,2,3,4,5}</summary>
            <param name = "text"></param>
            <returns>null if no items are recognized or the text is null or empty</returns>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.DefaultXmlWriter">
            <summary>Stores data in xml format</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.Xml.IXmlWriter">
            <summary>Writes data to xml or other node oriented format</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.WriteStartElement(System.String)">
            <summary>
              Writes start tag/node/element
            </summary>
            <param name = "elementId"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.WriteEndElement">
            <summary>
              Writes end tag/node/element
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.WriteAttribute(System.String,System.String)">
            <summary>
              Writes attribute of type String
            </summary>
            <param name = "attributeId"></param>
            <param name = "text"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.WriteAttribute(System.String,System.Type)">
            <summary>
              Writes attribute of type Type
            </summary>
            <param name = "attributeId"></param>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.WriteAttribute(System.String,System.Int32)">
            <summary>
              Writes attribute of type integer
            </summary>
            <param name = "attributeId"></param>
            <param name = "number"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.WriteAttribute(System.String,System.Int32[])">
            <summary>
              Writes attribute of type array of Int32
            </summary>
            <param name = "attributeId"></param>
            <param name = "numbers"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.WriteAttribute(System.String,System.Object)">
            <summary>
              Writes attribute of a simple type (value of a SimpleProperty)
            </summary>
            <param name = "attributeId"></param>
            <param name = "value"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.Open(System.IO.Stream)">
            <summary>
              Opens the stream
            </summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.Open(System.String)">
            <summary>Opens the file</summary>
            <param name="outputFileName" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.Open(System.IO.TextWriter)">
            <summary>Opens the textwriter</summary>
            <param name="output" type="System.IO.TextWriter">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.Open(System.Text.StringBuilder)">
            <summary>Opens the stringbuilder</summary>
            <param name="output" type="System.Text.StringBuilder">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.IXmlWriter.Close">
            <summary>Writes all data to the stream, the stream can be further used.</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.#ctor(DmFramework.Serialization.Advanced.Serializing.ITypeNameConverter,DmFramework.Serialization.Advanced.Xml.ISimpleValueConverter,System.Xml.XmlWriterSettings)">
            <summary>Constructor with custom ITypeNameProvider and ISimpleValueConverter and custom XmlWriterSettings</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.WriteStartElement(System.String)">
            <summary>
              Writes start tag/node/element
            </summary>
            <param name = "elementId"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.WriteEndElement">
            <summary>
              Writes end tag/node/element
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.WriteAttribute(System.String,System.String)">
            <summary>
              Writes attribute of type String
            </summary>
            <param name = "attributeId"></param>
            <param name = "text"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.WriteAttribute(System.String,System.Type)">
            <summary>
              Writes attribute of type Type
            </summary>
            <param name = "attributeId"></param>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.WriteAttribute(System.String,System.Int32)">
            <summary>
              Writes attribute of type integer
            </summary>
            <param name = "attributeId"></param>
            <param name = "number"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.WriteAttribute(System.String,System.Int32[])">
            <summary>
              Writes attribute of type array of Int32
            </summary>
            <param name = "attributeId"></param>
            <param name = "numbers"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.WriteAttribute(System.String,System.Object)">
            <summary>
              Writes attribute of a simple type (value of a SimpleProperty)
            </summary>
            <param name = "attributeId"></param>
            <param name = "value"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.Open(System.IO.Stream)">
            <summary>Opens the stream</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.Open(System.String)">
            <summary>Opens the file</summary>
            <param name="outputFileName" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.Open(System.IO.TextWriter)">
            <summary>Opens the textwriter</summary>
            <param name="output" type="System.IO.TextWriter">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.Open(System.Text.StringBuilder)">
            <summary>Opens the stringbuilder</summary>
            <param name="output" type="System.Text.StringBuilder">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.Close">
            <summary>Writes all data to the stream, the stream can be further used.</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.DefaultXmlWriter.getArrayOfIntAsText(System.Int32[])">
            <summary>Converts Int32[] {1,2,3,4,5} to text "1,2,3,4,5"</summary>
            <param name = "values"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.PropertyCache">
            <summary>
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.PropertyCache.TryGetPropertyInfos(System.Type)">
            <summary>
            </summary>
            <returns>null if the key was not found</returns>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.PropertyProvider">
             <summary>
             Provides properties to serialize from source object. Implements the strategy
             which subproperties to use and
             wich to ignore and
             how to travese the source object to get subproperties
            
             Its methods GetAllProperties and IgnoreProperty can be
               overwritten in an inherited class to customize its functionality.
               Its property PropertiesToIgnore contains properties, which are ignored during the serialization.
             </summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.PropertyProvider.GetProperties(DmFramework.Serialization.Serializing.TypeInfo)">
            <summary>
              Gives all properties back which:
              - are public
              - are not static
              - does not contain ExcludeFromSerializationAttribute
              - have their set and get accessors
              - are not indexers
            </summary>
            <param name = "typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.PropertyProvider.IgnoreProperty(DmFramework.Serialization.Serializing.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>Should the property be removed from serialization?</summary>
            <param name = "info"></param>
            <param name = "property"></param>
            <returns>
              true if the property:
              - is in the PropertiesToIgnore,
              - contains ExcludeFromSerializationAttribute,
              - does not have it's set or get accessor
              - is indexer
            </returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.PropertyProvider.ContainsExcludeFromSerializationAttribute(System.Reflection.ICustomAttributeProvider)">
            <summary>Determines whether <paramref name="property"/> is excluded from serialization or not.</summary>
            <param name="property">The property to be checked.</param>
            <returns>
            	<c>true</c> if no serialization
            </returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.PropertyProvider.GetAllProperties(System.Type)">
            <summary>
              Gives all properties back which:
              - are public
              - are not static (instance properties)
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Advanced.PropertyProvider.PropertiesToIgnore">
            <summary>Which properties should be ignored</summary>
            <remarks>
            Sometimes you want to ignore some properties during the serialization.
            If they are parts of your own business objects, you can mark these properties with ExcludeFromSerializationAttribute.
            However it is not possible to mark them in the built in .NET classes
            In such a case you add these properties to the list PropertiesToIgnore.
            I.e. System.Collections.Generic.List"String" has the "Capacity" property which is irrelevant for
            the whole Serialization and should be ignored
            PropertyProvider.PropertiesToIgnore.Add(typeof(List"String"), "Capacity")
            </remarks>
        </member>
        <member name="P:DmFramework.Serialization.Advanced.PropertyProvider.AttributesToIgnore">
            <summary>All Properties markt with one of the contained attribute-types will be ignored on save.</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.PropertiesToIgnore">
            <summary>Cache which contains type as a key, and all associated property names</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.PropertiesToIgnore.Add(System.Type,System.String)">
            <summary>
            </summary>
            <param name = "type"></param>
            <param name = "propertyName"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.PropertiesToIgnore.Contains(System.Type,System.String)">
            <summary>
            </summary>
            <param name = "type"></param>
            <param name = "propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.Serializing.ITypeNameConverter">
            <summary>Converts Type to its String representation and vice versa. The default instance used in the Framework is TypeNameConverter</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.ITypeNameConverter.ConvertToTypeName(System.Type)">
            <summary>Gives back Type as text.</summary>
            <param name = "type"></param>
            <returns>String.Empty if the type is null</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Serializing.ITypeNameConverter.ConvertToType(System.String)">
            <summary>Gives back Type from the text.</summary>
            <param name = "typeName"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.SimpleValueConverter">
            <summary>Converts simple types to/from their text representation</summary>
            <remarks>
              It is important to use the same ISimpleValueConverter during serialization and deserialization
              Especially Format of the DateTime and Single types can be differently converted in different cultures.
              To customize it, please use the Constructor with the specified CultureInfo,
              or inherit your own converter from ISimpleValueConverter
            </remarks>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.Xml.ISimpleValueConverter">
            <summary>Converts values of SimpleProperty to/from String</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.ISimpleValueConverter.ConvertToString(System.Object)">
            <summary>
            </summary>
            <param name = "value"></param>
            <returns>String.Empty if the value is null</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.Xml.ISimpleValueConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            </summary>
            <param name = "text"></param>
            <param name = "type">expected type. Result should be of this type.</param>
            <returns>null if the text is null</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SimpleValueConverter.#ctor">
            <summary>Default is CultureInfo.InvariantCulture used</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SimpleValueConverter.#ctor(System.Globalization.CultureInfo,DmFramework.Serialization.Advanced.Serializing.ITypeNameConverter)">
            <summary>Here you can customize the culture. I.e. System.Threading.Thread.CurrentThread.CurrentCulture</summary>
            <param name = "cultureInfo"></param>
            <param name="typeNameConverter"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SimpleValueConverter.ConvertToString(System.Object)">
            <summary>
            </summary>
            <param name = "value"></param>
            <returns>String.Empty if the value is null</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SimpleValueConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            </summary>
            <param name = "text"></param>
            <param name = "type">expected type. Result should be of this type.</param>
            <returns>null if the text is null</returns>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.SizeOptimizedBinaryReader">
            <summary>Reads data which was stored with SizeOptimizedBinaryWriter</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryReader.#ctor(DmFramework.Serialization.Advanced.Serializing.ITypeNameConverter,System.Text.Encoding)">
            <summary>
            </summary>
            <param name="typeNameConverter"></param>
            <param name="encoding"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryReader.ReadElementId">
            <summary>Reads single Byte</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryReader.ReadType">
            <summary>Read type</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryReader.ReadNumber">
            <summary>Read integer which was saved as 1,2 or 4 bytes, according to its size</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryReader.ReadNumbers">
            <summary>Read array of integers which were saved as 1,2 or 4 bytes, according to their size</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryReader.ReadName">
            <summary>Reads property name</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryReader.ReadValue(System.Type)">
            <summary>Reads simple value (value of a simple property)</summary>
            <param name = "expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryReader.Open(System.IO.Stream)">
            <summary>Opens the stream for reading</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryReader.Close">
            <summary>Does nothing, the stream can be further used and has to be manually closed</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.SizeOptimizedBinaryWriter">
            <summary>
              Stores data in a binary format. Data is stored in two steps. At first are all objects stored in a cache and all types are analysed.
              Then all types and property names are sorted and placed in a list. Duplicates are removed. Serialized objects contain references
              to these types and property names. It decreases file size, especially for serialization of collection (many items of the same type)
              SizeOptimizedBinaryWriter has bigger overhead than BurstBinaryWriter
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryWriter.#ctor(DmFramework.Serialization.Advanced.Serializing.ITypeNameConverter,System.Text.Encoding)">
            <summary>
            </summary>
            <param name="typeNameConverter"></param>
            <param name="encoding"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryWriter.WriteElementId(System.Byte)">
            <summary>Writes Property Id</summary>
            <param name = "id"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryWriter.WriteType(System.Type)">
            <summary>Writes type</summary>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryWriter.WriteName(System.String)">
            <summary>Writes property name</summary>
            <param name = "name"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryWriter.WriteValue(System.Object)">
            <summary>Writes a simple value (value of a simple property)</summary>
            <param name = "value"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryWriter.WriteNumber(System.Int32)">
            <summary>Writes an integer. It saves the number with the least required bytes</summary>
            <param name = "number"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryWriter.WriteNumbers(System.Int32[])">
            <summary>Writes an array of numbers. It saves numbers with the least required bytes</summary>
            <param name = "numbers"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryWriter.Open(System.IO.Stream)">
            <summary>Opens the stream for writing</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.SizeOptimizedBinaryWriter.Close">
            <summary>Saves the data to the stream, the stream is not closed and can be further used</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.TypeNameConverter">
            <summary>
              Converts Type to its text representation and vice versa. Since v.2.12 all types serialize to the AssemblyQualifiedName.
              Use overloaded constructor to shorten type names.
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.TypeNameConverter.#ctor">
            <summary>Since v.2.12 as default the type name is equal to Type.AssemblyQualifiedName</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.TypeNameConverter.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Some values from the Type.AssemblyQualifiedName can be removed</summary>
            <param name = "includeAssemblyVersion"></param>
            <param name = "includeCulture"></param>
            <param name = "includePublicKeyToken"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.TypeNameConverter.ConvertToTypeName(System.Type)">
            <summary>Gives type as text</summary>
            <param name = "type"></param>
            <returns>String.Empty if the type is null</returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.TypeNameConverter.ConvertToType(System.String)">
            <summary>Gives back Type from the text.</summary>
            <param name = "typeName"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Advanced.TypeNameConverter.IncludeAssemblyVersion">
            <summary>Version=x.x.x.x will be inserted to the type name</summary>
        </member>
        <member name="P:DmFramework.Serialization.Advanced.TypeNameConverter.IncludeCulture">
            <summary>Culture=.... will be inserted to the type name</summary>
        </member>
        <member name="P:DmFramework.Serialization.Advanced.TypeNameConverter.IncludePublicKeyToken">
            <summary>PublicKeyToken=.... will be inserted to the type name</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.XmlPropertyDeserializer">
            <summary>Contains logic to read data stored with XmlPropertySerializer</summary>
        </member>
        <member name="F:DmFramework.Serialization.Advanced.XmlPropertyDeserializer._propertyCache">
            <summary>All reference targets already processed. Used to for reference resolution.</summary>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertyDeserializer.#ctor(DmFramework.Serialization.Advanced.Xml.IXmlReader)">
            <summary>
            </summary>
            <param name = "reader"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertyDeserializer.Open(System.IO.Stream)">
            <summary>Open the stream to read</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertyDeserializer.Open(System.String)">
            <summary>Open the uri to read</summary>
            <param name="inputUri" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertyDeserializer.Open(System.IO.TextReader)">
            <summary>Open the textreader to read</summary>
            <param name="input" type="System.IO.TextReader">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertyDeserializer.Deserialize">
            <summary>Reading the property</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertyDeserializer.Close">
            <summary>Cleans all</summary>
        </member>
        <member name="T:DmFramework.Serialization.Advanced.XmlPropertySerializer">
            <summary>Serializes properties to xml or any other target which supports node/attribute notation</summary>
            <remarks>
              Use an instance of your own IXmlWriter in the constructor to target other storage standards
            </remarks>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.#ctor(DmFramework.Serialization.Advanced.Xml.IXmlWriter)">
            <summary>
            </summary>
            <param name = "writer"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.SerializeNullProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.NullProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.SerializeSimpleProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.SimpleProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.SerializeMultiDimensionalArrayProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.MultiDimensionalArrayProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.SerializeSingleDimensionalArrayProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.SingleDimensionalArrayProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.SerializeDictionaryProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.DictionaryProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.SerializeCollectionProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.CollectionProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.writeProperties(System.Collections.Generic.ICollection{DmFramework.Serialization.Core.Property},System.Type)">
            <summary>Properties are only saved if at least one property exists</summary>
            <param name = "properties"></param>
            <param name = "ownerType">to which type belong the properties</param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.SerializeComplexProperty(DmFramework.Serialization.Serializing.PropertyTypeInfo{DmFramework.Serialization.Core.ComplexProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.SerializeReference(DmFramework.Serialization.Core.ReferenceTargetProperty)">
            <summary>Stores only reference to an object, not the object itself</summary>
            <param name="referenceTarget"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.Open(System.IO.Stream)">
            <summary>Open the writer</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.Open(System.String)">
            <summary>Open the writer</summary>
            <param name="outputFileName" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.Open(System.IO.TextWriter)">
            <summary>Open the writer</summary>
            <param name="output" type="System.IO.TextWriter">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.Open(System.Text.StringBuilder)">
            <summary>Open the writer</summary>
            <param name="output" type="System.Text.StringBuilder">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.Advanced.XmlPropertySerializer.Close">
            <summary>Close the Write, but do not close the stream</summary>
        </member>
        <member name="T:DmFramework.Serialization.BinarySerializationMode">
            <summary>What format has the serialized binary file. It could be SizeOptimized or Burst.</summary>
        </member>
        <member name="F:DmFramework.Serialization.BinarySerializationMode.SizeOptimized">
            <summary>
            All types are serialized to String lists, which are stored in the file header.
            Duplicates are removed. Serialized objects only reference these types.
            It reduces size especially if serializing collections.
            Refer to SizeOptimizedBinaryWriter for more details.
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.BinarySerializationMode.Burst">
            <summary>
            There are as many type definitions as many objects stored, not regarding if there are duplicate types defined.
            It reduces the overhead if storing single items, but increases the file size if storing collections.
            See BurstBinaryWriter for details.
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.ArrayAnalyzer">
            <summary>Gives information about actually analysed array (from the constructor)</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.ArrayAnalyzer.#ctor(System.Object)">
            <summary>
            </summary>
            <param name = "array"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.ArrayAnalyzer.getRank(System.Type)">
            <summary>How many dimensions. There can be at least 1</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.ArrayAnalyzer.getLength(System.Int32,System.Type)">
            <summary>How many items in one dimension</summary>
            <param name = "dimension">0-based</param>
            <returns></returns>
            <param name="arrayType"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.ArrayAnalyzer.getLowerBound(System.Int32,System.Type)">
            <summary>Lower index of an array. Default is 0.</summary>
            <param name = "dimension">0-based</param>
            <returns></returns>
            <param name="arrayType"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.ArrayAnalyzer.GetIndexes">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.ArrayAnalyzer.GetValues">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.ArrayAnalyzer.ForEach(System.Action{System.Int32[]})">
            <summary>
            </summary>
            <param name = "action"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.ArrayAnalyzer.forEach(System.Collections.Generic.IList{DmFramework.Serialization.Core.DimensionInfo},System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Int32[]})">
            <summary>This functiona will be recursively used</summary>
            <param name = "dimensionInfos"></param>
            <param name = "dimension"></param>
            <param name = "coordinates"></param>
            <param name = "action"></param>
        </member>
        <member name="P:DmFramework.Serialization.Core.ArrayAnalyzer.ArrayInfo">
            <summary>Contains extended information about the current array</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.ArrayInfo">
            <summary>Contain info about array (i.e. how many dimensions, lower/upper bounds)</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.ArrayInfo.DimensionInfos">
            <summary>
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.Binary.BinaryReaderTools">
            <summary>Some methods which are used by IBinaryReader</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.BinaryReaderTools.ReadString(System.IO.BinaryReader)">
            <summary>
            </summary>
            <param name = "reader"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.BinaryReaderTools.ReadNumber(System.IO.BinaryReader)">
            <summary>
            </summary>
            <param name = "reader"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.BinaryReaderTools.ReadNumbers(System.IO.BinaryReader)">
            <summary>
            </summary>
            <returns>empty array if there are no indexes</returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.BinaryReaderTools.ReadValue(System.Type,System.IO.BinaryReader)">
            <summary>
            </summary>
            <param name = "expectedType"></param>
            <param name = "reader"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Core.Binary.BinaryWriterTools">
            <summary>Some methods which are used by IBinaryWriter</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.BinaryWriterTools.WriteNumber(System.Int32,System.IO.BinaryWriter)">
            <summary>
            </summary>
            <param name = "number"></param>
            <param name = "writer"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.BinaryWriterTools.WriteNumbers(System.Int32[],System.IO.BinaryWriter)">
            <summary>
            </summary>
            <param name = "numbers"></param>
            <param name = "writer"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.BinaryWriterTools.WriteValue(System.Object,System.IO.BinaryWriter)">
            <summary>
            </summary>
            <param name = "value"></param>
            <param name = "writer"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.BinaryWriterTools.WriteString(System.String,System.IO.BinaryWriter)">
            <summary>BinaryWriter.Write(String...) can not be used as it produces exception if the text is null.</summary>
            <param name = "text"></param>
            <param name = "writer"></param>
        </member>
        <member name="T:DmFramework.Serialization.Core.Binary.Elements">
            <summary>These elements are used during the binary serialization. They should be unique from SubElements and Attributes.</summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.Collection">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.ComplexObject">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.Dictionary">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.MultiArray">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.Null">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.SimpleObject">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.SingleArray">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.ComplexObjectWithId">
            <summary>
             For binary compatibility reason extra type-id: same as ComplexObjectWith, but contains
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.Reference">
            <summary>
             reference to previosly serialized  ComplexObjectWithId
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.CollectionWithId">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.DictionaryWithId">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.SingleArrayWithId">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Elements.MultiArrayWithId">
            <summary>
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.Elements.IsElementWithId(System.Byte)">
            <summary>
            </summary>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Core.Binary.SubElements">
            <summary>These elements are used during the binary serialization. They should be unique from Elements and Attributes.</summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.SubElements.Dimension">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.SubElements.Dimensions">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.SubElements.Item">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.SubElements.Items">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.SubElements.Properties">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.SubElements.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.SubElements.Eof">
            <summary>
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.Binary.Attributes">
            <summary>These attributes are used during the binary serialization. They should be unique from Elements and SubElements.</summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Attributes.DimensionCount">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Attributes.ElementType">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Attributes.Indexes">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Attributes.KeyType">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Attributes.Length">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Attributes.LowerBound">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Attributes.Name">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Attributes.Type">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Attributes.Value">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.Attributes.ValueType">
            <summary>
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.Binary.NumberSize">
            <summary>How many bytes occupies a number value</summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.NumberSize.Zero">
            <summary>
              is zero
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.NumberSize.B1">
            <summary>
              serializes as 1 Byte
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.NumberSize.B2">
            <summary>
              serializes as 2 bytes
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Binary.NumberSize.B4">
            <summary>
              serializes as 4 bytes
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.NumberSize.GetNumberSize(System.Int32)">
            <summary>Gives the least required Byte amount to store the number</summary>
            <param name = "value"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Core.Binary.IndexGenerator`1">
            <summary>
              Is used to store types and property names in lists. Contains only unique elements and gives index of the item back.
              During deserialization this index is read from stream and then replaced with an appropriate value from the list.
            </summary>
            <typeparam name = "T"></typeparam>
        </member>
        <member name="M:DmFramework.Serialization.Core.Binary.IndexGenerator`1.GetIndexOfItem(`0)">
            <summary>if the item exist, it gives its index back, otherweise the item is added and its new index is given back</summary>
            <param name = "item"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Core.CreatingInstanceException">
            <summary>Occurs if no instance of a type can be created. Maybe the type lacks on a public standard (parameterless) constructor?</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.CreatingInstanceException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.CreatingInstanceException.#ctor(System.String)">
            <summary>
            </summary>
            <param name = "message"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.CreatingInstanceException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
            <param name = "message"></param>
            <param name = "innerException"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.CreatingInstanceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name = "info"></param>
            <param name = "context"></param>
        </member>
        <member name="T:DmFramework.Serialization.Core.DefaultInitializer">
            <summary>Gives standard settings for the framework. Is used only internally.</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.DeserializingException">
            <summary>Can occure during deserialization</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.DeserializingException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.DeserializingException.#ctor(System.String)">
            <summary>
            </summary>
            <param name = "message"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.DeserializingException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
            <param name = "message"></param>
            <param name = "inner"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.DeserializingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name = "info"></param>
            <param name = "context"></param>
        </member>
        <member name="T:DmFramework.Serialization.Core.Property">
            <summary>Base class for all properties. Every object can be defined with inheritors of the Property class.</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.Property.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name = "name"></param>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.Property.GetPropertyArt">
            <summary>Gets the property art.</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.Property.CreateInstance(DmFramework.Serialization.Core.PropertyArt,System.String,System.Type)">
            <summary>Creates property from PropertyArt</summary>
            <param name="art" type="DmFramework.Serialization.Core.PropertyArt">
            <para></para>
            </param>
            <param name="propertyName" type="string">
            <para></para>
            </param>
            <param name="propertyType" type="System.Type">
            <para></para>
            </param>
            <returns>null if PropertyArt.Reference is requested</returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.Property.ToString">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:DmFramework.Serialization.Core.Property.Name">
            <summary>Not all properties have name (i.e. items of a collection)</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.Property.Type">
            <summary>Of what type is the property or its value</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.Property.Parent">
            <summary>If the properties are nested, i.e. collection items are nested in the collection</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.Property.Art">
            <summary>Of what art is the property.</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.ReferenceTargetProperty">
            <summary>All properties derived from this property can be a target of a reference</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Core.ReferenceTargetProperty.#ctor(System.String,System.Type)">
            <summary></summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.ReferenceTargetProperty.MakeFlatCopyFrom(DmFramework.Serialization.Core.ReferenceTargetProperty)">
            <summary>
             Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.ReferenceTargetProperty.ToString">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:DmFramework.Serialization.Core.ReferenceTargetProperty.Reference">
            <summary>
             Information about the References for this property
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.ReferenceInfo">
            <summary>
             Provides information about property references
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.ReferenceInfo.#ctor">
            <summary>默认构造函数</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.ReferenceInfo.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Core.ReferenceInfo.Count">
            <summary>
             How many references to the same object
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.ReferenceInfo.Id">
            <summary>
             Every Object must have a unique Id
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.ReferenceInfo.IsProcessed">
            <summary>
             During serialization is true if the target object was already serialized.
             Then the target must not be serialized again. Only its reference must be created.
             During deserialization it means, the target object was parsed and read
             from the stream. It can be further used to resolve its references.
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.NullProperty">
            <summary>Represents the null value. Null values are serialized too.</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.NullProperty.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.NullProperty.#ctor(System.String)">
            <summary>
            </summary>
            <param name = "name"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.NullProperty.GetPropertyArt">
            <summary>Gets the property art.</summary>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Core.PropertyCollection">
            <summary>It represents some properties of an object, or some items of a collection/dictionary/array</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.PropertyCollection.ClearItems">
            <summary>
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.PropertyCollection.InsertItem(System.Int32,DmFramework.Serialization.Core.Property)">
            <summary>
            </summary>
            <param name = "index"></param>
            <param name = "item"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.PropertyCollection.RemoveItem(System.Int32)">
            <summary>
            </summary>
            <param name = "index"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.PropertyCollection.SetItem(System.Int32,DmFramework.Serialization.Core.Property)">
            <summary>
            </summary>
            <param name = "index"></param>
            <param name = "item"></param>
        </member>
        <member name="P:DmFramework.Serialization.Core.PropertyCollection.Parent">
            <summary>
              Parent property
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.SimpleProperty">
            <summary>
            Represents all primitive types (i.e. Int32, Double...) and additionally
            DateTime, TimeSpan, Decimal und enumerations
            Contains no nested properties
            </summary>
            <remarks>
            See SimpleValueConverter for a list of supported types.
            </remarks>
        </member>
        <member name="M:DmFramework.Serialization.Core.SimpleProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name = "name"></param>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.SimpleProperty.GetPropertyArt">
            <summary>Gets the property art.</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.SimpleProperty.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Core.SimpleProperty.Value">
            <summary>
              It could only one of the simple types, see Tools.IsSimple(...)
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.ComplexProperty">
            <summary>Represents complex type which contains properties.</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.ComplexProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name = "name"></param>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.ComplexProperty.MakeFlatCopyFrom(DmFramework.Serialization.Core.ReferenceTargetProperty)">
            <summary>
             Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.ComplexProperty.GetPropertyArt">
            <summary>Gets the property art.</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Core.ComplexProperty.Properties">
            <summary>
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.CollectionProperty">
            <summary>Represents type which is ICollection</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.CollectionProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name = "name"></param>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.CollectionProperty.MakeFlatCopyFrom(DmFramework.Serialization.Core.ReferenceTargetProperty)">
            <summary>
             Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.CollectionProperty.GetPropertyArt">
            <summary>Gets the property art.</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Core.CollectionProperty.Items">
            <summary>
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.CollectionProperty.ElementType">
            <summary>Of what type are items. It's important for polymorphic collection</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.DictionaryProperty">
            <summary>Represents dictionary. Every item is composed of the key and value</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.DictionaryProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name = "name"></param>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.DictionaryProperty.MakeFlatCopyFrom(DmFramework.Serialization.Core.ReferenceTargetProperty)">
            <summary>
             Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.DictionaryProperty.GetPropertyArt">
            <summary>Gets the property art.</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Core.DictionaryProperty.Items">
            <summary>
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.DictionaryProperty.KeyType">
            <summary>Of what type are keys</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.DictionaryProperty.ValueType">
            <summary>Of what type are values</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.SingleDimensionalArrayProperty">
            <summary>Represents one dimensional array</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.SingleDimensionalArrayProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name = "name"></param>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.SingleDimensionalArrayProperty.MakeFlatCopyFrom(DmFramework.Serialization.Core.ReferenceTargetProperty)">
            <summary>
             Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.SingleDimensionalArrayProperty.GetPropertyArt">
            <summary>Gets the property art.</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Core.SingleDimensionalArrayProperty.Items">
            <summary>
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.SingleDimensionalArrayProperty.LowerBound">
            <summary>As default is 0, but there can be higher start index</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.SingleDimensionalArrayProperty.ElementType">
            <summary>Of what type are elements</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.MultiDimensionalArrayProperty">
            <summary>Represents multidimensional array. Array properties are in DimensionInfos</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.MultiDimensionalArrayProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name = "name"></param>
            <param name = "type"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.MultiDimensionalArrayProperty.MakeFlatCopyFrom(DmFramework.Serialization.Core.ReferenceTargetProperty)">
            <summary>
             Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.MultiDimensionalArrayProperty.GetPropertyArt">
            <summary>Gets the property art.</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Core.MultiDimensionalArrayProperty.Items">
            <summary>
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.MultiDimensionalArrayProperty.DimensionInfos">
            <summary>Information about the array</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.MultiDimensionalArrayProperty.ElementType">
            <summary>Of what type are elements. All elements in all all dimensions must be inheritors of this type.</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.MultiDimensionalArrayItem">
            <summary>Information about one item in a multidimensional array</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.MultiDimensionalArrayItem.#ctor(System.Int32[],DmFramework.Serialization.Core.Property)">
            <summary>
            </summary>
            <param name = "indexes"></param>
            <param name = "value"></param>
        </member>
        <member name="P:DmFramework.Serialization.Core.MultiDimensionalArrayItem.Indexes">
            <summary>Represents item coordinates in the array (i.e. [1,5,3] - item has index 1 in the dimension 0, index 5 in the dimension 1 and index 3 in the dimension 2).</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.MultiDimensionalArrayItem.Value">
            <summary>Item value. It can contain any type.</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.DimensionInfo">
            <summary>
            Every array is composed of dimensions. Singledimensional arrays have only one info,
            multidimensional have more dimension infos.
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.DimensionInfo.LowerBound">
            <summary>Start index for the array</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.DimensionInfo.Length">
            <summary>How many items are in this dimension</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.KeyValueItem">
            <summary>Represents one item from the dictionary, a key-value pair.</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Core.KeyValueItem.#ctor(DmFramework.Serialization.Core.Property,DmFramework.Serialization.Core.Property)">
            <summary>
            </summary>
            <param name = "key"></param>
            <param name = "value"></param>
        </member>
        <member name="P:DmFramework.Serialization.Core.KeyValueItem.Key">
            <summary>Represents key. There can be everything</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.KeyValueItem.Value">
            <summary>Represents value. There can be everything</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.PropertyArt">
            <summary>Of what art is the property</summary>
            <remarks></remarks>
        </member>
        <member name="F:DmFramework.Serialization.Core.PropertyArt.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.PropertyArt.Simple">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.PropertyArt.Complex">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.PropertyArt.Collection">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.PropertyArt.Dictionary">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.PropertyArt.SingleDimensionalArray">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.PropertyArt.MultiDimensionalArray">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.PropertyArt.Null">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.PropertyArt.Reference">
            <summary>
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.SharpSerializerSettings`1">
            <summary>Base class for the settings of the SharpSerializer. Is passed to its constructor.</summary>
            <typeparam name = "T"></typeparam>
        </member>
        <member name="M:DmFramework.Serialization.Core.SharpSerializerSettings`1.#ctor">
            <summary>默认构造函数</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.SharpSerializerSettings`1.IncludeAssemblyVersionInTypeName">
            <summary>Version=x.x.x.x will be inserted to the type name</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.SharpSerializerSettings`1.IncludeCultureInTypeName">
            <summary>Culture=.... will be inserted to the type name</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.SharpSerializerSettings`1.IncludePublicKeyTokenInTypeName">
            <summary>PublicKeyToken=.... will be inserted to the type name</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.SharpSerializerSettings`1.AdvancedSettings">
            <summary>Contains mostly classes from the namespace DmFramework.Serialization.Advanced</summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.AdvancedSharpSerializerXmlSettings">
            <summary>Base class for the advanced settings. Is common for the binary and xml serialization.</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.Core.AdvancedSharpSerializerSettings.#ctor">
            <summary>默认构造函数</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.AdvancedSharpSerializerSettings.PropertiesToIgnore">
            <summary>Which properties should be ignored during the serialization.</summary>
            <remarks>
              In your business objects you can mark these properties with ExcludeFromSerializationAttribute
              In built in .NET Framework classes you can not do this. Therefore you define these properties here.
              I.e. System.Collections.Generic.List has property Capacity which is irrelevant for
              the whole Serialization and should be ignored.
            </remarks>
        </member>
        <member name="P:DmFramework.Serialization.Core.AdvancedSharpSerializerSettings.AttributesToIgnore">
            <summary>
            All Properties marked with one of the contained attribute-types will be ignored on save.
            As default, this list contains only ExcludeFromSerializationAttribute.
            For performance reasons it would be better to clear this list if this attribute
            is not used in serialized classes.
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.AdvancedSharpSerializerSettings.RootName">
            <summary>What name has the root item of your serialization. Default is "Root".</summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.AdvancedSharpSerializerSettings.TypeNameConverter">
            <summary>
              Converts Type to String and vice versa. Default is an instance of TypeNameConverter which serializes Types as "type name, assembly name"
              If you want to serialize your objects as fully qualified assembly name, you should set this setting with an instance of TypeNameConverter
              with overloaded constructor.
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Core.AdvancedSharpSerializerXmlSettings.SimpleValueConverter">
            <summary>
              Converts simple values to String and vice versa. Default it is an instance of SimpleValueConverter with CultureInfo.InvariantCulture.
              You can override the default converter to implement your own converting to/from String.
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.AdvancedSharpSerializerBinarySettings">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:DmFramework.Serialization.Core.SimpleValueParsingException">
            <summary>Occures if the simple value can not be restored from its text representation</summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.SimpleValueParsingException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.SimpleValueParsingException.#ctor(System.String)">
            <summary>
            </summary>
            <param name = "message"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.SimpleValueParsingException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
            <param name = "message"></param>
            <param name = "innerException"></param>
        </member>
        <member name="M:DmFramework.Serialization.Core.SimpleValueParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name = "info"></param>
            <param name = "context"></param>
        </member>
        <member name="T:DmFramework.Serialization.Core.Tools">
            <summary>
              Some help functions for the serializing framework. As these functions are complexer
              they can be converted to single classes.
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Core.Tools.IsSimple(System.Type)">
            <summary>Is the simple type (String, DateTime, TimeSpan, Decimal, Enumeration or other primitive type)</summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.Tools.IsEnumerable(System.Type)">
            <summary>Is type an IEnumerable</summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.Tools.IsCollection(System.Type)">
            <summary>Is type ICollection</summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.Tools.IsDictionary(System.Type)">
            <summary>Is type IDictionary</summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.Tools.IsArray(System.Type)">
            <summary>Is it array? It does not matter if singledimensional or multidimensional</summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Core.Tools.CreateInstance(System.Type)">
            <summary>Creates instance from type. There must be a standard constructor (without parameters) in the type.</summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Core.Xml.Elements">
            <summary>These elements are used as tags during the xml serialization.</summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Elements.Collection">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Elements.ComplexObject">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Elements.OldReference">
            <summary>
             internal used as an id for referencing already serialized items
             Since v.2.12 Elements.Reference is used instead.
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Elements.Reference">
            <summary>
             used as an id for referencing already serialized items
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Elements.Dictionary">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Elements.MultiArray">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Elements.Null">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Elements.SimpleObject">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Elements.SingleArray">
            <summary>
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.Xml.SubElements">
            <summary>These elements are used as tags during the xml serialization.</summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.SubElements.Dimension">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.SubElements.Dimensions">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.SubElements.Item">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.SubElements.Items">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.SubElements.Properties">
            <summary>
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Core.Xml.Attributes">
            <summary>These attributes are used during the xml serialization.</summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.DimensionCount">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.ElementType">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.Indexes">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.KeyType">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.Length">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.LowerBound">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.Name">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.Type">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.Value">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.ValueType">
            <summary>
            </summary>
        </member>
        <member name="F:DmFramework.Serialization.Core.Xml.Attributes.ReferenceId">
            <summary>
             used as an id to identify and refere already serialized items
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Deserializing.ObjectFactory">
            <summary>Takes Property and converts it to an object</summary>
        </member>
        <member name="F:DmFramework.Serialization.Deserializing.ObjectFactory._objectCache">
            <summary>Contains already created objects. Is used for reference resolving.</summary>
        </member>
        <member name="M:DmFramework.Serialization.Deserializing.ObjectFactory.CreateObject(DmFramework.Serialization.Core.Property)">
            <summary>Builds object from property</summary>
            <param name = "property"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Deserializing.ObjectFactory.createObjectFromDictionaryProperty(DmFramework.Serialization.Core.DictionaryProperty)">
            <summary>Items will be added only if the "Add" method was found, which exactly 2 parameters (key, value) has</summary>
            <param name = "property"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Deserializing.ObjectFactory.fillProperties(System.Object,System.Collections.Generic.IEnumerable{DmFramework.Serialization.Core.Property})">
            <summary>Fill properties of the class or structure</summary>
            <param name = "obj"></param>
            <param name = "properties"></param>
        </member>
        <member name="M:DmFramework.Serialization.Deserializing.ObjectFactory.getMultiDimensionalArrayCreatingInfo(System.Collections.Generic.IEnumerable{DmFramework.Serialization.Core.DimensionInfo})">
            <summary>This internal class helps to instantiate the multidimensional array</summary>
            <param name = "infos"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.ExcludeFromSerializationAttribute">
            <summary>All labeled with that Attribute object properties are ignored during the serialization. See PropertyProvider</summary>
        </member>
        <member name="T:DmFramework.Serialization.ReaderBase`1">
             <summary>读取器基类</summary>
             <remarks>
             序列化框架的核心思想：基本类型直接读取，自定义类型反射得到成员，逐层递归读取！详见<see cref="T:DmFramework.Serialization.IReaderWriter"/>
            
             序列化框架的处理顺序为：<see cref="T:DmFramework.Serialization.IAccessor"/>接口 =&gt; <see cref="E:DmFramework.Serialization.ReaderBase`1.OnObjectReading"/>事件 =&gt; 扩展类型 =&gt; <see cref="M:DmFramework.Serialization.ReaderBase`1.ReadValue(System.Type,System.Object@)"/>基础类型 =&gt; <see cref="M:DmFramework.Serialization.ReaderBase`1.ReadDictionary(System.Type,System.Object@)"/>字典 =&gt; <see cref="M:DmFramework.Serialization.ReaderBase`1.ReadEnumerable(System.Type,System.Object@)"/>枚举 =&gt; <see cref="M:DmFramework.Serialization.ReaderBase`1.ReadSerializable(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)"/>序列化接口 =&gt; <see cref="M:DmFramework.Serialization.ReaderBase`1.ReadCustomObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)"/>自定义对象 =&gt; <see cref="M:DmFramework.Serialization.ReaderBase`1.ReadUnKnown(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)"/>未知类型 =&gt; <see cref="E:DmFramework.Serialization.ReaderBase`1.OnObjectReaded"/>事件
            
             反序列化对象时只能调用<see cref="M:DmFramework.Serialization.ReaderBase`1.ReadObject(System.Type)"/>方法，其它所有方法（包括所有Read重载）仅用于内部读取或者自定义序列化时使用。
             </remarks>
             <typeparam name="TSettings">设置类</typeparam>
        </member>
        <member name="T:DmFramework.Serialization.ReaderWriterBase`1">
            <summary>读写器基类</summary>
        </member>
        <member name="T:DmFramework.Serialization.IReaderWriter">
             <summary>读写器接口</summary>
             <remarks>
             序列化框架的核心思想：基本类型直接写入，自定义类型反射得到成员，逐层递归写入！
            
             <see cref="P:DmFramework.Serialization.IReaderWriter.Stream"/>作为序列化操作的根本，读写都是对数据流进行操作；
             <see cref="P:DmFramework.Serialization.IReaderWriter.Settings"/>是序列化时的一些设置；
             <see cref="P:DmFramework.Serialization.IReaderWriter.Depth"/>表示当前序列化的层次；
             <see cref="M:DmFramework.Serialization.IReaderWriter.GetMembers(System.Type,System.Object)"/>方法和<see cref="E:DmFramework.Serialization.IReaderWriter.OnGotMembers"/>事件用于获取/修改自定义类型需要序列化的成员，默认反射实现。
             </remarks>
        </member>
        <member name="M:DmFramework.Serialization.IReaderWriter.Reset">
            <summary>重置</summary>
        </member>
        <member name="M:DmFramework.Serialization.IReaderWriter.GetMembers(System.Type,System.Object)">
            <summary>获取需要序列化的成员</summary>
            <param name="type">类型</param>
            <param name="value">对象</param>
            <returns>需要序列化的成员</returns>
        </member>
        <member name="M:DmFramework.Serialization.IReaderWriter.Backup">
            <summary>备份当前环境，用于临时切换数据流等</summary>
            <returns>本次备份项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.IReaderWriter.Restore">
            <summary>恢复最近一次备份</summary>
            <returns>本次还原项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.IReaderWriter.EnableTraceStream">
            <summary>使用跟踪流。实际上是重新包装一次Stream，必须在设置Stream，使用之前</summary>
        </member>
        <member name="M:DmFramework.Serialization.IReaderWriter.WriteLog(System.String,System.Object[])">
            <summary>调试输出</summary>
            <param name="action">操作</param>
            <param name="args">参数</param>
        </member>
        <member name="P:DmFramework.Serialization.IReaderWriter.Name">
            <summary>读写器名称</summary>
        </member>
        <member name="P:DmFramework.Serialization.IReaderWriter.Stream">
            <summary>数据流</summary>
        </member>
        <member name="P:DmFramework.Serialization.IReaderWriter.Settings">
            <summary>序列化设置</summary>
        </member>
        <member name="P:DmFramework.Serialization.IReaderWriter.Depth">
            <summary>层次深度。</summary>
        </member>
        <member name="P:DmFramework.Serialization.IReaderWriter.CurrentObject">
            <summary>当前对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.IReaderWriter.CurrentMember">
            <summary>当前成员</summary>
        </member>
        <member name="P:DmFramework.Serialization.IReaderWriter.Items">
            <summary>用于存放使用者的上下文数据</summary>
        </member>
        <member name="E:DmFramework.Serialization.IReaderWriter.OnGotMembers">
            <summary>获取指定类型中需要序列化的成员时触发。使用者可以修改、排序要序列化的成员。</summary>
        </member>
        <member name="P:DmFramework.Serialization.IReaderWriter.Debug">
            <summary>是否调试</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.Reset">
            <summary>重置</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.IsExactType(System.Type)">
            <summary>是否精确类型</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.Backup">
            <summary>备份当前环境，用于临时切换数据流等</summary>
            <returns>本次备份项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.Restore">
            <summary>恢复最近一次备份</summary>
            <returns>本次还原项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.GetMembers(System.Type,System.Object)">
            <summary>获取需要序列化的成员</summary>
            <param name="type">类型</param>
            <param name="value">对象</param>
            <returns>需要序列化的成员</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.OnGetMembers(System.Type,System.Object)">
            <summary>获取需要序列化的成员（属性或字段）</summary>
            <param name="type">指定类型</param>
            <param name="value">对象</param>
            <returns>需要序列化的成员</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.ToString">
            <summary>已重载。增加输出设置信息</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.EnableTraceStream">
            <summary>使用跟踪流。实际上是重新包装一次Stream，必须在设置Stream，使用之前</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.ShowMembers(System.String,DmFramework.Serialization.IObjectMemberInfo[])">
            <summary>显示成员列表</summary>
            <param name="action"></param>
            <param name="members"></param>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.WriteLog(System.String,System.Object[])">
            <summary>调试输出</summary>
            <param name="action">操作</param>
            <param name="args">参数</param>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.WriteLog(System.Int32,System.String,System.Object[])">
            <summary>调试输出</summary>
            <param name="colorIndex">颜色方案</param>
            <param name="action">操作</param>
            <param name="args">参数</param>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.SetDebugIndent(System.Int32)">
            <summary>设置调试缩进</summary>
            <param name="indent">缩进</param>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterBase`1.SetDebugIndent">
            <summary>设置调试缩进</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.Name">
            <summary>读写器名称</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.Stream">
            <summary>数据流。默认实例化一个MemoryStream，设置值时将重置Depth为1</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.Settings">
            <summary>序列化设置</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.DmFramework#Serialization#IReaderWriter#Settings">
            <summary>序列化设置</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.Depth">
            <summary>层次深度</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.UseSize">
            <summary>是否使用大小，如果使用，将在写入数组、集合和字符串前预先写入大小</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.CurrentObject">
            <summary>当前对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.CurrentMember">
            <summary>当前成员</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.Items">
            <summary>用于存放使用者的上下文数据</summary>
        </member>
        <member name="E:DmFramework.Serialization.ReaderWriterBase`1.OnGotMembers">
            <summary>获取指定类型中需要序列化的成员时触发。使用者可以修改、排序要序列化的成员。</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.Debug">
            <summary>是否调试</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterBase`1.IsConsole">
            <summary>是否控制台</summary>
        </member>
        <member name="T:DmFramework.Serialization.IReader2">
            <summary>读取器接口</summary>
            <remarks>
            序列化框架的核心思想：基本类型直接读取，自定义类型反射得到成员，逐层递归读取！详见<see cref="T:DmFramework.Serialization.IReaderWriter"/>
            </remarks>
        </member>
        <member name="T:DmFramework.Serialization.IReader">
             <summary>读取器接口</summary>
             <remarks>
             序列化框架的核心思想：基本类型直接读取，自定义类型反射得到成员，逐层递归读取！详见<see cref="T:DmFramework.Serialization.IReaderWriter"/>
            
             反序列化对象时只能调用<see cref="M:DmFramework.Serialization.IReader.ReadObject(System.Type)"/>方法，其它所有方法（包括所有Read重载）仅用于内部读取或者自定义序列化时使用。
             </remarks>
        </member>
        <member name="M:DmFramework.Serialization.IReader.ReadObject(System.Type)">
            <summary>主要入口方法。从数据流中读取指定类型的对象</summary>
            <param name="type">类型</param>
            <returns>对象</returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader.ReadObject``1">
            <summary>主要入口方法。从数据流中读取指定类型的对象</summary>
            <typeparam name="T">类型</typeparam>
            <returns>对象</returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader.ReadObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>主要入口方法。尝试按照指定类型读取目标对象</summary>
            <param name="type">类型</param>
            <param name="value">对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader.ReadMember(System.Type,System.Object@,DmFramework.Serialization.IObjectMemberInfo,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取对象成员</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="member">成员</param>
            <param name="index">成员索引</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="E:DmFramework.Serialization.IReader.OnObjectReading">
            <summary>读对象前触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.IReader.OnObjectReaded">
            <summary>读对象后触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.IReader.OnMemberReading">
            <summary>读成员前触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.IReader.OnMemberReaded">
            <summary>读成员后触发。</summary>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadByte">
            <summary>从当前流中读取下一个字节，并使流的当前位置提升 1 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadBytes(System.Int32)">
            <summary>从当前流中将 count 个字节读入字节数组，如果count小于0，则先读取字节数组长度。</summary>
            <param name="count">要读取的字节数。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadSByte">
            <summary>从此流中读取一个有符号字节，并使流的当前位置提升 1 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadInt16">
            <summary>从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadInt32">
            <summary>从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadInt64">
            <summary>从当前流中读取 8 字节有符号整数，并使流的当前位置向前移动 8 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadUInt16">
            <summary>使用 Little-Endian 编码从当前流中读取 2 字节无符号整数，并将流的位置提升 2 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadUInt32">
            <summary>从当前流中读取 4 字节无符号整数并使流的当前位置提升 4 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadUInt64">
            <summary>从当前流中读取 8 字节无符号整数并使流的当前位置提升 8 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadSingle">
            <summary>从当前流中读取 4 字节浮点值，并使流的当前位置提升 4 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadDouble">
            <summary>从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadChar">
            <summary>从当前流中读取下一个字符，并根据所使用的 Encoding 和从流中读取的特定字符，提升流的当前位置。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadChars(System.Int32)">
            <summary>从当前流中读取 count 个字符，以字符数组的形式返回数据，并根据所使用的 Encoding 和从流中读取的特定字符，提升当前位置。</summary>
            <param name="count">要读取的字符数。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadString">
            <summary>从当前流中读取一个字符串。字符串有长度前缀，一次 7 位地被编码为整数。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadBoolean">
            <summary>从当前流中读取 Boolean 值，并使该流的当前位置提升 1 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadDecimal">
            <summary>从当前流中读取十进制数值，并将该流的当前位置提升十六个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadDateTime">
            <summary>读取一个时间日期</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadValue(System.Type)">
            <summary>读取值类型数据</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadValue(System.Type,System.Object@)">
            <summary>尝试读取值类型数据，返回是否读取成功</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadGuid">
            <summary>读取Guid</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadIPAddress">
            <summary>读取IPAddress</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadIPEndPoint">
            <summary>读取IPEndPoint</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadType">
            <summary>读取Type</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadObjRef(System.Type,System.Object@,System.Int32@)">
            <summary>读取对象引用。</summary>
            <param name="type">类型</param>
            <param name="value">对象</param>
            <param name="index">引用计数</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.IReader2.ReadSize">
            <summary>读取大小</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadByte">
            <summary>从当前流中读取下一个字节，并使流的当前位置提升 1 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadBytes(System.Int32)">
            <summary>从当前流中将 count 个字节读入字节数组，如果count小于0，则先读取字节数组长度。</summary>
            <param name="count">要读取的字节数。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadSByte">
            <summary>从此流中读取一个有符号字节，并使流的当前位置提升 1 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadIntBytes(System.Int32)">
            <summary>读取整数的字节数组，某些写入器（如二进制写入器）可能需要改变字节顺序</summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadInt16">
            <summary>从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadInt32">
            <summary>从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadInt64">
            <summary>从当前流中读取 8 字节有符号整数，并使流的当前位置向前移动 8 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadUInt16">
            <summary>使用 Little-Endian 编码从当前流中读取 2 字节无符号整数，并将流的位置提升 2 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadUInt32">
            <summary>从当前流中读取 4 字节无符号整数并使流的当前位置提升 4 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadUInt64">
            <summary>从当前流中读取 8 字节无符号整数并使流的当前位置提升 8 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadSingle">
            <summary>从当前流中读取 4 字节浮点值，并使流的当前位置提升 4 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadDouble">
            <summary>从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadChar">
            <summary>从当前流中读取下一个字符，并根据所使用的 Encoding 和从流中读取的特定字符，提升流的当前位置。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadChars(System.Int32)">
            <summary>从当前流中读取 count 个字符，以字符数组的形式返回数据，并根据所使用的 Encoding 和从流中读取的特定字符，提升当前位置。</summary>
            <param name="count">要读取的字符数。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadString">
            <summary>从当前流中读取一个字符串。字符串有长度前缀，一次 7 位地被编码为整数。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadBoolean">
            <summary>从当前流中读取 Boolean 值，并使该流的当前位置提升 1 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadDecimal">
            <summary>从当前流中读取十进制数值，并将该流的当前位置提升十六个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadDateTime">
            <summary>读取一个时间日期</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadValue(System.Type)">
            <summary>读取值类型数据</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadValue(System.Type,System.Object@)">
            <summary>尝试读取值类型数据，返回是否读取成功</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadGuid">
            <summary>读取Guid</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadDictionary(System.Type,System.Object@)">
            <summary>尝试读取字典类型对象</summary>
            <param name="type">类型</param>
            <param name="value">对象</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadDictionary(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取字典类型对象</summary>
            <param name="type">类型</param>
            <param name="value">对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadDictionary(System.Type,System.Type,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取字典项集合，以读取键值失败作为读完字典项的标识，子类可以重载实现以字典项数量来读取</summary>
            <param name="keyType">键类型</param>
            <param name="valueType">值类型</param>
            <param name="count">元素个数</param>
            <param name="callback">处理元素的方法</param>
            <returns>字典项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadDictionaryEntry(System.Type,System.Type,System.Collections.DictionaryEntry@,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取字典项</summary>
            <param name="keyType">键类型</param>
            <param name="valueType">值类型</param>
            <param name="value">字典项</param>
            <param name="index">元素序号</param>
            <param name="callback">处理元素的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.GetDictionaryEntryType(System.Type,System.Type@,System.Type@)">
            <summary>取得字典的键值类型，默认只支持获取两个泛型参数的字典的键值类型</summary>
            <param name="type">字典类型</param>
            <param name="keyType">键类型</param>
            <param name="valueType">值类型</param>
            <returns>是否获取成功，如果失败，则字典读取失败</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadEnumerable(System.Type,System.Object@)">
            <summary>尝试读取枚举</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadEnumerable(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取枚举</summary>
            <remarks>重点和难点在于如果得知枚举元素类型，这里假设所有元素类型一致，否则实在无法处理</remarks>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadEnumerable(System.Type,System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取枚举</summary>
            <remarks>重点和难点在于如果得知枚举元素类型，这里假设所有元素类型一致，否则实在无法处理</remarks>
            <param name="type">类型</param>
            <param name="elementType">元素类型数组</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadItems(System.Type,System.Type,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取元素集合</summary>
            <param name="type"></param>
            <param name="elementType"></param>
            <param name="count">元素个数</param>
            <param name="callback">处理元素的方法</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadItem(System.Type,System.Object@,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取项</summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="index">元素序号</param>
            <param name="callback">处理元素的方法</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ProcessItems(System.Type,System.Type,System.Object@,System.Collections.IList)">
            <summary>处理结果集</summary>
            <param name="type"></param>
            <param name="elementType"></param>
            <param name="value"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadSerializable(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取实现了可序列化接口的对象</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadUnKnown(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取未知对象（其它所有方法都无法识别的对象），采用BinaryFormatter或者XmlSerialization</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadExtend(System.Type,System.Object@)">
            <summary>扩展读取，反射查找合适的读取方法</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadIPAddress">
            <summary>读取IPAddress</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.OnReadIPAddress">
            <summary>读取IPAddress</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadIPEndPoint">
            <summary>读取IPEndPoint</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.OnReadIPEndPoint">
            <summary>读取IPEndPoint</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadType">
            <summary>读取Type</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.OnReadType">
            <summary>读取Type</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.CheckAndReadType(System.String,System.Type,System.Object)">
            <summary>检查对象类型与指定写入类型是否一致，若不一致，则先写入类型，以保证读取的时候能够以正确的类型读取。</summary>
            <param name="action"></param>
            <param name="type"></param>
            <param name="value"></param>
            <returns>返回对象实际类型。</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.GuessType(System.Type)">
            <summary>猜测类型。对于无法读取到对象类型的类型，并且是接口之类的，可以猜测</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadObjectType">
            <summary>读对象类型</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadObject(System.Type)">
            <summary>主要入口方法。从数据流中读取指定类型的对象</summary>
            <param name="type">类型</param>
            <returns>对象</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadObject``1">
            <summary>主要入口方法。从数据流中读取指定类型的对象</summary>
            <returns>对象</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadObject(System.Type,System.Object@)">
            <summary>主要入口方法。尝试读取目标对象指定成员的值，通过委托方法递归处理成员</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取目标对象指定成员的值，处理基础类型、特殊类型、基础类型数组、特殊类型数组，通过委托方法处理成员</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.OnReadObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取目标对象指定成员的值，处理基础类型、特殊类型、基础类型数组、特殊类型数组，通过委托方法处理成员</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadRefObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取引用对象</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadObjRef``1(System.Func{``0})">
            <summary>读取引用对象的包装，能自动从引用对象集合里面读取，如果不存在，则调用委托读取对象，并加入引用对象集合</summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadObjRef(System.Type,System.Object@,System.Int32@)">
            <summary>读取对象引用。</summary>
            <param name="type">类型</param>
            <param name="value">对象</param>
            <param name="index">引用计数</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.OnReadObjRefIndex">
            <summary>读取对象引用计数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.AddObjRef(System.Int32,System.Object)">
            <summary>添加对象引用</summary>
            <param name="index">引用计数</param>
            <param name="value">对象</param>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadCustomObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取自定义对象</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.GetMemberBeforeRead(System.Type,System.Object,DmFramework.Serialization.IObjectMemberInfo[],System.Int32)">
            <summary>读取成员之前获取要读取的成员，默认是index处的成员。</summary>
            <remarks>实现者可以重载，改变当前要读取的成员，如果当前成员不在数组里面，则实现者自己跳到下一个可读成员</remarks>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="members">可匹配成员数组</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.GetMemberByName(DmFramework.Serialization.IObjectMemberInfo[],System.String)">
            <summary>根据名称，从成员数组中查找成员</summary>
            <param name="members">可匹配成员数组</param>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadMember(System.Type,System.Object@,DmFramework.Serialization.IObjectMemberInfo,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取对象成员</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="member">成员</param>
            <param name="index">成员索引</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.OnReadMember(System.Type,System.Object@,DmFramework.Serialization.IObjectMemberInfo,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取对象成员</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="member">成员</param>
            <param name="index">成员索引</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadSize">
            <summary>读取大小</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.OnReadSize">
            <summary>读取大小</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ReadLengths">
            <summary>读取多维数组相关参数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderBase`1.ArrEnum(System.Array,System.Action{System.Int32[]},System.Object)">
            <summary>给多维数组赋值</summary>
            <param name="arr"></param>
            <param name="func"></param>
            <param name="value"></param>
        </member>
        <member name="E:DmFramework.Serialization.ReaderBase`1.OnObjectReading">
            <summary>读对象前触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.ReaderBase`1.OnObjectReaded">
            <summary>读对象后触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.ReaderBase`1.OnMemberReading">
            <summary>读成员前触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.ReaderBase`1.OnMemberReaded">
            <summary>读成员后触发。</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderBase`1.EndOfStream">
            <summary>获取一个值，该值表示当前的流位置是否在流的末尾。</summary>
            <returns>如果当前的流位置在流的末尾，则为 true；否则为 false。</returns>
        </member>
        <member name="T:DmFramework.Serialization.ReaderWriterSetting">
            <summary>序列化设置</summary>
        </member>
        <member name="F:DmFramework.Serialization.ReaderWriterSetting._BaseDateTime">
            <summary>编码时间日期的起始时间，固定1970-01-01</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterSetting.ConvertDateTimeToInt64(System.DateTime)">
            <summary>转换时间为64位整数，默认返回毫秒数,具体返回值取决于DateTimeFormat成员的值</summary>
            <param name="value">时间</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ReaderWriterSetting.ConvertInt64ToDateTime(System.Int64)">
            <summary>转换64位整数为时间</summary>
            <param name="value">64位整数</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterSetting.Encoding">
            <summary>字符串编码</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterSetting.UseTypeFullName">
            <summary>是否使用类型全名。类型全名能比程序集唯一名更节省空间</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterSetting.UseObjRef">
            <summary>是否使用对象引用。对于二进制读写，如果不使用对象引用，则不允许出现null对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterSetting.AutoFlush">
            <summary>自动刷新输出</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterSetting.UseField">
            <summary>是否使用字段作为处理成员。</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterSetting.IsBaseFirst">
            <summary>是否优先处理基类的成员</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterSetting.IgnoreMembers">
            <summary>要忽略的成员</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterSetting.DateTimeFormat">
            <summary>时间日期格式</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterSetting.BaseDateTime">
            <summary>编码时间日期的起始时间</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterSetting.SizeFormat">
            <summary>大小格式。只能是数字，无符号整数表示使用相应的压缩编码，压缩编码仅二进制序列化有效</summary>
        </member>
        <member name="T:DmFramework.Serialization.ReaderWriterSetting.DateTimeFormats">
            <summary>时间日期格式</summary>
        </member>
        <member name="F:DmFramework.Serialization.ReaderWriterSetting.DateTimeFormats.Ticks">
            <summary>嘀嗒数。相对较精确，但是占用空间较大,非utc时间</summary>
        </member>
        <member name="F:DmFramework.Serialization.ReaderWriterSetting.DateTimeFormats.Milliseconds">
            <summary>毫秒数。Json常用格式.指定时间格式为与UTC时间1970.1.1 0:0:0之间的毫秒数</summary>
        </member>
        <member name="F:DmFramework.Serialization.ReaderWriterSetting.DateTimeFormats.Seconds">
            <summary>秒数。相对较不准确，但占用空间最小，能满足日常要求.指定时间格式为与UTC时间1970.1.1 0:0:0之间的秒数</summary>
        </member>
        <member name="T:DmFramework.Serialization.TextReaderBase`1">
            <summary>文本读取器基类</summary>
            <typeparam name="TSettings">设置类</typeparam>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadByte">
            <summary>从当前流中读取下一个字节，并使流的当前位置提升 1 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadBytes(System.Int32)">
            <summary>从当前流中将 count 个字节读入字节数组，并使当前位置提升 count 个字节。</summary>
            <param name="count">要读取的字节数。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.FromHex(System.String)">
            <summary>解密</summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadInt16">
            <summary>从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadInt32">
            <summary>从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadInt64">
            <summary>从当前流中读取 8 字节有符号整数，并使流的当前位置向前移动 8 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadSingle">
            <summary>从当前流中读取 4 字节浮点值，并使流的当前位置提升 4 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadDouble">
            <summary>从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadChars(System.Int32)">
            <summary>从当前流中读取 count 个字符，以字符数组的形式返回数据，并根据所使用的 Encoding 和从流中读取的特定字符，提升当前位置。</summary>
            <param name="count">要读取的字符数。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadString">
            <summary>从当前流中读取一个字符串。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadBoolean">
            <summary>从当前流中读取 Boolean 值，并使该流的当前位置提升 1 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadDecimal">
            <summary>从当前流中读取十进制数值，并将该流的当前位置提升十六个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadGuid">
            <summary>读取Guid</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.OnReadIPAddress">
            <summary>读取IPAddress</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.OnReadIPEndPoint">
            <summary>读取IPEndPoint</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderBase`1.ReadValue(System.Type,System.Object@)">
            <summary>尝试读取值类型数据，返回是否读取成功</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.TextReaderBase`1.UseSize">
            <summary>是否使用大小，如果使用，将在写入数组、集合和字符串前预先写入大小。字符串类型读写器一般带有边界，不需要使用大小</summary>
        </member>
        <member name="T:DmFramework.Serialization.TextReaderWriterSetting">
            <summary>文本读写器设置</summary>
        </member>
        <member name="M:DmFramework.Serialization.TextReaderWriterSetting.#ctor">
            <summary>实例化一个文本读写器设置</summary>
        </member>
        <member name="P:DmFramework.Serialization.TextReaderWriterSetting.UseBase64">
            <summary>使用Base64编码字符串，否则使用十六进制字符串</summary>
        </member>
        <member name="P:DmFramework.Serialization.TextReaderWriterSetting.UseEnumName">
            <summary>是否使用名称表示枚举类型，默认使用名称</summary>
        </member>
        <member name="P:DmFramework.Serialization.TextReaderWriterSetting.WriteType">
            <summary>是否输出类型</summary>
        </member>
        <member name="T:DmFramework.Serialization.TextWriterBase`1">
            <summary>文本写入器基类</summary>
            <typeparam name="TSettings">设置类</typeparam>
        </member>
        <member name="T:DmFramework.Serialization.WriterBase`1">
             <summary>写入器基类</summary>
             <remarks>
             序列化框架的核心思想：基本类型直接写入，自定义类型反射得到成员，逐层递归写入！详见<see cref="T:DmFramework.Serialization.IReaderWriter"/>
            
             序列化框架的处理顺序为：<see cref="T:DmFramework.Serialization.IAccessor"/>接口 =&gt; <see cref="E:DmFramework.Serialization.WriterBase`1.OnObjectWriting"/>事件 =&gt; 扩展类型 =&gt; <see cref="M:DmFramework.Serialization.WriterBase`1.WriteValue(System.Object)"/>基础类型 =&gt; <see cref="M:DmFramework.Serialization.WriterBase`1.WriteDictionary(System.Collections.IDictionary,System.Type,DmFramework.Serialization.WriteObjectCallback)"/>字典 =&gt; <see cref="M:DmFramework.Serialization.WriterBase`1.WriteEnumerable(System.Collections.IEnumerable,System.Type,DmFramework.Serialization.WriteObjectCallback)"/>枚举 =&gt; <see cref="M:DmFramework.Serialization.WriterBase`1.WriteSerializable(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)"/>序列化接口 =&gt; <see cref="M:DmFramework.Serialization.WriterBase`1.WriteCustomObject(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)"/>自定义对象 =&gt; <see cref="M:DmFramework.Serialization.WriterBase`1.WriteUnKnown(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)"/>未知类型 =&gt; <see cref="E:DmFramework.Serialization.WriterBase`1.OnObjectWrited"/>事件
            
             序列化对象时只能调用<see cref="M:DmFramework.Serialization.WriterBase`1.WriteObject(System.Object)"/>方法，其它所有方法（包括所有Write重载）仅用于内部写入或者自定义序列化时使用。
            
             Decimal转为四个Int32整数输出；
             DateTime转为Int64输出。
             </remarks>
             <typeparam name="TSettings">设置类</typeparam>
        </member>
        <member name="T:DmFramework.Serialization.IWriter2">
            <summary>不需要写名称的写入接口。主要指二进制序列化</summary>
            <remarks>
            序列化框架的核心思想：基本类型直接写入，自定义类型反射得到成员，逐层递归写入！详见<see cref="T:DmFramework.Serialization.IReaderWriter"/>
            </remarks>
        </member>
        <member name="T:DmFramework.Serialization.IWriter">
             <summary>写入器接口</summary>
             <remarks>
             序列化框架的核心思想：基本类型直接写入，自定义类型反射得到成员，逐层递归写入！详见<see cref="T:DmFramework.Serialization.IReaderWriter"/>
            
             序列化对象时只能调用<see cref="M:DmFramework.Serialization.IWriter.WriteObject(System.Object)"/>方法，其它所有方法（包括所有Write重载）仅用于内部写入或者自定义序列化时使用。
             </remarks>
        </member>
        <member name="M:DmFramework.Serialization.IWriter.WriteObject(System.Object)">
            <summary>主要入口方法。把对象写入数据流</summary>
            <param name="value">对象</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.IWriter.WriteObject(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>主要入口方法。写入对象。具体读写器可以重载该方法以修改写入对象前后的行为。</summary>
            <param name="value">对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.IWriter.WriteMember(System.String,System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入对象成员</summary>
            <param name="name">成员名字</param>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的成员类型</param>
            <param name="index">成员索引</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.IWriter.Flush">
            <summary>刷新缓存中的数据</summary>
        </member>
        <member name="E:DmFramework.Serialization.IWriter.OnObjectWriting">
            <summary>写对象前触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.IWriter.OnObjectWrited">
            <summary>写对象后触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.IWriter.OnMemberWriting">
            <summary>写成员前触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.IWriter.OnMemberWrited">
            <summary>写成员后触发。</summary>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Byte)">
            <summary>将一个无符号字节写入</summary>
            <param name="value">要写入的无符号字节。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Byte[])">
            <summary>将字节数组写入，如果设置了UseSize，则先写入数组长度。</summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.SByte)">
            <summary>将一个有符号字节写入当前流，并将流的位置提升 1 个字节。</summary>
            <param name="value">要写入的有符号字节。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>将字节数组部分写入当前流，不写入数组长度。</summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
            <param name="index">buffer 中开始写入的起始点。</param>
            <param name="count">要写入的字节数。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Int16)">
            <summary>将 2 字节有符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
            <param name="value">要写入的 2 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Int32)">
            <summary>将 4 字节有符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
            <param name="value">要写入的 4 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Int64)">
            <summary>将 8 字节有符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
            <param name="value">要写入的 8 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.UInt16)">
            <summary>将 2 字节无符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
            <param name="value">要写入的 2 字节无符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.UInt32)">
            <summary>将 4 字节无符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
            <param name="value">要写入的 4 字节无符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.UInt64)">
            <summary>将 8 字节无符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
            <param name="value">要写入的 8 字节无符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Single)">
            <summary>将 4 字节浮点值写入当前流，并将流的位置提升 4 个字节。</summary>
            <param name="value">要写入的 4 字节浮点值。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Double)">
            <summary>将 8 字节浮点值写入当前流，并将流的位置提升 8 个字节。</summary>
            <param name="value">要写入的 8 字节浮点值。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Char)">
            <summary>将 Unicode 字符写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
            <param name="ch">要写入的非代理项 Unicode 字符。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Char[])">
            <summary>将字符数组写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
            <param name="chars">包含要写入的数据的字符数组。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Char[],System.Int32,System.Int32)">
            <summary>将字符数组部分写入当前流，并根据所使用的 Encoding（可能还根据向流中写入的特定字符），提升流的当前位置。</summary>
            <param name="chars">包含要写入的数据的字符数组。</param>
            <param name="index">chars 中开始写入的起始点。</param>
            <param name="count">要写入的字符数。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.String)">
            <summary>写入字符串</summary>
            <param name="value">要写入的值。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Boolean)">
            <summary>将单字节 Boolean 值写入</summary>
            <param name="value">要写入的 Boolean 值</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Decimal)">
            <summary>将一个十进制值写入当前流，并将流位置提升十六个字节。</summary>
            <param name="value">要写入的十进制值。</param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.DateTime)">
            <summary>将一个时间日期写入</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Net.IPAddress)">
            <summary>写入IPAddress</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Net.IPEndPoint)">
            <summary>写入IPEndPoint</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Type)">
            <summary>写入Type</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.WriteName(System.String)">
            <summary>写入成员名称</summary>
            <param name="name"></param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.WriteValue(System.Object)">
            <summary>写入值类型</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.Write(System.Guid)">
            <summary>写入Guid</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.IWriter2.WriteSize(System.Int32)">
            <summary>写入大小</summary>
            <param name="size"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Byte)">
            <summary>将一个无符号字节写入</summary>
            <param name="value">要写入的无符号字节。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Byte[])">
            <summary>将字节数组写入，如果设置了UseSize，则先写入数组长度。</summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.SByte)">
            <summary>将一个有符号字节写入当前流，并将流的位置提升 1 个字节。</summary>
            <param name="value">要写入的有符号字节。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>将字节数组部分写入当前流，不写入数组长度。</summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
            <param name="index">buffer 中开始写入的起始点。</param>
            <param name="count">要写入的字节数。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Byte[],System.Int32)">
            <summary>写入字节数组，自动计算长度</summary>
            <param name="buffer"></param>
            <param name="count"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Int16)">
            <summary>将 2 字节有符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
            <param name="value">要写入的 2 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Int32)">
            <summary>将 4 字节有符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
            <param name="value">要写入的 4 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Int64)">
            <summary>将 8 字节有符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
            <param name="value">要写入的 8 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.UInt16)">
            <summary>将 2 字节无符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
            <param name="value">要写入的 2 字节无符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.UInt32)">
            <summary>将 4 字节无符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
            <param name="value">要写入的 4 字节无符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.UInt64)">
            <summary>将 8 字节无符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
            <param name="value">要写入的 8 字节无符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Single)">
            <summary>将 4 字节浮点值写入当前流，并将流的位置提升 4 个字节。</summary>
            <param name="value">要写入的 4 字节浮点值。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Double)">
            <summary>将 8 字节浮点值写入当前流，并将流的位置提升 8 个字节。</summary>
            <param name="value">要写入的 8 字节浮点值。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Char)">
            <summary>将 Unicode 字符写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
            <param name="ch">要写入的非代理项 Unicode 字符。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Char[])">
            <summary>将字符数组写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
            <param name="chars">包含要写入的数据的字符数组。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Char[],System.Int32,System.Int32)">
            <summary>将字符数组部分写入当前流，并根据所使用的 Encoding（可能还根据向流中写入的特定字符），提升流的当前位置。</summary>
            <param name="chars">包含要写入的数据的字符数组。</param>
            <param name="index">chars 中开始写入的起始点。</param>
            <param name="count">要写入的字符数。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.String)">
            <summary>写入字符串</summary>
            <param name="value">要写入的值。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Boolean)">
            <summary>将单字节 Boolean 值写入</summary>
            <param name="value">要写入的 Boolean 值</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Decimal)">
            <summary>将一个十进制值写入当前流，并将流位置提升十六个字节。</summary>
            <param name="value">要写入的十进制值。</param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.DateTime)">
            <summary>将一个时间日期写入</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteName(System.String)">
            <summary>写入成员名称</summary>
            <param name="name"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteValue(System.Object)">
            <summary>写入值类型</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteValue(System.Object,System.Type)">
            <summary>写入值类型，只能识别基础类型，对于不能识别的类型，方法返回false</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Guid)">
            <summary>写入Guid</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Collections.IDictionary)">
            <summary>写入枚举类型数据</summary>
            <param name="value">枚举数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteDictionary(System.Collections.IDictionary,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入字典类型数据</summary>
            <param name="value">字典数据</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteKeyValue(System.Collections.DictionaryEntry,System.Type,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入字典项</summary>
            <param name="value">对象</param>
            <param name="keyType">键类型</param>
            <param name="valueType">值类型</param>
            <param name="index">成员索引</param>
            <param name="callback">使用指定委托方法处理复杂数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.GetDictionaryEntryType(System.Type,System.Type@,System.Type@)">
            <summary>取得字典的键值类型，默认只支持获取两个泛型参数的字典的键值类型</summary>
            <param name="type">字典类型</param>
            <param name="keyType">键类型</param>
            <param name="valueType">值类型</param>
            <returns>是否获取成功，如果失败，则字典读取失败</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Collections.IEnumerable)">
            <summary>写入枚举类型数据</summary>
            <param name="value">枚举数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteEnumerable(System.Collections.IEnumerable,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入枚举数据，复杂类型使用委托方法进行处理</summary>
            <param name="value">对象</param>
            <param name="type">类型</param>
            <param name="callback">使用指定委托方法处理复杂数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteItem(System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入枚举项</summary>
            <param name="value">对象</param>
            <param name="type">元素类型</param>
            <param name="index">元素索引</param>
            <param name="callback">使用指定委托方法处理复杂数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteSerializable(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入实现了可序列化接口的对象</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteUnKnown(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入未知对象（其它所有方法都无法识别的对象），采用BinaryFormatter或者XmlSerialization</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteExtend(System.Object,System.Type)">
            <summary>扩展写入，反射查找合适的写入方法</summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Net.IPAddress)">
            <summary>写入IPAddress</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.OnWrite(System.Net.IPAddress)">
            <summary>写入IPAddress</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Net.IPEndPoint)">
            <summary>写入IPEndPoint</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.OnWrite(System.Net.IPEndPoint)">
            <summary>写入IPEndPoint</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Write(System.Type)">
            <summary>写入Type</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.OnWrite(System.Type)">
            <summary>写入Type</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.OnWriteType(System.Type)">
            <summary>写入Type</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.CheckAndWriteType(System.String,System.Object,System.Type)">
            <summary>检查对象类型与指定写入类型是否一致</summary>
            <remarks>
            检查对象类型与指定写入类型是否一致，若不一致，则先写入类型，以保证读取的时候能够以正确的类型读取。同时返回对象实际类型。
            若想不写对象类型，可以提前设定精确类型。
            </remarks>
            <param name="action"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteObjectType(System.Type)">
            <summary>写对象类型</summary>
            <param name="type"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteObject(System.Object)">
            <summary>主要入口方法。把对象写入数据流</summary>
            <param name="value">对象</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteObject(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>主要入口方法。</summary>
            <remarks>把目标对象指定成员写入数据流，处理基础类型、特殊类型、基础类型数组、特殊类型数组，通过委托方法处理成员</remarks>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.OnWriteObject(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>把目标对象指定成员写入数据流，处理基础类型、特殊类型、基础类型数组、特殊类型数组，通过委托方法处理成员</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteRefObject(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入引用对象</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteObjRef(System.Object)">
            <summary>写入对象引用。</summary>
            <param name="value">对象</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.OnWriteObjRefIndex(System.Int32)">
            <summary>写对象引用计数</summary>
            <param name="index"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteCustomObject(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写自定义对象</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteMember(System.String,System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入对象成员</summary>
            <param name="name">成员名字</param>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的成员类型</param>
            <param name="index">成员索引</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.OnWriteMember(System.String,System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入对象成员</summary>
            <param name="name">成员名字</param>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的成员类型</param>
            <param name="index">成员索引</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteSize(System.Int32)">
            <summary>写入大小</summary>
            <param name="size"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.OnWriteSize(System.Int32)">
            <summary>写入大小</summary>
            <param name="size"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.WriteLengths(System.String)">
            <summary>写入长度。多维数组用</summary>
            <param name="lengths"></param>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Flush">
            <summary>刷新缓存中的数据</summary>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.AutoFlush">
            <summary>如果设置了自动刷新缓存，该方面将会调用Flush</summary>
        </member>
        <member name="M:DmFramework.Serialization.WriterBase`1.Reset">
            <summary>重置</summary>
        </member>
        <member name="E:DmFramework.Serialization.WriterBase`1.OnObjectWriting">
            <summary>写对象前触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.WriterBase`1.OnObjectWrited">
            <summary>写对象后触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.WriterBase`1.OnMemberWriting">
            <summary>写成员前触发。</summary>
        </member>
        <member name="E:DmFramework.Serialization.WriterBase`1.OnMemberWrited">
            <summary>写成员后触发。</summary>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Byte)">
            <summary>将一个无符号字节写入</summary>
            <param name="value">要写入的无符号字节。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Byte[])">
            <summary>将字节数组以[0xff,0xff,0xff]的格式写入</summary>
            <param name="buffer"></param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>将字节数组部分写入当前流。</summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
            <param name="index">buffer 中开始写入的起始点。</param>
            <param name="count">要写入的字节数。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.SByte)">
            <summary>将一个有符号字节写入当前流，并将流的位置提升 1 个字节。</summary>
            <param name="value">要写入的有符号字节。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Int16)">
            <summary>将 2 字节有符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
            <param name="value">要写入的 2 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Int32)">
            <summary>将 4 字节有符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
            <param name="value">要写入的 4 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Int64)">
            <summary>将 8 字节有符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
            <param name="value">要写入的 8 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.UInt16)">
            <summary>将 2 字节无符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
            <param name="value">要写入的 2 字节无符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.UInt32)">
            <summary>将 4 字节无符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
            <param name="value">要写入的 4 字节无符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.UInt64)">
            <summary>将 8 字节无符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
            <param name="value">要写入的 8 字节无符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Single)">
            <summary>将 4 字节浮点值写入当前流，并将流的位置提升 4 个字节。</summary>
            <param name="value">要写入的 4 字节浮点值。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Double)">
            <summary>将 8 字节浮点值写入当前流，并将流的位置提升 8 个字节。</summary>
            <param name="value">要写入的 8 字节浮点值。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Char[],System.Int32,System.Int32)">
            <summary>将字符数组部分写入当前流，并根据所使用的 Encoding（可能还根据向流中写入的特定字符），提升流的当前位置。</summary>
            <param name="chars">包含要写入的数据的字符数组。</param>
            <param name="index">chars 中开始写入的起始点。</param>
            <param name="count">要写入的字符数。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.String)">
            <summary>写入字符串</summary>
            <param name="value">要写入的值。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.WriteLiteral(System.String)">
            <summary>输出字符串字面值,不做编码处理</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.OnWriteLiteral(System.String)">
            <summary>输出字符串字面值,不做编码处理</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.WriteNull">
            <summary>输出空</summary>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Boolean)">
            <summary>将单字节 Boolean 值写入</summary>
            <param name="value">要写入的 Boolean 值</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Decimal)">
            <summary>将一个十进制值写入当前流，并将流位置提升十六个字节。</summary>
            <param name="value">要写入的十进制值。</param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.Write(System.Guid)">
            <summary>写入Guid</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.OnWrite(System.Net.IPAddress)">
            <summary>写入IPAddress</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.OnWrite(System.Net.IPEndPoint)">
            <summary>写入IPEndPoint</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.WriteValue(System.Object,System.Type)">
            <summary>写入值类型，只能识别基础类型，对于不能识别的类型，方法返回false</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.TextWriterBase`1.ToStr">
            <summary>把数据流转为字符串</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.TextWriterBase`1.UseSize">
            <summary>是否使用大小，如果使用，将在写入数组、集合和字符串前预先写入大小。字符串类型读写器一般带有边界，不需要使用大小</summary>
        </member>
        <member name="T:DmFramework.Serialization.BinaryReaderX">
             <summary>二进制读取器</summary>
             <remarks>
             序列化框架的核心思想：基本类型直接读取，自定义类型反射得到成员，逐层递归读取！详见<see cref="T:DmFramework.Serialization.IReaderWriter"/>
            
             二进制序列化，并不仅仅是为了序列化一个对象那么简单，它最初的目标是实现一个高度可自定义的序列化组件，后来提升为以序列化各种协议为重点。
             理论上，只要用实体类实现了各种协议（文件格式），那么它就能只用一个Read/Write实现协议实体对象与二进制数据流之间的映射。
             </remarks>
             <example>
             标准用法：
             <code>
             var reader = new BinaryReaderX();
             reader.Stream = stream;
             entity = reader.ReadObject&lt;TEntity&gt;();
             // 使用数据流填充已有对象，这是几乎所有其它序列化框架所不具有的功能
             // reader.ReadObject(null, ref entity);
             </code>
             </example>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.#ctor">
            <summary>实例化一个二进制读取器</summary>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.#ctor(System.IO.Stream)">
            <summary>实例化一个二进制读取器</summary>
            <param name="stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadByte">
            <summary>读取字节</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadBytes(System.Int32)">
            <summary>从当前流中将 count 个字节读入字节数组，并使当前位置提升 count 个字节。</summary>
            <param name="count">要读取的字节数。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadIntBytes(System.Int32)">
            <summary>判断字节顺序</summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadInt16">
            <summary>从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadInt32">
            <summary>从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadInt64">
            <summary>从当前流中读取 8 字节有符号整数，并使流的当前位置向前移动 8 个字节。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadEncodedInt16">
            <summary>以压缩格式读取16位整数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadEncodedInt32">
            <summary>以压缩格式读取32位整数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadEncodedInt64">
            <summary>以压缩格式读取64位整数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.OnReadType">
            <summary>读取Type</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadRefObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取引用对象</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadObjRef(System.Type,System.Object@,System.Int32@)">
            <summary>读取对象引用。</summary>
            <param name="type">类型</param>
            <param name="value">对象</param>
            <param name="index">引用计数</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.GetMemberBeforeRead(System.Type,System.Object,DmFramework.Serialization.IObjectMemberInfo[],System.Int32)">
            <summary>读取成员之前获取要读取的成员，默认是index处的成员，实现者可以重载，改变当前要读取的成员，如果当前成员不在数组里面，则实现者自己跳到下一个可读成员。</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="members">可匹配成员数组</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.OnReadSize">
            <summary>读取大小</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.Expect(System.Byte[])">
            <summary>探测下一个可用的字节是否预期字节，并且不提升字节的位置。</summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.Expect(System.Int16[])">
            <summary>探测下一个可用的数字是否预期数字，并且不提升字节的位置。</summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.Expect(System.UInt16[])">
            <summary>探测下一个可用的数字是否预期数字，并且不提升字节的位置。</summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.Expect(System.Int32[])">
            <summary>探测下一个可用的数字是否预期数字，并且不提升字节的位置。</summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.Expect(System.UInt32[])">
            <summary>探测下一个可用的数字是否预期数字，并且不提升字节的位置。</summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.Expect``1(System.Func{``0},``0[])">
            <summary>探测下一个可用的数值是否预期数值，并且不提升字节的位置。</summary>
            <param name="func">读取数值的方法，比如ReadInt32等</param>
            <param name="values">预期数值列表</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.EnableTraceStream">
            <summary>使用跟踪流</summary>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.Backup">
            <summary>备份当前环境，用于临时切换数据流等</summary>
            <returns>本次备份项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.Restore">
            <summary>恢复最近一次备份</summary>
            <returns>本次还原项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadLine">
            <summary>从数据流中读取一行，直到遇到换行</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryReaderX.ReadToEnd">
            <summary>从数据流中读取一行，直到最后</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.BinaryReaderX.Reader">
            <summary>读取器</summary>
        </member>
        <member name="P:DmFramework.Serialization.BinaryReaderX.Stream">
            <summary>数据流。更改数据流后，重置Reader为空，以使用新的数据流</summary>
        </member>
        <member name="T:DmFramework.Serialization.BinarySettings">
            <summary>二进制序列化设置</summary>
        </member>
        <member name="M:DmFramework.Serialization.BinarySettings.#ctor">
            <summary>实例化二进制序列化设置</summary>
        </member>
        <member name="P:DmFramework.Serialization.BinarySettings.IsLittleEndian">
            <summary>是否小端字节序。x86系列则采用Little-Endian方式存储数据；网络协议都是Big-Endian；</summary>
            <remarks>
            网络协议都是Big-Endian；
            Java编译的都是Big-Endian；
            Motorola的PowerPC是Big-Endian；
            x86系列则采用Little-Endian方式存储数据；
            ARM同时支持 big和little，实际应用中通常使用Little-Endian。
            </remarks>
        </member>
        <member name="P:DmFramework.Serialization.BinarySettings.EncodeInt">
            <summary>编码整数。打开后将使用7位编码写入所有16、32和64位整数，节省空间。打开后字节序设置将会无效。默认关闭。</summary>
        </member>
        <member name="P:DmFramework.Serialization.BinarySettings.IgnoreType">
            <summary>忽略类型。打开后将不输出对象类型，按照读取时指定的类型读取。默认打开。</summary>
        </member>
        <member name="P:DmFramework.Serialization.BinarySettings.IgnoreName">
            <summary>忽略名称。打开后将不输出成员名称，按照读取时指定的类型读取。默认打开。</summary>
        </member>
        <member name="P:DmFramework.Serialization.BinarySettings.SplitComplexType">
            <summary>是否拆分复杂类型。将拆分数组、内嵌和泛型</summary>
        </member>
        <member name="T:DmFramework.Serialization.BinarySettings.TypeKinds">
            <summary>类型样式</summary>
        </member>
        <member name="F:DmFramework.Serialization.BinarySettings.TypeKinds.Normal">
            <summary>普通类型</summary>
        </member>
        <member name="F:DmFramework.Serialization.BinarySettings.TypeKinds.Array">
            <summary>数组类型</summary>
        </member>
        <member name="F:DmFramework.Serialization.BinarySettings.TypeKinds.Nested">
            <summary>内嵌类型</summary>
        </member>
        <member name="F:DmFramework.Serialization.BinarySettings.TypeKinds.Generic">
            <summary>泛型类型</summary>
        </member>
        <member name="T:DmFramework.Serialization.BinaryWriterX">
             <summary>二进制写入器</summary>
             <remarks>
             序列化框架的核心思想：基本类型直接写入，自定义类型反射得到成员，逐层递归写入！详见<see cref="T:DmFramework.Serialization.IReaderWriter"/>
            
             二进制序列化，并不仅仅是为了序列化一个对象那么简单，它最初的目标是实现一个高度可自定义的序列化组件，后来提升为以序列化各种协议为重点。
             理论上，只要用实体类实现了各种协议（文件格式），那么它就能只用一个Read/Write实现协议实体对象与二进制数据流之间的映射。
            
             Decimal转为四个Int32整数然后编码输出；
             DateTime转为Int64然后编码输出。
             </remarks>
             <example>
             标准用法：
             <code>
             var writer = new BinaryWriterX();
             writer.Stream = stream;
             writer.WriteObject(entity);
             </code>
             </example>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.#ctor">
            <summary>实例化一个二进制写入器</summary>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.#ctor(System.IO.Stream)">
            <summary>实例化一个二进制写入器</summary>
            <param name="stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.Write(System.Byte)">
            <summary>写入字节</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>将字节数组部分写入当前流。</summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
            <param name="index">buffer 中开始写入的起始点。</param>
            <param name="count">要写入的字节数。</param>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.WriteIntBytes(System.Byte[])">
            <summary>判断字节顺序</summary>
            <param name="buffer"></param>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.Write(System.Int16)">
            <summary>将 2 字节有符号整数写入当前流，并将流的位置提升 2 个字节。</summary>
            <param name="value">要写入的 2 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.Write(System.Int32)">
            <summary>将 4 字节有符号整数写入当前流，并将流的位置提升 4 个字节。</summary>
            <param name="value">要写入的 4 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.Write(System.Int64)">
            <summary>将 8 字节有符号整数写入当前流，并将流的位置提升 8 个字节。</summary>
            <param name="value">要写入的 8 字节有符号整数。</param>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.WriteEncoded(System.Int16)">
            <summary>
            以7位压缩格式写入32位整数，小于7位用1个字节，小于14位用2个字节。
            由每次写入的一个字节的第一位标记后面的字节是否还是当前数据，所以每个字节实际可利用存储空间只有后7位。
            </summary>
            <param name="value"></param>
            <returns>实际写入字节数</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.WriteEncoded(System.Int32)">
            <summary>
            以7位压缩格式写入32位整数，小于7位用1个字节，小于14位用2个字节。
            由每次写入的一个字节的第一位标记后面的字节是否还是当前数据，所以每个字节实际可利用存储空间只有后7位。
            </summary>
            <param name="value"></param>
            <returns>实际写入字节数</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.WriteEncoded(System.Int64)">
            <summary>
            以7位压缩格式写入64位整数，小于7位用1个字节，小于14位用2个字节。
            由每次写入的一个字节的第一位标记后面的字节是否还是当前数据，所以每个字节实际可利用存储空间只有后7位。
            </summary>
            <param name="value"></param>
            <returns>实际写入字节数</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.GetEncodedIntSize(System.Int64)">
            <summary>获取整数编码后所占字节数</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.OnWriteType(System.Type)">
            <summary>写入Type</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.WriteRefObject(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写引用对象</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.WriteObjRef(System.Object)">
            <summary>写入对象引用。</summary>
            <param name="value">对象</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.OnWriteMember(System.String,System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入对象成员</summary>
            <param name="name">成员名字</param>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="index">成员索引</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.WriteEnumerable(System.Collections.IEnumerable,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入枚举数据，复杂类型使用委托方法进行处理</summary>
            <param name="value">对象</param>
            <param name="type">类型</param>
            <param name="callback">使用指定委托方法处理复杂数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.OnGetMembers(System.Type,System.Object)">
            <summary>获取需要序列化的成员（属性或字段）</summary>
            <param name="type">指定类型</param>
            <param name="value">对象</param>
            <returns>需要序列化的成员</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.OnWriteSize(System.Int32)">
            <summary>写入大小</summary>
            <param name="size"></param>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.Flush">
            <summary>刷新缓存中的数据</summary>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.EnableTraceStream">
            <summary>使用跟踪流</summary>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.Backup">
            <summary>备份当前环境，用于临时切换数据流等</summary>
            <returns>本次备份项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.BinaryWriterX.Restore">
            <summary>恢复最近一次备份</summary>
            <returns>本次还原项集合</returns>
        </member>
        <member name="P:DmFramework.Serialization.BinaryWriterX.Writer">
            <summary>写入器</summary>
        </member>
        <member name="P:DmFramework.Serialization.BinaryWriterX.Stream">
            <summary>数据流。更改数据流后，重置Writer为空，以使用新的数据流</summary>
        </member>
        <member name="T:DmFramework.Serialization.FieldExtendAttribute">
            <summary>字段扩展特性。</summary>
            <remarks>
            该特性只用于整型表示长度的字段。
            读取器遇到该特性后，读取指定长度的数据流，然后切换为新数据流，完成后续字段的读取，完成后恢复备份；
            写入器遇到该特性后，切换为新数据流，使用新数据流写入后续字段，完成后写入数据流长度，再写新数据流数据。
            </remarks>
        </member>
        <member name="T:DmFramework.Serialization.FieldSizeAttribute">
            <summary>字段大小特性。</summary>
            <remarks>
            可以通过Size指定字符串或数组的固有大小，为0表示自动计算；也可以通过指定参考字段ReferenceName，然后从其中获取大小。
            支持_Header._Questions形式的多层次引用字段
            </remarks>
        </member>
        <member name="M:DmFramework.Serialization.FieldSizeAttribute.#ctor(System.Int32)">
            <summary>通过Size指定字符串或数组的固有大小，为0表示自动计算</summary>
            <param name="size"></param>
        </member>
        <member name="M:DmFramework.Serialization.FieldSizeAttribute.#ctor(System.String)">
            <summary>指定参考字段ReferenceName，然后从其中获取大小</summary>
            <param name="referenceName"></param>
        </member>
        <member name="M:DmFramework.Serialization.FieldSizeAttribute.#ctor(System.String,System.Int32)">
            <summary>指定参考字段ReferenceName，然后从其中获取大小</summary>
            <param name="referenceName"></param>
            <param name="size">在参考字段值基础上的增量，可以是正数负数</param>
        </member>
        <member name="M:DmFramework.Serialization.FieldSizeAttribute.FindReference(System.Object,System.Reflection.MemberInfo,System.Object@)">
            <summary>找到所引用的参考字段</summary>
            <param name="target"></param>
            <param name="member"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.FieldSizeAttribute.SetReferenceSize(System.Object,System.Reflection.MemberInfo,System.Text.Encoding)">
            <summary>设置目标对象的引用大小值</summary>
            <param name="target"></param>
            <param name="member"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:DmFramework.Serialization.FieldSizeAttribute.GetReferenceSize(System.Object,System.Reflection.MemberInfo)">
            <summary>获取目标对象的引用大小值</summary>
            <param name="target"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.FieldSizeAttribute.Size">
            <summary>大小。0表示自动计算大小</summary>
        </member>
        <member name="P:DmFramework.Serialization.FieldSizeAttribute.ReferenceName">
            <summary>参考大小字段名</summary>
        </member>
        <member name="T:DmFramework.Serialization.ReadDictionaryEventArgs">
            <summary>读取字典项事件参数</summary>
        </member>
        <member name="T:DmFramework.Serialization.ReadIndexEventArgs">
            <summary>读取序数事件参数</summary>
        </member>
        <member name="T:DmFramework.Serialization.ReaderEventArgs">
            <summary>读取器事件参数</summary>
        </member>
        <member name="T:DmFramework.Serialization.ReaderWriterEventArgs">
            <summary>读写器事件参数</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReaderWriterEventArgs.Success">
            <summary>是否成功。</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReaderEventArgs.#ctor(DmFramework.Serialization.ReadObjectCallback)">
            <summary>实例化</summary>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.ReaderEventArgs.Callback">
            <summary>处理成员的委托</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReadIndexEventArgs.#ctor(System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>实例化</summary>
            <param name="index">成员序号</param>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.ReadIndexEventArgs.Index">
            <summary>成员序号</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReadDictionaryEventArgs.#ctor(System.Collections.DictionaryEntry,System.Type,System.Type,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>实例化</summary>
            <param name="value">对象</param>
            <param name="keyType">键类型</param>
            <param name="valueType">值类型</param>
            <param name="index"></param>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.ReadDictionaryEventArgs.Value">
            <summary>对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReadDictionaryEventArgs.KeyType">
            <summary>键类型</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReadDictionaryEventArgs.ValueType">
            <summary>值类型</summary>
        </member>
        <member name="T:DmFramework.Serialization.ReadItemEventArgs">
            <summary>读取枚举项事件参数</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReadItemEventArgs.#ctor(System.Object,System.Type,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>实例化</summary>
            <param name="value">对象</param>
            <param name="type">对象类型</param>
            <param name="index">序号</param>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.ReadItemEventArgs.Value">
            <summary>对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReadItemEventArgs.Type">
            <summary>对象类型</summary>
        </member>
        <member name="T:DmFramework.Serialization.ReadMemberEventArgs">
            <summary>读取成员事件参数</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReadMemberEventArgs.#ctor(System.Object,System.Type,DmFramework.Serialization.IObjectMemberInfo,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>实例化</summary>
            <param name="value">对象</param>
            <param name="type">对象类型</param>
            <param name="member">成员</param>
            <param name="index">成员序号</param>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.ReadMemberEventArgs.Value">
            <summary>对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReadMemberEventArgs.Type">
            <summary>对象类型</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReadMemberEventArgs.Member">
            <summary>成员</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReadMemberEventArgs.Index">
            <summary>成员序号</summary>
        </member>
        <member name="T:DmFramework.Serialization.ReadObjectEventArgs">
            <summary>读取对象事件参数</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReadObjectEventArgs.#ctor(System.Object,System.Type,DmFramework.Serialization.ReadObjectCallback)">
            <summary>实例化</summary>
            <param name="value">对象</param>
            <param name="type">对象类型</param>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.ReadObjectEventArgs.Value">
            <summary>对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReadObjectEventArgs.Type">
            <summary>对象类型</summary>
        </member>
        <member name="T:DmFramework.Serialization.WriteDictionaryEventArgs">
            <summary>写入字典项事件参数</summary>
        </member>
        <member name="T:DmFramework.Serialization.WriteIndexEventArgs">
            <summary>写入序数事件参数</summary>
        </member>
        <member name="T:DmFramework.Serialization.WriterEventArgs">
            <summary>写入器时间参数</summary>
        </member>
        <member name="M:DmFramework.Serialization.WriterEventArgs.#ctor(DmFramework.Serialization.WriteObjectCallback)">
            <summary>实例化</summary>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.WriterEventArgs.Callback">
            <summary>处理成员的委托</summary>
        </member>
        <member name="M:DmFramework.Serialization.WriteIndexEventArgs.#ctor(System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>实例化</summary>
            <param name="index">成员序号</param>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.WriteIndexEventArgs.Index">
            <summary>成员序号</summary>
        </member>
        <member name="M:DmFramework.Serialization.WriteDictionaryEventArgs.#ctor(System.Collections.DictionaryEntry,System.Type,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>实例化</summary>
            <param name="value">对象</param>
            <param name="keyType">键类型</param>
            <param name="valueType">值类型</param>
            <param name="index"></param>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.WriteDictionaryEventArgs.Value">
            <summary>对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.WriteDictionaryEventArgs.KeyType">
            <summary>键类型</summary>
        </member>
        <member name="P:DmFramework.Serialization.WriteDictionaryEventArgs.ValueType">
            <summary>值类型</summary>
        </member>
        <member name="T:DmFramework.Serialization.WriteItemEventArgs">
            <summary>写入枚举项事件参数</summary>
        </member>
        <member name="M:DmFramework.Serialization.WriteItemEventArgs.#ctor(System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>实例化</summary>
            <param name="value">对象</param>
            <param name="type">对象类型</param>
            <param name="index">序号</param>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.WriteItemEventArgs.Value">
            <summary>对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.WriteItemEventArgs.Type">
            <summary>对象类型</summary>
        </member>
        <member name="T:DmFramework.Serialization.WriteMemberEventArgs">
            <summary>写入成员事件参数</summary>
        </member>
        <member name="M:DmFramework.Serialization.WriteMemberEventArgs.#ctor(System.String,System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>实例化</summary>
            <param name="name">成员名字</param>
            <param name="value">对象</param>
            <param name="type">对象类型</param>
            <param name="index">成员序号</param>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.WriteMemberEventArgs.Name">
            <summary>成员名称</summary>
        </member>
        <member name="P:DmFramework.Serialization.WriteMemberEventArgs.Value">
            <summary>对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.WriteMemberEventArgs.Type">
            <summary>对象类型</summary>
        </member>
        <member name="P:DmFramework.Serialization.WriteMemberEventArgs.Index">
            <summary>成员序号</summary>
        </member>
        <member name="T:DmFramework.Serialization.WriteObjectEventArgs">
            <summary>写入对象事件参数</summary>
        </member>
        <member name="M:DmFramework.Serialization.WriteObjectEventArgs.#ctor(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>实例化</summary>
            <param name="value">对象</param>
            <param name="type">对象类型</param>
            <param name="callback"></param>
        </member>
        <member name="P:DmFramework.Serialization.WriteObjectEventArgs.Value">
            <summary>对象</summary>
        </member>
        <member name="P:DmFramework.Serialization.WriteObjectEventArgs.Type">
            <summary>对象类型</summary>
        </member>
        <member name="T:DmFramework.Serialization.IObjectMemberInfo">
            <summary>对象成员信息</summary>
        </member>
        <member name="P:DmFramework.Serialization.IObjectMemberInfo.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Serialization.IObjectMemberInfo.Type">
            <summary>类型</summary>
        </member>
        <member name="P:DmFramework.Serialization.IObjectMemberInfo.Item(System.Object)">
            <summary>对目标对象的该成员取值赋值</summary>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.ObjectInfo">
            <summary>对象信息</summary>
        </member>
        <member name="F:DmFramework.Serialization.ObjectInfo.DefaultStreamingContext">
            <summary>默认上下文</summary>
        </member>
        <member name="M:DmFramework.Serialization.ObjectInfo.CreateObjectMemberInfo(System.Reflection.MemberInfo)">
            <summary>创建反射成员信息</summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ObjectInfo.CreateObjectMemberInfo(System.String,System.Type,System.Object)">
            <summary>创建简单成员信息</summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ObjectInfo.GetMembers(System.Type,System.Object,System.Boolean,System.Boolean)">
            <summary>
            获取指定对象的可序列化成员信息。优先考虑ISerializable接口。
            对于Write，该方法没有任何问题；对于Read，如果是ISerializable接口，并且value是空，则可能无法取得成员信息。
            </summary>
            <param name="type">类型</param>
            <param name="value">对象</param>
            <param name="isField">是否字段</param>
            <param name="isBaseFirst">是否基类成员排在前面</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ObjectInfo.FindFields(System.Type,System.Boolean)">
            <summary>取得所有字段</summary>
            <param name="type"></param>
            <param name="isBaseFirst"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ObjectInfo.FindProperties(System.Type,System.Boolean)">
            <summary>取得所有属性</summary>
            <param name="type"></param>
            <param name="isBaseFirst"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.ObjectInfo.GetDefaultObject(System.Type)">
            <summary>获取某个类型的默认对象</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.ReflectMemberInfo">
            <summary>反射成员信息</summary>
        </member>
        <member name="M:DmFramework.Serialization.ReflectMemberInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>实例化</summary>
            <param name="member"></param>
        </member>
        <member name="M:DmFramework.Serialization.ReflectMemberInfo.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.ReflectMemberInfo.Member">
            <summary>成员</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReflectMemberInfo.Mix">
            <summary>快速反射</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReflectMemberInfo.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReflectMemberInfo.Type">
            <summary>类型</summary>
        </member>
        <member name="P:DmFramework.Serialization.ReflectMemberInfo.Item(System.Object)">
            <summary>对目标对象取值赋值</summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.SimpleMemberInfo">
            <summary>简单成员信息</summary>
        </member>
        <member name="M:DmFramework.Serialization.SimpleMemberInfo.#ctor(System.String,System.Type,System.Object)">
            <summary>实例化</summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.SimpleMemberInfo.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.SimpleMemberInfo.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Serialization.SimpleMemberInfo.Type">
            <summary>类型</summary>
        </member>
        <member name="P:DmFramework.Serialization.SimpleMemberInfo.Item(System.Object)">
            <summary>对目标对象取值赋值</summary>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.ReadObjectCallback">
            <summary>数据读取方法</summary>
            <param name="reader">读取器</param>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="T:DmFramework.Serialization.WriteObjectCallback">
            <summary>数据写入方法</summary>
            <param name="writer">写入器</param>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="T:DmFramework.Serialization.JsonAtomStringReader">
             <summary>Json 原子元素读取器</summary>
             <remarks>
             原子元素是指在Json中不可嵌套的元素,包括
               基础类型: 数字(整型,浮点型) 字符串 null true/false
               复合类型起始符号: {} []
               分割符号: , :
               结束符
               非法符号:无法识别的字面值
            
             这个类不检查Json复合格式是否有误,所以可以用来解析类似Json格式的字符串
             </remarks>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomStringReader.NUMBER_TYPES">
            <summary>所有的数字类型,包括整数和浮点数</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomStringReader.INTEGER_TYPES">
            <summary>所有的整数类型</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonAtomStringReader.#ctor(System.IO.TextReader)">
            <summary>构造方法</summary>
            <param name="reader"></param>
        </member>
        <member name="M:DmFramework.Serialization.JsonAtomStringReader.Read(System.Boolean,System.String@)">
            <summary>读取下一个原子元素,返回原子元素的类型,输出参数str表示读到的字符串</summary>
            <remarks>
            一般情况下isDetect可以为false,如果需要探测下一个可读元素,则需要给isDetect参数为true
            </remarks>
            <param name="isDetect">为true表示探测,探测将只会读取一个字符,但不会移动流位置,直接重复探测将始终返回一样的结果</param>
            <param name="str">读取到的原始字符串</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonAtomStringReader.MoveNext">
            <summary>将当前输入流位置向后移动一个字符,并返回读取到的字符</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonAtomStringReader.ReadString(System.Char,System.String@)">
            <summary>读取字符串,流位置以处于"之后,读到的字符串不包含结尾的",但流会被移动到"之后</summary>
            <param name="quotesChar"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonAtomStringReader.ReadEscapeChar">
            <summary>读取下一个转义字符,流已处于转义符\之后</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonAtomStringReader.ReadLiteral(System.Boolean,System.String@)">
             <summary>
             读取下一个字面值,可能是true false null 数字 无法识别
            
             isDetect为true时将不确保实际结果是返回的类型,因为仅仅预读一个字符无法确定上述字面值
             </summary>
             <param name="isDetect">为true表示探测,探测将只会读取一个字符,但不会移动流位置</param>
             <param name="str"></param>
             <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonAtomStringReader.Skip">
            <summary>跳过下一个读到的值,包括复合格式{...} [...]</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonAtomStringReader.Skip(System.Int32)">
             <summary>跳过接下来读到的值,可指定要跳过的复合对象深度</summary>
             <remarks>
             复合对象深度值是指当流位置和目标处于以下位置时
            
               [[1,2/*当前流位置*/,3]]/*跳到的目标*/
            
             调用Skip(1)将会将当前流位置移动到目标位置
             </remarks>
             <param name="initDepth">复合对象深度值,为0时表示不跳过复合对象,小于0时不做任何操作</param>
             <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonAtomStringReader.TryDecodeUnicode(System.String,System.Char@)">
            <summary>尝试解码指定4个16进制字符表示的Unicode字符</summary>
            <param name="str"></param>
            <param name="cc"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.JsonAtomStringReader.Line">
            <summary>当前读取到的行号,从1开始</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonAtomStringReader.Column">
            <summary>当前读取到的列号,从1开始</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonAtomStringReader.SingleQuotesString">
            <summary>是否允许单引号字符串,单引号字符串不符合JSON标准,默认false</summary>
        </member>
        <member name="T:DmFramework.Serialization.JsonAtomType">
            <summary>原子元素类型</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.NONE">
            <summary>无 一般表示结尾</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.BRACE_OPEN">
            <summary>大括号开始 {</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.BRACE_CLOSE">
            <summary>大括号结束 }</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.BRACKET_OPEN">
            <summary>方括号开始 [</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.BRACKET_CLOSE">
            <summary>方括号结束 ]</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.COLON">
            <summary>冒号 :</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.COMMA">
            <summary>逗号 ,</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.STRING">
            <summary>字符串 "包含的</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.LITERAL">
            <summary>字面值 无法识别的字面值</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.TRUE">
            <summary>字面值 true</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.FALSE">
            <summary>字面值 false</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.NULL">
            <summary>字面值 null</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.NUMBER">
            <summary>字面值 数字,非科学计数法表示的</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.NUMBER_EXP">
            <summary>字面值 数字,科学计数发表示的</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.FLOAT">
            <summary>字面值 浮点数,非科学计数法表示的浮点数</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonAtomType.FLOAT_EXP">
            <summary>字面值 浮点数,科学计数法表示的浮点数</summary>
        </member>
        <member name="T:DmFramework.Serialization.JsonReaderParseException">
            <summary>json reader解析异常,主要是信息格式不正确</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonReaderParseException.#ctor(System.Int64,System.Int64,System.String)">
            <summary>构造一个解析异常</summary>
            <param name="line">行</param>
            <param name="column">列</param>
            <param name="message">额外的异常信息</param>
        </member>
        <member name="P:DmFramework.Serialization.JsonReaderParseException.Line">
            <summary>解析异常的行</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonReaderParseException.Column">
            <summary>解析异常的列</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonReaderParseException.Message">
            <summary>解析异常的详细信息</summary>
        </member>
        <member name="T:DmFramework.Serialization.JsonReader">
            <summary>Json读取器</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.#ctor">
            <summary>构造方法</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadByte">
            <summary>读取字节</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadBytes(System.Int32)">
            <summary>读取字节数组</summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadBoolean">
            <summary>从当前流位置读取一个布尔型数据</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadDateTime">
            <summary>从当前流位置读取一个日期时间型数据,支持的格式参考ParseDateTimeString的说明</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.TryParseDateTimeString(System.String,System.DateTime@)">
            <summary>解析日期时间字符串,可以处理多种日期时间格式,包括JsDateTimeFormats枚举中的格式,以及js中toGMTString()的格式</summary>
            <param name="str"></param>
            <param name="ret"></param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.NUMBER_TYPES">
            <summary>数字类型 包括整型和浮点型</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.INTEGER_TYPES">
            <summary>整型类型</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadNumber``1(System.String,DmFramework.Serialization.JsonReader.AtomElementType[])">
            <summary>从当前流位置读取一个指定T类型的数字,T应该是int long float double及相关类型</summary>
            <typeparam name="T"></typeparam>
            <param name="exceptMsg">断言读取时断言失败的附加异常信息</param>
            <param name="expected">期望的节点类型,和T参数有关,一般浮点数额外有AtomElementType.FLOAT</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadNumber``1(System.String,System.Globalization.NumberStyles,System.IConvertible@)">
            <summary>从指定字符串中尝试读取指定T类型的数字,T应该是int long float double及相关类型</summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="numStyles"></param>
            <param name="result">返回值,可以直接强类型转换或者使用ToXXX转换</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.GetExponentOrNotStyle(System.String,DmFramework.Serialization.JsonReader.AtomElementType[],DmFramework.Serialization.JsonReader.AtomElementType)">
            <summary>从给定的实际原子节点类型中返回对应的数字格式</summary>
            <param name="str"></param>
            <param name="expected"></param>
            <param name="actual">实际原子节点类型</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadInt16">
            <summary>从当前流位置读取一个16位长度的整型数字</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadInt32">
            <summary>从当前流位置读取一个32位长度的整型数字</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadInt64">
            <summary>从当前流位置读取一个64位长度的整型数字</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadSingle">
            <summary>从当前流位置读取一个单精度浮点数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadDouble">
            <summary>从当前流位置读取一个双精度浮点数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadDecimal">
            <summary>从当前流位置读取一个十进制数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadString">
            <summary>从当前流位置读取一个字符串</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadChar">
            <summary>从当前流位置读取一个字符,如果读到的是字符串,将取第一个字符;如果读到的是数字,将作为Unicode字符处理;或者读到null</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadChars(System.Int32)">
            <summary>从当前流位置读取字符数组</summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadGuid">
            <summary>读取Guid</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.OnReadIPAddress">
            <summary>读取IP地址</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.OnReadIPEndPoint">
            <summary>读取IP端口地址</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadEnumerable``1(``0[]@)">
            <summary></summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadEnumerable(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>从当前流位置读取一个枚举类型</summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadItem(System.Type,System.Object@,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>从当前流位置读取枚举项目</summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadSerializable(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取实现了序列化接口的类型</summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadDictionary(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>从当前流位置读取一个字典类型</summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadDictionaryEntry(System.Type,System.Type,System.Collections.DictionaryEntry@,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>从当前流位置读取一个字典项</summary>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.AssertReadNextAtomElement(System.String,DmFramework.Serialization.JsonReader.AtomElementType[])">
             <summary>
             断言读取下一个原子元素,返回实际读到的原子元素类型,一般用于断言{}[]:,
            
             要得到具体读取到的值应使用另外一个重载
             </summary>
             <param name="msg">断言失败时的附加异常信息</param>
             <param name="expected">期望的原子元素类型</param>
             <exception cref="T:DmFramework.Serialization.JsonReader.JsonReaderAssertException">如果断言失败</exception>
             <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.AssertReadNextAtomElement(System.String,System.String@,DmFramework.Serialization.JsonReader.AtomElementType[])">
             <summary>
             断言读取下一个原子元素,返回实际读到的原子元素类型
            
             </summary>
             <param name="msg">断言失败时的附加异常信息</param>
             <param name="str">实际读到的内容,字面值是直接的字符串,字符串类型也是实际的字符串(不包括字符串头尾的双引号)</param>
             <param name="expected">期望的原子元素类型</param>
             <exception cref="T:DmFramework.Serialization.JsonReader.JsonReaderAssertException">如果断言失败</exception>
             <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.AssertReadNextAtomElement(System.Boolean,System.String,System.String@,DmFramework.Serialization.JsonReader.AtomElementType[])">
             <summary>
             断言读取下一个原子元素,返回实际读到的原子元素类型
            
             可以选择是否仅仅Peek而不移动流位置
             </summary>
             <param name="onlyPeek">是否仅Peek而不移动流位置(不移动到有效值的位置),这将会使str不会返回字符串内容(仅一个双引号)</param>
             <param name="msg"></param>
             <param name="str"></param>
             <param name="expected"></param>
             <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadNextAtomElement(System.String@)">
            <summary>读取下一个原子元素,非{} []这类复合元素</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadNextAtomElement(System.Boolean,System.String@)">
            <summary>读取下一个原子元素,非{} []这类复合元素</summary>
            <param name="str"></param>
            <param name="onlyPeek">是否仅Peek而不移动流位置(不移动到有效值的位置),这将会使str不会返回字符串内容(仅一个双引号)</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.MoveNextStreamPostition">
            <summary>将当前输入流位置向后移动一个字符,并返回读取到的字符</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadNextString(System.String@)">
            <summary>读取下一个字符串,当前reader流已经在"之后,读取到的字符串应该是不包含结尾的双引号</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadNextEscapeChar">
            <summary>读取下一个转义字符,流已处于转义符\后</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadNextLiteral(System.Boolean,System.String@)">
            <summary>读取下一个字面值,可能是true false null 数字 无法识别,调用时第一个字符一定是一个字面值</summary>
            <param name="onlyPeek">是否仅Peek而不移动流位置(不移动到有效值的位置),这将会使str不会返回字符串内容(仅一个双引号)</param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.SkipNext">
            <summary>跳过下一个值,可以是跳过对象声明(以及对象成员名称 成员值声明),数组声明,以及基础类型</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.SkipNext(System.Int32)">
            <summary>跳过下面的值,并指定初始复合对象深度,通过提供大于0的初始深度可以跳过一直到 偏移指定深度 的复合对象位置,一般是读取到]或者}符号之后</summary>
            <param name="initDepth">初始化复合对象深度,应该是大于等于0的数字,小于0时将不做任何操作</param>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.ComplexObjectDepth">
            <summary>复合对象深度,包括自定义对象和字典,主要用于平衡[]{},用于成员数量不一致时</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AUTODETECT_TYPES">
            <summary>自动探测类型时断言的原子元素类型</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.MEMBERNAME_EXPECTED_TYPES">
            <summary>尝试读取成员时期望的原子元素类型</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.OnReadObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>从当前流位置读取一个对象</summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadCustomObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>从当前流位置读取一个自定义对象,即{}包括的数据</summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ComplexObjectDepthIsOverflow">
            <summary>当前解析复合对象深度是否超出,用于避免循环引用可能引起的堆栈溢出,仅在Settings.RepeatedActionType是RepeatedAction.DepthLimit时才可能返回true</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.GetMemberBeforeRead(System.Type,System.Object,DmFramework.Serialization.IObjectMemberInfo[],System.Int32)">
            <summary>读取当前成员名称</summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="members"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.OnReadMember(System.Type,System.Object@,DmFramework.Serialization.IObjectMemberInfo,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>从当前流位置读取成员值</summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="member"></param>
            <param name="index"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.ReadLengths">
            <summary>读取多维数组的维度</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.Backup">
            <summary>备份当前环境，用于临时切换数据流等</summary>
            <returns>本次备份项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.Restore">
            <summary>恢复最近一次备份</summary>
            <returns>本次还原项集合</returns>
        </member>
        <member name="P:DmFramework.Serialization.JsonReader.Reader">
            <summary>读取器</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonReader.Stream">
            <summary>数据流。更改数据流后，重置Reader为空，以使用新的数据流</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonReader.EndOfStream">
            <summary>获取一个值，该值表示当前的流位置是否在流的末尾。</summary>
            <returns>如果当前的流位置在流的末尾，则为 true；否则为 false。</returns>
        </member>
        <member name="T:DmFramework.Serialization.JsonReader.ReservedTypeClass">
            <summary>表示类型是无法实例化的类型,用于避免父类CheckAndReadType中的ReadType被执行,因为json的类型标识是另外的格式</summary>
        </member>
        <member name="T:DmFramework.Serialization.JsonReader.AtomElementType">
            <summary>原子元素类型</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.NONE">
            <summary>无 一般表示结尾</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.BRACE_OPEN">
            <summary>大括号开始 {</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.BRACE_CLOSE">
            <summary>大括号结束 }</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.BRACKET_OPEN">
            <summary>方括号开始 [</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.BRACKET_CLOSE">
            <summary>方括号结束 ]</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.COLON">
            <summary>冒号 :</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.COMMA">
            <summary>逗号 ,</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.STRING">
            <summary>字符串 "包含的</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.LITERAL">
            <summary>字面值 无法识别的字面值</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.TRUE">
            <summary>字面值 true</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.FALSE">
            <summary>字面值 false</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.NULL">
            <summary>字面值 null</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.NUMBER">
            <summary>字面值 数字,非科学计数法表示的</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.NUMBER_EXP">
            <summary>字面值 数字,科学计数发表示的</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.FLOAT">
            <summary>字面值 浮点数,非科学计数法表示的浮点数</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonReader.AtomElementType.FLOAT_EXP">
            <summary>字面值 浮点数,科学计数法表示的浮点数</summary>
        </member>
        <member name="T:DmFramework.Serialization.JsonReader.JsonReaderAssertException">
            <summary>json reader断言异常,属于解析异常的一部分,主要是提供的数据不符合约定</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.JsonReaderAssertException.#ctor(System.Int64,System.Int64,DmFramework.Serialization.JsonReader.AtomElementType[],DmFramework.Serialization.JsonReader.AtomElementType,System.String)">
            <summary>构造一个断言异常</summary>
            <param name="line"></param>
            <param name="column"></param>
            <param name="expected">期望的节点类型</param>
            <param name="actual">实际节点类型</param>
            <param name="messageInfo">额外的描述信息</param>
        </member>
        <member name="M:DmFramework.Serialization.JsonReader.JsonReaderAssertException.FormatMessage(System.Int64,System.Int64,DmFramework.Serialization.JsonReader.AtomElementType[],DmFramework.Serialization.JsonReader.AtomElementType,System.String)">
            <summary>获取相似参数下JsonReaderAssertException类的异常信息,在不需要JsonReaderAssertException异常,但需要异常信息时使用</summary>
            <param name="line"></param>
            <param name="column"></param>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="messageInfo"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.JsonReader.JsonReaderAssertException.MessageInfo">
            <summary>断言异常的额外异常信息</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonReader.JsonReaderAssertException.Expected">
            <summary>断言期望的元素类型</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonReader.JsonReaderAssertException.Actual">
            <summary>断言实际得到的类型,如果期望类型中包含这个类型,即表示错误是非元素基础类型错误,而是由于元素格式不符合理想,比如期望是日期时间格式的字符串</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonReader.JsonReaderAssertException.Message">
            <summary>异常信息,包含额外信息</summary>
        </member>
        <member name="T:DmFramework.Serialization.JsonSettings">
            <summary>Json设置</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonSettings.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonSettings.Indent">
            <summary>缩进</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonSettings.DateTimeMode">
            <summary>指定日期时间输出成什么时间,本地还是UTC时间,默认是UTC时间</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonSettings.JsonDateTimeFormat">
            <summary>指定日期时间输出成什么格式,具体格式说明见<see cref="T:DmFramework.Serialization.JsonDateTimeFormats"/>,默认是ISO8601格式</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonSettings.UseStringUnicodeEncode">
             <summary>
             是否编码字符串中Unicode字符为\uXXXX的格式
            
             可以避免乱码问题,但是会增加数据长度
             </summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonSettings.AllowMultiline">
            <summary>是否允许输出多行结果,这会便于阅读结果,当为false时可以用作jsonp回调(还需要做字符串转义)</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonSettings.DuplicatedObjectWriteMode">
            <summary>重复对象的处理方式,仅用于JsonWriter,默认是深度限制,使用DepthLimit执行的深度</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonSettings.DepthLimit">
             <summary>
             复合对象的解析深度限制,只有在DuplicatedObjectWriteMode是DuplicatedObjectWriteMode.DepthLimit时生效
            
             复合对象主要是[]和{}的对象,可能是数组 集合 字典 自定义类型
            
             对于JsonWriter,默认值是16(调试时5). 对于JsonReader,默认值是1000(调试时10)
            
             关于1000的取值,测试调用堆栈极限程序中大概12273次调用时抛出StackOverflowException异常,而每处理一个ReadObject大概需要9个调用
             </summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonSettings.UseCharsWriteToString">
            <summary>是否将char[]输出为string,这会减少数据长度,仅会影响JsonWriter,默认true</summary>
        </member>
        <member name="T:DmFramework.Serialization.JsonDateTimeFormats">
            <summary>json序列化时用于指定日期时间输出成什么格式</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonDateTimeFormats.ISO8601">
             <summary>
             ISO 8601格式 类似"2011-05-05T05:12:19.123Z"格式的UTC时间
            
             在http://goo.gl/RZoaz中有js端实现,并且在ie8(ie8模式) ff3.5之后都内建提供toJSON()实现
            
             这也是默认格式
             </summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonDateTimeFormats.DotnetDateTick">
             <summary>
             dotnet3.5中System.Web.Script.Serialization.JavaScriptSerializer输出的格式
            
             类似"\/Date(1304572339844)\/"格式的从 UTC 1970.1.1 午夜开始已经经过的毫秒数
             </summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonDateTimeFormats.Tick">
            <summary>数字,具体值依赖于DateTimeFormat的配置</summary>
        </member>
        <member name="T:DmFramework.Serialization.DuplicatedObjectWriteMode">
            <summary>重复对象的处理方式</summary>
        </member>
        <member name="F:DmFramework.Serialization.DuplicatedObjectWriteMode.DepthLimit">
            <summary>限制处理复合对象的深度</summary>
        </member>
        <member name="F:DmFramework.Serialization.DuplicatedObjectWriteMode.ObjectRef">
            <summary>对象引用方式,暂未实现</summary>
        </member>
        <member name="T:DmFramework.Serialization.JsonWriter">
            <summary>Json写入器</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.#ctor">
            <summary>构造方法</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>将字节数组部分写入当前流。</summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
            <param name="index">buffer 中开始写入的起始点。</param>
            <param name="count">要写入的字节数。</param>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.Write(System.DateTime)">
            <summary>将一个时间日期写入</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.OnWriteLiteral(System.String)">
            <summary>输出字符串字面值,不做编码处理</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.WriteNull">
            <summary>输出空</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.Write(System.Char)">
            <summary>将 Unicode 字符写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
            <param name="ch">要写入的非代理项 Unicode 字符。</param>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.Write(System.Char[])">
            <summary>将 Unicode 字符写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
            <param name="chars"></param>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>将 Unicode 字符写入当前流，并根据所使用的 Encoding 和向流中写入的特定字符，提升流的当前位置。</summary>
            <param name="chars"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.Write(System.String)">
            <summary>写入字符串</summary>
            <param name="value">要写入的值。</param>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.JavascriptStringEncode(System.String)">
            <summary>将指定字符串编码成json中表示的字符串,将编码Unicode字符为\uXXXX</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.JavascriptStringEncode(System.String,System.Boolean)">
            <summary>将指定字符串编码成javascript的字面字符串(即写入到js代码中的和value内容相同的代码),开始和结尾不包含双引号</summary>
            <param name="value">要编码的字符串,value为null时返回""</param>
            <param name="encodeUnicode">是否将Unicode字符编码为\uXXXX的格式</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.WriteEnumerable(System.Collections.IEnumerable,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入枚举数据，复杂类型使用委托方法进行处理</summary>
            <param name="value">对象</param>
            <param name="type">类型</param>
            <param name="callback">使用指定委托方法处理复杂数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.WriteItem(System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入枚举项</summary>
            <param name="value">对象</param>
            <param name="type">类型</param>
            <param name="index">成员索引</param>
            <param name="callback">使用指定委托方法处理复杂数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>返回指定数组的一个片段,始终返回的是array参数的一个副本</summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.WriteDictionary(System.Collections.IDictionary,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>将字典类型数据写入到当前流位置</summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.WriteKeyValue(System.Collections.DictionaryEntry,System.Type,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入字典键和值</summary>
            <param name="value"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <param name="index"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Serialization.JsonWriter.writeValueType">
            <summary>是否需要写入值类型信息的标志,为null时表示不需要,非null时并且等于待写入的值时写入值类型</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonWriter.ComplexObjectDepth">
            <summary>写入的复合对象深度,指使用{} []包括的深度</summary>
        </member>
        <member name="F:DmFramework.Serialization.JsonWriter.WriteMemberCount">
            <summary>是否写入成员的计数器,用于控制换行输出</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.WriteObjectType(System.Type)">
            <summary>JsonWriter的对象类型由writeValueType写入,作为第一个成员,所以不需要</summary>
            <param name="type"></param>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.OnWriteObject(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入对象。具体读写器可以重载该方法以修改写入对象前后的行为。</summary>
            <param name="value">对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.WriteCustomObject(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写对象成员</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.OnWriteMember(System.String,System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入成员</summary>
            <param name="name">成员名字</param>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的成员类型</param>
            <param name="index">成员索引</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.ComplexObjectDepthIsOverflow">
            <summary>当前解析复合对象深度是否超出,用于避免循环引用可能引起的堆栈溢出,仅在Settings.RepeatedActionType是RepeatedAction.DepthLimit时才可能返回true</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.Flush">
            <summary>刷新缓存中的数据</summary>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.Backup">
            <summary>备份当前环境，用于临时切换数据流等</summary>
            <returns>本次备份项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.JsonWriter.Restore">
            <summary>恢复最近一次备份</summary>
            <returns>本次还原项集合</returns>
        </member>
        <member name="P:DmFramework.Serialization.JsonWriter.Writer">
            <summary>写入器</summary>
        </member>
        <member name="P:DmFramework.Serialization.JsonWriter.Stream">
            <summary>数据流。更改数据流后，重置Writer为空，以使用新的数据流</summary>
        </member>
        <member name="T:DmFramework.Serialization.Json.SimpleJsonUtil">
            <summary>简单Json工具,不需要创建实体类就可以读取和生成Json</summary>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.From(System.String)">
            <summary>从指定json字符串读取出Json值</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.From(System.IO.TextReader)">
            <summary>从指定文本读取流读出Json值</summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Read(DmFramework.Serialization.JsonAtomStringReader)">
            <summary>从指定Json原子元素读取流读出一个Json值,包括对象和数组</summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.ReadObject(DmFramework.Serialization.JsonAtomStringReader)">
            <summary>读取一个Json对象值</summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.ReadArray(DmFramework.Serialization.JsonAtomStringReader)">
            <summary>读取一个数组值</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.ParseInteger(System.String)">
            <summary>尝试从指定字符串解析返回一个代表整型数字的SimpleJson对象</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.ParseFloat(System.String)">
            <summary>尝试从指定字符串解析返回一个代表浮点型数字的SimpleJson对象</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Value(System.Object)">
            <summary>根据传入的值选择合适的SimpleJson返回,如果不是基础类型则返回Type为Unknown的Json值,生成Json字符串时,可以指定ToJson事件以实现比如DateTime类型的生成</summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Undefined">
            <summary>返回一个js undefined的值</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Null">
            <summary>返回一个js null的值</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Boolean(System.Boolean)">
            <summary>返回一个js 布尔型值</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Number(System.Int32)">
            <summary>返回一个js 整型数字</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Number(System.Int64)">
            <summary>返回一个js 长整型数字,其在js中的表现和整型完全一样</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Number(System.Single)">
            <summary>返回一个js 浮点数</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Number(System.Double)">
            <summary>返回一个js 双精度浮点数,其在js中的表现和浮点数完全一样</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.String(System.String)">
            <summary>返回一个js 字符串值</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Object(System.Object[])">
            <summary>返回一个js 对象值</summary>
            <param name="args">名值对,必须是成对出现,否则将会抛弃最后一个</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.Array(System.Object[])">
            <summary>返回一个js 数组值</summary>
            <param name="args">值,可以直接指定基础类型如Int32 String这些</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.To(DmFramework.Serialization.Json.SimpleJson,System.IO.TextWriter)">
            <summary>将指定Json值写入到指定的文本写入流</summary>
            <param name="value"></param>
            <param name="writer"></param>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.To(DmFramework.Serialization.Json.SimpleJson)">
            <summary>返回指定Json值的Json字符串</summary>
            <remarks>
            如果value是一个Unknown/Undefined类型的值,则返回空白字符串,但是如果value下的对象或数组的中有Unknown/Undefined类型的值,则会尽可能修正为null或忽略(在数组结尾的Unknown/Undefined类型值会忽略)以符合Json标准
            </remarks>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil._To(DmFramework.Serialization.Json.SimpleJson)">
            <summary>返回指定Json值的Json字符串,私有方法</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.ToObject(DmFramework.Serialization.Json.SimpleJson)">
            <summary>返回指定Json对象的Json字符串</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.ToArray(DmFramework.Serialization.Json.SimpleJson)">
            <summary>返回指定Json数组的Json字符串</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.StringProcess(System.String,System.Object[])">
            <summary>使用指定的处理方式处理指定字符串</summary>
            <remarks>
            处理方式有2种类型
              Func&lt;Char, String&gt;(用于按字符处理,其中一个返回非null即表示当前字符转换成功)
              Func&lt;String, String&gt;(用于在最后处理整个字符串,会按照顺序全部调用)
            </remarks>
            <param name="value"></param>
            <param name="args">处理方式</param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonUtil.JsStringInDoubleQuote">
            <summary>在双引号中使用的js字符串的处理方式</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonUtil.JsStringInSingleQuote">
            <summary>在单引号中间使用的js字符串处理方式</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonUtil.DoubleQuote">
            <summary>在指定字符串两边加上双引号的处理方式</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonUtil.SingleQuote">
            <summary>在指定字符串两边加上单引号的处理方式</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonUtil.EncodeUnicode">
            <summary>转换Unicode字符为\uXXXX形式的处理方式</summary>
            <remarks>
            解码方法参见 JsonAtomStringReader.TryDecodeUnicode
            </remarks>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.JsString(System.Char)">
             <summary>返回在StringProcess方法中使用的处理方式,用于将输入的字符串转换为Js字符串字面值</summary>
             <remarks>
             可指定是在什么引号中使用的字符串,如果既不是单引号也不是双引号则所有"和'符号都会使用转义符号\
            
             返回结果不包含字符串两边的引号
             </remarks>
             <param name="quoto">单引号或双引号,或未知0</param>
             <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.JsStringDefine(System.String)">
            <summary>返回一个在Js代码中使用的Js字符串声明赋值的值部分</summary>
            <remarks>
            <code>
              var a=&lt;%=JsStringDefine("foo bar") %&gt;;
            </code>
            </remarks>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJsonUtil.JsStringDefine(System.String,System.Boolean)">
            <summary>返回一个在Js代码中使用的Js字符串声明复制的值部分,可指定字符串赋值使用单引号还是双引号</summary>
            <param name="str"></param>
            <param name="useSingleQuote">true表示使用单引号,否则使用双引号</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Json.SimpleJsonUtil.IsEncodeUnicode">
            <summary>设置在产生Json字符串的时候是否编码Unicode字符为\uXXXX的格式</summary>
        </member>
        <member name="E:DmFramework.Serialization.Json.SimpleJsonUtil.BeginFromJson">
            <summary>当开始解析一段Json字符串时触发的事件</summary>
        </member>
        <member name="E:DmFramework.Serialization.Json.SimpleJsonUtil.FromJson">
            <summary>当解析到一段Json值时触发</summary>
        </member>
        <member name="E:DmFramework.Serialization.Json.SimpleJsonUtil.EndFromJson">
            <summary>当完成解析一段Json字符串时触发</summary>
        </member>
        <member name="E:DmFramework.Serialization.Json.SimpleJsonUtil.BeginToJson">
            <summary>当开始从Json值产生字符串时触发</summary>
        </member>
        <member name="E:DmFramework.Serialization.Json.SimpleJsonUtil.ToJson">
            <summary>当产生了一个Json值对应的Json字符串时触发</summary>
        </member>
        <member name="E:DmFramework.Serialization.Json.SimpleJsonUtil.EndToJson">
            <summary>当完成从Json值产生字符串时触发</summary>
        </member>
        <member name="T:DmFramework.Serialization.Json.SimpleJson">
            <summary>简单Json值</summary>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJson.Get(System.String)">
            <summary>使用检索字符串检索当前Json值</summary>
            <remarks>
            检索字符串很类似js,可以象在js中访问json对象一样访问SimpleJson对象树
            </remarks>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJson.Get``1">
            <summary>将当前Json值的实际值转换成指定类型返回</summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJson.Get``1(System.String)">
            <summary>使用检索字符串检索当前Json值的实际值,并转换为T类型</summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJson.Get``1(System.String,``0)">
            <summary>使用检索字符串检索当前Json值的实际值,并转换为T类型,如果转换失败将返回_default</summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="_default"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJson.TryGet``1(``0@)">
            <summary>将当前Json值的实际值转换成指定类型返回,如果类型不匹配将返回T类型的默认值</summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Json.SimpleJson.ToString">
            <summary>重载</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Json.SimpleJson.Type">
            <summary>值类型</summary>
        </member>
        <member name="P:DmFramework.Serialization.Json.SimpleJson.Value">
            <summary>值,实际类型取决于Type属性</summary>
        </member>
        <member name="P:DmFramework.Serialization.Json.SimpleJson.IsUndefined">
            <summary>易用的方法,返回当前值是否是未定义</summary>
        </member>
        <member name="P:DmFramework.Serialization.Json.SimpleJson.IsUnknown">
            <summary>易用的方法,返回当前值是否是未知的值</summary>
        </member>
        <member name="P:DmFramework.Serialization.Json.SimpleJson.Count">
            <summary>返回对象或数组的元素总数,非对象和数组的情况下返回0</summary>
        </member>
        <member name="P:DmFramework.Serialization.Json.SimpleJson.Keys">
             <summary>
             返回对象的所有成员名称,非对象的情况下返回长度为0的数组
            
             并不保证成员名称顺序和声明时顺序一致
             </summary>
        </member>
        <member name="P:DmFramework.Serialization.Json.SimpleJson.Item(System.Int32)">
            <summary>按下标索引,只在Type为数组是生效,如果不是数组或不存在将返回Undefined</summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Serialization.Json.SimpleJson.Item(System.String)">
            <summary>按名称索引,只在Type为对象是生效,如果不是对象或不存在将返回Undefined</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.Json.SimpleJsonType">
            <summary>简单Json值类型,针对SimpleJsonReader的需要,对JsonAtomType的一些精简,并提供js中Undefined类型</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonType.Unknown">
            <summary>未知,不属于基础Json类型的类型</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonType.Object">
            <summary>对象类型,即{"key":"value"}</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonType.Array">
            <summary>数组类型,即["value",1,2,3]</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonType.String">
            <summary>字符串</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonType.Integer">
            <summary>整数</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonType.Float">
            <summary>浮点数</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonType.Boolean">
            <summary>布尔型,true/false</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonType.Null">
            <summary>null</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonType.Literal">
            <summary>字面值,用于处理不严谨的json字符串,比如{aa:'bb'}</summary>
        </member>
        <member name="F:DmFramework.Serialization.Json.SimpleJsonType.Undefined">
            <summary>未初始化的值,用于处理不严谨的json字符串,比如[,,]</summary>
        </member>
        <member name="T:DmFramework.Serialization.NameValueReader">
            <summary>名值读取器。用于Http请求、Http接口响应、Cookie值等读写操作。</summary>
        </member>
        <member name="M:DmFramework.Serialization.NameValueReader.Backup">
            <summary>备份当前环境，用于临时切换数据流等</summary>
            <returns>本次备份项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.NameValueReader.Restore">
            <summary>恢复最近一次备份</summary>
            <returns>本次还原项集合</returns>
        </member>
        <member name="P:DmFramework.Serialization.NameValueReader.Reader">
            <summary>读取器</summary>
        </member>
        <member name="P:DmFramework.Serialization.NameValueReader.Stream">
            <summary>数据流。更改数据流后，重置Reader为空，以使用新的数据流</summary>
        </member>
        <member name="T:DmFramework.Serialization.NameValueSetting">
            <summary>名值读写器设置</summary>
        </member>
        <member name="P:DmFramework.Serialization.NameValueSetting.Separator">
            <summary>分隔符</summary>
        </member>
        <member name="P:DmFramework.Serialization.NameValueSetting.Connector">
            <summary>连接符</summary>
        </member>
        <member name="T:DmFramework.Serialization.NameValueWriter">
            <summary>名值写入器。用于Http请求、Http接口响应、Cookie值等读写操作。</summary>
        </member>
        <member name="M:DmFramework.Serialization.NameValueWriter.Backup">
            <summary>备份当前环境，用于临时切换数据流等</summary>
            <returns>本次备份项集合</returns>
        </member>
        <member name="M:DmFramework.Serialization.NameValueWriter.Restore">
            <summary>恢复最近一次备份</summary>
            <returns>本次还原项集合</returns>
        </member>
        <member name="P:DmFramework.Serialization.NameValueWriter.Writer">
            <summary>写入器</summary>
        </member>
        <member name="P:DmFramework.Serialization.NameValueWriter.Stream">
            <summary>数据流。更改数据流后，重置Writer为空，以使用新的数据流</summary>
        </member>
        <member name="T:DmFramework.Serialization.RWKinds">
            <summary>序列化种类</summary>
        </member>
        <member name="F:DmFramework.Serialization.RWKinds.Binary">
            <summary>二进制</summary>
        </member>
        <member name="F:DmFramework.Serialization.RWKinds.Xml">
            <summary>Xml</summary>
        </member>
        <member name="F:DmFramework.Serialization.RWKinds.Json">
            <summary>Json</summary>
        </member>
        <member name="F:DmFramework.Serialization.RWKinds.NameValue">
            <summary>名值</summary>
        </member>
        <member name="T:DmFramework.Serialization.RWService">
            <summary>读写器服务。将来可以改为对象容器支持</summary>
        </member>
        <member name="T:DmFramework.Serialization.XSerializationException">
            <summary>序列化异常</summary>
        </member>
        <member name="M:DmFramework.Serialization.XSerializationException.#ctor(System.String)">
            <summary>初始化</summary>
            <param name="member"></param>
        </member>
        <member name="M:DmFramework.Serialization.XSerializationException.#ctor(System.String,System.String)">
            <summary>初始化</summary>
            <param name="member"></param>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.Serialization.XSerializationException.#ctor(System.String,System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="member"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:DmFramework.Serialization.XSerializationException.#ctor(System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="member"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:DmFramework.Serialization.XSerializationException.Member">
            <summary>成员</summary>
        </member>
        <member name="P:DmFramework.Serialization.XSerializationException.Value">
            <summary>对象值</summary>
        </member>
        <member name="T:DmFramework.Serialization.Serializing.PropertyFactory">
            <summary>Decomposes object to a Property and its Subproperties</summary>
        </member>
        <member name="F:DmFramework.Serialization.Serializing.PropertyFactory._propertyCache">
            <summary>Contains reference targets.</summary>
        </member>
        <member name="F:DmFramework.Serialization.Serializing.PropertyFactory._currentReferenceId">
            <summary>It will be incremented as neccessary</summary>
        </member>
        <member name="M:DmFramework.Serialization.Serializing.PropertyFactory.#ctor(DmFramework.Serialization.Advanced.PropertyProvider)">
            <summary>
            </summary>
            <param name = "propertyProvider">provides all important properties of the decomposed object</param>
        </member>
        <member name="M:DmFramework.Serialization.Serializing.PropertyFactory.CreateProperty(System.String,System.Object)">
            <summary>
            </summary>
            <param name = "name"></param>
            <param name = "value"></param>
            <returns>NullProperty if the value is null</returns>
        </member>
        <member name="T:DmFramework.Serialization.Serializing.PropertyTypeInfo`1">
            <summary>
              Contains info about property and its type.
              It is of use to avoid Double type definitions.
            </summary>
            <typeparam name = "TProperty"></typeparam>
            <remarks>
              During serialization is each property wrapped in this class.
              there is no need to define type of every array element if there is a global ElementType type defined
              and each array element type is equal to that global ElementType
              In such a case ElementType is stored in ExpectedPropertyType, ValueType contains null.
            </remarks>
        </member>
        <member name="M:DmFramework.Serialization.Serializing.PropertyTypeInfo`1.#ctor(`0,System.Type)">
            <summary>
            </summary>
            <param name = "property"></param>
            <param name = "valueType"></param>
        </member>
        <member name="M:DmFramework.Serialization.Serializing.PropertyTypeInfo`1.#ctor(`0,System.Type,System.Type)">
            <summary>
            </summary>
            <param name = "property"></param>
            <param name = "expectedPropertyType"></param>
            <param name = "valueType"></param>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.PropertyTypeInfo`1.ExpectedPropertyType">
            <summary>Of what type should be this property</summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.PropertyTypeInfo`1.ValueType">
            <summary>
              Of what type is the property value. If it is null - then the value type is equal to expectedPropertyType
              and does not need to be additionally serialized
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.PropertyTypeInfo`1.Name">
            <summary>Property name</summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.PropertyTypeInfo`1.Property">
            <summary>Property itself</summary>
        </member>
        <member name="T:DmFramework.Serialization.Serializing.TypeInfo">
            <summary>Gives extended information about a Type</summary>
        </member>
        <member name="F:DmFramework.Serialization.Serializing.TypeInfo._cache">
            <summary>Cache stores type info and spares time be recall the info every time it is needed</summary>
        </member>
        <member name="M:DmFramework.Serialization.Serializing.TypeInfo.GetTypeInfo(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DmFramework.Serialization.Serializing.TypeInfo.GetTypeInfo(System.Type)">
            <summary>
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Serialization.Serializing.TypeInfo.fillKeyAndElementType(DmFramework.Serialization.Serializing.TypeInfo,System.Type)">
            <summary></summary>
            <param name="typeInfo"></param>
            <param name="type"></param>
            <returns>true if the key and value definition was found</returns>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.TypeInfo.IsSimple">
            <summary>
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.TypeInfo.IsArray">
            <summary>
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.TypeInfo.IsEnumerable">
            <summary>
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.TypeInfo.IsCollection">
            <summary>
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.TypeInfo.IsDictionary">
            <summary>
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.TypeInfo.ElementType">
            <summary>Of what type are elements of Array, Collection or values in a Dictionary</summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.TypeInfo.KeyType">
            <summary>Of what type are dictionary keys</summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.TypeInfo.ArrayDimensionCount">
            <summary>Valid dimensions start with 1</summary>
        </member>
        <member name="P:DmFramework.Serialization.Serializing.TypeInfo.Type">
            <summary>
              Property type
            </summary>
        </member>
        <member name="T:DmFramework.Serialization.Serializing.TypeInfoCollection">
            <summary>
            </summary>
        </member>
        <member name="M:DmFramework.Serialization.Serializing.TypeInfoCollection.TryGetTypeInfo(System.Type)">
            <summary>
            </summary>
            <returns>null if the key was not found</returns>
        </member>
        <member name="M:DmFramework.Serialization.Serializing.TypeInfoCollection.GetKeyForItem(DmFramework.Serialization.Serializing.TypeInfo)">
            <summary>
            </summary>
            <param name = "item"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Serialization.SharpSerializer">
            <summary>This is the main class of SharpSerializer. It serializes and deserializes objects.</summary>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.#ctor(System.Boolean)">
            <summary>Standard Constructor. Default is Xml serializing</summary>
            <param name="xmlSerialization" type="bool">
            <para>true - binary serialization with SizeOptimized mode.</para>
            <para>false - xml. For more options use other overloaded constructors.</para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.#ctor(DmFramework.Serialization.SharpSerializerXmlSettings)">
            <summary>Xml serialization with custom settings</summary>
            <param name="settings" type="DmFramework.Serialization.SharpSerializerXmlSettings">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.#ctor(DmFramework.Serialization.SharpSerializerBinarySettings)">
            <summary>Binary serialization with custom settings</summary>
            <param name="settings" type="DmFramework.Serialization.SharpSerializerBinarySettings">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.#ctor(DmFramework.Serialization.Advanced.Serializing.IPropertySerializer,DmFramework.Serialization.Advanced.Deserializing.IPropertyDeserializer)">
            <summary>Custom serializer and deserializer</summary>
            <param name="serializer" type="DmFramework.Serialization.Advanced.Serializing.IPropertySerializer">
            <para></para>
            </param>
            <param name="deserializer" type="DmFramework.Serialization.Advanced.Deserializing.IPropertyDeserializer">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.XmlSerialize(System.Object,System.String,DmFramework.Serialization.SharpSerializerXmlSettings)">
            <summary>Xml 序列化</summary>
            <param name="data" type="object">
            <para></para>
            </param>
            <param name="outputFileName" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.XmlSerialize(System.Object,System.IO.Stream,DmFramework.Serialization.SharpSerializerXmlSettings)">
            <summary>Xml 序列化</summary>
            <param name="data" type="object">
            <para></para>
            </param>
            <param name="output" type="System.IO.Stream">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.XmlSerialize(System.Object,System.IO.TextWriter,DmFramework.Serialization.SharpSerializerXmlSettings)">
            <summary>Xml 序列化</summary>
            <param name="data" type="object">
            <para></para>
            </param>
            <param name="output" type="System.IO.TextWriter">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.XmlSerialize(System.Object,System.Text.StringBuilder,DmFramework.Serialization.SharpSerializerXmlSettings)">
            <summary>Xml 序列化</summary>
            <param name="data" type="object">
            <para></para>
            </param>
            <param name="output" type="System.Text.StringBuilder">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.XmlDeserialize(System.String)">
            <summary>Xml 反序列化</summary>
            <param name="outputFileName" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.XmlDeserialize``1(System.String)">
            <summary>Xml 反序列化</summary>
            <param name="inputUri" type="string">
            <para></para>
            </param>
            <returns>A T value...</returns>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.XmlDeserialize(System.IO.Stream)">
            <summary>Xml 反序列化</summary>
            <param name="output" type="System.IO.Stream">
            <para></para>
            </param>
            <returns>A object value...</returns>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.XmlDeserialize``1(System.IO.Stream)">
            <summary>Xml 反序列化</summary>
            <param name="input" type="System.IO.Stream">
            <para></para>
            </param>
            <returns>A T value...</returns>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.XmlDeserialize(System.IO.TextReader)">
            <summary>Xml 反序列化</summary>
            <param name="output" type="System.IO.TextWriter">
            <para></para>
            </param>
            <returns>A object value...</returns>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.XmlDeserialize``1(System.IO.TextReader)">
            <summary>Xml 反序列化</summary>
            <param name="input" type="System.IO.TextReader">
            <para></para>
            </param>
            <returns>A T value...</returns>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.Serialize(System.Object,System.String)">
            <summary>Serializing to a file. File will be always new created and closed after the serialization.</summary>
            <param name = "data"></param>
            <param name = "filename"></param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>Serializing to the stream. After serialization the stream will NOT be closed.</summary>
            <param name = "data"></param>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.Deserialize(System.String)">
            <summary>Deserializing from the file. After deserialization the file will be closed.</summary>
            <param name="filename" type="string">
            <para></para>
            </param>
            <returns>A object value...</returns>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.Deserialize``1(System.String)">
            <summary>Deserializing from the file. After deserialization the file will be closed.</summary>
            <param name="filename" type="string">
            <para></para>
            </param>
            <returns>A object value...</returns>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.Deserialize(System.IO.Stream)">
            <summary>Deserialization from the stream. After deserialization the stream will NOT be closed.</summary>
            <param name="stream" type="System.IO.Stream">
            <para></para>
            </param>
            <returns>A object value...</returns>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializer.Deserialize``1(System.IO.Stream)">
            <summary>Deserialization from the stream. After deserialization the stream will NOT be closed.</summary>
            <param name="stream" type="System.IO.Stream">
            <para></para>
            </param>
            <returns>A object value...</returns>
        </member>
        <member name="P:DmFramework.Serialization.SharpSerializer.PropertyProvider">
            <summary>
              Default it is an instance of PropertyProvider. It provides all properties to serialize.
              You can use an Ihneritor and overwrite its GetAllProperties and IgnoreProperty methods to implement your custom rules.
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.SharpSerializer.RootName">
            <summary>What name should have the root property. Default is "Root".</summary>
        </member>
        <member name="T:DmFramework.Serialization.SharpSerializerBinarySettings">
            <summary>All the most important settings for binary serialization</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializerBinarySettings.#ctor">
            <summary>Default constructor. Serialization in SizeOptimized mode. For other modes choose an overloaded constructor</summary>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializerBinarySettings.#ctor(DmFramework.Serialization.BinarySerializationMode,System.Text.Encoding)">
            <summary>Overloaded constructor. Chooses mode in which the data is serialized.</summary>
            <param name="mode" type="DmFramework.Serialization.BinarySerializationMode">
            <para>SizeOptimized - all types are stored in a header, objects only reference these types (better for collections). </para>
            <para>Burst - all types are serialized with their objects (better for serializing of single objects).</para>
            </param>
            <param name="encoding" type="System.Text.Encoding">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializerBinarySettings.Create">
            <summary>创建一个新的实例</summary>
            <returns>A DmFramework.Serialization.SharpSerializerBinarySettings value...</returns>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializerBinarySettings.Create(DmFramework.Serialization.BinarySerializationMode,System.Text.Encoding)">
            <summary>创建一个新的实例</summary>
            <param name="mode" type="DmFramework.Serialization.BinarySerializationMode">
            <para></para>
            </param>
            <param name="encoding" type="System.Text.Encoding">
            <para></para>
            </param>
            <returns>A DmFramework.Serialization.SharpSerializerBinarySettings value...</returns>
        </member>
        <member name="P:DmFramework.Serialization.SharpSerializerBinarySettings.Encoding">
            <summary>How are strings serialized.</summary>
            <value>
            <para></para>
            </value>
            <remarks>Default is UTF-8.</remarks>
        </member>
        <member name="P:DmFramework.Serialization.SharpSerializerBinarySettings.Mode">
            <summary>Default is SizeOptimized - Types and property names are stored in a header.</summary>
            <value>
            <para></para>
            </value>
            <remarks>The opposite is Burst mode when all types are serialized with their objects.</remarks>
        </member>
        <member name="T:DmFramework.Serialization.SharpSerializerXmlSettings">
            <summary>All the most important settings for xml serialization</summary>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializerXmlSettings.#ctor">
            <summary>Standard constructor with Culture=InvariantCulture and Encoding=UTF8</summary>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializerXmlSettings.#ctor(System.Text.Encoding,System.Globalization.CultureInfo)">
            <summary>构造函数</summary>
            <param name="encoding" type="System.Text.Encoding">
            <para></para>
            </param>
            <param name="culture" type="System.Globalization.CultureInfo">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializerXmlSettings.Create">
            <summary>创建一个新的实例</summary>
            <returns>A DmFramework.Serialization.SharpSerializerXmlSettings value...</returns>
        </member>
        <member name="M:DmFramework.Serialization.SharpSerializerXmlSettings.Create(System.Text.Encoding,System.Globalization.CultureInfo)">
            <summary>创建一个新的实例</summary>
            <param name="encoding" type="System.Text.Encoding">
            <para></para>
            </param>
            <param name="culture" type="System.Globalization.CultureInfo">
            <para></para>
            </param>
            <returns>A DmFramework.Serialization.SharpSerializerXmlSettings value...</returns>
        </member>
        <member name="P:DmFramework.Serialization.SharpSerializerXmlSettings.Culture">
            <summary>
            All Single numbers and date/time values are stored as text according to the Culture. Default is CultureInfo.InvariantCulture.
            This setting is overridden if you set AdvancedSettings.SimpleValueConverter
            </summary>
        </member>
        <member name="P:DmFramework.Serialization.SharpSerializerXmlSettings.Encoding">
            <summary>
            Describes format in which the xml file is stored.Default is UTF-8.
            This setting is overridden if you set AdvancedSettings.XmlWriterSettings
            </summary>
        </member>
        <member name="T:DmFramework.Text.StringHelper">
            <summary>　常用工具类——字符串类</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GetStringLength(System.String)">
            <summary>返回字符串真实长度, 1个汉字长度为2</summary>
            <returns>字符长度</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GetEmailHostName(System.String)">
            <summary>返回E-Mail Address的Domain</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GetURLFilename(System.String)">
            <summary>返回URL中结尾的文件名</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.FormatBytesStr(System.Int32)">
            <summary>格式化字节数字符串</summary>
            <param name="bytes">字节数</param>
            <returns>格式化的结果</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.Verify(System.String,System.Int32)">
            <summary>生成指定位数的随机数字或字符串</summary>
            <param name="DataString">自定义随机字符串范围</param>
            <param name="RanLength">长度</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.Verify(System.String,System.Int32,System.Boolean)">
            <summary>生成指定位数的随机数字或字符串</summary>
            <param name="DataString">自定义随机字符串范围</param>
            <param name="RanLength">长度</param>
            <param name="Session">是否要将返回结果写入到SESSION</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GetNumber(System.String)">
            <summary>取字符串中的数字</summary>
            <param name="s">字符串</param>
            <returns>返回Int64整数</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.RTrim(System.String)">
            <summary>删除字符串尾部的回车/换行/空格</summary>
            <param name="str">要删除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.DelLastChar(System.String,System.String)">
            <summary>删除最后结尾的指定字符后的字符</summary>
            <param name="str">未删除的字符串</param>
            <param name="strchar">要删除之后的字符串</param>
            <returns>删除后的字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.TrimEndStringBuilder(System.Text.StringBuilder,System.String)">
            <summary>将StringBuilder中的以s结尾的字符串去掉</summary>
            <param name="sb"></param>
            <param name="s"></param>
        </member>
        <member name="M:DmFramework.Text.StringHelper.ClearBR(System.String)">
            <summary>清除给定字符串中的回车及换行符</summary>
            <param name="str">要清除的字符串</param>
            <returns>清除后返回的字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.DistinctStringArray(System.String[],System.Int32)">
            <summary>清除字符串数组中的重复项</summary>
            <param name="strArray">字符串数组</param>
            <param name="maxElementLength">字符串数组中单个元素的最大长度</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.CleanInput(System.String)">
            <summary>清理字符串</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.ClearLastChar(System.String)">
            <summary>删除最后一个字符</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.RemoveUnsafeHtml(System.String)">
            <summary>过滤HTML中的不安全标签</summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GetTextFromHTML(System.String)">
            <summary>从HTML中获取文本,保留br,p,img</summary>
            <param name="HTML"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.CutString(System.String,System.Int32,System.Int32)">
            <summary>从字符串的指定位置截取指定长度的子字符串</summary>
            <param name="str">原字符串</param>
            <param name="startIndex">子字符串的起始位置</param>
            <param name="length">子字符串的长度</param>
            <returns>子字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.CutString(System.String,System.Int32)">
            <summary>从字符串的指定位置开始截取到字符串结尾的了符串</summary>
            <param name="str">原字符串</param>
            <param name="startIndex">子字符串的起始位置</param>
            <returns>子字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.CutString(System.String,System.Int32,System.String)">
            <summary>
            工具方法：NET截取指定长度汉字超出部分以"..."代替
            使用示例：String str = StringSubstr("abcde",3,"...");
            </summary>
            <param name="oldStr">要截取的字符串[String]</param>
            <param name="maxLength">截取后字符串的最大长度[Int32]</param>
            <param name="endWith">超过长度的后缀，如：...或###等[String]</param>
            <returns>如果超过长度，返回截断后的新字符串加上后缀，否则，返回原字符串[String]</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GetSubString(System.String,System.Int32,System.String)">
            <summary>字符串如果操过指定长度则将超出的部分用指定字符串代替</summary>
            <param name="p_SrcString">要检查的字符串</param>
            <param name="p_Length">指定长度</param>
            <param name="p_TailString">用于替换的字符串</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GetSubString(System.String,System.Int32,System.Int32,System.String)">
            <summary>取指定长度的字符串</summary>
            <param name="p_SrcString">要检查的字符串</param>
            <param name="p_StartIndex">起始位置</param>
            <param name="p_Length">指定长度</param>
            <param name="p_TailString">用于替换的字符串</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.CompareAlphaNumeric(System.String,System.String)">
            <summary>比较两个字符串</summary>
            <param name="t">原字符串</param>
            <param name="t2">子字符串的起始位置</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.ReplaceString(System.String,System.String,System.String,System.Boolean)">
            <summary>自定义的替换字符串函数</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GetSpacesString(System.Int32)">
            <summary>生成指定数量的html空格符号</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.StrFormat(System.String)">
            <summary>替换回车换行符为html换行符</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.EncodeHtml(System.String)">
            <summary>替换html字符</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.t(System.String)">
            <summary>替换内容中特殊字符为全角</summary>
            <param name="str">要替换的字符</param>
            <returns>替换后的结果字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.MergeString(System.String,System.String)">
            <summary>合并字符</summary>
            <param name="source">要合并的源字符串</param>
            <param name="target">要被合并到的目的字符串</param>
            <param name="mergechar">合并符</param>
            <returns>合并到的目的字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.MergeString(System.String,System.String,System.String)">
            <summary>合并字符</summary>
            <param name="source">要合并的源字符串</param>
            <param name="target">要被合并到的目的字符串</param>
            <param name="mergechar">合并符</param>
            <returns>并到字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.SBCCaseToNumberic(System.String)">
            <summary>将全角数字转换为数字</summary>
            <param name="SBCCase"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.ToColor(System.String)">
            <summary>将字符串转换为Color</summary>
            <param name="color">字符串颜色：#000000</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.Capitalize(System.String)">
            <summary>将字符串第一个字母转换为大写</summary>
            <param name="s"></param>
            <returns>返回处理的字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.DeleteStrArrTheOne(System.String[],System.String)">
            <summary>删除字符串数组中的一个元素</summary>
            <param name="StrArr"></param>
            <param name="DeleteStr"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GetInArrayID(System.String,System.String[],System.Boolean)">
            <summary>判断指定字符串在指定字符串数组中的位置</summary>
            <param name="strSearch">字符串</param>
            <param name="stringArray">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>字符串在指定字符串数组中的位置, 如不存在则返回-1</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GetInArrayID(System.String,System.String[])">
            <summary>判断指定字符串在指定字符串数组中的位置</summary>
            <param name="strSearch">字符串</param>
            <param name="stringArray">字符串数组</param>
            <returns>字符串在指定字符串数组中的位置, 如不存在则返回-1</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.InArray(System.String,System.String[],System.Boolean)">
            <summary>判断指定字符串是否属于指定字符串数组中的一个元素</summary>
            <param name="strSearch">字符串</param>
            <param name="stringArray">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.InArray(System.String,System.String[])">
            <summary>判断指定字符串是否属于指定字符串数组中的一个元素</summary>
            <param name="str">字符串</param>
            <param name="stringarray">字符串数组</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.InArray(System.String,System.String)">
            <summary>判断指定字符串是否属于指定字符串数组中的一个元素</summary>
            <param name="str">字符串</param>
            <param name="stringarray">内部以逗号分割单词的字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.InArray(System.String,System.String,System.String)">
            <summary>判断指定字符串是否属于指定字符串数组中的一个元素</summary>
            <param name="str">字符串</param>
            <param name="stringarray">内部以逗号分割单词的字符串</param>
            <param name="strsplit">分割字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.InArray(System.String,System.String,System.String,System.Boolean)">
            <summary>判断指定字符串是否属于指定字符串数组中的一个元素</summary>
            <param name="str">字符串</param>
            <param name="stringarray">内部以逗号分割单词的字符串</param>
            <param name="strsplit">分割字符串</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.InIPArray(System.String,System.String[])">
            <summary>返回指定IP是否在指定的IP数组所限定的范围内, IP数组内的IP地址可以使用*表示该IP段任意, 例如192.168.1.*</summary>
            <param name="ip"></param>
            <param name="iparray"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.PadStringArray(System.String[],System.Int32,System.Int32)">
            <summary>
            过滤字符串数组中每个元素为合适的大小
            当长度小于minLength时，忽略掉,-1为不限制最小长度
            当长度大于maxLength时，取其前maxLength位
            如果数组中有null元素，会被忽略掉
            </summary>
            <param name="minLength">单个元素最小长度</param>
            <param name="maxLength">单个元素最大长度</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.mashSQL(System.String)">
            <summary>改正sql语句中的转义字符</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.ChkSQL(System.String)">
            <summary>替换sql语句中的有问题符号</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.FilterStr(System.String)">
            <summary>删除字符串中不安全字符</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.MD5(System.String)">
            <summary>MD5函数</summary>
            <param name="str">原始字符串</param>
            <returns>MD5结果</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.EncryptPassword(System.String)">
            <summary>密码加密</summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.MD5Password(System.String,System.Boolean)">
            <summary>BBS论坛MD5加密字符串处理</summary>
            <param name="Half">加密是16位还是32位；如果为true为16位</param>
            <param name="Input">待加密码字符串</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.SHA256(System.String)">
            <summary>SHA256函数</summary>
            /// <param name="str">原始字符串</param>
            <returns>SHA256结果</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.ToSChinese(System.String)">
            <summary>转换为简体中文</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.ToTChinese(System.String)">
            <summary>转换为繁体中文</summary>
        </member>
        <member name="M:DmFramework.Text.StringHelper.GB2312ToUTF8(System.String)">
            <summary>将GB2312编码字符串转为UTF8</summary>
            <param name="Gb2312Str">GB2312编码字符串</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.UTF8ToGB2312(System.String)">
            <summary>将UTF-８字符串转为GB2312</summary>
            <param name="Utf8Str">Utf8编码字符串</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.UnicodeToCN(System.String)">
            <summary>Unicode字符转化为中文字符</summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.CNToUnicode(System.String)">
            <summary>中文字符转化为Unicode字符</summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.ToSBC(System.String)">
            <summary>半角转换为全角</summary>
            <param name="input">要转换的半角字符串</param>
            <returns>转换后的全角字符串</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.ToDBC(System.String)">
            <summary>转半角的函数(SBC case)</summary>
            <param name="input">要转换的全角</param>
            <returns>转换后的半角</returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.QuoteString(System.String)">
            <summary>Qoutes String and escapes fishy('\',"') chars.</summary>
            <param name="text">Text to quote.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.UnQuoteString(System.String)">
            <summary>Unquotes and unescapes escaped chars specified text. For example "xxx" will become to 'xxx', "escaped quote \"", will become to escaped 'quote "'.</summary>
            <param name="text">Text to unquote.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.EscapeString(System.String,System.Char[])">
            <summary>Escapes specified chars in the specified String.</summary>
            <param name="text">Text to escape.</param>
            <param name="charsToEscape">Chars to escape.</param>
        </member>
        <member name="M:DmFramework.Text.StringHelper.UnEscapeString(System.String)">
            <summary>Unescapes all escaped chars.</summary>
            <param name="text">Text to unescape.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.SplitQuotedString(System.String,System.Char)">
            <summary>
            Splits String into String arrays. This split method won't split qouted strings, but only text outside of qouted String.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.SplitQuotedString(System.String,System.Char,System.Boolean)">
            <summary>
            Splits String into String arrays. This split method won't split qouted strings, but only text outside of qouted String.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.SplitQuotedString(System.String,System.Char,System.Boolean,System.Int32)">
            <summary>
            Splits String into String arrays. This split method won't split qouted strings, but only text outside of qouted String.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <param name="count">Maximum number of substrings to return.</param>
            <returns>Returns splitted String.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:DmFramework.Text.StringHelper.QuotedIndexOf(System.String,System.Char)">
            <summary>
            Gets first index of specified Char. The specified Char in quoted String is skipped.
            Returns -1 if specified Char doesn't exist.
            </summary>
            <param name="text">Text in what to check.</param>
            <param name="indexChar">Char what index to get.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.SplitString(System.String,System.Char)">
            <summary>Splits String into String arrays.</summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.IsToken(System.String)">
            <summary>Gets if specified String is valid "token" value.</summary>
            <param name="value">String value to check.</param>
            <returns>Returns true if specified String value is valid "token" value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised if <b>value</b> is null.</exception>
        </member>
        <member name="M:DmFramework.Text.StringHelper.LevenshteinSearch(System.String,System.String[])">
            <summary>编辑距离搜索，从词组中找到最接近关键字的若干匹配项</summary>
            <remarks>
            算法代码由@Aimeast 独立完成。http://www.cnblogs.com/Aimeast/archive/2011/09/05/2167844.html
            </remarks>
            <param name="key">关键字</param>
            <param name="words">词组</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.LevenshteinDistance(System.String,System.String)">
            <summary>编辑距离，又称Levenshtein距离（也叫做Edit Distance），是指两个字串之间，由一个转成另一个所需的最少编辑操作次数。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。</summary>
            <remarks>
            算法代码由@Aimeast 独立完成。http://www.cnblogs.com/Aimeast/archive/2011/09/05/2167844.html
            </remarks>
            <param name="str1"></param>
            <param name="str2"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.LCSSearch(System.String,System.String[])">
            <summary>最长公共子序列搜索，从词组中找到最接近关键字的若干匹配项</summary>
            <remarks>
            算法代码由@Aimeast 独立完成。http://www.cnblogs.com/Aimeast/archive/2011/09/05/2167844.html
            </remarks>
            <param name="key"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.StringHelper.LCSDistance(System.String,System.String[])">
            <summary>
            最长公共子序列问题是寻找两个或多个已知数列最长的子序列。
            一个数列 S，如果分别是两个或多个已知数列的子序列，且是所有符合此条件序列中最长的，则 S 称为已知序列的最长公共子序列。
            The longest common subsequence (LCS) problem is to find the longest subsequence common to all sequences in a set of sequences (often just two). Note that subsequence is different from a substring, see substring vs. subsequence. It is a classic computer science problem, the basis of diff (a file comparison program that outputs the differences between two files), and has applications in bioinformatics.
            </summary>
            <remarks>
            算法代码由@Aimeast 独立完成。http://www.cnblogs.com/Aimeast/archive/2011/09/05/2167844.html
            </remarks>
            <param name="word"></param>
            <param name="keys">多个关键字。长度必须大于0，必须按照字符串长度升序排列。</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Text.StringHelper.Monthes">
            <summary>根据阿拉伯数字返回月份的名称(可更改为某种语言)</summary>
        </member>
        <member name="T:DmFramework.Text.HmStringReader">
            <summary>String reader.</summary>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.#ctor(System.String)">
            <summary>Default constructor.</summary>
            <param name="source">Source String.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null.</exception>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.AppendString(System.String)">
            <summary>Appends specified String to SourceString.</summary>
            <param name="value">String value to append.</param>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.ReadToFirstChar">
            <summary>Reads to first Char, skips white-space(SP,VTAB,HTAB,CR,LF) from the beginning of source String.</summary>
            <returns>Returns white-space chars which was readed.</returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.ReadSpecifiedLength(System.Int32)">
            <summary>Reads String with specified length. Throws exception if read length is bigger than source String length.</summary>
            <param name="length">Number of chars to read.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.QuotedReadToDelimiter(System.Char)">
            <summary>
            Reads String to specified delimiter or to end of underlying String. Notes: Delimiter in quoted String is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiter">Data delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads String to specified delimiter or to end of underlying String. Notes: Delimiters in quoted String is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.QuotedReadToDelimiter(System.Char[],System.Boolean)">
            <summary>
            Reads String to specified delimiter or to end of underlying String. Notes: Delimiters in quoted String is skipped.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <param name="removeDelimiter">Specifies if delimiter is removed from underlying String.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.ReadWord">
            <summary>
            Reads word from String. Returns null if no word is available.
            Word reading begins from first Char, for example if SP"text", then space is trimmed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.ReadWord(System.Boolean)">
            <summary>
            Reads word from String. Returns null if no word is available.
            Word reading begins from first Char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted String word is unquoted.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.ReadWord(System.Boolean,System.Char[],System.Boolean)">
            <summary>
            Reads word from String. Returns null if no word is available.
            Word reading begins from first Char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted String word is unquoted.</param>
            <param name="wordTerminatorChars">Specifies chars what terminate word.</param>
            <param name="removeWordTerminator">Specifies if work terminator is removed.</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis.
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.ReadToEnd">
            <summary>Reads all remaining String, returns null if no chars left to read.</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.RemoveFromEnd(System.Int32)">
            <summary>Removes specified count of chars from the end of the source String.</summary>
            <param name="count">Char count.</param>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.StartsWith(System.String)">
            <summary>Gets if source String starts with specified value. Compare is case-sensitive.</summary>
            <param name="value">Start String value.</param>
            <returns>Returns true if source String starts with specified value.</returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.StartsWith(System.String,System.Boolean)">
            <summary>Gets if source String starts with specified value.</summary>
            <param name="value">Start String value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source String starts with specified value.</returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.EndsWith(System.String)">
            <summary>Gets if source String ends with specified value. Compare is case-sensitive.</summary>
            <param name="value">Start String value.</param>
            <returns>Returns true if source String ends with specified value.</returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.EndsWith(System.String,System.Boolean)">
            <summary>Gets if source String ends with specified value.</summary>
            <param name="value">Start String value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source String ends with specified value.</returns>
        </member>
        <member name="M:DmFramework.Text.HmStringReader.StartsWithWord">
            <summary>
            Gets if current source String starts with word. For example if source String starts with
            whiter space or parenthesize, this method returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Text.HmStringReader.Available">
            <summary>Gets how many chars are available for reading.</summary>
        </member>
        <member name="P:DmFramework.Text.HmStringReader.OriginalString">
            <summary>Gets original String passed to class constructor.</summary>
        </member>
        <member name="P:DmFramework.Text.HmStringReader.SourceString">
            <summary>Gets currently remaining String.</summary>
        </member>
        <member name="P:DmFramework.Text.HmStringReader.Position">
            <summary>Gets position in original String.</summary>
        </member>
        <member name="T:DmFramework.Threading.ReadWriteLock">
            <summary>原子读写锁</summary>
            <remark>
            任意多个读操作，有限个<see cref="P:DmFramework.Threading.ReadWriteLock.Max"/>写操作；
            任意读操作阻塞写操作，同样任意写操作阻塞非本线程读操作和其它写操作；
            </remark>
            <remarks>
            do...while(Interlocked.CompareExchange(ref _lock, oldLock - 1, oldLock) != oldLock)形式的原子锁结构，
            精髓在于do...while之间，里面才是真正的判断数据有效性核心，而CompareExchange仅仅是负责完成替换而已。
            实际上，就类似于准备好各种资料等上级审批，而上级每次只能审批一个，如果这次别人抢到了，那么自己得再次准备资料。
            </remarks>
        </member>
        <member name="F:DmFramework.Threading.ReadWriteLock._lock">
            <summary>锁计数</summary>
        </member>
        <member name="M:DmFramework.Threading.ReadWriteLock.Create(System.Object)">
            <summary>根据指定键值创建读写锁，一般读写锁需要针对指定资源唯一</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Threading.ReadWriteLock.AcquireRead">
            <summary>请求读取锁</summary>
        </member>
        <member name="M:DmFramework.Threading.ReadWriteLock.AcquireRead(System.Int32)">
            <summary>请求读取锁，等待指定时间</summary>
            <param name="millisecondsTimeout"></param>
            <returns>是否取得锁</returns>
        </member>
        <member name="M:DmFramework.Threading.ReadWriteLock.ReleaseRead">
            <summary>释放读取锁</summary>
        </member>
        <member name="M:DmFramework.Threading.ReadWriteLock.AcquireWrite">
            <summary>请求写入锁</summary>
        </member>
        <member name="M:DmFramework.Threading.ReadWriteLock.AcquireWrite(System.Int32)">
            <summary>请求写入锁，等待指定时间</summary>
            <param name="millisecondsTimeout"></param>
            <returns>是否取得锁</returns>
        </member>
        <member name="M:DmFramework.Threading.ReadWriteLock.ReleaseWrite">
            <summary>释放写入锁</summary>
        </member>
        <member name="P:DmFramework.Threading.ReadWriteLock.Max">
            <summary>最大可独占资源数，默认1</summary>
        </member>
        <member name="P:DmFramework.Threading.ReadWriteLock.ReadTimeout">
            <summary>读取锁等待超时时间，默认1秒</summary>
        </member>
        <member name="P:DmFramework.Threading.ReadWriteLock.WriteTimeout">
            <summary>写入锁等待超时时间，默认5秒</summary>
        </member>
        <member name="T:DmFramework.Threading.SpinWait">
            <summary>提供对基于自旋的等待的支持。</summary>
        </member>
        <member name="M:DmFramework.Threading.SpinWait.SpinOnce">
            <summary>执行单一自旋。</summary>
        </member>
        <member name="M:DmFramework.Threading.SpinWait.Reset">
            <summary>重置自旋计数器。</summary>
        </member>
        <member name="M:DmFramework.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})">
            <summary>在指定条件得到满足之前自旋。</summary>
            <param name="condition">在返回 true 之前重复执行的委托。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition" /> 参数为 null。</exception>
        </member>
        <member name="M:DmFramework.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)">
            <summary>在指定条件得到满足或指定超时过期之前自旋。</summary>
            <returns>如果条件在超时时间内得到满足，则为 true；否则为 false</returns>
            <param name="condition">在返回 true 之前重复执行的委托。</param>
            <param name="timeout">一个 <see cref="T:System.TimeSpan" />，表示等待的毫秒数；或者一个 TimeSpan，表示 -1 毫秒（无限期等待）。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition" /> 参数为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
        </member>
        <member name="M:DmFramework.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)">
            <summary>在指定条件得到满足或指定超时过期之前自旋。</summary>
            <returns>如果条件在超时时间内得到满足，则为 true；否则为 false</returns>
            <param name="condition">在返回 true 之前重复执行的委托。</param>
            <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition" /> 参数为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
        </member>
        <member name="P:DmFramework.Threading.SpinWait.Count">
            <summary>获取已对此实例调用 <see cref="M:DmFramework.Threading.SpinWait.SpinOnce"/> 的次数。</summary>
        </member>
        <member name="P:DmFramework.Threading.SpinWait.NextSpinWillYield">
            <summary>获取对 <see cref="M:DmFramework.Threading.SpinWait.SpinOnce"/> 的下一次调用是否将产生处理器，同时触发强制上下文切换。</summary>
            <returns>对 <see cref="M:DmFramework.Threading.SpinWait.SpinOnce"/> 的下一次调用是否将产生处理器，同时触发强制上下文切换。</returns>
        </member>
        <member name="T:DmFramework.Threading.TaskState">
            <summary>任务状态</summary>
        </member>
        <member name="F:DmFramework.Threading.TaskState.Unstarted">
            <summary>未处理</summary>
        </member>
        <member name="F:DmFramework.Threading.TaskState.Running">
            <summary>正在处理</summary>
        </member>
        <member name="F:DmFramework.Threading.TaskState.Finished">
            <summary>已完成</summary>
        </member>
        <member name="T:DmFramework.Threading.ThreadPoolX">
            <summary>线程池。所有静态方法和实例方法均是线程安全。</summary>
        </member>
        <member name="F:DmFramework.Threading.ThreadPoolX.SynLock_mt">
            <summary>用于维护管理线程的锁</summary>
        </member>
        <member name="F:DmFramework.Threading.ThreadPoolX._ManagerThread">
            <summary>使用volatile关键字，等到对象创建完成</summary>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Init">
            <summary>第一个任务到来时初始化线程池</summary>
        </member>
        <member name="F:DmFramework.Threading.ThreadPoolX.SyncLock_Threads">
            <summary>用户维护线程组的锁</summary>
        </member>
        <member name="F:DmFramework.Threading.ThreadPoolX.Sync_Tasks">
            <summary>任务队列同步锁</summary>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.#ctor(System.String)">
            <summary>构造一个线程池</summary>
            <param name="name">线程池名</param>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Create(System.String)">
            <summary>创建线程池。一个名字只能创建一个线程池。线程安全。</summary>
            <param name="name">线程池名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Queue(System.Threading.WaitCallback)">
            <summary>把用户工作项放入队列</summary>
            <param name="method">任务方法</param>
            <returns>任务编号</returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Queue(System.Threading.WaitCallback,System.Object)">
            <summary>把用户工作项放入队列</summary>
            <param name="method">任务方法</param>
            <param name="argument">任务参数</param>
            <returns>任务编号</returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Queue(System.Threading.WaitCallback,System.Threading.WaitCallback,System.Object)">
            <summary>把用户工作项放入队列。指定任务被取消时执行的方法，该方法仅针对尚未被线程开始调用时的任务有效</summary>
            <param name="method">任务方法</param>
            <param name="abortMethod">任务被取消时执行的方法</param>
            <param name="argument">任务参数</param>
            <returns>任务编号</returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Queue(DmFramework.Threading.ThreadTask)">
            <summary>把用户工作项放入队列</summary>
            <param name="task">任务</param>
            <returns>任务编号</returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Abort(System.Int32)">
            <summary>取消任务</summary>
            <param name="id">任务编号</param>
            <returns>任务状态</returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.AbortAllTask">
            <summary>取消所有未开始任务</summary>
            <remarks>这里不要调用上面Abort取消单个任务，否则可能会造成死锁</remarks>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.AbortAllThread">
            <summary>取消所有进行中任务</summary>
            <remarks>这里不要调用上面Abort取消单个任务，否则可能会造成死锁</remarks>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.AbortAll">
            <summary>取消所有任务</summary>
            <remarks>这里不要调用上面Abort取消单个任务，否则可能会造成死锁</remarks>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Query(System.Int32)">
            <summary>查询任务状态</summary>
            <param name="id">任务编号</param>
            <returns>任务状态</returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.QueryCount">
            <summary>查询任务个数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.WaitAll(System.Int32)">
            <summary>等待所有任务完成，并指定是否在等待之前退出同步域。</summary>
            <param name="millisecondsTimeout"></param>
            <returns>是否在等待之前退出同步域</returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Work">
            <summary>调度包装</summary>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.AddThread">
            <summary>添加线程。本方法不是线程安全，调用者需要自己维护线程安全</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Open">
            <summary>借用线程</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Close(DmFramework.Threading.ThreadX)">
            <summary>归还线程</summary>
            <param name="thread"></param>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>带异常处理的线程池任务调度</summary>
            <param name="callback"></param>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>带异常处理的线程池任务调度</summary>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Action{System.Exception})">
            <summary>带异常处理的线程池任务调度，即使不指定异常处理方法，也不允许异常抛出，以免造成应用程序退出</summary>
            <param name="callback"></param>
            <param name="state"></param>
            <param name="errCallback">发生异常时调用的方法</param>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.QueueUserWorkItem(System.Action)">
            <summary>带异常处理的线程池任务调度</summary>
            <param name="callback"></param>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.QueueUserWorkItem(System.Action,System.Action{System.Exception})">
            <summary>带异常处理的线程池任务调度，即使不指定异常处理方法，也不允许异常抛出，以免造成应用程序退出</summary>
            <param name="callback"></param>
            <param name="errCallback">发生异常时调用的方法</param>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Dispose">
            <summary>释放资源</summary>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.Finalize">
            <summary>析构</summary>
        </member>
        <member name="M:DmFramework.Threading.ThreadPoolX.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.MaxThreads">
            <summary>最大线程数</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.MinThreads">
            <summary>最小线程数</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.Name">
            <summary>线程池名称</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.LastError">
            <summary>最后的异常</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.ManagerThread">
            <summary>维护线程</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.Threads">
            <summary>线程组。适用该资源时，记得加上线程锁lockObj</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.ThreadCount">
            <summary>当前线程数</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.RunningCount">
            <summary>正在处理任务的线程数</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.Event">
            <summary>事件量</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.Tasks">
            <summary>任务队列</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.Instance">
            <summary>默认线程池</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadPoolX.Debug">
            <summary>是否调试</summary>
        </member>
        <member name="T:DmFramework.Threading.ThreadTask">
            <summary>线程任务</summary>
        </member>
        <member name="M:DmFramework.Threading.ThreadTask.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>构造一个线程任务</summary>
            <param name="method">任务方法</param>
            <param name="argument">任务参数</param>
        </member>
        <member name="M:DmFramework.Threading.ThreadTask.#ctor(System.Threading.WaitCallback,System.Threading.WaitCallback,System.Object)">
            <summary>构造一个线程任务</summary>
            <param name="method">任务方法</param>
            <param name="abortMethod">任务被取消时执行的方法</param>
            <param name="argument">任务参数</param>
        </member>
        <member name="P:DmFramework.Threading.ThreadTask.ID">
            <summary>唯一编号</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadTask.Method">
            <summary>任务方法</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadTask.Argument">
            <summary>任务参数</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadTask.AbortMethod">
            <summary>取消任务时执行的方法</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadTask.newID">
            <summary>取一个新编号</summary>
        </member>
        <member name="T:DmFramework.Threading.ThreadX">
            <summary>线程扩展</summary>
        </member>
        <member name="F:DmFramework.Threading.ThreadX.internalEvent">
            <summary>内部控制事件</summary>
        </member>
        <member name="M:DmFramework.Threading.ThreadX.Start">
            <summary>开始</summary>
        </member>
        <member name="M:DmFramework.Threading.ThreadX.Abort(System.Boolean)">
            <summary>取消</summary>
            <param name="onlytask">是否仅仅取消任务</param>
        </member>
        <member name="M:DmFramework.Threading.ThreadX.Dispose">
            <summary>释放资源</summary>
        </member>
        <member name="M:DmFramework.Threading.ThreadX.Dispose(System.Boolean)">
            <summary>释放资源。非用户代码调用时，仅释放非托管资源</summary>
            <param name="disposing">是否用户代码调用</param>
        </member>
        <member name="M:DmFramework.Threading.ThreadX.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Threading.ThreadX.FindException``1(System.Exception)">
            <summary>查找指定类型的异常</summary>
            <typeparam name="T"></typeparam>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Threading.ThreadX.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadX.Task">
            <summary>任务</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadX.LastError">
            <summary>最后错误</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadX.Running">
            <summary>是否正在处理任务</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadX.IsAlive">
            <summary>是否活动</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadX.CanRelease">
            <summary>是否能够释放</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadX.Thread">
            <summary>线程</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadX.StartTime">
            <summary>开始时间</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadX.AliveTime">
            <summary>活动时间</summary>
        </member>
        <member name="E:DmFramework.Threading.ThreadX.OnTaskFinished">
            <summary>任务完成时</summary>
        </member>
        <member name="P:DmFramework.Threading.ThreadX.Debug">
            <summary>是否调试</summary>
        </member>
        <member name="T:DmFramework.Threading.TimerX">
             <summary>不可重入的定时器。</summary>
             <remarks>
             为了避免系统的Timer可重入的问题，差别在于本地调用完成后才开始计算时间间隔。这实际上也是经常用到的。
            
             因为挂载在静态列表上，必须从外部主动调用<see cref="M:System.IDisposable.Dispose"/>才能销毁定时器。
            
             该定时器不能放入太多任务，否则适得其反！
            
             TimerX必须维持对象，否则很容易被GC回收。
             </remarks>
        </member>
        <member name="M:DmFramework.Threading.TimerX.#ctor(System.Threading.WaitCallback,System.Object,System.Int32,System.Int32)">
            <summary>实例化一个不可重入的定时器</summary>
            <param name="callback">委托</param>
            <param name="state">用户数据</param>
            <param name="dueTime">多久之后开始</param>
            <param name="period">间隔周期</param>
        </member>
        <member name="M:DmFramework.Threading.TimerX.#ctor(System.Threading.WaitCallback,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>实例化一个不可重入的定时器</summary>
            <param name="callback">委托</param>
            <param name="state">用户数据</param>
            <param name="dueTime">多久之后开始</param>
            <param name="period">间隔周期</param>
            <param name="usethreadpool">是否使用线程池。对于耗时短小且比较频繁的操作，不好使用线程池，减少线程切换。</param>
        </member>
        <member name="M:DmFramework.Threading.TimerX.ToString">
            <summary>已重载</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Threading.TimerX.Callback">
            <summary>回调</summary>
        </member>
        <member name="P:DmFramework.Threading.TimerX.State">
            <summary>用户数据</summary>
        </member>
        <member name="P:DmFramework.Threading.TimerX.NextTime">
            <summary>下一次调用时间</summary>
        </member>
        <member name="P:DmFramework.Threading.TimerX.Timers">
            <summary>调用次数</summary>
        </member>
        <member name="P:DmFramework.Threading.TimerX.Period">
            <summary>间隔周期</summary>
        </member>
        <member name="P:DmFramework.Threading.TimerX.UseThreadPool">
            <summary>是否使用线程池。对于耗时短小且比较频繁的操作，不好使用线程池，减少线程切换。</summary>
        </member>
        <member name="P:DmFramework.Threading.TimerX.Calling">
            <summary>调用中</summary>
        </member>
        <member name="P:DmFramework.Threading.TimerX.Debug">
            <summary>是否开启调试，输出更多信息</summary>
        </member>
        <member name="T:DmFramework.TimerEx">
            <summary>Simple timer implementation.</summary>
        </member>
        <member name="M:DmFramework.TimerEx.#ctor">
            <summary>Default contructor.</summary>
        </member>
        <member name="M:DmFramework.TimerEx.#ctor(System.Double)">
            <summary>Default contructor.</summary>
            <param name="interval">The time in milliseconds between events.</param>
        </member>
        <member name="M:DmFramework.TimerEx.#ctor(System.Double,System.Boolean)">
            <summary>Default contructor.</summary>
            <param name="interval">The time in milliseconds between events.</param>
            <param name="autoReset">Specifies if timer is auto reseted.</param>
        </member>
        <member name="T:DmFramework.TypeHelper">
            <summary>类型工具</summary>
        </member>
        <member name="M:DmFramework.TypeHelper.CreateInstance(System.String)">
            <summary>创建目标类型的实例(要求有默认构造器)</summary>
            <param name="targetType">目标类型</param>
            <returns>新的对象实例</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.CreateInstance(System.Type)">
            <summary>创建目标类型的实例(要求有默认构造器)</summary>
            <param name="targetType">目标类型</param>
            <returns>新的对象实例</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.InvokeInstanceMethod(System.Object,System.String,System.Object[])">
            <summary>调用目标对象的指定实例方法</summary>
            <param name="target">目标对象</param>
            <param name="name">方法名称</param>
            <param name="args">参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>调用目标类型的指定静态方法</summary>
            <param name="target">目标类型</param>
            <param name="name">方法名称</param>
            <param name="args">参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.GetMethodInfo(System.Type,System.String,System.Boolean,System.Type[])">
            <summary>获取方法</summary>
            <param name="type">目标类型</param>
            <param name="name">方法名称</param>
            <param name="isStatic">是否为静态</param>
            <param name="types">参数类型</param>
            <returns>方法</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.GetInstanceField(System.Object,System.String)">
            <summary>获取目标对象的实例字段值</summary>
            <param name="target">目标对象</param>
            <param name="name">字段名称</param>
            <returns>字段值</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.GetStaticField(System.Type,System.String)">
            <summary>获取目标类型的指定静态字段值</summary>
            <param name="target">目标类型</param>
            <param name="name">字段名称</param>
            <returns>字段值</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.SetInstanceField(System.Object,System.String,System.Object)">
            <summary>设置目标对象的实例字段值</summary>
            <param name="target">目标对象</param>
            <param name="name">字段名称</param>
            <param name="val">值</param>
        </member>
        <member name="M:DmFramework.TypeHelper.SetStaticField(System.Type,System.String,System.Object)">
            <summary>设置目标类型的指定静态字段值</summary>
            <param name="target">目标类型</param>
            <param name="name">字段名称</param>
            <param name="val">值</param>
        </member>
        <member name="M:DmFramework.TypeHelper.GetFieldInfo(System.Type,System.String,System.Boolean)">
            <summary>获取字段</summary>
            <param name="type">类型</param>
            <param name="name">字段名称</param>
            <param name="isStatic">是否为静态</param>
            <returns>字段</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.GetInstanceProperty(System.Object,System.String)">
            <summary>获取目标对象的实例属性值</summary>
            <param name="target">目标对象</param>
            <param name="name">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.GetStaticProperty(System.Type,System.String)">
            <summary>获取目标类型的静态属性值</summary>
            <param name="target">目标类型</param>
            <param name="name">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.SetInstanceProperty(System.Object,System.String,System.Object)">
            <summary>设置目标对象的实例属性值</summary>
            <param name="target">目标对象</param>
            <param name="name">属性名称</param>
            <param name="val">值</param>
        </member>
        <member name="M:DmFramework.TypeHelper.SetStaticProperty(System.Type,System.String,System.Object)">
            <summary>设置目标类型的静态属性值</summary>
            <param name="target">目标类型</param>
            <param name="name">属性名称</param>
            <param name="val">值</param>
        </member>
        <member name="M:DmFramework.TypeHelper.GetPropertyInfo(System.Type,System.String,System.Boolean)">
            <summary>获取属性</summary>
            <param name="type">类型</param>
            <param name="name">属性名称</param>
            <param name="isStatic">是否为静态</param>
            <returns>属性</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.GetIndexer(System.Object,System.Object[])">
            <summary>获取指定对象的索引值</summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.TypeHelper.SetIndexer(System.Object,System.Object,System.Object[])">
            <summary>设置指定对象的索引值</summary>
            <param name="target">目标对象</param>
            <param name="val">值</param>
            <param name="index">索引</param>
        </member>
        <member name="M:DmFramework.TypeHelper.GetIndexerInfo(System.Type,System.Type[])">
            <summary>获取索引器</summary>
            <param name="type">类型</param>
            <param name="types">索引参数</param>
            <returns>索引化属性</returns>
        </member>
        <member name="M:DmFramework.TypeHelper.GetTypesArray(System.Object[])">
            <summary>获取一组对象的类型数组</summary>
            <param name="array">对象组</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Web.ControlHelper">
            <summary>控件助手</summary>
        </member>
        <member name="M:DmFramework.Web.ControlHelper.FindControl``1(System.Web.UI.Control,System.String)">
            <summary>查找指定类型的子孙控件</summary>
            <typeparam name="T">目标控件类型</typeparam>
            <param name="control">父控件，从该控件开始向下进行广度搜索</param>
            <param name="id">控件ID，不指定表示不限制</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.ControlHelper.FindControlUp``1(System.Web.UI.Control,System.String)">
            <summary>查找指定控件附近的控件，向上搜索</summary>
            <typeparam name="T">目标控件类型</typeparam>
            <param name="control">指定控件</param>
            <param name="id">控件ID，不指定表示不限制</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.ControlHelper.FindControlInPage``1(System.String)">
            <summary>在页面查找指定ID的控件，采用反射字段的方法，避免遍历Controls引起子控件构造</summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.ControlHelper.FindControlByField``1(System.Web.UI.Control,System.String)">
            <summary>根据字段查找指定ID的控件，采用反射字段的方法，避免遍历Controls引起子控件构造</summary>
            <typeparam name="T"></typeparam>
            <param name="control">容器</param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.ControlHelper.FindEventHandler(System.Web.UI.Control,System.String)">
            <summary>查找控件的事件</summary>
            <param name="control"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Web.Css">
            <summary>CSS样式</summary>
        </member>
        <member name="T:DmFramework.Web.HttpState`1">
            <summary>Http状态，经常用于登录用户的Current</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:DmFramework.Web.HttpState`1.EntityToCookie">
            <summary>实体转为Cookie的方法</summary>
        </member>
        <member name="F:DmFramework.Web.HttpState`1.CookieToEntity">
            <summary>Cookie转为实体的方法</summary>
        </member>
        <member name="F:DmFramework.Web.HttpState`1.Save">
            <summary>自定义保存</summary>
        </member>
        <member name="F:DmFramework.Web.HttpState`1.Load">
            <summary>自定义加载</summary>
        </member>
        <member name="M:DmFramework.Web.HttpState`1.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Web.HttpState`1.#ctor(System.String)">
            <summary>初始化</summary>
            <param name="key"></param>
        </member>
        <member name="M:DmFramework.Web.HttpState`1.Get(System.Converter{System.Web.HttpCookie,`0})">
            <summary>获取Http状态</summary>
            <param name="conv">把Cookie转为实体的转换器</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.HttpState`1.Get(System.Converter{System.Web.HttpCookie,`0},System.Converter{DmFramework.Web.HttpState{`0},`0})">
            <summary>获取Http状态</summary>
            <param name="conv">把Cookie转为实体的转换器</param>
            <param name="load">自定义加载方法</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.HttpState`1.Set(`0,System.Converter{`0,System.Web.HttpCookie})">
            <summary>设置Http状态</summary>
            <param name="entity"></param>
            <param name="conv">把实体转换为Cookie的转换器</param>
        </member>
        <member name="M:DmFramework.Web.HttpState`1.Set(`0,System.Converter{`0,System.Web.HttpCookie},System.Converter{`0,System.Boolean})">
            <summary>设置Http状态</summary>
            <param name="entity">实体</param>
            <param name="conv">把实体转换为Cookie的转换器</param>
            <param name="save">自定义保存</param>
        </member>
        <member name="M:DmFramework.Web.HttpState`1.GetCache(System.String)">
            <summary>从全局Cache中获取数据</summary>
            <param name="sessionID">使用SessionID作为数据在全局Cache中的标识</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.HttpState`1.SetCache(System.String,`0)">
            <summary>设置数据到全局Cache</summary>
            <param name="sessionID">使用SessionID作为数据在全局Cache中的标识</param>
            <param name="entity"></param>
        </member>
        <member name="P:DmFramework.Web.HttpState`1.Key">
            <summary>键值</summary>
        </member>
        <member name="P:DmFramework.Web.HttpState`1.EnableSession">
            <summary>使用Session</summary>
        </member>
        <member name="P:DmFramework.Web.HttpState`1.EnableHttpItems">
            <summary>使用HttpItems</summary>
        </member>
        <member name="P:DmFramework.Web.HttpState`1.EnableCache">
            <summary>使用Cache</summary>
        </member>
        <member name="P:DmFramework.Web.HttpState`1.EnableCookie">
            <summary>使用Cookie</summary>
        </member>
        <member name="P:DmFramework.Web.HttpState`1.Http">
            <summary>Http上下文</summary>
        </member>
        <member name="P:DmFramework.Web.HttpState`1.Current">
            <summary>获取当前Http状态保存的对象</summary>
        </member>
        <member name="T:DmFramework.Web.HttpStream">
            <summary>HTTP输入输出流</summary>
        </member>
        <member name="M:DmFramework.Web.HttpStream.#ctor(System.Web.HttpContext)">
            <summary>初始化</summary>
            <param name="context"></param>
        </member>
        <member name="M:DmFramework.Web.HttpStream.Flush">
            <summary>已重载。</summary>
        </member>
        <member name="P:DmFramework.Web.HttpStream.Context">
            <summary>HTTP上下文</summary>
        </member>
        <member name="P:DmFramework.Web.HttpStream.RemoteEndPoint">
            <summary>远程地址</summary>
        </member>
        <member name="T:DmFramework.Web.Js">
            <summary>JavaScript脚本。提供Js的基本操作，同时也支持继承扩展</summary>
            <remarks>
            提供静态成员<see cref="P:DmFramework.Web.Js.Current"/>，以及常用的<see cref="M:DmFramework.Web.Js.WriteScript(System.String,System.Boolean)"/>和<see cref="M:DmFramework.Web.Js.Alert(System.String,System.Object[])"/>
            </remarks>
        </member>
        <member name="T:DmFramework.Web.IJs">
            <summary>JavaScript脚本接口</summary>
        </member>
        <member name="M:DmFramework.Web.IJs.WriteScript(System.String,System.Boolean)">
            <summary>输出脚本</summary>
            <param name="script"></param>
            <param name="addScriptTags"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.IJs.Alert(System.String,System.Object[])">
            <summary>弹出页面提示</summary>
            <param name="format">格式化字符串</param>
            <param name="args">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.IJs.End">
            <summary>停止输出</summary>
        </member>
        <member name="M:DmFramework.Web.IJs.Back">
            <summary>后退一步</summary>
        </member>
        <member name="M:DmFramework.Web.IJs.Refresh">
            <summary>刷新该页面</summary>
        </member>
        <member name="M:DmFramework.Web.IJs.Redirect(System.String)">
            <summary>重定向到另外的页面</summary>
            <param name="url"></param>
        </member>
        <member name="M:DmFramework.Web.IJs.Close">
            <summary>关闭当前页面</summary>
        </member>
        <member name="M:DmFramework.Web.Js.Encode(System.String)">
            <summary>Js脚本编码</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.Js.WriteScript(System.String,System.Boolean)">
            <summary>输出脚本</summary>
            <param name="script"></param>
            <param name="addScriptTags"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.Js.Alert(System.String,System.Object[])">
            <summary>弹出页面提示</summary>
            <param name="format">格式化字符串</param>
            <param name="args">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.Js.DmFramework#Web#IJs#WriteScript(System.String,System.Boolean)">
            <summary>输出脚本</summary>
            <param name="script"></param>
            <param name="addScriptTags"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.Js.OnWriteScript(System.String,System.Boolean)">
            <summary>输出脚本</summary>
            <param name="script"></param>
            <param name="addScriptTags"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.Js.DmFramework#Web#IJs#Alert(System.String,System.Object[])">
            <summary>弹出页面提示</summary>
            <param name="format">格式化字符串</param>
            <param name="args">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.Js.OnAlert(System.String)">
            <summary>弹出页面提示</summary>
            <param name="msg">字符串</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.Js.End">
            <summary>停止输出</summary>
        </member>
        <member name="M:DmFramework.Web.Js.Back">
            <summary>后退一步</summary>
        </member>
        <member name="M:DmFramework.Web.Js.Refresh">
            <summary>刷新该页面</summary>
        </member>
        <member name="M:DmFramework.Web.Js.Redirect(System.String)">
            <summary>重定向到另外的页面</summary>
            <param name="url"></param>
        </member>
        <member name="M:DmFramework.Web.Js.Close">
            <summary>关闭当前页面</summary>
        </member>
        <member name="P:DmFramework.Web.Js.Current">
            <summary>当前实现</summary>
        </member>
        <member name="T:DmFramework.Web.CompressionModule">
            <summary>页面压缩模块</summary>
        </member>
        <member name="M:DmFramework.Web.CompressionModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>初始化模块，准备拦截请求。</summary>
            <param name="context"></param>
        </member>
        <member name="M:DmFramework.Web.CompressionModule.IsEncodingAccepted(System.String)">
            <summary>检查请求头，确认客户端是否支持压缩编码</summary>
        </member>
        <member name="M:DmFramework.Web.CompressionModule.SetEncoding(System.String)">
            <summary>添加压缩编码到响应头</summary>
            <param name="encoding"></param>
        </member>
        <member name="T:DmFramework.Web.ErrorModule">
            <summary>全局错误处理模块</summary>
        </member>
        <member name="M:DmFramework.Web.ErrorModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>初始化模块，准备拦截请求。</summary>
            <param name="context"></param>
        </member>
        <member name="M:DmFramework.Web.ErrorModule.NeedProcess(System.Exception)">
            <summary>是否需要处理</summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.ErrorModule.OnError(System.Object,System.EventArgs)">
            <summary>错误处理方法</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DmFramework.Web.ErrorModule.OnErrorComplete">
            <summary>错误处理完成后执行。一般用于输出友好错误信息</summary>
        </member>
        <member name="T:DmFramework.Web.IErrorInfoProvider">
            <summary>错误信息提供者。用于为错误处理模块提供扩展信息</summary>
        </member>
        <member name="M:DmFramework.Web.IErrorInfoProvider.AddInfo(System.Exception,System.Text.StringBuilder)">
            <summary>为指定错误添加附加错误信息。需要自己格式化并加换行</summary>
            <param name="ex"></param>
            <param name="builder"></param>
        </member>
        <member name="T:DmFramework.Web.HttpModuleLoader">
            <summary>子目录HttpModule加载模块。用于加载子目录web.config中配置的IHttpModule。</summary>
            <remarks>
            将来的系统设计将会朝着模块化的方向发展，每个模块一个独立的子目录，最好包括配置文件的所有内容也一起在里面
            </remarks>
        </member>
        <member name="M:DmFramework.Web.HttpModuleLoader.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>初始化模块，准备拦截请求。</summary>
            <param name="context"></param>
        </member>
        <member name="M:DmFramework.Web.HttpModuleLoader.Process">
            <summary>根据路径判断是否加载</summary>
        </member>
        <member name="T:DmFramework.Web.RunTimeModule">
            <summary>页面执行时间模块</summary>
        </member>
        <member name="M:DmFramework.Web.RunTimeModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>初始化模块，准备拦截请求。</summary>
            <param name="context"></param>
        </member>
        <member name="M:DmFramework.Web.RunTimeModule.OnInit">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Web.RunTimeModule.WriteRunTime(System.Object,System.EventArgs)">
            <summary>输出运行时间</summary>
        </member>
        <member name="M:DmFramework.Web.RunTimeModule.Render">
            <summary>输出</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Web.RunTimeModule.Context">
            <summary>上下文</summary>
        </member>
        <member name="P:DmFramework.Web.RunTimeModule.Request">
            <summary>请求</summary>
        </member>
        <member name="P:DmFramework.Web.RunTimeModule.Response">
            <summary>响应</summary>
        </member>
        <member name="P:DmFramework.Web.RunTimeModule.IsWriteRunTime">
            <summary>当前请求是否输出执行时间</summary>
            <remarks>如果要所有请求不输出执行时间，则从配置中移除当前模块</remarks>
        </member>
        <member name="P:DmFramework.Web.RunTimeModule.HasWrite">
            <summary>当前请求是否已经输出执行时间</summary>
        </member>
        <member name="P:DmFramework.Web.RunTimeModule.RunTimeFormat">
            <summary>执行时间字符串</summary>
        </member>
        <member name="T:DmFramework.Web.SystemStartModule">
            <summary>系统启动模块</summary>
        </member>
        <member name="M:DmFramework.Web.SystemStartModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>初始化模块，准备拦截请求。</summary>
            <param name="context"></param>
        </member>
        <member name="M:DmFramework.Web.SystemStartModule.CheckStarting">
            <summary>检查系统是否启动中，如果启动中，则显示进度条</summary>
        </member>
        <member name="T:DmFramework.Web.WebClientX">
            <summary>扩展的Web客户端</summary>
        </member>
        <member name="M:DmFramework.Web.WebClientX.GetWebRequest(System.Uri)">
            <summary>重写获取请求</summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebClientX.GetWebResponse(System.Net.WebRequest)">
            <summary>重写获取响应</summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebClientX.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:DmFramework.Web.WebClientX.#ctor(System.Boolean,System.Boolean)">
            <summary>初始化常用的东西</summary>
            <param name="ie">是否模拟ie</param>
            <param name="iscompress">是否压缩</param>
        </member>
        <member name="P:DmFramework.Web.WebClientX.Cookie">
            <summary>Cookie容器</summary>
        </member>
        <member name="P:DmFramework.Web.WebClientX.Timeout">
            <summary>超时，毫秒</summary>
        </member>
        <member name="P:DmFramework.Web.WebClientX.AutomaticDecompression">
            <summary>自动解压缩模式。</summary>
        </member>
        <member name="T:DmFramework.Web.WebDownload">
            <summary>提供网页下载支持，在服务端把一个数据流作为附件传给浏览器，带有断点续传和限速的功能</summary>
        </member>
        <member name="M:DmFramework.Web.WebDownload.ParseMode(System.String)">
            <summary>分析模式</summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebDownload.#ctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:DmFramework.Web.WebDownload.#ctor(System.IO.Stream)">
            <summary>构造函数</summary>
            <param name="stream"></param>
        </member>
        <member name="M:DmFramework.Web.WebDownload.#ctor(System.String,System.Text.Encoding)">
            <summary>构造函数</summary>
            <param name="html"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:DmFramework.Web.WebDownload.Render">
            <summary>输出数据流</summary>
        </member>
        <member name="P:DmFramework.Web.WebDownload.Stream">
            <summary>数据流</summary>
        </member>
        <member name="P:DmFramework.Web.WebDownload.FileName">
            <summary>属性说明</summary>
        </member>
        <member name="P:DmFramework.Web.WebDownload.ContentType">
            <summary>内容类型</summary>
        </member>
        <member name="P:DmFramework.Web.WebDownload.Mode">
            <summary>附件配置模式，是在浏览器直接打开，还是提示另存为</summary>
        </member>
        <member name="P:DmFramework.Web.WebDownload.Speed">
            <summary>速度，每响应一个包后睡眠的毫秒数，0表示不限制</summary>
        </member>
        <member name="T:DmFramework.Web.WebDownload.DispositionMode">
            <summary>附件配置模式</summary>
        </member>
        <member name="F:DmFramework.Web.WebDownload.DispositionMode.Inline">
            <summary>内联模式，在浏览器直接打开</summary>
        </member>
        <member name="F:DmFramework.Web.WebDownload.DispositionMode.Attachment">
            <summary>附件模式，提示另存为</summary>
        </member>
        <member name="T:DmFramework.Web.WebHelper">
            <summary>网页工具类</summary>
        </member>
        <member name="M:DmFramework.Web.WebHelper.WriteScript(System.String)">
            <summary>输出脚本</summary>
            <param name="script"></param>
        </member>
        <member name="M:DmFramework.Web.WebHelper.Alert(System.String)">
            <summary>弹出页面提示</summary>
            <param name="msg"></param>
        </member>
        <member name="M:DmFramework.Web.WebHelper.AlertAndEnd(System.String)">
            <summary>弹出页面提示并停止输出后退一步！</summary>
            <param name="msg"></param>
        </member>
        <member name="M:DmFramework.Web.WebHelper.AlertAndRefresh(System.String)">
            <summary>弹出页面提示，并刷新该页面</summary>
            <param name="msg"></param>
        </member>
        <member name="M:DmFramework.Web.WebHelper.AlertAndRedirect(System.String,System.String)">
            <summary>弹出页面提示并重定向到另外的页面</summary>
            <param name="msg"></param>
            <param name="url"></param>
        </member>
        <member name="M:DmFramework.Web.WebHelper.AlertAndClose(System.String)">
            <summary>弹出页面提示并关闭当前页面</summary>
            <param name="msg"></param>
        </member>
        <member name="M:DmFramework.Web.WebHelper.CheckEmptyAndFocus(System.Web.UI.Control,System.String)">
            <summary>检查控件值是否为空，若为空，显示错误信息，并聚焦到控件上</summary>
            <param name="control">要检查的控件</param>
            <param name="errmsg">错误信息。若为空，将使用ToolTip</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebHelper.ExportExcel(System.Web.UI.WebControls.GridView,System.String,System.Int32)">
            <summary>导出Excel</summary>
            <param name="gv"></param>
            <param name="filename"></param>
            <param name="max"></param>
        </member>
        <member name="M:DmFramework.Web.WebHelper.ExportExcel(System.Web.UI.WebControls.GridView,System.String,System.Int32,System.Text.Encoding)">
            <summary>导出Excel</summary>
            <param name="gv"></param>
            <param name="filename"></param>
            <param name="max"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:DmFramework.Web.WebHelper.RequestInt(System.String)">
            <summary>获取整型参数</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebHelper.RequestBool(System.String)">
            <summary>接收布尔值</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebHelper.RequestDateTime(System.String)">
            <summary>接收时间</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebHelper.RequestDouble(System.String)">
            <summary>接收Double</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebHelper.ConvertInt(System.String)">
            <summary>字符转换为数字</summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebHelper.ConvertBool(System.String)">
            <summary>字符转换为布尔</summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebHelper.ConvertDateTime(System.String)">
            <summary>字符转换为时间</summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Web.WebHelper.ConvertDouble(System.String)">
            <summary>字符转换</summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Web.WebHelper.UserHost">
            <summary>用户主机</summary>
        </member>
        <member name="T:DmFramework.Xml.ExtendData">
            <summary>使用Xml来存储字典扩展数据，不怕序列化和混淆</summary>
        </member>
        <member name="M:DmFramework.Xml.ExtendData.GetItem``1(System.String)">
            <summary>取得指定键的强类型值</summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.ExtendData.SetItem(System.String,System.Object)">
            <summary>设置类型</summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Xml.ExtendData.Contain(System.String)">
            <summary>包含指定键</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.ExtendData.Remove(System.String)">
            <summary>移除指定项</summary>
            <param name="key"></param>
        </member>
        <member name="M:DmFramework.Xml.ExtendData.FromXml(System.String)">
            <summary>从Xml转为具体数据</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.ExtendData.ToXml">
            <summary>转为Xml</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Xml.ExtendData.Data">
            <summary>数据</summary>
        </member>
        <member name="P:DmFramework.Xml.ExtendData.XmlKeys">
            <summary>Xml数据键值</summary>
        </member>
        <member name="P:DmFramework.Xml.ExtendData.Root">
            <summary>根名称</summary>
        </member>
        <member name="P:DmFramework.Xml.ExtendData.Item(System.String)">
            <summary>读取设置数据</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Xml.ExtendData.IsEmpty">
            <summary>是否为空</summary>
        </member>
        <member name="T:DmFramework.Xml.SerializableDictionary`2">
            <summary>支持Xml序列化的泛型字典类 </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:DmFramework.Xml.SerializableDictionary`2.#ctor">
            <summary></summary>
        </member>
        <member name="M:DmFramework.Xml.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary></summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:DmFramework.Xml.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>读取Xml</summary>
            <param name="reader">Xml读取器</param>
        </member>
        <member name="M:DmFramework.Xml.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>写入Xml</summary>
            <param name="writer">Xml写入器</param>
        </member>
        <member name="T:DmFramework.Xml.XmlConfigFileAttribute">
            <summary>Xml配置文件特性</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlConfigFileAttribute.#ctor(System.String)">
            <summary>指定配置文件名</summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DmFramework.Xml.XmlConfigFileAttribute.#ctor(System.String,System.Int32)">
            <summary>指定配置文件名和重新加载时间（毫秒）</summary>
            <param name="fileName"></param>
            <param name="reloadTime"></param>
        </member>
        <member name="P:DmFramework.Xml.XmlConfigFileAttribute.FileName">
            <summary>配置文件名</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlConfigFileAttribute.ReloadTime">
            <summary>重新加载时间。单位：毫秒</summary>
        </member>
        <member name="T:DmFramework.Xml.XmlEntity`1">
            <summary>Xml实体基类</summary>
            <remarks>主要提供数据实体和XML文件之间的映射功能</remarks>
        </member>
        <member name="M:DmFramework.Xml.XmlEntity`1.Load(System.String)">
            <summary>从一段XML文本中加载对象</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlEntity`1.LoadFile(System.String)">
            <summary>从一个XML文件中加载对象</summary>
            <param name="filename">若为空，则默认为类名加xml后缀</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlEntity`1.ToXml">
            <summary>输出XML</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlEntity`1.ToInnerXml">
            <summary>输出内部XML</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlEntity`1.Save(System.String)">
            <summary>保存到文件中</summary>
            <param name="filename">若为空，则默认为类名加xml后缀</param>
        </member>
        <member name="T:DmFramework.Xml.XmlHelper">
            <summary>Xml辅助类</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXml(System.Object)">
            <summary>序列化为Xml</summary>
            <param name="obj">要序列化为Xml的对象</param>
            <returns>Xml字符串</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXml(System.Object,System.Text.Encoding,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>序列化为Xml字符串</summary>
            <param name="obj">要序列化为Xml的对象</param>
            <param name="encoding">编码</param>
            <param name="prefix">前缀</param>
            <param name="ns">命名空间，设为0长度字符串可去掉默认命名空间xmlns:xsd和xmlns:xsi</param>
            <param name="includeDeclaration">是否包含Xml声明</param>
            <param name="attachCommit">是否附加注释，附加成员的Description和DisplayName注释</param>
            <returns>Xml字符串</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXml(System.Object,System.IO.Stream,System.Text.Encoding,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>序列化为Xml数据流</summary>
            <param name="obj">要序列化为Xml的对象</param>
            <param name="stream">目标数据流</param>
            <param name="encoding">编码</param>
            <param name="prefix">前缀</param>
            <param name="ns">命名空间，设为0长度字符串可去掉默认命名空间xmlns:xsd和xmlns:xsi</param>
            <param name="includeDeclaration">是否包含Xml声明 &lt;?xml version="1.0" encoding="utf-8"?&gt;</param>
            <param name="attachCommit">是否附加注释，附加成员的Description和DisplayName注释</param>
            <returns>Xml字符串</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXmlFile(System.Object,System.String,System.Text.Encoding,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>序列化为Xml文件</summary>
            <param name="obj">要序列化为Xml的对象</param>
            <param name="file">目标Xml文件</param>
            <param name="encoding">编码</param>
            <param name="prefix">前缀</param>
            <param name="ns">命名空间，设为0长度字符串可去掉默认命名空间xmlns:xsd和xmlns:xsi</param>
            <param name="includeDeclaration">是否包含Xml声明 &lt;?xml version="1.0" encoding="utf-8"?&gt;</param>
            <param name="attachCommit">是否附加注释，附加成员的Description和DisplayName注释</param>
            <returns>Xml字符串</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXmlEntity``1(System.String)">
            <summary>字符串转为Xml实体对象</summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="xml">Xml字符串</param>
            <returns>Xml实体对象</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXmlEntity(System.String,System.Type)">
            <summary>字符串转为Xml实体对象</summary>
            <param name="xml">Xml字符串</param>
            <param name="type">实体类型</param>
            <returns>Xml实体对象</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXmlEntity``1(System.IO.Stream,System.Text.Encoding)">
            <summary>数据流转为Xml实体对象</summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="stream">数据流</param>
            <param name="encoding">编码</param>
            <returns>Xml实体对象</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXmlEntity(System.IO.Stream,System.Type,System.Text.Encoding)">
            <summary>数据流转为Xml实体对象</summary>
            <param name="stream">数据流</param>
            <param name="type">实体类型</param>
            <param name="encoding">编码</param>
            <returns>Xml实体对象</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXmlFileEntity``1(System.String,System.Text.Encoding)">
            <summary>Xml文件转为Xml实体对象</summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="file">Xml文件</param>
            <param name="encoding">编码</param>
            <returns>Xml实体对象</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.TrimPreamble(System.Text.Encoding)">
            <summary>删除字节序，硬编码支持utf-8、utf-32、Unicode三种</summary>
            <param name="encoding">原始编码</param>
            <returns>删除字节序后的编码</returns>
        </member>
        <member name="F:DmFramework.Xml.XmlHelper.typeHasCommit">
            <summary>是否拥有注释</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.AttachCommit(System.Xml.XmlNode,System.Type)">
            <summary>附加注释</summary>
            <param name="node"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXmlDictionary(System.String)">
            <summary>简单Xml转为字符串字典</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlHelper.ToXml(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>字符串字典转为Xml</summary>
            <param name="dic"></param>
            <param name="rootName"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Xml.XmlReaderWriterSettings">
            <summary>Xml序列化设置</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderWriterSettings.#ctor">
            <summary>实例化Xml序列化设置</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlReaderWriterSettings.MemberAsAttribute">
            <summary>成员作为属性</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlReaderWriterSettings.IgnoreDefault">
            <summary>忽略默认</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlReaderWriterSettings.DateTimeMode">
            <summary>指定日期时间输出成什么时间,本地还是UTC时间,默认是UTC时间</summary>
        </member>
        <member name="T:DmFramework.Xml.XmlReaderX">
            <summary>Xml读取器</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.#ctor(System.String)">
            <summary>使用xml字符串初始化</summary>
            <param name="xml"></param>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadString">
            <summary>从当前流中读取一个字符串。字符串有长度前缀，一次 7 位地被编码为整数。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadChars(System.Int32)">
            <summary>从当前流中读取 count 个字符，以字符数组的形式返回数据，并根据所使用的 Encoding 和从流中读取的特定字符，提升当前位置。</summary>
            <param name="count">要读取的字符数。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadChar">
            <summary>从当前流中读取下一个字符，并根据所使用的 Encoding 和从流中读取的特定字符，提升流的当前位置。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadDateTime">
            <summary>读取一个时间日期</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadValue(System.Type,System.Object@)">
            <summary>尝试读取值类型数据，返回是否读取成功</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.OnReadType">
            <summary>读对象类型</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadDictionary(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取字典类型对象</summary>
            <param name="type">类型</param>
            <param name="value">对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadDictionaryEntry(System.Type,System.Type,System.Collections.DictionaryEntry@,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取字典项</summary>
            <param name="keyType">键类型</param>
            <param name="valueType">值类型</param>
            <param name="value">字典项</param>
            <param name="index">元素序号</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadEnumerable(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取枚举</summary>
            <remarks>重点和难点在于如果得知枚举元素类型，这里假设所有元素类型一致，否则实在无法处理</remarks>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadItem(System.Type,System.Object@,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取枚举项</summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="index">元素序号</param>
            <param name="callback">处理元素的方法</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.OnReadObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取目标对象指定成员的值，通过委托方法递归处理成员</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadRefObject(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>尝试读取引用对象</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.GetMemberBeforeRead(System.Type,System.Object,DmFramework.Serialization.IObjectMemberInfo[],System.Int32)">
            <summary>读取成员之前获取要读取的成员，默认是index处的成员，实现者可以重载，改变当前要读取的成员，如果当前成员不在数组里面，则实现者自己跳到下一个可读成员。</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="members">可匹配成员数组</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.OnReadMember(System.Type,System.Object@,DmFramework.Serialization.IObjectMemberInfo,System.Int32,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取对象成员</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="member">成员</param>
            <param name="index">成员索引</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.OnReadObjRefIndex">
            <summary>读取对象引用计数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadUnKnown(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取未知对象（其它所有方法都无法识别的对象），采用BinaryFormatter或者XmlSerialization</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.SkipEmpty">
            <summary>当前节点是否空。如果是空节点，则读一次，让指针移到下一个元素</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadLengths">
            <summary>读取多维数组相关参数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.Backup">
            <summary>备份当前环境，用于临时切换数据流等</summary>
            <returns>本次备份项集合</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.Restore">
            <summary>恢复最近一次备份</summary>
            <returns>本次还原项集合</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlReaderX.ReadSerializable(System.Type,System.Object@,DmFramework.Serialization.ReadObjectCallback)">
            <summary>读取实现了可序列化接口的对象</summary>
            <param name="type">要读取的对象类型</param>
            <param name="value">要读取的对象</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="P:DmFramework.Xml.XmlReaderX.Reader">
            <summary>读取器</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlReaderX.Stream">
            <summary>数据流。更改数据流后，重置Reader为空，以使用新的数据流</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlReaderX.EndOfStream">
            <summary>获取一个值，该值表示当前的流位置是否在流的末尾。</summary>
            <returns>如果当前的流位置在流的末尾，则为 true；否则为 false。</returns>
        </member>
        <member name="P:DmFramework.Xml.XmlReaderX.RootName">
            <summary>根元素名</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlReaderX.Lengths">
            <summary>多维数组长度</summary>
        </member>
        <member name="T:DmFramework.Xml.XmlWriterX">
            <summary>Xml写入器</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.OnWriteLiteral(System.String)">
            <summary>输出字符串字面值,不做编码处理</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.Write(System.DateTime)">
            <summary>将一个时间日期写入</summary>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.WriteValue(System.Object,System.Type)">
            <summary>写入值类型，只能识别基础类型，对于不能识别的类型，方法返回false</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.WriteObjectType(System.Type)">
            <summary>写对象类型</summary>
            <param name="type"></param>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.WriteKeyValue(System.Collections.DictionaryEntry,System.Type,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入字典项 </summary>
            <param name="value">对象</param>
            <param name="keyType">键类型</param>
            <param name="valueType">值类型</param>
            <param name="index">成员索引</param>
            <param name="callback">使用指定委托方法处理复杂数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.WriteItem(System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入枚举项</summary>
            <param name="value">对象</param>
            <param name="type">类型</param>
            <param name="index">成员索引</param>
            <param name="callback">使用指定委托方法处理复杂数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.WriteEnumerable(System.Collections.IEnumerable,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入枚举数据，复杂类型使用委托方法进行处理</summary>
            <param name="value">对象</param>
            <param name="type">类型</param>
            <param name="callback">使用指定委托方法处理复杂数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.OnWriteObject(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>已重载。写入文档的开头和结尾</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.OnWriteMember(System.String,System.Object,System.Type,System.Int32,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入对象成员</summary>
            <param name="name">成员名字</param>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="index">成员索引</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.OnWriteObjRefIndex(System.Int32)">
            <summary>写对象引用计数</summary>
            <param name="index"></param>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.WriteUnKnown(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入未知对象（其它所有方法都无法识别的对象），采用BinaryFormatter或者XmlSerialization</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.Flush">
            <summary>刷新缓存中的数据</summary>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.WriteLengths(System.String)">
            <summary>写入长度。多维数组用</summary>
            <param name="lengths"></param>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.Backup">
            <summary>备份当前环境，用于临时切换数据流等</summary>
            <returns>本次备份项集合</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.Restore">
            <summary>恢复最近一次备份</summary>
            <returns>本次还原项集合</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.WriteSerializable(System.Object,System.Type,DmFramework.Serialization.WriteObjectCallback)">
            <summary>写入实现了可序列化接口的对象</summary>
            <param name="value">要写入的对象</param>
            <param name="type">要写入的对象类型，如果type等于DataTable，需设置DataTable的名称</param>
            <param name="callback">处理成员的方法</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.OnGetMembers(System.Type,System.Object)">
            <summary>获取需要序列化的成员（属性或字段）。在序列化为属性时，需要排列成员，先拍属性，否则会有问题</summary>
            <param name="type">指定类型</param>
            <param name="value">对象</param>
            <returns>需要序列化的成员</returns>
        </member>
        <member name="M:DmFramework.Xml.XmlWriterX.IsAttributeType(System.Type)">
            <summary>是否可以作为属性写入Xml的类型</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Xml.XmlWriterX.Writer">
            <summary>写入器</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlWriterX.Stream">
            <summary>数据流。更改数据流后，重置Writer为空，以使用新的数据流</summary>
        </member>
        <member name="P:DmFramework.Xml.XmlWriterX.RootName">
            <summary>根元素名</summary>
        </member>
        <member name="T:DmFramework.Xml.HmXmlReaderX">
            <summary>Xml读取器</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.#ctor">
            <summary>默认构造函数</summary>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.#ctor(System.Xml.XmlReaderSettings,System.Globalization.CultureInfo)">
            <summary>构造函数</summary>
            <param name="settings" type="System.Xml.XmlReaderSettings">
            <para></para>
            </param>
            <param name="cultureInfo" type="System.Globalization.CultureInfo">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）</param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.Open(System.IO.Stream)">
            <summary>Open the stream</summary>
            <param name = "stream"></param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.Open(System.String)">
            <summary>Open the Uri</summary>
            <param name="inputUri" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.Open(System.IO.TextReader)">
            <summary>Open the TextReader</summary>
            <param name="input" type="System.IO.TextReader">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.Close">
            <summary>Stream can be further used</summary>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.popCurrentReader">
            <summary>Remove one reader from stack and reset the current reader</summary>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.pushCurrentReader(System.Xml.XmlReader)">
            <summary>Add reader to stack and set it the current reader</summary>
            <param name = "reader"></param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.ReadElement">
            <summary>Reads next valid element</summary>
            <returns>null if nothing was found</returns>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.ReadSubElements">
            <summary>Reads all sub elements of the current element</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.GetAttributeAsString(System.String)">
            <summary>Reads attribute as String</summary>
            <param name = "attributeName"></param>
            <returns>null if nothing was found</returns>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.GetAttributeAsType(System.String)">
            <summary>Reads attribute and converts it to type</summary>
            <param name = "attributeName"></param>
            <returns>null if nothing found</returns>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.GetAttributeAsInt(System.String)">
            <summary>Reads attribute and converts it to integer</summary>
            <param name = "attributeName"></param>
            <returns>0 if nothing found</returns>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.GetAttributeAsArrayOfInt``1(System.String)">
            <summary>Reads attribute and converts it as array of Int32</summary>
            <param name = "attributeName"></param>
            <returns>empty array if nothing found</returns>
        </member>
        <member name="M:DmFramework.Xml.HmXmlReaderX.GetAttributeAsObject(System.String,System.Type)">
            <summary>Reads attribute and converts it to object of the expectedType</summary>
            <param name = "attributeName"></param>
            <param name = "expectedType"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Xml.HmXmlWriterX">
            <summary>Xml写入器</summary>
            <remarks></remarks>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.#ctor(System.Boolean)">
            <summary>默认构造函数</summary>
            <param name="omitXmlDeclaration" type="bool">
            <para>是否忽略Xml声明</para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.#ctor(System.Xml.XmlWriterSettings,System.Globalization.CultureInfo)">
            <summary>构造函数</summary>
            <param name="settings" type="System.Xml.XmlWriterSettings">
            <para>Xml写配置</para>
            </param>
            <param name="cultureInfo" type="System.Globalization.CultureInfo">
            <para>区域性特定的信息</para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.InitConverter">
            <summary>初始化转换器</summary>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）</param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.Open(System.String,System.Boolean,System.Boolean)">
            <summary>使用指定的文件名创建并开启一个新的 XmlWriter 实例。</summary>
            <param name="outputFileName" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.Open(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>使用指定的流创建并开启一个新的 XmlWriter 实例。</summary>
            <param name="output" type="System.IO.Stream">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.Open(System.IO.TextWriter,System.Boolean,System.Boolean)">
            <summary>使用指定的 TextWriter 创建并开启一个新的 XmlWriter 实例。</summary>
            <param name="output" type="System.IO.TextWriter">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.Open(System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <summary>使用指定的 StringBuilder 创建并开启一个新的 XmlWriter 实例。</summary>
            <param name="output" type="System.Text.StringBuilder">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteStartElement(System.String)">
            <summary>Writes start tag/node/element</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteStartElement(System.String,System.String)">
            <summary>Writes start tag/node/element</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteStartElement(System.String,System.String,System.String)">
            <summary>Writes start tag/node/element</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteEndElement">
            <summary>Writes end tag/node/element</summary>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.String)">
            <summary>编写具有指定的本地名称和值的元素</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="text" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.Type)">
            <summary>编写具有指定的本地名称和值的元素</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="type" type="System.Type">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.Int32)">
            <summary>编写具有指定的本地名称和值的元素</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="number" type="int">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement``1(System.String,``0[])">
            <summary>编写具有指定的本地名称和值的元素</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="array" type="T[]">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.Object)">
            <summary>编写具有指定的本地名称和值的元素</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="value" type="object">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.String,System.String)">
            <summary>使用指定的本地名称、命名空间 URI 和值编写元素</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="text" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.String,System.Type)">
            <summary>使用指定的本地名称、命名空间 URI 和值编写元素</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="type" type="System.Type">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.String,System.Int32)">
            <summary>使用指定的本地名称、命名空间 URI 和值编写元素</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="number" type="int">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement``1(System.String,System.String,``0[])">
            <summary>使用指定的本地名称、命名空间 URI 和值编写元素</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="array" type="T[]">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.String,System.Object)">
            <summary>使用指定的本地名称、命名空间 URI 和值编写元素</summary>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="value" type="object">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.String,System.String,System.String)">
            <summary>使用具有指定的前缀、本地名称、命名空间 URI 和值编写元素</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="text" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.String,System.String,System.Type)">
            <summary>使用具有指定的前缀、本地名称、命名空间 URI 和值编写元素</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="type" type="System.Type">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.String,System.String,System.Int32)">
            <summary>使用具有指定的前缀、本地名称、命名空间 URI 和值编写元素</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="number" type="int">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement``1(System.String,System.String,System.String,``0[])">
            <summary>使用具有指定的前缀、本地名称、命名空间 URI 和值编写元素</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="array" type="T[]">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteElement(System.String,System.String,System.String,System.Object)">
            <summary>使用具有指定的前缀、本地名称、命名空间 URI 和值编写元素</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="elementId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="value" type="object">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteStartAttribute(System.String)">
            <summary>用指定的本地名称编写特性的起点。</summary>
            <param name="attributeId" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteStartAttribute(System.String,System.String)">
            <summary>编写具有指定本地名称和命名空间 URI 的特性的起始内容。</summary>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>编写具有指定的前缀、本地名称和命名空间 URI 的特性的起始内容。</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteEndAttribute">
            <summary>关闭上一个 WriteStartAttribute 调用。</summary>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.String)">
            <summary>写出具有指定的本地名称和值的特性。</summary>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="text" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.Type)">
            <summary>写出具有指定的本地名称和值的特性。</summary>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="type" type="System.Type">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.Int32)">
            <summary>写出具有指定的本地名称和值的特性。</summary>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="number" type="int">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute``1(System.String,``0[])">
            <summary>写出具有指定的本地名称和值的特性。</summary>
            <param name = "attributeId"></param>
            <param name = "numbers"></param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.Object)">
            <summary>写出具有指定的本地名称和值的特性。</summary>
            <param name = "attributeId"></param>
            <param name = "value"></param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.String,System.String)">
            <summary>写入具有指定的本地名称、命名空间 URI 和值的特性。</summary>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="text" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.String,System.Type)">
            <summary>写入具有指定的本地名称、命名空间 URI 和值的特性。</summary>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="type" type="System.Type">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.String,System.Int32)">
            <summary>写入具有指定的本地名称、命名空间 URI 和值的特性。</summary>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="number" type="int">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute``1(System.String,System.String,``0[])">
            <summary>写入具有指定的本地名称、命名空间 URI 和值的特性。</summary>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="numbers" type="T[]">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.String,System.Object)">
            <summary>写入具有指定的本地名称、命名空间 URI 和值的特性。</summary>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="value" type="object">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.String,System.String,System.String)">
            <summary>写出具有指定的前缀、本地名称、命名空间 URI 和值的特性。</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="text" type="string">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.String,System.String,System.Type)">
            <summary>写出具有指定的前缀、本地名称、命名空间 URI 和值的特性。</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="type" type="System.Type">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.String,System.String,System.Int32)">
            <summary>写出具有指定的前缀、本地名称、命名空间 URI 和值的特性。</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="number" type="int">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute``1(System.String,System.String,System.String,``0[])">
            <summary>写出具有指定的前缀、本地名称、命名空间 URI 和值的特性。</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="array" type="T[]">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.WriteAttribute(System.String,System.String,System.String,System.Object)">
            <summary>写出具有指定的前缀、本地名称、命名空间 URI 和值的特性。</summary>
            <param name="prefix" type="string">
            <para></para>
            </param>
            <param name="attributeId" type="string">
            <para></para>
            </param>
            <param name="ns" type="string">
            <para></para>
            </param>
            <param name="value" type="object">
            <para></para>
            </param>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.Close">
            <summary></summary>
        </member>
        <member name="M:DmFramework.Xml.HmXmlWriterX.getArrayAsText``1(``0[])">
            <summary>Converts Int32[] {1,2,3,4,5} to text "1,2,3,4,5"</summary>
            <param name="values" type="int[]">
            <para></para>
            </param>
            <returns>A string value...</returns>
        </member>
        <member name="P:DmFramework.Xml.HmXmlWriterX.InnerWriter">
            <summary>内部XmlWriter实例</summary>
            <value>
            <para></para>
            </value>
            <remarks></remarks>
        </member>
    </members>
</doc>
