<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DmFramework.Data.v1.1</name>
    </assembly>
    <members>
        <member name="T:DmFramework.Data.Accessors.SerializationEntityAccessorBase">
            <summary>序列化实体访问器基类。用于二进制、Json、Xml三种序列化</summary>
        </member>
        <member name="T:DmFramework.Data.Accessors.EntityAccessorBase">
            <summary>实体访问器基类</summary>
        </member>
        <member name="T:DmFramework.Data.Accessors.IEntityAccessor">
            <summary>实体数据访问器接口</summary>
        </member>
        <member name="M:DmFramework.Data.Accessors.IEntityAccessor.SetConfig(System.String,System.Object)">
            <summary>设置参数。返回自身，方便链式写法。</summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.IEntityAccessor.SetConfig(DmFramework.Data.Accessors.EntityAccessorOptions,System.Object)">
            <summary>设置参数。返回自身，方便链式写法。</summary>
            <param name="option">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.IEntityAccessor.Read(DmFramework.Data.IEntity,DmFramework.Data.IEntityOperate)">
            <summary>外部=>实体，从外部读取信息并写入到实体对象</summary>
            <param name="entity">实体对象</param>
            <param name="eop">实体操作。为空时由内部构建，但可在遍历调用访问器时由外部构造一次传入，以提高性能。</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.IEntityAccessor.Write(DmFramework.Data.IEntity,DmFramework.Data.IEntityOperate)">
            <summary>实体=>外部，从实体对象读取信息并写入外部</summary>
            <param name="entity">实体对象</param>
            <param name="eop">实体操作。为空时由内部构建，但可在遍历调用访问器时由外部构造一次传入，以提高性能。</param>
        </member>
        <member name="P:DmFramework.Data.Accessors.IEntityAccessor.CanRead">
            <summary>是否支持从外部读取信息</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.IEntityAccessor.CanWrite">
            <summary>是否支持把信息写入到外部</summary>
        </member>
        <member name="E:DmFramework.Data.Accessors.IEntityAccessor.OnReadItem">
            <summary>从实体对象读取指定实体字段的信息后触发</summary>
        </member>
        <member name="E:DmFramework.Data.Accessors.IEntityAccessor.OnWriteItem">
            <summary>把指定实体字段的信息写入到实体对象后触发</summary>
        </member>
        <member name="E:DmFramework.Data.Accessors.IEntityAccessor.OnError">
            <summary>读写异常发生时触发</summary>
        </member>
        <member name="M:DmFramework.Data.Accessors.EntityAccessorBase.SetConfig(System.String,System.Object)">
            <summary>设置参数。返回自身，方便链式写法。</summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.EntityAccessorBase.DmFramework#Data#Accessors#IEntityAccessor#SetConfig(DmFramework.Data.Accessors.EntityAccessorOptions,System.Object)">
            <summary>设置参数。返回自身，方便链式写法。</summary>
            <param name="option">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.EntityAccessorBase.Read(DmFramework.Data.IEntity,DmFramework.Data.IEntityOperate)">
            <summary>外部=>实体，从外部读取信息并写入到实体对象</summary>
            <param name="entity">实体对象</param>
            <param name="eop">实体操作。为空时由内部构建，但可在遍历调用访问器时由外部构造一次传入，以提高性能。</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.EntityAccessorBase.ReadItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem)">
            <summary>外部=>实体，从外部读取指定实体字段的信息</summary>
            <param name="entity">实体对象</param>
            <param name="item">实体字段</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.EntityAccessorBase.Write(DmFramework.Data.IEntity,DmFramework.Data.IEntityOperate)">
            <summary>实体=>外部，从实体对象读取信息并写入外部</summary>
            <param name="entity">实体对象</param>
            <param name="eop">实体操作。为空时由内部构建，但可在遍历调用访问器时由外部构造一次传入，以提高性能。</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.EntityAccessorBase.WriteItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem)">
            <summary>实体=>外部，把指定实体字段的信息写入到外部</summary>
            <param name="entity">实体对象</param>
            <param name="item">实体字段</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.EntityAccessorBase.GetFields(DmFramework.Data.IEntityOperate)">
            <summary>获取需要访问的字段</summary>
            <param name="eop"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.EntityAccessorBase.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Accessors.EntityAccessorBase.AllFields">
            <summary>是否所有字段</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.EntityAccessorBase.Kind">
            <summary>种类</summary>
        </member>
        <member name="E:DmFramework.Data.Accessors.EntityAccessorBase.OnReadItem">
            <summary>从实体对象读取指定实体字段的信息后触发</summary>
        </member>
        <member name="E:DmFramework.Data.Accessors.EntityAccessorBase.OnWriteItem">
            <summary>把指定实体字段的信息写入到实体对象后触发</summary>
        </member>
        <member name="E:DmFramework.Data.Accessors.EntityAccessorBase.OnError">
            <summary>读写异常发生时触发</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.EntityAccessorBase.CanRead">
            <summary>是否支持从外部读取信息</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.EntityAccessorBase.CanWrite">
            <summary>是否支持把信息写入到外部</summary>
        </member>
        <member name="M:DmFramework.Data.Accessors.SerializationEntityAccessorBase.SetConfig(System.String,System.Object)">
            <summary>设置参数。返回自身，方便链式写法。</summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.SerializationEntityAccessorBase.Read(DmFramework.Data.IEntity,DmFramework.Data.IEntityOperate)">
            <summary>外部=>实体，从外部读取信息并写入到实体对象</summary>
            <param name="entity">实体对象</param>
            <param name="eop">实体操作。为空时由内部构建，但可在遍历调用访问器时由外部构造一次传入，以提高性能。</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.SerializationEntityAccessorBase.ReadItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem)">
            <summary>外部=>实体，从外部读取指定实体字段的信息</summary>
            <param name="entity">实体对象</param>
            <param name="item">实体字段</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.SerializationEntityAccessorBase.Write(DmFramework.Data.IEntity,DmFramework.Data.IEntityOperate)">
            <summary>实体=>外部，从实体对象读取信息并写入外部</summary>
            <param name="entity">实体对象</param>
            <param name="eop">实体操作。为空时由内部构建，但可在遍历调用访问器时由外部构造一次传入，以提高性能。</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.SerializationEntityAccessorBase.WriteItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem)">
            <summary>实体=>外部，把指定实体字段的信息写入到外部</summary>
            <param name="entity">实体对象</param>
            <param name="item">实体字段</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.SerializationEntityAccessorBase.GetWriter">
            <summary>获取写入器</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.SerializationEntityAccessorBase.GetReader">
            <summary>获取读取器</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Accessors.SerializationEntityAccessorBase.Stream">
            <summary>数据流</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.SerializationEntityAccessorBase.Encoding">
            <summary>编码</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.BinaryEntityAccessor.Kind">
            <summary>种类</summary>
        </member>
        <member name="T:DmFramework.Data.Accessors.EntityAccessorEventArgs">
            <summary>实体访问器事件参数</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.EntityAccessorEventArgs.Entity">
            <summary>实体对象</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.EntityAccessorEventArgs.Field">
            <summary>字段信息</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.EntityAccessorEventArgs.Error">
            <summary>异常对象</summary>
        </member>
        <member name="T:DmFramework.Data.Accessors.EntityAccessorFactory">
            <summary>实体访问器工厂</summary>
        </member>
        <member name="M:DmFramework.Data.Accessors.EntityAccessorFactory.Create(System.String)">
            <summary>创建指定类型的实体访问器</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.EntityAccessorFactory.Create(DmFramework.Data.Accessors.EntityAccessorTypes)">
            <summary>创建指定类型的实体访问器</summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.Accessors.EntityAccessorOptions">
            <summary>实体访问器设置选项</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorOptions.AllFields">
            <summary>是否所有字段</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorOptions.MaxLength">
            <summary>最大文件大小，默认10M</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorOptions.Container">
            <summary>控件容器</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorOptions.IsFindChildForm">
            <summary>
            是否在子窗体中查询
            这里泛指Form嵌套Form
            </summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorOptions.ItemPrefix">
            <summary>前缀</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorOptions.Stream">
            <summary>数据流</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorOptions.Encoding">
            <summary>编码</summary>
        </member>
        <member name="T:DmFramework.Data.Accessors.EntityAccessorTypes">
            <summary>实体访问器种类</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorTypes.Http">
            <summary>Http，只读不写。</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorTypes.WebForm">
            <summary>WebForm</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorTypes.WinForm">
            <summary>WinForm</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorTypes.Binary">
            <summary>二进制</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorTypes.Xml">
            <summary>Xml</summary>
        </member>
        <member name="F:DmFramework.Data.Accessors.EntityAccessorTypes.Json">
            <summary>Json</summary>
        </member>
        <member name="T:DmFramework.Data.Accessors.HttpEntityAccessor">
            <summary>Http实体访问器，只读不写。</summary>
        </member>
        <member name="M:DmFramework.Data.Accessors.HttpEntityAccessor.SetConfig(System.String,System.Object)">
            <summary>设置参数。返回自身，方便链式写法。</summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.HttpEntityAccessor.ReadItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem)">
            <summary>外部=>实体，从外部读取指定实体字段的信息/// </summary>
            <param name="entity">实体对象</param>
            <param name="item">实体字段</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.HttpEntityAccessor.GetRequestItem(DmFramework.Data.Configuration.FieldItem)">
            <summary>从请求中获取指定字段的值</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.HttpEntityAccessor.GetRequest(System.String)">
            <summary>采用该方法而不再用Request[name]，主要是后者还处理服务器变量ServerVar，这是不需要的，还有可能得到错误的数据</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Accessors.HttpEntityAccessor.Kind">
            <summary>种类</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.HttpEntityAccessor.Request">
            <summary>请求</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.HttpEntityAccessor.ItemPrefix">
            <summary>前缀，只用于Form</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.HttpEntityAccessor.MaxLength">
            <summary>最大文件大小，默认10M</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.HttpEntityAccessor.CanWrite">
            <summary>是否支持把信息写入到外部</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.JsonEntityAccessor.Kind">
            <summary>种类</summary>
        </member>
        <member name="T:DmFramework.Data.Accessors.WebFormEntityAccessor">
            <summary>WebForm实体访问器</summary>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.SetConfig(System.String,System.Object)">
            <summary>设置参数。返回自身，方便链式写法。</summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.ReadItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem)">
            <summary>外部=>实体，从外部读取指定实体字段的信息</summary>
            <param name="entity">实体对象</param>
            <param name="item">实体字段</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.GetFormItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.Control)">
            <summary>把控件的值设置到实体属性上</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.GetFormItemTextBox(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.WebControls.TextBox)">
            <summary>文本框</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.GetFormItemLabel(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.WebControls.Label)">
            <summary>标签，不做任何操作</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.GetFormItemCheckBox(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.WebControls.CheckBox)">
            <summary>复选框</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.GetFormItemListControl(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.WebControls.ListControl)">
            <summary>列表框</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.GetFormItemRadioButton(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.WebControls.RadioButton)">
            <summary>单选框</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.WriteItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem)">
            <summary>实体=>外部，把指定实体字段的信息写入到外部</summary>
            <param name="entity">实体对象</param>
            <param name="item">实体字段</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.SetToolTip(DmFramework.Data.Configuration.FieldItem,System.Web.UI.Control)">
            <summary>设置控件的ToolTip提示信息</summary>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.SetFormItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.Control,System.Boolean)">
            <summary>把实体成员的值设置到控件上</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
            <param name="canSave"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.SetFormItemTextBox(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.WebControls.TextBox,System.Boolean)">
            <summary>文本框</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
            <param name="canSave"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.SetFormItemLabel(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.WebControls.Label,System.Boolean)">
            <summary>标签</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
            <param name="canSave"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.SetFormItemCheckBox(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.WebControls.CheckBox,System.Boolean)">
            <summary>复选框</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
            <param name="canSave"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.SetFormItemListControl(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.WebControls.ListControl,System.Boolean)">
            <summary>列表框</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
            <param name="canSave"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.SetFormItemRadioButton(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Web.UI.WebControls.RadioButton,System.Boolean)">
            <summary>单选框</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
            <param name="canSave"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.SetNotAllowNull(DmFramework.Data.Configuration.FieldItem,System.Web.UI.Control,System.Boolean)">
            <summary>设置控件的不允许空</summary>
            <param name="field"></param>
            <param name="control"></param>
            <param name="canSave"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.FindControl(System.String)">
            <summary>查找表单控件</summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.WebFormEntityAccessor.FindControlByField(DmFramework.Data.Configuration.FieldItem)">
            <summary>查找字段对应的控件</summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Accessors.WebFormEntityAccessor.Kind">
            <summary>种类</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.WebFormEntityAccessor.Container">
            <summary>页面</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.WebFormEntityAccessor.MaxLength">
            <summary>最大文件大小，默认10M</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.WebFormEntityAccessor.ItemPrefix">
            <summary>前缀</summary>
        </member>
        <member name="T:DmFramework.Data.Accessors.WinFormEntityAccessor">
            <summary>WinForm实体访问器。功能基本完成但未进行测试</summary>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetConfig(System.String,System.Object)">
            <summary>设置参数。返回自身，方便链式写法。</summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.ReadItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem)">
            <summary>外部=>实体，从外部读取指定实体字段的信息</summary>
            <param name="entity">实体对象</param>
            <param name="item">实体字段</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.GetFormItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.Control)">
             <summary>
            
             是否应考滤值转换，如列表，单选，多选其显示文字或写value不同
             </summary>
             <param name="entity"></param>
             <param name="field"></param>
             <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetEntityItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Object)">
            <summary>设置实体类值</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.GetTextBoxBase(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.TextBoxBase)">
            <summary>获取TextBoxBase填充实体类</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.GetButtonBase(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.ButtonBase)">
            <summary>
            获取ButtonBase填充实体类
            支持RadioButton,CheckBox
            </summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.GetDateTimePicker(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.DateTimePicker)">
            <summary>获取DateTimePicker填充实体类</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.GetNumericUpDown(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.NumericUpDown)">
            <summary>获取NumericUpDown填充实体类</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.GetListControl(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.ListControl)">
            <summary>获取ListControl填充实体类</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.GetLabel(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.Label)">
            <summary>获取Label填充实体类</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.WriteItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem)">
            <summary>实体=>外部，把指定实体字段的信息写入到外部</summary>
            <param name="entity">实体对象</param>
            <param name="item">实体字段</param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetFormItem(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.Control,System.Boolean)">
            <summary>把实体成员的值设置到控件上</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
            <param name="canSave"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetTextBoxBase(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.TextBoxBase)">
            <summary>将实体信息添充至TextBoxBase</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetButtonBase(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.ButtonBase)">
            <summary>将实体信息添充至ButtonBase</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetDateTimePicker(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.DateTimePicker)">
            <summary>将实体信息添充至DateTimePicker</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetNumericUpDown(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.NumericUpDown)">
            <summary>将实体信息添充至NumericUpDown</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetListControl(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.ListControl)">
            <summary>将实体信息添充至ListControl</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetLabel(DmFramework.Data.IEntity,DmFramework.Data.Configuration.FieldItem,System.Windows.Forms.Label)">
            <summary>将实体信息添充至Label</summary>
            <param name="entity"></param>
            <param name="field"></param>
            <param name="control"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.FindControlByField(DmFramework.Data.Configuration.FieldItem)">
            <summary>查找字段对应的控件</summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.FindControlInContainer(System.String)">
            <summary>在页面查找指定ID的控件</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.FindControlByName(System.Windows.Forms.Control,System.String)">
            <summary>按名称查询</summary>
            <param name="control"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.FindToolTipParentForm">
            <summary>在窗体中查询ToolTip</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetToolTip(System.Windows.Forms.Control,System.String)">
            <summary>设置ToolTip</summary>
            <param name="control"></param>
            <param name="caption"></param>
        </member>
        <member name="M:DmFramework.Data.Accessors.WinFormEntityAccessor.SetControlEnable(System.Windows.Forms.Control,System.Boolean)">
            <summary>设置控件Enable值</summary>
            <param name="control"></param>
            <param name="canSave"></param>
        </member>
        <member name="P:DmFramework.Data.Accessors.WinFormEntityAccessor.Kind">
            <summary>种类</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.WinFormEntityAccessor.Container">
            <summary>容器</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.WinFormEntityAccessor.ToolTip">
            <summary>提示信息</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.WinFormEntityAccessor.IsFindChildForm">
            <summary>
            是否在子窗体中查询
            这里泛指Form嵌套Form
            </summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.WinFormEntityAccessor.ItemPrefix">
            <summary>前缀</summary>
        </member>
        <member name="P:DmFramework.Data.Accessors.XmlEntityAccessor.Kind">
            <summary>种类</summary>
        </member>
        <member name="T:DmFramework.Data.BindColumnAttribute">
            <summary>指定实体类属性所绑定数据字段信息。</summary>
        </member>
        <member name="M:DmFramework.Data.BindColumnAttribute.#ctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:DmFramework.Data.BindColumnAttribute.#ctor(System.String)">
            <summary>构造函数</summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:DmFramework.Data.BindColumnAttribute.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>构造函数</summary>
            <param name="order"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:DmFramework.Data.BindColumnAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>构造函数</summary>
            <param name="order"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="defaultValue"></param>
            <param name="rawType"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <param name="isUnicode"></param>
        </member>
        <member name="M:DmFramework.Data.BindColumnAttribute.GetCustomAttribute(System.Reflection.MemberInfo)">
            <summary>检索应用于类型成员的自定义属性。</summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.BindColumnAttribute.Order">
            <summary>顺序</summary>
        </member>
        <member name="P:DmFramework.Data.BindColumnAttribute.Name">
            <summary>字段名</summary>
        </member>
        <member name="P:DmFramework.Data.BindColumnAttribute.Description">
            <summary>描述</summary>
        </member>
        <member name="P:DmFramework.Data.BindColumnAttribute.DefaultValue">
            <summary>默认值</summary>
        </member>
        <member name="P:DmFramework.Data.BindColumnAttribute.RawType">
            <summary>
            原始数据类型。
            当且仅当目标数据库同为该数据库类型时，采用实体属性信息上的RawType作为反向工程的目标字段类型，以期获得开发和生产的最佳兼容。
            </summary>
        </member>
        <member name="P:DmFramework.Data.BindColumnAttribute.Precision">
            <summary>精度</summary>
        </member>
        <member name="P:DmFramework.Data.BindColumnAttribute.Scale">
            <summary>位数</summary>
        </member>
        <member name="P:DmFramework.Data.BindColumnAttribute.IsUnicode">
            <summary>是否Unicode</summary>
        </member>
        <member name="T:DmFramework.Data.BindIndexAttribute">
            <summary>用于指定数据类所绑定到的索引</summary>
        </member>
        <member name="M:DmFramework.Data.BindIndexAttribute.#ctor(System.String,System.Boolean,System.String)">
            <summary>指定一个索引</summary>
            <param name="name"></param>
            <param name="unique"></param>
            <param name="columns"></param>
        </member>
        <member name="M:DmFramework.Data.BindIndexAttribute.Fill(DmFramework.Data.DataAccessLayer.IDataIndex)">
            <summary>填充索引</summary>
            <param name="index"></param>
        </member>
        <member name="P:DmFramework.Data.BindIndexAttribute.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Data.BindIndexAttribute.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:DmFramework.Data.BindIndexAttribute.Columns">
            <summary>数据列集合</summary>
        </member>
        <member name="T:DmFramework.Data.BindRelationAttribute">
            <summary>用于指定数据类所绑定到的关系</summary>
        </member>
        <member name="M:DmFramework.Data.BindRelationAttribute.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>指定一个关系</summary>
            <param name="column"></param>
            <param name="unique"></param>
            <param name="relationtable"></param>
            <param name="relationcolumn"></param>
        </member>
        <member name="M:DmFramework.Data.BindRelationAttribute.Fill(DmFramework.Data.DataAccessLayer.IDataRelation)">
            <summary>填充索引</summary>
            <param name="relation"></param>
        </member>
        <member name="P:DmFramework.Data.BindRelationAttribute.Column">
            <summary>数据列</summary>
        </member>
        <member name="P:DmFramework.Data.BindRelationAttribute.RelationTable">
            <summary>引用表</summary>
        </member>
        <member name="P:DmFramework.Data.BindRelationAttribute.RelationColumn">
            <summary>引用列</summary>
        </member>
        <member name="P:DmFramework.Data.BindRelationAttribute.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="T:DmFramework.Data.BindTableAttribute">
            <summary>指定实体类所绑定的数据表信息。</summary>
        </member>
        <member name="M:DmFramework.Data.BindTableAttribute.#ctor(System.String)">
            <summary>构造函数</summary>
            <param name="name">表名</param>
        </member>
        <member name="M:DmFramework.Data.BindTableAttribute.#ctor(System.String,System.String)">
            <summary>构造函数</summary>
            <param name="name">表名</param>
            <param name="description">描述</param>
        </member>
        <member name="M:DmFramework.Data.BindTableAttribute.#ctor(System.String,System.String,System.String,DmFramework.Data.DataAccessLayer.DatabaseType,System.Boolean)">
            <summary>构造函数</summary>
            <param name="name">表名</param>
            <param name="description">描述</param>
            <param name="connName"></param>
            <param name="dbType"></param>
            <param name="isView"></param>
        </member>
        <member name="P:DmFramework.Data.BindTableAttribute.Name">
            <summary>
            表名。
            可以在配置文件中通过ORMConfigInfo.ConnMaps把实体映射到别的数据表上
            </summary>
        </member>
        <member name="P:DmFramework.Data.BindTableAttribute.Description">
            <summary>描述</summary>
        </member>
        <member name="P:DmFramework.Data.BindTableAttribute.ConnName">
            <summary>
            连接名。
            实体类的所有数据库操作，将发生在该连接名指定的数据库连接上。
            此外，可动态修改实体类在当前线程上的连接名（改Meta.ConnName）；
            也可以在配置文件中通过ORMConfigInfo.ConnMaps把连接名映射到别的连接上。
            </summary>
        </member>
        <member name="P:DmFramework.Data.BindTableAttribute.DbType">
            <summary>
            数据库类型。
            仅用于记录实体类由何种类型数据库生成，当且仅当目标数据库同为该数据库类型时，采用实体属性信息上的RawType作为反向工程的目标字段类型，以期获得开发和生产的最佳兼容。
            </summary>
        </member>
        <member name="P:DmFramework.Data.BindTableAttribute.IsView">
            <summary>是否视图</summary>
        </member>
        <member name="T:DmFramework.Data.ModelCheckModes">
            <summary>模型检查模式</summary>
        </member>
        <member name="F:DmFramework.Data.ModelCheckModes.CheckAllTablesWhenInit">
            <summary>初始化时检查所有表。默认值。具有最好性能。</summary>
        </member>
        <member name="F:DmFramework.Data.ModelCheckModes.CheckTableWhenFirstUse">
            <summary>第一次使用时检查表。常用于通用实体类等存在大量实体类但不会同时使用所有实体类的场合，避免反向工程生成没有使用到的实体类的数据表。</summary>
        </member>
        <member name="T:DmFramework.Data.ModelCheckModeAttribute">
            <summary>模型检查模式</summary>
        </member>
        <member name="M:DmFramework.Data.ModelCheckModeAttribute.#ctor(DmFramework.Data.ModelCheckModes)">
            <summary>指定实体类的模型检查模式</summary>
            <param name="mode"></param>
        </member>
        <member name="P:DmFramework.Data.ModelCheckModeAttribute.Mode">
            <summary>模式</summary>
        </member>
        <member name="T:DmFramework.Data.ModelSortModes">
            <summary>模型字段排序模式</summary>
        </member>
        <member name="F:DmFramework.Data.ModelSortModes.BaseFirst">
            <summary>基类优先。默认值。一般用于扩展某个实体类增加若干数据字段。</summary>
        </member>
        <member name="F:DmFramework.Data.ModelSortModes.DerivedFirst">
            <summary>派生类优先。一般用于具有某些公共数据字段的基类。</summary>
        </member>
        <member name="T:DmFramework.Data.ModelSortModeAttribute">
            <summary>模型字段排序模式。其实不是很重要，仅仅影响数据字段在数据表中的先后顺序而已</summary>
        </member>
        <member name="M:DmFramework.Data.ModelSortModeAttribute.#ctor(DmFramework.Data.ModelSortModes)">
            <summary>指定实体类的模型字段排序模式</summary>
            <param name="mode"></param>
        </member>
        <member name="P:DmFramework.Data.ModelSortModeAttribute.Mode">
            <summary>模式</summary>
        </member>
        <member name="T:DmFramework.Data.Cache.CacheBase">
            <summary>缓存基类</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.CacheBase.Debug">
            <summary>是否调试缓存模块</summary>
        </member>
        <member name="T:DmFramework.Data.Cache.CacheBase`1">
            <summary>缓存基类</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.CacheBase`1.InvokeFill(System.Action)">
            <summary>调用填充方法前设置连接名和表名，调用后还原</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.CacheBase`1.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.CacheBase`1.TableName">
            <summary>表名</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.CacheItem._TableNames">
            <summary>所依赖的表的表名</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.CacheItem.ExpireTime">
            <summary>到期时间</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.CacheItem.#ctor(System.String[])">
            <summary>构造函数</summary>
            <param name="tableNames"></param>
        </member>
        <member name="M:DmFramework.Data.Cache.CacheItem.#ctor(System.String[],System.Int32)">
            <summary>构造函数</summary>
            <param name="tableNames"></param>
            <param name="time">缓存时间，单位秒</param>
        </member>
        <member name="M:DmFramework.Data.Cache.CacheItem.IsDependOn(System.String)">
            <summary>是否依赖于某个表</summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Cache.CacheItem`1.#ctor(System.String[],`0)">
            <summary>构造函数</summary>
            <param name="tableNames"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Data.Cache.CacheItem`1.#ctor(System.String[],`0,System.Int32)">
            <summary>构造函数</summary>
            <param name="tableNames"></param>
            <param name="value"></param>
            <param name="time">缓存时间，单位秒</param>
        </member>
        <member name="P:DmFramework.Data.Cache.CacheItem`1.Value">
            <summary>缓存的数据</summary>
        </member>
        <member name="T:DmFramework.Data.Cache.EntityCache`1">
            <summary>实体缓存</summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:DmFramework.Data.Cache.IEntityCache">
            <summary>实体缓存接口</summary>
        </member>
        <member name="T:DmFramework.Data.Cache.IEntityCacheBase">
            <summary>缓存基接口</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.IEntityCacheBase.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.IEntityCacheBase.TableName">
            <summary>表名</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.IEntityCache.Find(System.String,System.Object)">
            <summary>根据指定项查找</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Cache.IEntityCache.FindAll(System.String,System.Object)">
            <summary>根据指定项查找</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Cache.IEntityCache.FindAll(System.Predicate{DmFramework.Data.IEntity})">
            <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
            <param name="match">条件</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Cache.IEntityCache.Clear(System.String)">
            <summary>清除缓存</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.IEntityCache.Entities">
            <summary>实体集合。因为涉及一个转换，数据量大时很耗性能，建议不要使用。</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.EntityCache`1.Times">
            <summary>缓存更新次数</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.EntityCache`1.Clear(System.String)">
            <summary>清除缓存</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.EntityCache`1.Total">
            <summary>总次数</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.EntityCache`1.Shoot1">
            <summary>第一次命中</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.EntityCache`1.Shoot2">
            <summary>第二次命中</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.EntityCache`1.NextShow">
            <summary>下一次显示时间</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.EntityCache`1.ShowStatics">
            <summary>显示统计信息</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.EntityCache`1.Find(System.String,System.Object)">
            <summary>根据指定项查找</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Cache.EntityCache`1.FindAll(System.String,System.Object)">
            <summary>根据指定项查找</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Cache.EntityCache`1.FindAll(System.Predicate{DmFramework.Data.IEntity})">
            <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
            <param name="match">条件</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Cache.EntityCache`1.Entities">
            <summary>实体集合。无数据返回空集合而不是null</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.EntityCache`1.ExpiredTime">
            <summary>缓存过期时间</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.EntityCache`1.Expriod">
            <summary>过期时间。单位是秒，默认60秒</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.EntityCache`1.FillListMethod">
            <summary>填充数据的方法</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.EntityCache`1.Asynchronous">
            <summary>异步更新</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.EntityCache`1.AllowNull">
            <summary>允许缓存空对象</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.EntityCache`1.Using">
            <summary>是否在使用缓存</summary>
        </member>
        <member name="T:DmFramework.Data.Cache.FillListDelegate`1">
            <summary>填充数据的方法</summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.Cache.EntityDependency`1">
            <summary>实体依赖。用于HttpRuntime.Cache，一旦指定的实体类数据改变，马上让缓存过期。</summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:DmFramework.Data.Cache.EntityDependency`1.#ctor">
            <summary>实例化一个实体依赖。</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.EntityDependency`1.#ctor(System.Int32)">
            <summary>
            通过指定一个检查周期实例化一个实体依赖。
            利用线程池定期去检查该实体类的总记录数，一旦改变则让缓存过期。
            这样子就避免了其它方式修改数据而没能及时更新缓存问题
            </summary>
            <param name="period">检查周期，单位毫秒。必须大于1000（1秒），以免误用。</param>
        </member>
        <member name="M:DmFramework.Data.Cache.EntityDependency`1.DependencyDispose">
            <summary>释放资源</summary>
        </member>
        <member name="T:DmFramework.Data.Cache.ISingleEntityCache">
            <summary>单对象缓存接口</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.ISingleEntityCache.Item(System.Object)">
            <summary>获取数据</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.Cache.SingleEntityCache`2">
            <summary>单对象缓存</summary>
            <remarks>
            用一个值为实体的字典作为缓存（键一般就是主键），适用于单表大量互相没有关系的数据。
            同时，AutoSave能够让缓存项在过期时自动保存数据，该特性特别适用于点击计数等场合。
            </remarks>
            <typeparam name="TKey">键值类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:DmFramework.Data.Cache.SingleEntityCache`2.#ctor">
            <summary>实例化一个实体缓存</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.SingleEntityCache`2.Check">
            <summary>定期检查实体，如果过期，则触发保存</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.SingleEntityCache`2.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
            因为该方法只会被调用一次，所以该参数的意义不太大。</param>
        </member>
        <member name="F:DmFramework.Data.Cache.SingleEntityCache`2.Entities">
            <summary>单对象缓存</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.SingleEntityCache`2.Total">
            <summary>总次数</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.SingleEntityCache`2.Shoot">
            <summary>命中</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.SingleEntityCache`2.Shoot1">
            <summary>第一次命中</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.SingleEntityCache`2.Shoot2">
            <summary>第二次命中</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.SingleEntityCache`2.Invalid">
            <summary>无效次数</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.SingleEntityCache`2.NextShow">
            <summary>下一次显示时间</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.SingleEntityCache`2.ShowStatics">
            <summary>显示统计信息</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.SingleEntityCache`2.GetItem(DmFramework.Data.Cache.SingleEntityCache{`0,`1}.CacheItem,`0)">
            <summary>
            内部处理返回对象。
            把对象传进来，而不是只传键值然后查找，是为了避免别的线程移除该项
            </summary>
            <param name="item"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Cache.SingleEntityCache`2.ContainsKey(`0)">
            <summary>是否包含指定键</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Cache.SingleEntityCache`2.Add(`0,`1)">
            <summary>向单对象缓存添加项</summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Cache.SingleEntityCache`2.RemoveKey(`0)">
            <summary>移除指定项</summary>
            <param name="key"></param>
        </member>
        <member name="M:DmFramework.Data.Cache.SingleEntityCache`2.Clear">
            <summary>清除所有数据</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.SingleEntityCache`2.Expriod">
            <summary>过期时间。单位是秒，默认60秒</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.SingleEntityCache`2.MaxEntity">
            <summary>最大实体数。默认10000</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.SingleEntityCache`2.AutoSave">
            <summary>缓存到期时自动保存</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.SingleEntityCache`2.AllowNull">
            <summary>允许缓存空对象</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.SingleEntityCache`2.FindKeyMethod">
            <summary>查找数据的方法</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.SingleEntityCache`2.Item(`0)">
            <summary>获取数据</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Cache.SingleEntityCache`2.DmFramework#Data#Cache#ISingleEntityCache#Item(System.Object)">
            <summary>获取数据</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.Cache.SingleEntityCache`2.CacheItem">
            <summary>缓存对象</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.SingleEntityCache`2.CacheItem.Key">
            <summary>键</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.SingleEntityCache`2.CacheItem.Entity">
            <summary>实体</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.SingleEntityCache`2.CacheItem.ExpireTime">
            <summary>缓存过期时间</summary>
        </member>
        <member name="T:DmFramework.Data.Cache.FindKeyDelegate`2">
            <summary>查找数据的方法</summary>
            <typeparam name="TKey">键值类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.Cache.HmCache">
            <summary>数据缓存类</summary>
            <remarks>
            以SQL为键对查询进行缓存，同时关联表。执行SQL时，根据关联表删除缓存。
            </remarks>
        </member>
        <member name="F:DmFramework.Data.Cache.HmCache.Expiration">
            <summary>
            缓存相对有效期。
            -2	关闭缓存
            -1	非独占数据库，有外部系统操作数据库，使用请求级缓存；
             0	永久静态缓存；
            >0	静态缓存时间，单位是秒；
            </summary>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.#cctor">
            <summary>
            初始化设置。
            读取配置；
            </summary>
        </member>
        <member name="F:DmFramework.Data.Cache.HmCache.AutoCheckCacheTimer">
            <summary>缓存维护定时器</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.HmCache.CheckPeriod">
            <summary>维护定时器的检查周期，默认5秒</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.Check(System.Object)">
            <summary>维护</summary>
            <param name="obj"></param>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.CreateTimer">
            <summary>
            创建定时器。
            因为定时器的原因，实际缓存时间可能要比Expiration要大
            </summary>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.Add(System.String,System.Data.DataSet,System.String[])">
            <summary>添加数据表缓存。</summary>
            <param name="sql">SQL语句</param>
            <param name="ds">待缓存记录集</param>
            <param name="tableNames">表名数组</param>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.Add(System.String,System.Int32,System.String[])">
            <summary>添加Int32缓存。</summary>
            <param name="sql">SQL语句</param>
            <param name="n">待缓存整数</param>
            <param name="tableNames">表名数组</param>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.Remove(System.String)">
            <summary>移除依赖于某个数据表的缓存</summary>
            <param name="tableName">数据表</param>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.Remove(System.String[])">
            <summary>移除依赖于一组数据表的缓存</summary>
            <param name="tableNames"></param>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.RemoveAll">
            <summary>清空缓存</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.TryGetItem(System.String,System.Data.DataSet@)">
            <summary>获取DataSet缓存</summary>
            <param name="sql">SQL语句</param>
            <param name="ds">结果</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.TryGetItem(System.String,System.Int32@)">
            <summary>获取Int32缓存</summary>
            <param name="sql">SQL语句</param>
            <param name="count">结果</param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Data.Cache.HmCache.Total">
            <summary>总次数</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.HmCache.Shoot">
            <summary>命中</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.HmCache.NextShow">
            <summary>下一次显示时间</summary>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.CheckShowStatics(System.DateTime@,System.Int32@,System.Action)">
            <summary>检查并显示统计信息</summary>
            <param name="next"></param>
            <param name="total"></param>
            <param name="show"></param>
        </member>
        <member name="M:DmFramework.Data.Cache.HmCache.ShowStatics">
            <summary>显示统计信息</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.HmCache.Kind">
            <summary>数据缓存类型</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.HmCache.Count">
            <summary>缓存个数</summary>
        </member>
        <member name="P:DmFramework.Data.Cache.HmCache.Items">
            <summary>请求级缓存项</summary>
        </member>
        <member name="T:DmFramework.Data.Cache.HmCache.CacheKinds">
            <summary>数据缓存类型</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.HmCache.CacheKinds.ClosingCache">
            <summary>关闭缓存</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.HmCache.CacheKinds.RequestingCache">
            <summary>请求级缓存</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.HmCache.CacheKinds.ForeverStaticCache">
            <summary>永久静态缓存</summary>
        </member>
        <member name="F:DmFramework.Data.Cache.HmCache.CacheKinds.PeriodOfValidityCache">
            <summary>带有效期缓存</summary>
        </member>
        <member name="T:DmFramework.Data.Code.EntityAssembly">
             <summary>实体程序集</summary>
             <example>
             外部修改实体类生成行为的例子：
             <code>
             var dal = DAL.Create("Common");
             var ea = dal.Assembly;
            
             ea.OnClassCreating += (s, e) =&gt;
             {
                 if (e.Class.Name == "Log") e.Class.BaseType = "Test.TestEntity&lt;Log&gt;";
             };
            
             var eop = dal.CreateOperate("Log");
             var type = eop.Default.GetType();
             Console.WriteLine(type);
             type = type.BaseType;
             Console.WriteLine(type);
             type = type.BaseType;
             Console.WriteLine(type);
             </code>
             </example>
        </member>
        <member name="M:DmFramework.Data.Code.EntityAssembly.CreateWithCache(System.String,System.Collections.Generic.List{DmFramework.Data.DataAccessLayer.IDataTable})">
            <summary>为数据模型创建实体程序集，带缓存，依赖于表和字段名称，不依赖名称以外的信息。</summary>
            <param name="name"></param>
            <param name="tables"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Code.EntityAssembly.Create(System.String,System.String,System.Collections.Generic.List{DmFramework.Data.DataAccessLayer.IDataTable})">
            <summary>为数据模型创建实体程序集，无缓存</summary>
            <param name="name">程序集名</param>
            <param name="connName">连接名</param>
            <param name="tables">模型表</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Code.EntityAssembly.Create(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>在该程序集中创建一个实体类</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Code.EntityAssembly.Create(System.String)">
            <summary>根据名称创建</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Code.EntityAssembly.CreateAll">
            <summary>创建所有表的实体类</summary>
        </member>
        <member name="M:DmFramework.Data.Code.EntityAssembly.GetType(System.String)">
            <summary>获取类型</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Code.EntityAssembly.GenerateCSharpCode">
            <summary>生成C#代码</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Code.EntityAssembly.Compile(System.CodeDom.Compiler.CompilerParameters)">
            <summary>编译</summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Code.EntityAssembly.Compile">
            <summary>编译并返回程序集</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Code.EntityAssembly.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Code.EntityAssembly.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityAssembly.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityAssembly.Tables">
            <summary>表集合</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityAssembly.Classes">
            <summary>实体类集合</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityAssembly.Assembly">
            <summary>程序集</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityAssembly.TypeMaps">
            <summary>类型映射。数据表映射到哪个类上</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityAssembly.Unit">
            <summary>代码编译单元</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityAssembly.NameSpace">
            <summary>命名空间</summary>
        </member>
        <member name="E:DmFramework.Data.Code.EntityAssembly.OnClassCreating">
            <summary>创建实体类开始前触发，用户可以在此修改实体类的创建行为</summary>
        </member>
        <member name="E:DmFramework.Data.Code.EntityAssembly.OnClassCreated">
            <summary>创建实体类完成后触发，用户可以在此修改实体类的创建行为</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityAssembly.Debug">
            <summary>是否启用动态代码调试，把动态生成的实体类代码和程序集输出到临时目录，默认不启用</summary>
        </member>
        <member name="T:DmFramework.Data.Code.EntityClassEventArgs">
            <summary>实体类事件参数</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityClassEventArgs.Class">
            <summary>实体类</summary>
        </member>
        <member name="T:DmFramework.Data.Code.EntityClass">
            <summary>实体类</summary>
            <remarks>提供由IDataTable生成实体类的支持</remarks>
        </member>
        <member name="M:DmFramework.Data.Code.EntityClass.Create">
            <summary>创建实体类</summary>
        </member>
        <member name="M:DmFramework.Data.Code.EntityClass.AddProperties">
            <summary>添加属性集合</summary>
        </member>
        <member name="M:DmFramework.Data.Code.EntityClass.AddField(DmFramework.Data.DataAccessLayer.IDataColumn)">
            <summary>添加私有字段</summary>
            <param name="field"></param>
        </member>
        <member name="M:DmFramework.Data.Code.EntityClass.AddProperty(DmFramework.Data.DataAccessLayer.IDataColumn)">
            <summary>添加单个属性</summary>
            <param name="field"></param>
        </member>
        <member name="M:DmFramework.Data.Code.EntityClass.AddIndexs">
            <summary>添加索引器</summary>
        </member>
        <member name="M:DmFramework.Data.Code.EntityClass.GenerateCSharpCode">
            <summary>生成C#代码</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Code.EntityClass.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Code.EntityClass.Name">
            <summary>类名</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityClass.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityClass.Table">
            <summary>表</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityClass.BaseType">
            <summary>基类</summary>
        </member>
        <member name="P:DmFramework.Data.Code.EntityClass.Class">
            <summary>实体类</summary>
        </member>
        <member name="T:DmFramework.Data.Code.EntityClassBiz">
            <summary>实体类，业务部分</summary>
        </member>
        <member name="T:DmFramework.Data.Common.Helper">
            <summary>助手类</summary>
        </member>
        <member name="M:DmFramework.Data.Common.Helper.IsNullKey(System.Object)">
            <summary>指定键是否为空。一般业务系统设计不允许主键为空，包括自增的0和字符串的空</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Common.Helper.IsEntityNullKey(DmFramework.Data.IEntity)">
            <summary>是否空主键的实体</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Common.Helper.EqualTo(System.Object,System.Object)">
            <summary>判断两个对象是否相当，特别处理整型</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.Configuration.FieldItem">
            <summary>数据属性元数据以及特性</summary>
        </member>
        <member name="F:DmFramework.Data.Configuration.FieldItem.COLUMNNAME_FLAG">
            <summary>字段名要过滤掉的标识符，考虑MSSQL、MySql、SQLite、Oracle等</summary>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.#ctor(DmFramework.Data.Configuration.TableItem,System.Reflection.PropertyInfo)">
            <summary>构造函数</summary>
            <param name="table"></param>
            <param name="property"></param>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.Fill(DmFramework.Data.DataAccessLayer.IDataColumn)">
            <summary>填充到XField中去</summary>
            <param name="field"></param>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.CreateExpression(System.String,System.Object)">
            <summary>建立表达式</summary>
            <param name="action"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.Equal(System.Object)">
            <summary>等于</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.NotEqual(System.Object)">
            <summary>不等于</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.StartsWith(System.Object)">
            <summary>以某个字符串开始,{0}%操作</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.EndsWith(System.Object)">
            <summary>以某个字符串结束，%{0}操作</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.Contains(System.Object)">
            <summary>包含某个字符串，%{0}%操作</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.In(System.String)">
            <summary>In操作</summary>
            <param name="value">逗号分割的数据</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.In(System.Collections.IEnumerable)">
            <summary>In操作</summary>
            <param name="value">枚举数据，会转化为字符串</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.NotIn(System.String)">
            <summary>NotIn操作</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.NotIn(System.Collections.IEnumerable)">
            <summary>NotIn操作</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.IsNull">
            <summary>IsNull操作，不为空，一般用于字符串，但不匹配0长度字符串</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.NotIsNull">
            <summary>NotIsNull操作</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.IsNullOrEmpty">
            <summary>IsNullOrEmpty操作，用于空或者0长度字符串</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.NotIsNullOrEmpty">
            <summary>NotIsNullOrEmpty操作</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.IsTrue(System.Nullable{System.Boolean})">
            <summary>是否True或者False和Null</summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.IsFalse(System.Nullable{System.Boolean})">
            <summary>是否False或者True和Null</summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.Between(System.DateTime,System.DateTime)">
            <summary>时间专用区间函数</summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.Today">
            <summary>当天范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.ThisWeek">
            <summary>本周范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.ThisMonth">
            <summary>本月范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.ThisQuarter">
            <summary>本季度范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.Yesterday">
            <summary>昨天范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.LastWeek">
            <summary>上周范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.LastMonth">
            <summary>上月范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.LastQuarter">
            <summary>上季度范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.LastDays(System.Int32)">
            <summary>过去天数范围</summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.Tomorrow">
            <summary>明天范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.NextWeek">
            <summary>下周范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.NextMonth">
            <summary>下月范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.NextQuarter">
            <summary>下季度范围</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.NextDays(System.Int32)">
            <summary>未来天数范围</summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.op_GreaterThan(DmFramework.Data.Configuration.FieldItem,System.Object)">
            <summary>大于</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.op_LessThan(DmFramework.Data.Configuration.FieldItem,System.Object)">
            <summary>小于</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.op_GreaterThanOrEqual(DmFramework.Data.Configuration.FieldItem,System.Object)">
            <summary>大于等于</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.op_LessThanOrEqual(DmFramework.Data.Configuration.FieldItem,System.Object)">
            <summary>小于等于</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.Asc">
            <summary>升序</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.Desc">
            <summary>降序</summary>
            <remarks>感谢 树懒（303409914）发现这里的错误</remarks>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.FieldItem.op_Implicit(DmFramework.Data.Configuration.FieldItem)~System.String">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.Property">
            <summary>属性元数据</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.Column">
            <summary>绑定列特性</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.DataObjectField">
            <summary>数据字段特性</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.Description">
            <summary>备注</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.Name">
            <summary>属性名</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.Type">
            <summary>属性类型</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.DeclaringType">
            <summary>属性类型</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.IsIdentity">
            <summary>是否标识列</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.PrimaryKey">
            <summary>是否主键</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.IsNullable">
            <summary>是否允许空</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.Length">
            <summary>长度</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.IsDataObjectField">
            <summary>是否数据绑定列</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.DisplayName">
            <summary>显示名。如果备注不为空则采用备注，否则采用属性名</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.ColumnName">
            <summary>
            用于数据绑定的字段名。
            默认使用BindColumn特性中指定的字段名，如果没有指定，则使用属性名。
            </summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.DefaultValue">
            <summary>默认值</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.Table">
            <summary>表</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.Field">
            <summary>字段</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.FieldItem.Factory">
            <summary>实体操作者</summary>
        </member>
        <member name="T:DmFramework.Data.Configuration.Field">
            <summary>继承FieldItem，仅仅为了重载==和!=运算符</summary>
        </member>
        <member name="M:DmFramework.Data.Configuration.Field.#ctor(DmFramework.Data.Configuration.TableItem,System.Reflection.PropertyInfo)">
            <summary>构造函数</summary>
            <param name="table"></param>
            <param name="property"></param>
        </member>
        <member name="M:DmFramework.Data.Configuration.Field.op_Equality(DmFramework.Data.Configuration.Field,System.Object)">
            <summary>等于</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.Field.op_Inequality(DmFramework.Data.Configuration.Field,System.Object)">
            <summary>不等于</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.Field.GetHashCode">
            <summary>重写一下</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.Field.Equals(System.Object)">
            <summary>重写一下</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.Field.op_Implicit(DmFramework.Data.Configuration.Field)~System.String">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.Configuration.DBConfigInfo">
            <summary>数据映射框架配置类, 加[Serializable]标记为可序列化</summary>
        </member>
        <member name="M:DmFramework.Data.Configuration.DBConfigInfo.Init">
            <summary>初始化</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMSettings">
            <summary>ORM配置</summary>
        </member>
        <member name="T:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo">
            <summary>ORM配置</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.IsORMDebug">
            <summary>ORM配置：是否启用调试。默认为不启用</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.IsORMShowSQL">
            <summary>ORM配置：是否输出SQL语句。默认为不启用</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.TraceSQLTime">
            <summary>跟踪SQL执行时间，大于该阀值将输出日志，默认0毫秒不跟踪。</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.IsORMCacheDebug">
            <summary>ORM配置：是否启用缓存调试，默认不启用</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.IsORMRemoting">
            <summary>ORM配置：是否启用远程通讯，默认不启用</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.IsEntityDebug">
            <summary>通用实体库配置：是否写实体日志，默认启用。对管理员、角色、菜单等实体操作时向日志表写操作日志</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.CacheExpiration">
            <summary>
            缓存有效期：
            -2	关闭缓存；
            -1	非独占数据库，有外部系统操作数据库，使用请求级缓存；
            0		永久静态缓存；
            >0	静态缓存时间，单位是秒；
            默认-2。
            </summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.CacheCheckPeriod">
            <summary>缓存维护定时器的检查周期，默认5秒</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.NegativeEnable">
            <summary>是否启用反向工程，默认不启用。反向工程可以实现通过实体类反向更新数据库结构</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.NegativeCheckOnly">
            <summary>是否只检查不操作，默认不启用。启用时，仅把更新SQL写入日志</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.NegativeNoDelete">
            <summary>是否启用不删除字段，默认不启用。删除字段的操作过于危险，这里可以通过设为true关闭</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.NegativeExclude">
            <summary>要排除的链接名和表名，多个用逗号分隔，默认空。</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.ConnMaps">
            <summary>连接名映射#，表名映射@，把实体类中的Test2和Test3连接名映射到Test去，例如：Test2#Test,Test3#Test,Area@Test</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.OracleIsUseOwner">
            <summary>是否限制只能访问拥有者的信息，默认false</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.OracleIgnoreCase">
            <summary>是否忽略大小写，如果不忽略则在表名字段名外面加上双引号，默认true</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.OracleDllPath">
            <summary>Oracle Dll Path</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.IsCodeDebug">
            <summary>是否启用动态代码调试，把动态生成的实体类代码和程序集输出到临时目录，默认不启用</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.IsModelUseID">
            <summary>是否ID作为id的格式化，否则使用原名。默认使用ID</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.IsModelAutoCutPrefix">
            <summary>是否自动去除前缀，第一个_之前。默认启用</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.IsModelAutoCutTableName">
            <summary>是否自动去除字段前面的表名。默认启用</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.IsModelAutoFixWord">
            <summary>是否自动纠正大小写。默认启用</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.ModelFilterPrefixs">
            <summary>格式化表名字段名时，要过滤的前缀。默认tbl,table</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.SpriteDefaultConnName">
            <summary>自定义数据模型的默认连接名，默认Custom</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.DBConfigInfo.ORMConfigInfo.SpriteDefaultNameSpace">
            <summary>自定义数据模型的默认命名空间，默认DmFramework.Data.Custom</summary>
        </member>
        <member name="T:DmFramework.Data.Configuration.DBConfigs">
            <summary>配置文件管理器</summary>
        </member>
        <member name="T:DmFramework.Data.Configuration.TableItem">
            <summary>数据表元数据</summary>
        </member>
        <member name="F:DmFramework.Data.Configuration.TableItem._ModelCheckMode">
            <summary>模型检查模式</summary>
        </member>
        <member name="M:DmFramework.Data.Configuration.TableItem.FindConnMap(System.String,System.String)">
            <summary>根据连接名和类名查找连接名映射</summary>
            <param name="connName"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.TableItem.Create(System.Type)">
            <summary>创建</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.TableItem.GetFields(System.Type)">
            <summary>获取属性，保证基类属性在前</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.TableItem.FindByName(System.String)">
            <summary>根据名称查找</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Configuration.TableItem.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.EntityType">
            <summary>实体类型</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.Table">
            <summary>绑定表特性</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.Indexes">
            <summary>绑定索引特性</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.Relations">
            <summary>绑定关系特性</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.Description">
            <summary>说明</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.ConnMaps">
            <summary>连接名映射</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.Fields">
            <summary>数据字段</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.AllFields">
            <summary>所有字段</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.Identity">
            <summary>标识列</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.PrimaryKeys">
            <summary>主键</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.FieldNames">
            <summary>字段名集合</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.DataTable">
            <summary>数据表架构</summary>
        </member>
        <member name="P:DmFramework.Data.Configuration.TableItem.ModelCheckMode">
            <summary>模型检查模式</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.DatabaseType">
            <summary>数据库类型</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.Access">
            <summary>MS的Access文件数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.SqlServer">
            <summary>MS的SqlServer数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.Oracle">
            <summary>Oracle数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.MySql">
            <summary>MySql数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.SqlCe">
            <summary>SqlCe数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.SQLite">
            <summary>SQLite数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.Firebird">
            <summary>Firebird数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.PostgreSQL">
            <summary>SqlCe数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.Network">
            <summary>网络虚拟数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.Distributed">
            <summary>分布式数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DatabaseType.Other">
            <summary>外部数据库</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.DbBase">
            <summary>数据库基类</summary>
            <remarks>
            数据库类的职责是抽象不同数据库的共同点，理应最小化，保证原汁原味，因此不做缓存等实现。
            对于每一个连接字符串配置，都有一个数据库实例，而不是每个数据库类型一个实例，因为同类型数据库不同版本行为不同。
            </remarks>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.IDatabase">
            <summary>数据库接口</summary>
            <remarks>
            抽象数据库的功能特点。
            对于每一个连接字符串配置，都有一个数据库实例，而不是每个数据库类型一个实例，因为同类型数据库不同版本行为不同。
            </remarks>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.CreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.CreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.Support(System.String)">
            <summary>是否支持该提供者所描述的数据库</summary>
            <param name="providerName">提供者</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>构造分页SQL</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.PageSplit(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int32,System.Int32)">
            <summary>构造分页SQL</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.FormatName(System.String)">
            <summary>格式化名称，如果不是关键字，则原样返回</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.FormatValue(DmFramework.Data.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.FormatIdentity(DmFramework.Data.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化标识列，返回插入数据时所用的表达式，如果字段本身支持自增，则返回空</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.FormatParameterName(System.String)">
            <summary>格式化参数名</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDatabase.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDatabase.DbType">
            <summary>数据库类型</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDatabase.Factory">
            <summary>数据库提供者工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDatabase.ConnName">
            <summary>链接名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDatabase.ConnectionString">
            <summary>链接字符串</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDatabase.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDatabase.ServerVersion">
            <summary>数据库服务器版本</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDatabase.DateTimeNow">
            <summary>当前时间函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDatabase.DateTimeMin">
            <summary>最小时间</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDatabase.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDatabase.NewGuid">
            <summary>获取Guid的函数</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.OnDispose(System.Boolean)">
            <summary>销毁资源时，回滚未提交事务，并关闭数据库连接</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.ReleaseSession">
            <summary>释放所有会话</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.OnSetConnectionString(DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder)">
            <summary>设置连接字符串时允许从中取值或修改，基类用于读取拥有者Owner，子类重写时应调用基类</summary>
            <param name="builder"></param>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DbBase._sessions">
            <summary>保证数据库在每一个线程都有唯一的一个实例</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.CreateSession">
            <summary>创建数据库会话，数据库在每一个线程都有唯一的一个实例</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DbBase._metadata">
            <summary>唯一实例</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.CreateMetaData">
            <summary>创建元数据对象，唯一实例</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.Support(System.String)">
            <summary>是否支持该提供者所描述的数据库</summary>
            <param name="providerName">提供者</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.GetProviderFactory(System.String,System.String)">
            <summary>获取提供者工厂</summary>
            <param name="assemblyFile"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>构造分页SQL，优先选择max/min，然后选择not in</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.PageSplitMaxMin(System.String,System.Int32,System.Int32,System.String)">
            <summary>按唯一数字最大最小分析</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.CheckSimpleSQL(System.String)">
            <summary>检查简单SQL语句，比如Select * From table</summary>
            <param name="sql">待检查SQL语句</param>
            <returns>如果是简单SQL语句则返回表名，否则返回子查询(sql) XCode_Temp_a</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.CheckOrderClause(System.String@)">
            <summary>检查是否以Order子句结尾，如果是，分割sql为前后两部分</summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.PageSplit(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int32,System.Int32)">
            <summary>构造分页SQL</summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">表名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.FormatName(System.String)">
            <summary>格式化名称，如果是关键字，则格式化后返回，否则原样返回</summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.FormatValue(DmFramework.Data.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.FormatIdentity(DmFramework.Data.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化标识列，返回插入数据时所用的表达式，如果字段本身支持自增，则返回空</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.FormatParameterName(System.String)">
            <summary>格式化参数名</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.IsUnicode(System.String)">
            <summary>是否Unicode编码。只是固定判断n开头的几个常见类型为Unicode编码，这种方法不是很严谨，可以考虑读取DataTypes架构</summary>
            <param name="rawType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbBase.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbBase.DbType">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbBase.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbBase.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbBase.ConnectionString">
            <summary>链接字符串</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbBase.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbBase.ServerVersion">
            <summary>数据库服务器版本</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbBase.DateTimeNow">
            <summary>当前时间函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbBase.DateTimeMin">
            <summary>最小时间</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbBase.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbBase.NewGuid">
            <summary>获取Guid的函数</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.DbFactory">
            <summary>数据库工厂</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbFactory.Create(DmFramework.Data.DataAccessLayer.DatabaseType)">
            <summary>根据数据库类型创建提供者</summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbFactory.GetDefault(System.Type)">
            <summary>根据名称获取默认提供者</summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbFactory.GetProviderType(System.String,System.String)">
            <summary>从提供者和连接字符串猜测数据库处理器</summary>
            <param name="connStr"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.DbSession">
            <summary>数据库会话基类</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.IDbSession">
            <summary>
            数据库会话接口。
            对应于与数据库的一次会话连接。
            </summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.Open">
            <summary>打开</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.Close">
            <summary>关闭</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.AutoClose">
            <summary>
            自动关闭。
            启用事务后，不关闭连接。
            在提交或回滚事务时，如果IsAutoClose为true，则会自动关闭
            </summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.BeginTransaction">
            <summary>开始事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.Commit">
            <summary>提交事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.Rollback(System.Boolean)">
            <summary>回滚事务</summary>
            <param name="ignoreException">是否忽略异常</param>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.Query(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>记录集</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.Query(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回记录集</summary>
            <param name="cmd">DbCommand</param>
            <returns>记录集</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.QueryCount(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.QueryCount(DmFramework.Data.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.Execute(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.Execute(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回受影响的行数</summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行SQL语句，返回结果中的第一行第一列</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.CreateCommand">
            <summary>
            获取一个DbCommand。
            配置了连接，并关联了事务。
            连接已打开。
            使用完毕后，必须调用AutoClose方法，以使得在非事务及设置了自动关闭的情况下关闭连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.CreateCommand(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            获取一个DbCommand。
            配置了连接，并关联了事务。
            连接已打开。
            使用完毕后，必须调用AutoClose方法，以使得在非事务及设置了自动关闭的情况下关闭连接
            </summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDbSession.GetSchema(System.String,System.String[])">
            <summary>返回数据源的架构信息</summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDbSession.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDbSession.ConnectionString">
            <summary>链接字符串</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDbSession.Conn">
            <summary>数据库链接</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDbSession.DatabaseName">
            <summary>数据库名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDbSession.QueryTimes">
            <summary>查询次数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDbSession.ExecuteTimes">
            <summary>执行次数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDbSession.Opened">
            <summary>连接是否已经打开</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.OnDispose(System.Boolean)">
            <summary>销毁资源时，回滚未提交事务，并关闭数据库连接</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.Open">
            <summary>打开</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.Close">
            <summary>关闭</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.AutoClose">
            <summary>自动关闭。
            启用事务后，不关闭连接。
            在提交或回滚事务时，如果IsAutoClose为true，则会自动关闭
            </summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.OnException(System.Exception)">
            <summary>当异常发生时触发。关闭数据库连接，或者返还连接到连接池。</summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.OnException(System.Exception,System.String)">
            <summary>当异常发生时触发。关闭数据库连接，或者返还连接到连接池。</summary>
            <param name="ex"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DbSession.TransactionCount">
            <summary>
            事务计数。
            当且仅当事务计数等于1时，才提交或回滚。
            </summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.BeginTransaction">
            <summary>开始事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.Commit">
            <summary>提交事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.Rollback(System.Boolean)">
            <summary>回滚事务</summary>
            <param name="ignoreException">是否忽略异常</param>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.Query(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.Query(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回记录集</summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.QueryCount(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.QueryCount(DmFramework.Data.DataAccessLayer.SelectBuilder)">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.Execute(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.Execute(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回受影响的行数</summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行SQL语句，返回结果中的第一行第一列</summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.CreateCommand">
            <summary>
            获取一个DbCommand。
            配置了连接，并关联了事务。
            连接已打开。
            使用完毕后，必须调用AutoClose方法，以使得在非事务及设置了自动关闭的情况下关闭连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.CreateCommand(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            获取一个DbCommand。
            配置了连接，并关联了事务。
            连接已打开。
            使用完毕后，必须调用AutoClose方法，以使得在非事务及设置了自动关闭的情况下关闭连接
            </summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.GetSchema(System.String,System.String[])">
            <summary>返回数据源的架构信息。缓存10分钟</summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbSession.WriteSQL(System.String,System.Data.Common.DbParameter[])">
            <summary>写入SQL到文本中</summary>
            <param name="sql"></param>
            <param name="ps"></param>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.DbType">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.ConnectionString">
            <summary>链接字符串，会话单独保存，允许修改，修改不会影响数据库中的连接字符串</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.Conn">
            <summary>数据连接对象。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.QueryTimes">
            <summary>查询次数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.ExecuteTimes">
            <summary>执行次数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.ThreadID">
            <summary>线程编号，每个数据库会话应该只属于一个线程，该属性用于检查错误的跨线程操作</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.IsAutoClose">
            <summary>是否自动关闭。
            启用事务后，该设置无效。
            在提交或回滚事务时，如果IsAutoClose为true，则会自动关闭
            </summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.Opened">
            <summary>连接是否已经打开</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.DatabaseName">
            <summary>数据库名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.Trans">
            <summary>数据库事务</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbSession.ShowSQL">
            <summary>是否输出SQL语句，默认为ORMConfigInfo调试开关IsORMShowSQL</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.FileDbBase">
            <summary>文件型数据库</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.FileDbBase.FileName">
            <summary>文件</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.FileDbSession">
            <summary>文件型数据库会话</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.FileDbSession.Open">
            <summary>已重载。打开数据库连接前创建数据库</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.FileDbSession.FileName">
            <summary>文件</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.FileDbMetaData">
            <summary>文件型数据库元数据</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.DbMetaData">
            <summary>数据库元数据</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.IMetaData">
            <summary>数据库元数据接口</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IMetaData.GetTables">
            <summary>取得表模型，正向工程</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IMetaData.SetTables(DmFramework.Data.DataAccessLayer.IDataTable[])">
            <summary>设置表模型，检查数据表是否匹配表模型，反向工程</summary>
            <param name="tables"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IMetaData.SetTables(DmFramework.Data.DataAccessLayer.NegativeSetting,DmFramework.Data.DataAccessLayer.IDataTable[])">
            <summary>设置表模型，检查数据表是否匹配表模型，反向工程</summary>
            <param name="setting">设置</param>
            <param name="tables"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IMetaData.GetSchemaSQL(DmFramework.Data.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>获取数据定义语句</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns>数据定义语句</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IMetaData.SetSchema(DmFramework.Data.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>设置数据定义模式</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IMetaData.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IMetaData.MetaDataCollections">
            <summary>所有元数据集合</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IMetaData.ReservedWords">
            <summary>保留关键字</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetSchema(System.String,System.String[])">
            <summary>返回数据源的架构信息</summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.TryGetDataRowValue``1(System.Data.DataRow,System.String,``0@)">
            <summary>尝试从指定数据行中读取指定名称列的数据</summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetDataRowValue``1(System.Data.DataRow,System.String)">
            <summary>获取指定数据行指定字段的值，不存在时返回空</summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.FormatName(System.String)">
            <summary>格式化关键字</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.CheckAndGetDefault(DmFramework.Data.DataAccessLayer.IDataColumn,System.String@)">
            <summary>检查并获取当前数据库的默认值。如果数据库类型一致，则直接返回false，因为没有修改</summary>
            <param name="dc"></param>
            <param name="oriDefault"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.SetTables(DmFramework.Data.DataAccessLayer.IDataTable[])">
            <summary>设置表模型，检查数据表是否匹配表模型，反向工程</summary>
            <param name="tables"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.SetTables(DmFramework.Data.DataAccessLayer.NegativeSetting,DmFramework.Data.DataAccessLayer.IDataTable[])">
            <summary>设置表模型，检查数据表是否匹配表模型，反向工程</summary>
            <param name="setting">设置</param>
            <param name="tables"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.CheckColumnsChange(DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.NegativeSetting)">
            <summary>检查字段改变。某些数据库（如SQLite）没有添删改字段的DDL语法，可重载该方法，使用重建表方法ReBuildTable</summary>
            <param name="entitytable"></param>
            <param name="dbtable"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.CheckTableDescriptionAndIndex(DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.IDataTable,System.Boolean)">
            <summary>检查表说明和索引</summary>
            <param name="entitytable"></param>
            <param name="dbtable"></param>
            <param name="onlySql"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.IsColumnChanged(DmFramework.Data.DataAccessLayer.IDataColumn,DmFramework.Data.DataAccessLayer.IDataColumn,DmFramework.Data.DataAccessLayer.IDatabase)">
            <summary>检查字段是否有改变，除了默认值和备注以外</summary>
            <param name="entityColumn"></param>
            <param name="dbColumn"></param>
            <param name="entityDb"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.IsColumnDefaultChanged(DmFramework.Data.DataAccessLayer.IDataColumn,DmFramework.Data.DataAccessLayer.IDataColumn,DmFramework.Data.DataAccessLayer.IDatabase)">
            <summary>检查字段默认值是否有改变</summary>
            <param name="entityColumn"></param>
            <param name="dbColumn"></param>
            <param name="entityDb"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.ChangeColmnDefault(System.Text.StringBuilder,System.Boolean,DmFramework.Data.DataAccessLayer.IDataColumn,DmFramework.Data.DataAccessLayer.IDataColumn,DmFramework.Data.DataAccessLayer.IDatabase)">
            <summary>改变字段默认值。这里仅仅默认处理了时间日期，如果需要兼容多数据库，子类需要重载</summary>
            <param name="sb"></param>
            <param name="onlySql"></param>
            <param name="entityColumn"></param>
            <param name="dbColumn"></param>
            <param name="entityDb"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.PerformSchema(System.Text.StringBuilder,System.Boolean,DmFramework.Data.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>
            获取架构语句，该执行的已经执行。
            如果取不到语句，则输出日志信息；
            如果不是纯语句，则执行；
            </summary>
            <param name="sb"></param>
            <param name="onlySql"></param>
            <param name="schema"></param>
            <param name="values"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetSchemaSQL(DmFramework.Data.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>获取数据定义语句</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.SetSchema(DmFramework.Data.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>设置数据定义模式</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.FieldClause(DmFramework.Data.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>字段片段</summary>
            <param name="field"></param>
            <param name="onlyDefine">仅仅定义。定义操作才允许设置自增和使用默认值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetFieldConstraints(DmFramework.Data.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>取得字段约束</summary>
            <param name="field"></param>
            <param name="onlyDefine">仅仅定义</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetFieldDefault(DmFramework.Data.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>取得字段默认值</summary>
            <param name="field"></param>
            <param name="onlyDefine">仅仅定义</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetTables">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.OnGetTables(System.Collections.Generic.ICollection{System.String})">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetTables(System.Data.DataRow[])">
            <summary>根据数据行取得数据表</summary>
            <param name="rows">数据行</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.FixTable(DmFramework.Data.DataAccessLayer.IDataTable,System.Data.DataRow)">
            <summary>修正表</summary>
            <param name="table"></param>
            <param name="dr"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetFields(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>取得指定表的所有列构架</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetFields(DmFramework.Data.DataAccessLayer.IDataTable,System.Data.DataRow[])">
            <summary>获取指定表的字段</summary>
            <param name="table"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.FixField(DmFramework.Data.DataAccessLayer.IDataColumn,System.Data.DataRow)">
            <summary>修正指定字段</summary>
            <param name="field"></param>
            <param name="dr"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.FixField(DmFramework.Data.DataAccessLayer.IDataColumn,System.Data.DataRow,System.Data.DataRow)">
            <summary>修正指定字段</summary>
            <param name="field">字段</param>
            <param name="drColumn">字段元数据</param>
            <param name="drDataType">字段匹配的数据类型</param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetIndexes(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>获取索引</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.FixIndex(DmFramework.Data.DataAccessLayer.IDataIndex,System.Data.DataRow)">
            <summary>修正索引</summary>
            <param name="index"></param>
            <param name="dr"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.FindDataType(DmFramework.Data.DataAccessLayer.IDataColumn,System.String,System.Nullable{System.Boolean})">
            <summary>查找指定字段指定类型的数据类型</summary>
            <param name="field"></param>
            <param name="typeName"></param>
            <param name="isLong"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetFieldType(DmFramework.Data.DataAccessLayer.IDataColumn)">
            <summary>取字段类型</summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetFormatParam(DmFramework.Data.DataAccessLayer.IDataColumn,System.Data.DataRow)">
            <summary>取得格式化的类型参数</summary>
            <param name="field"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DbMetaData.GetFormatParamItem(DmFramework.Data.DataAccessLayer.IDataColumn,System.Data.DataRow,System.String)">
            <summary>获取格式化参数项</summary>
            <param name="field"></param>
            <param name="dr"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbMetaData.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbMetaData.MetaDataCollections">
            <summary>所有元数据集合</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbMetaData.ReservedWords">
            <summary>保留关键字</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbMetaData.DataTypes">
            <summary>数据类型</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DbMetaData.FieldTypeMaps">
            <summary>字段类型映射</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.FileDbMetaData.SetSchema(DmFramework.Data.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>设置数据定义模式</summary>
            <param name="schema"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.FileDbMetaData.CreateDatabase">
            <summary>创建数据库</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.FileDbMetaData.FileName">
            <summary>文件</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.RemoteDb">
            <summary>远程数据库。一般是分为客户端服务器的中大型数据库，该类数据库支持完整的SQL92</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.RemoteDb.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.RemoteDb.ServerVersion">
            <summary>数据库服务器版本</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.RemoteDbSession">
            <summary>远程数据库会话</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.RemoteDbSession.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.RemoteDbMetaData">
            <summary>远程数据库元数据</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.RemoteDbMetaData.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.DAL">
            <summary>数据访问层</summary>
            <remarks>
            主要用于选择不同的数据库，不同的数据库的操作有所差别。
            每一个数据库链接字符串，对应唯一的一个DAL实例。
            数据库链接字符串可以写在配置文件中，然后在Create时指定名字；
            也可以直接把链接字符串作为AddConnStr的参数传入。
            每一个数据库操作都必须指定表名以用于管理缓存，空表名或*将匹配所有缓存
            </remarks>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.#ctor(System.String)">
            <summary>构造函数</summary>
            <param name="connName">配置名</param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Create(System.String)">
            <summary>创建一个数据访问层对象。</summary>
            <param name="connName">配置名，或链接字符串</param>
            <returns>对应于指定链接的全局唯一的数据访问层对象</returns>
            2012.11.05 修正在WINFORM程序中，动态调整连接字后，无法生效的问题。BY HUIYUE
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.AddConnStr(System.String,System.String,System.Type,System.String)">
            <summary>添加连接字符串</summary>
            <param name="connName">连接名</param>
            <param name="connStr">连接字符串</param>
            <param name="type">实现了IDatabase接口的数据库类型</param>
            <param name="provider">数据库提供者，如果没有指定数据库类型，则有提供者判断使用哪一种内置类型</param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.SaveDbProviderConfig">
            <summary>保存数据库配置</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.AddConnStr(System.String,System.String,System.String)">
            <summary>添加连接字符串</summary>
            <param name="connName">连接名</param>
            <param name="dbName">数据库名称</param>
            <param name="dataConnection">数据库连接名称</param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.AddConnStr(System.String,System.String,System.Xml.Linq.XElement)">
            <summary>添加连接字符串</summary>
            <param name="connName">连接名</param>
            <param name="dbName">数据库名称</param>
            <param name="dataConnection">数据库连接信息</param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.GenerateConnectionString(System.String,System.Xml.Linq.XElement)">
            <summary>生成连接字符串</summary>
            <param name="connName">连接名称</param>
            <param name="dbName">数据库名称</param>
            <param name="elConn">数据库连接信息</param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.InitConnStrs">
            <summary>初始化连接字符串</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.GetNames">
            <summary>获取所有已注册的连接名</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.EncodeConnStr(System.String)">
            <summary>连接字符串编码</summary>
            <remarks>明文=>UTF8字节=>Base64</remarks>
            <param name="connstr"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.DecodeConnStr(System.String)">
            <summary>连接字符串解码</summary>
            <remarks>Base64=>UTF8字节=>明文</remarks>
            <param name="connstr"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Export">
            <summary>导出模型</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Export(System.Collections.Generic.IEnumerable{DmFramework.Data.DataAccessLayer.IDataTable})">
            <summary>导出模型</summary>
            <param name="tables"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Import(System.String)">
            <summary>导入模型</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.SetTables">
            <summary>反向工程。检查所有采用当前连接的实体类的数据表架构</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.CheckTables">
            <summary>检查数据表架构，不受反向工程启用开关限制</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.SetTables(DmFramework.Data.DataAccessLayer.IDataTable[])">
            <summary>在当前连接上检查指定数据表的架构</summary>
            <param name="tables"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.CreateOperate(System.String)">
            <summary>创建实体操作接口</summary>
            <remarks>因为只用来做实体操作，所以只需要一个实例即可</remarks>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>根据条件把普通查询SQL格式化为分页SQL。</summary>
            <remarks>
            因为需要继承重写的原因，在数据类中并不方便缓存分页SQL。
            所以在这里做缓存。
            </remarks>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.PageSplit(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int32,System.Int32)">
            <summary>根据条件把普通查询SQL格式化为分页SQL。</summary>
            <remarks>
            因为需要继承重写的原因，在数据类中并不方便缓存分页SQL。
            所以在这里做缓存。
            </remarks>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Select(System.String,System.String[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="sql">SQL语句</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Select(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int32,System.Int32,System.String[])">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.SelectCount(System.String,System.String[])">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sql">SQL语句</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.SelectCount(DmFramework.Data.DataAccessLayer.SelectBuilder,System.String[])">
            <summary>执行SQL查询，返回总记录数</summary>
            <param name="sb">查询生成器</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Execute(System.String,System.String[])">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="tableNames">受影响的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.InsertAndGetIdentity(System.String,System.String[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql"></param>
            <param name="tableNames">受影响的表的表名</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Execute(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.String[])">
            <summary>执行SQL语句，返回受影响的行数</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <param name="tableNames">受影响的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.String[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql"></param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <param name="tableNames">受影响的表的表名</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Select(System.Data.Common.DbCommand,System.String[])">
            <summary>执行CMD，返回记录集</summary>
            <param name="cmd">CMD</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Execute(System.Data.Common.DbCommand,System.String[])">
            <summary>执行CMD，返回受影响的行数</summary>
            <param name="cmd"></param>
            <param name="tableNames"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.BeginTransaction">
            <summary>开始事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Commit">
            <summary>提交事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.Rollback">
            <summary>回滚事务，忽略异常</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.WriteLog(System.String)">
            <summary>输出日志</summary>
            <param name="msg"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.WriteLog(System.String,System.Object[])">
            <summary>输出日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.WriteLog(System.Exception)">
            <summary>输出日志</summary>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.WriteLog(System.Exception,System.String)">
            <summary>输出异常日志</summary>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.WriteLog(System.Exception,System.String,System.Object[])">
            <summary>输出异常日志</summary>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.WriteDebugLog(System.String)">
            <summary>输出日志</summary>
            <param name="msg"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.WriteDebugLog(System.String,System.Object[])">
            <summary>输出日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.DAL.CreateTable">
            <summary>建立数据表对象</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.ConnStrs">
            <summary>链接字符串集合</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.DbProviderStream">
            <summary>数据连接、数据源配置数据流</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.DbProviderElement">
            <summary>数据库配置</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.DataConnectionsElements">
            <summary>数据库连接集合</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.DataSourcesElements">
            <summary>数据源集合</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.ProviderType">
            <summary>实现了IDatabase接口的数据库类型</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.DbType">
            <summary>数据库类型</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.ConnStr">
            <summary>连接字符串</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.Db">
            <summary>数据库。所有数据库操作在此统一管理，强烈建议不要直接使用该属性，在不同版本中IDatabase可能有较大改变</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.Session">
            <summary>数据库会话</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.Tables">
            <summary>取得所有表和视图的构架信息（异步缓存延迟1秒）。设为null可清除缓存</summary>
            <remarks>如果不存在缓存，则获取后返回；否则使用线程池线程获取，而主线程返回缓存。</remarks>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.Assembly">
            <summary>根据数据模型动态创建的程序集。带缓存，如果要更新，建议调用<see cref="M:DmFramework.Data.Code.EntityAssembly.Create(System.String,System.String,System.Collections.Generic.List{DmFramework.Data.DataAccessLayer.IDataTable})"/></summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.EnableCache">
            <summary>是否启用缓存</summary>
            <remarks>设为false可清空缓存</remarks>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.CacheCount">
            <summary>缓存个数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.QueryTimes">
            <summary>查询次数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.ExecuteTimes">
            <summary>执行次数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.Debug">
            <summary>是否调试</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.ShowSQL">
            <summary>是否输出SQL语句</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.NegativeEnable">
            <summary>是否启用数据架构</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.NegativeCheckOnly">
            <summary>是否只检查不操作，默认不启用</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.NegativeNoDelete">
            <summary>是否启用不删除字段</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.NegativeExclude">
            <summary>要排除的链接名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.DAL.TraceSQLTime">
            <summary>跟踪SQL执行时间，大于该阀值将输出日志，默认0毫秒不跟踪。</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Access.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Access.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Access.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Access.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Access.FormatValue(DmFramework.Data.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Access.CheckSupport">
            <summary>是否支持</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Access.DbType">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Access.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Access.DateTimeNow">
            <summary>当前时间函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Access.DateTimeMin">
            <summary>最小时间</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Access.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.AccessSession">
            <summary>Access数据库</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.AccessSession.Open">
            <summary>打开。已重写，为了建立数据库</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.AccessSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.AccessMetaData">
            <summary>Access元数据</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.AccessMetaData.GetFieldDefault(DmFramework.Data.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>取得字段默认值</summary>
            <param name="field"></param>
            <param name="onlyDefine">仅仅定义</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.AccessMetaData.SetSchema(DmFramework.Data.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>设置数据定义模式</summary>
            <param name="schema"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.AccessMetaData.CreateDatabase">
            <summary>创建数据库</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.Table">
            <summary>表</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.ConnectionString">
            <summary>连接字符串</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.FileName">
            <summary>文件名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.Conn">
            <summary>链接</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.Cat">
            <summary></summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.TableDef">
            <summary>表定义</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.Dbe">
            <summary>链接</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.Db">
            <summary></summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.Columns">
            <summary>字段集合</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.Supported">
            <summary>是否支持</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOTabe.Description">
            <summary>描述</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOColumn.Column">
            <summary>字段</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOColumn.Table">
            <summary>表</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOColumn.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOColumn.Description">
            <summary>描述</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOColumn.Default">
            <summary>描述</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOColumn.AutoIncrement">
            <summary>是否自增</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ADOColumn.Nullable">
            <summary>是否允许空</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.Distributed">
            <summary>
            分布式数据库。同时操作多个数据库，多读多写，读写分析。
            支持：
            1，一主多从写入（主库同步写入从库异步写入）；
            2，多主多从写入（主库同步写入从库异步写入）；
            3，按权重分布式读取；
            </summary>
            <remarks>
            1，通过连接字符串配置读写服务器组，并加上权重，如“WriteServer='connA*1,connC*0' ReadServer='connB*8,connD'”；
            2，对于写服务器，权重大于0表示作为主服务器，操作返回值取主服务器操作总和，等于0表示作为从服务器，采用异步方式写入，不设置权重表示0，全部不设置权重表示1；
            3，对于读服务器，默认根据权重进行随机分配，不设置表示1；
            4，对于读服务器，可优先考虑最近使用的数据库
            </remarks>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Distributed.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Distributed.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Distributed.Init">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Distributed.GetRnd">
            <summary>随机数产生器</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Distributed.GetReadDb">
            <summary>获取一个用于读取的数据库对象</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Distributed.DbType">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Distributed.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Distributed.WriteServers">
            <summary>写入服务器集合</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Distributed.ReadServers">
            <summary>读取服务器集合</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Distributed.Server.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Distributed.Server.Weight">
            <summary>权重</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Distributed.Server.Db">
            <summary>数据库对象</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Firebird.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Firebird.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Firebird.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>已重写。获取分页</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Firebird.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Firebird.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Firebird.FormatIdentity(DmFramework.Data.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化标识列，返回插入数据时所用的表达式，如果字段本身支持自增，则返回空</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Firebird.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Firebird.DbType">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Firebird.dbProviderFactory">
            <summary>提供者工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Firebird.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Firebird.DateTimeNow">
            <summary>当前时间函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Firebird.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.FirebirdSession">
            <summary>Firebird数据库</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.FirebirdSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.FirebirdMetaData">
            <summary>Firebird元数据</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.FirebirdMetaData.OnGetTables(System.Collections.Generic.ICollection{System.String})">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MySql.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MySql.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MySql.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>已重写。获取分页</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MySql.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MySql.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MySql.FormatValue(DmFramework.Data.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MySql.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.MySql.DbType">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.MySql.dbProviderFactory">
            <summary>提供者工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.MySql.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.MySql.DateTimeNow">
            <summary>当前时间函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.MySql.NewGuid">
            <summary>获取Guid的函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.MySql.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.MySql.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.MySqlSession">
            <summary>MySql数据库</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MySqlSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.MySqlMetaData">
            <summary>MySql元数据</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.Network">
            <summary>网络数据库</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Network.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Network.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Network.UpdateInfo">
            <summary>请求服务器，更新基本信息到本地</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Network.DbType">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Network.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Network.Server">
            <summary>服务端数据库对象，该对象不可以使用与会话相关的功能</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.NetworkSession">
            <summary>网络数据库会话</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.NetworkSession.Query(System.Data.Common.DbCommand)">
            <summary>不支持</summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.NetworkSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.NetworkSession.Execute(System.Data.Common.DbCommand)">
            <summary>执行DbCommand，返回受影响的行数</summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.NetworkSession.CreateCommand">
            <summary>不支持</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.NetworkSession.GetSchema(System.String,System.String[])">
            <summary>返回数据源的架构信息</summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.NetworkMetaData">
            <summary>网络数据库元数据</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.NetworkDbServer">
            <summary>网络数据库服务器，处理客户端发来的数据库请求</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.Oracle._settingDllPath">
            <summary>设置的dll路径</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Oracle.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Oracle.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Oracle.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>已重写。获取分页 2012.9.26 HUIYUE修正分页BUG</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Oracle.FormatDateTime(System.DateTime)">
            <summary>已重载。格式化时间</summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Oracle.FormatIdentity(DmFramework.Data.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化标识列，返回插入数据时所用的表达式，如果字段本身支持自增，则返回空</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Oracle.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.Oracle.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">表名</param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.Oracle._IgnoreCase">
            <summary>是否忽略大小写，如果不忽略则在表名字段名外面加上双引号</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Oracle.DbType">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Oracle.dbProviderFactory">
            <summary>提供者工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Oracle.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Oracle.UserID">
            <summary>用户名UserID</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Oracle.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Oracle.DllPath">
            <summary>OCI目录 </summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Oracle.OracleHome">
            <summary>Oracle运行时主目录</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Oracle.DateTimeNow">
            <summary>当前时间函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.Oracle.NewGuid">
            <summary>获取Guid的函数</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.OracleSession">
            <summary>Oracle数据库</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.OracleSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.OracleSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.OracleMeta">
            <summary>Oracle元数据</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.OracleMeta.OnGetTables(System.Collections.Generic.ICollection{System.String})">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.OracleMeta.dtSequences">
            <summary>序列</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.OracleMeta.CheckSeqExists(System.String)">
            <summary>检查序列是否存在</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.OracleMeta.GetFields(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>取得指定表的所有列构架</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.OracleMeta.GetColumnDefault(System.String,System.String)">
            <summary>获取默认值信息</summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.OracleMeta.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.OracleMeta.IsUseOwner">
            <summary>是否限制只能访问拥有者的信息</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.PostgreSQL.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.PostgreSQL.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.PostgreSQL.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>已重写。获取分页</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.PostgreSQL.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.PostgreSQL.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.PostgreSQL.FormatValue(DmFramework.Data.DataAccessLayer.IDataColumn,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.PostgreSQL.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.PostgreSQL.DbType">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.PostgreSQL.dbProviderFactory">
            <summary>提供者工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.PostgreSQL.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.PostgreSQL.DateTimeNow">
            <summary>当前时间函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.PostgreSQL.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.PostgreSQL.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.PostgreSQLSession">
            <summary>PostgreSQL数据库</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.PostgreSQLSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.PostgreSQLMetaData">
            <summary>PostgreSQL元数据</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SqlCe">
            <summary>SqlCe数据库。由 @Goon(12600112) 测试并完善正向反向工程</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlCe.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlCe.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlCe.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlCe.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlCe.DbType">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlCe.dbProviderFactory">
            <summary>SqlCe提供者工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlCe.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlCe.SqlCeProviderVersion">
            <summary>SqlCe提供者版本</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlCe.SqlCeVer">
            <summary>SqlCe版本,默认4.0</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlCe.DateTimeNow">
            <summary>当前时间函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlCe.DateTimeMin">
            <summary>最小时间</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SqlCeSession">
            <summary>SqlCe会话</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlCeSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlCeSession.GetSchema(System.String,System.String[])">
            <summary>返回数据源的架构信息</summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SqlCeMetaData">
            <summary>SqlCe元数据</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SQLCEVersion">
            <summary>SqlCe版本</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.SQLCEVersion.SQLCE20">
            <summary>Sqlce Ver2.0</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.SQLCEVersion.SQLCE30">
            <summary>Sqlce Ver3.0</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.SQLCEVersion.SQLCE35">
            <summary>Sqlce Ver3.5</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.SQLCEVersion.SQLCE40">
            <summary>Sqlce Ver4.0</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SqlCeHelper">
            <summary>SqlCe辅助类</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlCeHelper.DetermineVersion(System.String)">
            <summary>检查给定SqlCe文件的版本</summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlCeHelper.IsV35Installed">
            <summary>检测SqlServerCe3.5是否安装</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlCeHelper.IsV40Installed">
            <summary>检测SqlServerCe4是否安装</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlCeEngine.EngineType">
            <summary></summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlCeEngine.Engine">
            <summary>引擎</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SQLite.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SQLite.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SQLite.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>已重写。获取分页</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SQLite.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SQLite.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SQLite.StringConcat(System.String,System.String)">
            <summary>字符串相加</summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SQLite.DbType">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SQLite.dbProviderFactory">
            <summary>提供者工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SQLite.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SQLite.IsMemoryDatabase">
            <summary>是否内存数据库</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SQLite.DateTimeNow">
            <summary>当前时间函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SQLite.DateTimeMin">
            <summary>最小时间</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SQLite.NewGuid">
            <summary>获取Guid的函数，@老树 说SQLite没有这个函数</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SQLiteSession">
            <summary>SQLite数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.SQLiteSession.RetryTimes">
            <summary>文件锁定重试次数</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SQLiteSession.Execute(System.Data.Common.DbCommand)">
            <summary>已重载。增加锁</summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SQLiteSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SQLiteMetaData">
            <summary>SQLite元数据</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SQLiteMetaData.DropIndexSQL(DmFramework.Data.DataAccessLayer.IDataIndex)">
            <summary>删除索引方法</summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SQLiteMetaData.CheckTable(DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.NegativeSetting)">
            <summary>已重载。因为内存数据库无法检测到架构，不知道表是否已存在，所以需要自己维护</summary>
            <param name="entitytable"></param>
            <param name="dbtable"></param>
            <param name="setting"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServer.OnCreateSession">
            <summary>创建数据库会话</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServer.OnCreateMetaData">
            <summary>创建元数据对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServer.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>构造分页SQL</summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServer.FormatDateTime(System.DateTime)">
            <summary>格式化时间为SQL字符串</summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServer.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServer.DbType">
            <summary>返回数据库类型。外部DAL数据库类请使用Other</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServer.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServer.IsSQL2005">
            <summary>是否SQL2005及以上</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServer.DataPath">
            <summary>数据目录</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServer.DateTimeNow">
            <summary>当前时间函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServer.DateTimeMin">
            <summary>最小时间</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServer.LongTextLength">
            <summary>长文本长度</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServer.NewGuid">
            <summary>获取Guid的函数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServer.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SqlServerSession">
            <summary>SqlServer数据库</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServerSession.QueryCountFast(System.String)">
            <summary>快速查询单表记录数，稍有偏差</summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServerSession.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SqlServerMetaData">
            <summary>SqlServer元数据</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServerMetaData.OnGetTables(System.Collections.Generic.ICollection{System.String})">
            <summary>取得所有表构架</summary>
            <returns></returns>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServerMetaData.DatabaseExist(System.String)">
            <summary>使用数据架构确定数据库是否存在，因为使用系统视图可能没有权限</summary>
            <param name="dbname"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServerMetaData.TableExist(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>使用数据架构确定数据表是否存在，因为使用系统视图可能没有权限</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SqlServerMetaData.Trim(System.String,System.String,System.String)">
            <summary>除去字符串两端成对出现的符号</summary>
            <param name="str"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServerMetaData.IsSQL2005">
            <summary>是否SQL2005</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServerMetaData.level0type">
            <summary>0级类型</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServerMetaData.SchemaSql">
            <summary>构架SQL</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SqlServerMetaData.DescriptionSql">
            <summary>取表说明SQL</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.DDLSchema">
            <summary>数据定义模式</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.CreateDatabase">
            <summary>建立数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.DropDatabase">
            <summary>删除数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.DatabaseExist">
            <summary>数据库是否存在</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.CreateTable">
            <summary>建立表</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.DropTable">
            <summary>删除表</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.TableExist">
            <summary>数据表是否存在</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.AddTableDescription">
            <summary>添加表说明</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.DropTableDescription">
            <summary>删除表说明</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.AddColumn">
            <summary>添加字段</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.AlterColumn">
            <summary>修改字段</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.DropColumn">
            <summary>删除字段</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.AddColumnDescription">
            <summary>添加字段说明</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.DropColumnDescription">
            <summary>删除字段说明</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.AddDefault">
            <summary>添加默认值</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.DropDefault">
            <summary>删除默认值</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.CreateIndex">
            <summary>建立索引</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.DropIndex">
            <summary>删除索引</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.BackupDatabase">
            <summary>备份数据库</summary>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.DDLSchema.RestoreDatabase">
            <summary>还原数据库</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.IDataColumn">
            <summary>数据列</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataColumn.Fix">
            <summary>重新计算修正别名。避免与其它字段名或表名相同，避免关键字</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataColumn.Clone(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>克隆到指定的数据表</summary>
            <param name="table"></param>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.ID">
            <summary>顺序编号</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.ColumnName">
            <summary>列名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.DataType">
            <summary>数据类型</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.RawType">
            <summary>原始数据类型。
            当且仅当目标数据库同为该数据库类型时，采用实体属性信息上的RawType作为反向工程的目标字段类型，以期获得开发和生产的最佳兼容。
            </summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.Identity">
            <summary>标识</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.PrimaryKey">
            <summary>主键</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.Length">
            <summary>长度</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.NumOfByte">
            <summary>字节数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.Precision">
            <summary>精度</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.Scale">
            <summary>位数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.Nullable">
            <summary>允许空</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.IsUnicode">
            <summary>是否Unicode</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.Default">
            <summary>默认值</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.Description">
            <summary>说明</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.Table">
            <summary>说明数据表</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.DisplayName">
            <summary>显示名。如果有Description则使用Description，否则使用Name</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataColumn.Properties">
            <summary>扩展属性</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.IDataIndex">
            <summary>
            数据索引。
            可根据索引生成查询方法，是否唯一决定该索引返回的是单个实体还是实体集合。
            正向工程将会为所有一对一索引建立关系。
            </summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataIndex.Clone(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>克隆到指定的数据表</summary>
            <param name="table"></param>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataIndex.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataIndex.Columns">
            <summary>数据列集合</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataIndex.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataIndex.PrimaryKey">
            <summary>是否主键</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataIndex.Computed">
            <summary>是否计算出来的，而不是数据库内置的。主要供反向工程识别该索引是否由计算产生，反向工程会要求数据库拥有真正的索引。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataIndex.Table">
            <summary>说明数据表</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.IDataRelation">
            <summary>
            数据关系。
            一个表如果有多个数据关系，表明是多对多的关系表；如果只有一个关系，需要看是否唯一，它决定是一对一还是一对多。并可根据关系，生成对应的数据索引。
            可根据数据关系生成扩展属性。
            正向工程将会为所有数据关系建立相对应的索引。
            </summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataRelation.Clone(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>克隆到指定的数据表</summary>
            <param name="table"></param>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataRelation.Column">
            <summary>数据列</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataRelation.RelationTable">
            <summary>引用表</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataRelation.RelationColumn">
            <summary>引用列</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataRelation.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataRelation.Computed">
            <summary>是否计算出来的，而不是数据库内置的</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataRelation.Table">
            <summary>说明数据表</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.IDataTable">
            <summary>数据表</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataTable.CreateColumn">
            <summary>创建数据列</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataTable.CreateRelation">
            <summary>创建数据关系</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataTable.CreateIndex">
            <summary>创建数据索引</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataTable.GetColumn(System.String)">
            <summary>根据字段名获取字段</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataTable.GetColumns(System.String[])">
            <summary>根据字段名数组获取字段数组</summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataTable.Connect(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>连接另一个表，处理两表间关系</summary>
            <param name="table"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IDataTable.Fix">
            <summary>修正数据</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.ID">
            <summary>编号</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.Owner">
            <summary>所有者</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.DbType">
            <summary>数据库类型。
            仅用于记录实体类由何种类型数据库生成，当且仅当目标数据库同为该数据库类型时，采用实体属性信息上的RawType作为反向工程的目标字段类型，以期获得开发和生产的最佳兼容。
            </summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.IsView">
            <summary>是否视图</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.Description">
            <summary>说明</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.Columns">
            <summary>数据列集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.Relations">
            <summary>数据关系集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.Indexes">
            <summary>数据索引集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.PrimaryKeys">
            <summary>主键集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.DisplayName">
            <summary>显示名。如果有Description则使用Description，否则使用Name</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IDataTable.Properties">
            <summary>扩展属性</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.IModelResolver">
            <summary>模型解析器接口。解决名称大小写、去前缀、关键字等多个问题</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IModelResolver.GetName(DmFramework.Data.DataAccessLayer.IDataColumn)">
            <summary>获取别名。过滤特殊符号，过滤_之类的前缀。另外，避免一个表中的字段别名重名</summary>
            <param name="dc"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IModelResolver.GetName(System.String)">
            <summary>获取别名。过滤特殊符号，过滤_之类的前缀。</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IModelResolver.GetName(DmFramework.Data.DataAccessLayer.IDataIndex)">
            <summary>根据字段名等信息计算索引的名称</summary>
            <param name="di"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IModelResolver.CutPrefix(System.String)">
            <summary>去除前缀。默认去除第一个_前面部分，去除tbl和table前缀</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IModelResolver.FixWord(System.String)">
            <summary>自动处理大小写</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IModelResolver.GetDisplayName(System.String,System.String)">
            <summary>获取显示名，如果描述不存在，则使用名称，否则使用描述前面部分，句号（中英文皆可）、换行分隔</summary>
            <param name="name"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IModelResolver.Connect(DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>连接两个表。
            实际上是猜测它们之间的关系，根据一个字段名是否等于另一个表的表名加某个字段名来判断是否存在关系。</summary>
            <param name="table"></param>
            <param name="rtable"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IModelResolver.GuessRelation(DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.IDataTable,System.String,DmFramework.Data.DataAccessLayer.IDataColumn,System.String)">
            <summary>猜测表间关系</summary>
            <param name="table"></param>
            <param name="rtable"></param>
            <param name="rname"></param>
            <param name="column"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IModelResolver.Fix(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>修正数据</summary>
            <param name="table"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.IModelResolver.Fix(DmFramework.Data.DataAccessLayer.IDataColumn)">
            <summary>修正数据列</summary>
            <param name="column"></param>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IModelResolver.UseID">
            <summary>是否ID作为id的格式化，否则使用原名。默认使用ID</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IModelResolver.AutoCutPrefix">
            <summary>是否自动去除前缀。默认启用</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IModelResolver.AutoCutTableName">
            <summary>是否自动去除字段前面的表名。默认启用</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IModelResolver.AutoFixWord">
            <summary>是否自动纠正大小写。默认启用</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.IModelResolver.FilterPrefixs">
            <summary>要过滤的前缀</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.ModelResolver">
            <summary>模型解析器。解决名称大小写、去前缀、关键字等多个问题</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.GetName(DmFramework.Data.DataAccessLayer.IDataColumn)">
            <summary>获取别名。过滤特殊符号，过滤_之类的前缀。另外，避免一个表中的字段别名重名</summary>
            <param name="dc"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.GetName(System.String)">
            <summary>获取别名。过滤特殊符号，过滤_之类的前缀。</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.GetName(DmFramework.Data.DataAccessLayer.IDataIndex)">
            <summary>根据字段名等信息计算索引的名称</summary>
            <param name="di"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.CutPrefix(System.String)">
            <summary>去除前缀。默认去除第一个_前面部分，去除tbl和table前缀</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.FixWord(System.String)">
            <summary>自动处理大小写</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Data.DataAccessLayer.ModelResolver._CG">
            <summary>代码生成器</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.IsKeyWord(System.String)">
            <summary>是否关键字</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.GetDisplayName(System.String,System.String)">
            <summary>获取显示名，如果描述不存在，则使用名称，否则使用描述前面部分，句号（中英文皆可）、换行分隔</summary>
            <param name="name"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.Connect(DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>连接两个表。
            实际上是猜测它们之间的关系，根据一个字段名是否等于另一个表的表名加某个字段名来判断是否存在关系。</summary>
            <param name="table"></param>
            <param name="rtable"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.GuessRelation(DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.IDataTable,System.String,DmFramework.Data.DataAccessLayer.IDataColumn,System.String)">
            <summary>猜测表间关系</summary>
            <param name="table"></param>
            <param name="rtable"></param>
            <param name="rname"></param>
            <param name="column"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.Fix(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>修正数据</summary>
            <param name="table"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.FixRelationBySingleIndex(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>根据单字段索引修正对应的关系</summary>
            <param name="table"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.CreateIndexForRelation(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>给所有关系字段建立索引</summary>
            <param name="table"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.FixPrimaryByIndex(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>从索引中修正主键</summary>
            <param name="table"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.CreateUniqueIndexForIdentity(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>给非主键的自增字段建立唯一索引</summary>
            <param name="table"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.FixIndex(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>索引应该具有跟字段一样的唯一和主键约束</summary>
            <param name="table"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelResolver.Fix(DmFramework.Data.DataAccessLayer.IDataColumn)">
            <summary>修正数据列</summary>
            <param name="column"></param>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ModelResolver.Current">
            <summary>当前名称解析器</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ModelResolver.UseID">
            <summary>是否ID作为id的格式化，否则使用原名。默认使用ID</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ModelResolver.AutoCutPrefix">
            <summary>是否自动去除前缀。默认启用</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ModelResolver.AutoCutTableName">
            <summary>是否自动去除字段前面的表名。默认启用</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ModelResolver.AutoFixWord">
            <summary>是否自动纠正大小写。默认启用</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.ModelResolver.FilterPrefixs">
            <summary>要过滤的前缀</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.ModelHelper">
            <summary>数据模型扩展</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.GetColumn(DmFramework.Data.DataAccessLayer.IDataTable,System.String)">
            <summary>根据字段名获取字段</summary>
            <param name="table"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.GetColumns(DmFramework.Data.DataAccessLayer.IDataTable,System.String[])">
            <summary>根据字段名数组获取字段数组</summary>
            <param name="table"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.Is(DmFramework.Data.DataAccessLayer.IDataTable,System.String)">
            <summary>判断表是否等于指定名字</summary>
            <param name="table"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.Is(DmFramework.Data.DataAccessLayer.IDataColumn,System.String)">
            <summary>判断字段是否等于指定名字</summary>
            <param name="column"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.GetIndex(DmFramework.Data.DataAccessLayer.IDataTable,System.String[])">
            <summary>根据字段名找索引</summary>
            <param name="table"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.GetRelation(DmFramework.Data.DataAccessLayer.IDataTable,System.String)">
            <summary>根据字段从指定表中查找关系</summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.GetRelation(DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.IDataRelation)">
            <summary>根据字段、关联表、关联字段从指定表中查找关系</summary>
            <param name="table"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.GetRelation(DmFramework.Data.DataAccessLayer.IDataTable,System.String,System.String,System.String)">
            <summary>根据字段、关联表、关联字段从指定表中查找关系</summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <param name="rtableName"></param>
            <param name="rcolumnName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.ToXml(System.Collections.Generic.IEnumerable{DmFramework.Data.DataAccessLayer.IDataTable},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>导出模型</summary>
            <param name="tables"></param>
            <param name="atts">附加属性</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.FromXml(System.String,System.Func{DmFramework.Data.DataAccessLayer.IDataTable},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>导入模型</summary>
            <param name="xml"></param>
            <param name="createTable">用于创建<see cref="T:DmFramework.Data.DataAccessLayer.IDataTable"/>实例的委托</param>
            <param name="atts">附加属性</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.ReadXml(DmFramework.Data.DataAccessLayer.IDataTable,System.Xml.XmlReader)">
            <summary>读取</summary>
            <param name="table"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.WriteXml(DmFramework.Data.DataAccessLayer.IDataTable,System.Xml.XmlWriter)">
            <summary>写入</summary>
            <param name="table"></param>
            <param name="writer"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.ReadXml(System.Xml.XmlReader,System.Object)">
            <summary>读取</summary>
            <param name="reader"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.WriteXml(System.Xml.XmlWriter,System.Object,System.Boolean)">
            <summary>写入</summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="writeDefaultValueMember">是否写数值为默认值的成员。为了节省空间，默认不写。</param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.Fix(DmFramework.Data.DataAccessLayer.IDataColumn,DmFramework.Data.DataAccessLayer.IDataColumn)">
            <summary>根据类型修正字段的一些默认值。仅考虑MSSQL</summary>
            <param name="dc"></param>
            <param name="oridc"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.CopyFrom(DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>复制数据表到另一个数据表，不复制数据列、索引和关系</summary>
            <param name="src"></param>
            <param name="des"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.CopyAllFrom(DmFramework.Data.DataAccessLayer.IDataTable,DmFramework.Data.DataAccessLayer.IDataTable,System.Boolean)">
            <summary>复制数据表到另一个数据表，复制所有数据列、索引和关系</summary>
            <param name="src"></param>
            <param name="des"></param>
            <param name="resetColumnID">是否重置列ID</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.CopyFrom(DmFramework.Data.DataAccessLayer.IDataColumn,DmFramework.Data.DataAccessLayer.IDataColumn)">
            <summary>赋值数据列到另一个数据列</summary>
            <param name="src"></param>
            <param name="des"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.CopyFrom(DmFramework.Data.DataAccessLayer.IDataIndex,DmFramework.Data.DataAccessLayer.IDataIndex)">
            <summary>赋值数据列到另一个数据列</summary>
            <param name="src"></param>
            <param name="des"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.CopyFrom(DmFramework.Data.DataAccessLayer.IDataRelation,DmFramework.Data.DataAccessLayer.IDataRelation)">
            <summary>赋值数据列到另一个数据列</summary>
            <param name="src"></param>
            <param name="des"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.ModelHelper.Connect(System.Collections.Generic.IEnumerable{DmFramework.Data.DataAccessLayer.IDataTable})">
            <summary>表间连接，猜测关系</summary>
            <param name="tables"></param>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.NullableDictionary`2">
            <summary>可空字典。获取数据时如果指定键不存在可返回空而不是抛出异常</summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.NullableDictionary`2.#ctor">
            <summary>默认构造函数</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.NullableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>构造函数</summary>
            <param name="comparer"></param>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.NullableDictionary`2.Item(`0)">
            <summary>获取或设置与指定的属性是否有脏数据。</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SerializableDataMember">
            <summary>可序列化数据成员</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.HmField">
            <summary>字段构架</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmField.Fix">
            <summary>重新计算修正别名。避免与其它字段名或表名相同，避免关键字</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmField.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmField.System#ICloneable#Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmField.Clone(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>克隆</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.ID">
            <summary>顺序编号</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.ColumnName">
            <summary>列名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.DataType">
            <summary>数据类型</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.FieldType">
            <summary>字段类型</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.RawType">
            <summary>原始数据类型</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.Identity">
            <summary>标识</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.PrimaryKey">
            <summary>主键</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.Length">
            <summary>长度</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.NumOfByte">
            <summary>字节数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.Precision">
            <summary>精度</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.Scale">
            <summary>位数</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.Nullable">
            <summary>允许空</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.IsUnicode">
            <summary>是否Unicode</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.Default">
            <summary>默认值</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.Description">
            <summary>说明</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.Table">
            <summary>表</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.DisplayName">
            <summary>显示名。如果有Description则使用Description，否则使用Name</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmField.Properties">
            <summary>扩展属性</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.HmIndex">
            <summary>索引</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmIndex.System#ICloneable#Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmIndex.Clone(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>克隆</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmIndex.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmIndex.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmIndex.Columns">
            <summary>数据列集合</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmIndex.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmIndex.PrimaryKey">
            <summary>是否主键</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmIndex.Computed">
            <summary>是否计算出来的，而不是数据库内置的</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmIndex.Table">
            <summary>表</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.HmRelation">
            <summary>数据关系</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmRelation.System#ICloneable#Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmRelation.Clone(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>克隆</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmRelation.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmRelation.Column">
            <summary>数据列</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmRelation.RelationTable">
            <summary>引用表</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmRelation.RelationColumn">
            <summary>引用列</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmRelation.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmRelation.Computed">
            <summary>是否计算出来的，而不是数据库内置的</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmRelation.Table">
            <summary>表</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.HmTable">
            <summary>表模型</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.#ctor(System.String)">
            <summary>初始化</summary>
            <param name="name"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.CreateColumn">
            <summary>创建字段</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.CreateRelation">
            <summary>创建外键</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.CreateIndex">
            <summary>创建索引</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.GetColumn(System.String)">
            <summary>根据字段名获取字段</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.GetColumns(System.String[])">
            <summary>根据字段名数组获取字段数组</summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.Connect(DmFramework.Data.DataAccessLayer.IDataTable)">
            <summary>连接另一个表，处理两表间关系</summary>
            <param name="table"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.Fix">
            <summary>修正数据</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.Export">
            <summary>导出</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.Import(System.String)">
            <summary>导入</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.System#ICloneable#Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>获取架构</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>读取</summary>
            <param name="reader"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>写入</summary>
            <param name="writer"></param>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.ID">
            <summary>编号</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.Name">
            <summary>名称</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.Description">
            <summary>表说明</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.IsView">
            <summary>是否视图</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.Owner">
            <summary>所有者</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.DbType">
            <summary>数据库类型</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.Columns">
            <summary>字段集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.Relations">
            <summary>关系集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.Indexes">
            <summary>索引集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.PrimaryKeys">
            <summary>主键集合。可以是空集合，但不能为null。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.DisplayName">
            <summary>显示名。如果有Description则使用Description，否则使用Name</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmTable.Properties">
            <summary>扩展属性</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.MSPageSplit">
            <summary>MS系列数据库分页算法</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MSPageSplit.PageSplit(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int64,System.Int64,System.Boolean,System.Func{DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int64})">
            <summary>分页算法</summary>
            <remarks>
            builder里面必须含有排序，否则就要通过key指定主键，否则大部分算法不能使用，会导致逻辑数据排序不正确。
            其实，一般数据都是按照聚集索引排序，而聚集索引刚好也就是主键。
            所以，只要设置的Key顺序跟主键顺序一致，就没有问题。
            如果，Key指定了跟主键不一致的顺序，那么查询语句一定要指定同样的排序。
            </remarks>
            <param name="builder"></param>
            <param name="startRowIndex"></param>
            <param name="maximumRows"></param>
            <param name="isSql2005"></param>
            <param name="queryCountCallback">查询总记录数的委托，近供DoubleTop使用</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MSPageSplit.TopNotIn(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>最经典的NotIn分页，通用但是效率最差。只需指定一个排序列。</summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MSPageSplit.DoubleTop(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int64,System.Int64,System.Func{DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int64})">
            <summary>双Top分页，因为没有使用not in，性能比NotIn要好。语句必须有排序，不需额外指定排序列</summary>
            <param name="builder"></param>
            <param name="startRowIndex"></param>
            <param name="maximumRows"></param>
            <param name="queryCountCallback">查询总记录数的委托，近供DoubleTop使用</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MSPageSplit.MaxMin(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>按唯一数字最大最小分页，性能很好。必须指定一个数字型排序列。</summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.MSPageSplit.RowNumber(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int64,System.Int64)">
            <summary>RowNumber分页算法</summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.NegativeSetting">
            <summary>反向工程设置</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.NegativeSetting.CheckOnly">
            <summary>是否只检查。生成日志，但不执行操作</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.NegativeSetting.NoDelete">
            <summary>是否不删除。在执行反向操作的时候，所有涉及删除表和删除字段的操作均不进行。</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.SelectBuilder">
            <summary>SQL查询语句生成器</summary>
            <remarks>
            查询语句的复杂性，使得多个地方使用起来极为不方面。
            应该以本类作为查询对象，直接从最上层深入到最下层
            </remarks>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.Parse(System.String)">
            <summary>分析一条SQL</summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.ToString">
            <summary>已重写。获取本Builder所分析的SQL语句</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.SelectCount">
            <summary>获取记录数的语句</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.Clone">
            <summary>克隆</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.AppendWhereAnd(System.String,System.Object[])">
            <summary>增加Where条件</summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.AppendColumn(System.String[])">
            <summary>增加多个字段，必须是当前表普通字段，如果内部是*则不加</summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.AsChild(System.String)">
            <summary>作为子查询</summary>
            <param name="alias">别名，某些数据库可能需要使用as</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.CloneWithGroupBy(System.String)">
            <summary>处理可能带GroupBy的克隆，如果带有GroupBy，则必须作为子查询，否则简单克隆即可</summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.Split(System.String,System.Boolean[]@)">
            <summary>拆分排序字句</summary>
            <param name="orderby"></param>
            <param name="isdescs"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.Join(System.String[],System.Boolean[])">
            <summary>连接排序字句</summary>
            <param name="keys"></param>
            <param name="isdescs"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.SelectBuilder.op_Implicit(DmFramework.Data.DataAccessLayer.SelectBuilder)~System.String">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.Key">
            <summary>分页主键</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.Keys">
            <summary>分页主键组</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.IsDesc">
            <summary>是否降序</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.IsDescs">
            <summary>主键组是否降序</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.IsInt">
            <summary>是否整数自增主键</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.KeyOrder">
            <summary>分页主键排序</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.ReverseKeyOrder">
            <summary>分页主键反排序</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.KeyIsOrderBy">
            <summary>排序字段是否唯一且就是主键</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.Column">
            <summary>选择列</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.Table">
            <summary>数据表</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.Where">
            <summary>条件</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.GroupBy">
            <summary>分组</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.Having">
            <summary>分组条件</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.OrderBy">
            <summary>排序</summary>
            <remarks>给排序赋值时，如果没有指定分页主键，则自动采用排序中的字段</remarks>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.ColumnOrDefault">
            <summary>选择列，为空时为*</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.SelectBuilder.Parameters">
            <summary>参数集合</summary>
        </member>
        <member name="T:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder">
            <summary>连接字符串构造器</summary>
            <remarks>未稳定，仅供DmFramework.Data内部使用，不建议外部使用</remarks>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder.Add(System.String,System.String)">
            <summary>已重载。</summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder.Remove(System.String)">
            <summary>已重载。</summary>
            <param name="key"></param>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder.Clear">
            <summary>已重载。</summary>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder.TryGetValue(System.String,System.String@)">
            <summary>尝试获取值</summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder.TryGetAndRemove(System.String,System.String@)">
            <summary>获取并删除连接字符串中的项</summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder.Keys">
            <summary>已重载。</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder.OptionalConnStrs">
            <summary>可选参数，手动在配置文件中输入</summary>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder.Item(System.String)">
            <summary>已重载。</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.DataAccessLayer.HmDbConnectionStringBuilder.ConnectionString">
            <summary>连接字符串</summary>
        </member>
        <member name="T:DmFramework.Data.IDataRowEntityAccessor">
            <summary>在数据行和实体类之间映射数据的接口</summary>
        </member>
        <member name="M:DmFramework.Data.IDataRowEntityAccessor.LoadData(System.Data.DataTable)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="dt">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IDataRowEntityAccessor.LoadData(System.Data.DataRow,DmFramework.Data.IEntity)">
            <summary>从一个数据行对象加载数据。不加载关联对象。</summary>
            <param name="dr">数据行</param>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:DmFramework.Data.IDataRowEntityAccessor.LoadData(System.Data.IDataReader)">
            <summary>从数据读写器加载数据。无数据时返回空集合而不是null。</summary>
            <param name="dr">数据读写器</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IDataRowEntityAccessor.LoadData(System.Data.IDataReader,DmFramework.Data.IEntity)">
            <summary>从一个数据行对象加载数据。不加载关联对象。</summary>
            <param name="dr">数据读写器</param>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:DmFramework.Data.IDataRowEntityAccessor.ToData(DmFramework.Data.IEntity,System.Data.DataRow@)">
            <summary>把数据复制到数据行对象中。</summary>
            <param name="entity">实体对象</param>
            <param name="dr">数据行</param>
        </member>
        <member name="T:DmFramework.Data.IDataRowEntityAccessorProvider">
            <summary>在数据行和实体类之间映射数据接口的提供者</summary>
        </member>
        <member name="M:DmFramework.Data.IDataRowEntityAccessorProvider.CreateDataRowEntityAccessor(System.Type)">
            <summary>创建实体类的数据行访问器</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataRowEntityAccessorProvider.CreateDataRowEntityAccessor(System.Type)">
            <summary>创建实体类的数据行访问器</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.DataRowEntityAccessor.LoadData(System.Data.DataTable)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="dt">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.DataRowEntityAccessor.LoadData(System.Data.DataRow,DmFramework.Data.IEntity)">
            <summary>从一个数据行对象加载数据。不加载关联对象。</summary>
            <param name="dr">数据行</param>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:DmFramework.Data.DataRowEntityAccessor.LoadData(System.Data.IDataReader)">
            <summary>从数据读写器加载数据。无数据时返回空集合而不是null。</summary>
            <param name="dr">数据读写器</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.DataRowEntityAccessor.LoadData(System.Data.IDataReader,DmFramework.Data.IEntity)">
            <summary>从一个数据读写器加载数据。不加载关联对象。</summary>
            <param name="dr">数据读写器</param>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:DmFramework.Data.DataRowEntityAccessor.ToData(DmFramework.Data.IEntity,System.Data.DataRow@)">
            <summary>把数据复制到数据行对象中。</summary>
            <param name="entity">实体对象</param>
            <param name="dr">数据行</param>
        </member>
        <member name="P:DmFramework.Data.DataRowEntityAccessor.EntityType">
            <summary>实体类</summary>
        </member>
        <member name="P:DmFramework.Data.DataRowEntityAccessor.Factory">
            <summary>实体操作者</summary>
        </member>
        <member name="P:DmFramework.Data.DataRowEntityAccessor.FieldItems">
            <summary>字段名-字段字典</summary>
        </member>
        <member name="T:DmFramework.Data.DirtyCollection">
            <summary>脏属性集合</summary>
            <remarks>实现IDictionary接口，为了让使用者能直接使用重载了的索引器</remarks>
        </member>
        <member name="P:DmFramework.Data.DirtyCollection.Item(System.String)">
            <summary>获取或设置与指定的属性是否有脏数据。</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.Entity`1">
            <summary>数据实体类基类。所有数据实体类都必须继承该类。</summary>
        </member>
        <member name="T:DmFramework.Data.EntityBase">
            <summary>数据实体基类的基类</summary>
        </member>
        <member name="T:DmFramework.Data.IEntity">
            <summary>数据实体接口</summary>
        </member>
        <member name="M:DmFramework.Data.IEntity.SetNullKey">
            <summary>设置主键为空。Save将调用Insert</summary>
        </member>
        <member name="M:DmFramework.Data.IEntity.LoadData(System.Data.DataRow)">
            <summary>从一个数据行对象加载数据。不加载关联对象。</summary>
            <param name="dr">数据行</param>
        </member>
        <member name="M:DmFramework.Data.IEntity.Insert">
            <summary>把该对象持久化到数据库</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.Update">
            <summary>更新数据库</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.Delete">
            <summary>从数据库中删除该对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.Save">
            <summary>保存。根据主键检查数据库中是否已存在该对象，再决定调用Insert或Update</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.SaveWithoutValid">
            <summary>不需要验证的保存，不执行Valid，一般用于快速导入数据</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.SetItem(System.String,System.Object)">
            <summary>设置字段值</summary>
            <param name="name">字段名</param>
            <param name="value">值</param>
            <returns>返回是否成功设置了数据</returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.CloneEntity(System.Boolean)">
            <summary>克隆实体。创建当前对象的克隆对象，仅拷贝基本字段</summary>
            <param name="setDirty">是否设置脏数据</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.CopyFrom(DmFramework.Data.IEntity,System.Boolean)">
            <summary>复制来自指定实体的成员，可以是不同类型的实体，只复制共有的基本字段，影响脏数据</summary>
            <param name="entity">来源实体对象</param>
            <param name="setDirty">是否设置脏数据</param>
            <returns>实际复制成员数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.ToJson">
            <summary>导出Json</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.EqualTo(DmFramework.Data.IEntity)">
            <summary>判断两个实体是否相等。有可能是同一条数据的两个实体对象</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.SetAdditionalField(System.String,System.Boolean)">
            <summary>设置累加字段。如果是第一次设置该字段，则保存该字段当前数据作为累加基础数据</summary>
            <param name="name">字段名称</param>
            <param name="reset">是否重置。可以保存当前数据作为累加基础数据</param>
            <returns>是否成功设置累加字段。如果不是第一次设置，并且没有重置数据，那么返回失败</returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.RemoveAdditionalField(System.String,System.Boolean)">
            <summary>删除累加字段。</summary>
            <param name="name">字段名称</param>
            <param name="restore">是否恢复数据</param>
            <returns>是否成功删除累加字段</returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.TryGetAdditionalValue(System.String,System.Object@,System.Boolean@)">
            <summary>尝试获取累加数据</summary>
            <param name="name">字段名称</param>
            <param name="value">累加数据</param>
            <param name="sign">正负</param>
            <returns>是否获取指定字段的累加数据</returns>
        </member>
        <member name="M:DmFramework.Data.IEntity.ClearAdditionalValues">
            <summary>清除累加字段数据。Update后调用该方法</summary>
        </member>
        <member name="P:DmFramework.Data.IEntity.Dirtys">
            <summary>脏属性。存储哪些属性的数据被修改过了。</summary>
        </member>
        <member name="P:DmFramework.Data.IEntity.Extends">
            <summary>扩展属性</summary>
        </member>
        <member name="P:DmFramework.Data.IEntity.IsNullKey">
            <summary>主键是否为空</summary>
        </member>
        <member name="M:DmFramework.Data.EntityBase.InitData">
            <summary>首次连接数据库时初始化数据，仅用于实体类重载，用户不应该调用该方法</summary>
        </member>
        <member name="M:DmFramework.Data.EntityBase.LoadData(System.Data.DataRow)">
            <summary>从一个数据行对象加载数据。不加载关联对象。</summary>
            <param name="dr">数据行</param>
        </member>
        <member name="M:DmFramework.Data.EntityBase.LoadDataReader(System.Data.IDataReader)">
            <summary>从一个数据行对象加载数据。不加载关联对象。</summary>
            <param name="dr">数据读写器</param>
        </member>
        <member name="M:DmFramework.Data.EntityBase.Insert">
            <summary>把该对象持久化到数据库</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.Update">
            <summary>更新数据库</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.Delete">
            <summary>从数据库中删除该对象</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.Save">
            <summary>保存。根据主键检查数据库中是否已存在该对象，再决定调用Insert或Update</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.SaveWithoutValid">
            <summary>不需要验证的保存</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.SetItem(System.String,System.Object)">
            <summary>设置字段值，该方法影响脏数据。</summary>
            <param name="name">字段名</param>
            <param name="value">值</param>
            <returns>返回是否成功设置了数据</returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.ToJson">
            <summary>导出Json</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.Clone">
            <summary>创建当前对象的克隆对象，仅拷贝基本字段</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.DmFramework#Data#IEntity#CloneEntity(System.Boolean)">
            <summary>克隆实体。创建当前对象的克隆对象，仅拷贝基本字段</summary>
            <param name="setDirty">是否设置脏数据</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.CloneEntityInternal(System.Boolean)">
            <summary>克隆实体</summary>
            <param name="setDirty"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.CopyFrom(DmFramework.Data.IEntity,System.Boolean)">
            <summary>复制来自指定实体的成员，可以是不同类型的实体，只复制共有的基本字段，影响脏数据</summary>
            <param name="entity">来源实体对象</param>
            <param name="setDirty">是否设置脏数据</param>
            <returns>实际复制成员数</returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.SetDirty(System.Boolean)">
            <summary>设置所有数据的脏属性</summary>
            <param name="isDirty">改变脏属性的属性个数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.OnPropertyChange(System.String,System.Object)">
            <summary>属性改变。重载时记得调用基类的该方法，以设置脏数据属性，否则数据将无法Update到数据库。</summary>
            <param name="fieldName">字段名</param>
            <param name="newValue">新属性值</param>
            <returns>是否允许改变</returns>
        </member>
        <member name="F:DmFramework.Data.EntityBase._StopExtend">
            <summary>改为线程静态，避免线程间干扰。注意初始化赋值对线程静态无效，只有第一个生效</summary>
        </member>
        <member name="M:DmFramework.Data.EntityBase.GetExtend``2(System.String,System.Func{System.String,System.Object})">
            <summary>获取扩展属性，获取数据时向指定的依赖实体类注册数据更改事件</summary>
            <typeparam name="TDependEntity">依赖实体类，该实体类数据更改时清空所有依赖于实体类的扩展属性</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="key">键值</param>
            <param name="func">回调</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.GetExtend``2(System.String,System.Func{System.String,System.Object},System.Boolean)">
            <summary>获取扩展属性，获取数据时向指定的依赖实体类注册数据更改事件</summary>
            <typeparam name="TDependEntity">依赖实体类，该实体类数据更改时清空所有依赖于实体类的扩展属性</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="key">键值</param>
            <param name="func">回调</param>
            <param name="cacheDefault">是否缓存默认值，可选参数，默认缓存</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.RemoveExtend(System.Type)">
            <summary>清理依赖于某类型的缓存</summary>
            <param name="dependType">依赖类型</param>
        </member>
        <member name="M:DmFramework.Data.EntityBase.SetExtend``1(System.String,System.Object)">
            <summary>设置扩展属性</summary>
            <typeparam name="TDependEntity"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Data.EntityBase.SetAdditionalField(System.String,System.Boolean)">
            <summary>设置累加字段。如果是第一次设置该字段，则保存该字段当前数据作为累加基础数据</summary>
            <param name="name">字段名称</param>
            <param name="reset">是否重置。可以保存当前数据作为累加基础数据</param>
            <returns>是否成功设置累加字段。如果不是第一次设置，并且没有重置数据，那么返回失败</returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.RemoveAdditionalField(System.String,System.Boolean)">
            <summary>删除累加字段。</summary>
            <param name="name">字段名称</param>
            <param name="restore">是否恢复数据</param>
            <returns>是否成功删除累加字段</returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.TryGetAdditionalValue(System.String,System.Object@,System.Boolean@)">
            <summary>尝试获取累加数据</summary>
            <param name="name">字段名称</param>
            <param name="value">累加数据绝对值</param>
            <param name="sign">正负</param>
            <returns>是否获取指定字段的累加数据</returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.ClearAdditionalValues">
            <summary>清除累加字段数据。Update后调用该方法</summary>
        </member>
        <member name="M:DmFramework.Data.EntityBase.DmFramework#Data#IEntity#SetNullKey">
            <summary>设置主键为空。Save将调用Insert</summary>
        </member>
        <member name="M:DmFramework.Data.EntityBase.DmFramework#Data#IEntity#EqualTo(DmFramework.Data.IEntity)">
            <summary>判断两个实体是否相等。有可能是同一条数据的两个实体对象</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Data.EntityBase._IsFromDatabase">
            <summary>如果实体来自数据库，在给数据属性赋相同值时，不改变脏数据，其它情况均改变脏数据</summary>
        </member>
        <member name="M:DmFramework.Data.EntityBase.OnPropertyChanging(System.String,System.Object)">
            <summary>属性改变。重载时记得调用基类的该方法，以设置脏数据属性，否则数据将无法Update到数据库。</summary>
            <param name="fieldName">字段名</param>
            <param name="newValue">新属性值</param>
            <returns>是否允许改变</returns>
        </member>
        <member name="M:DmFramework.Data.EntityBase.OnPropertyChanged(System.String)">
            <summary>属性改变。重载时记得调用基类的该方法，以设置脏数据属性，否则数据将无法Update到数据库。</summary>
            <param name="fieldName">字段名</param>
        </member>
        <member name="P:DmFramework.Data.EntityBase.Item(System.String)">
            <summary>
            获取/设置 字段值。
            一个索引，反射实现。
            派生实体类可重写该索引，以避免发射带来的性能损耗。
            基类已经实现了通用的快速访问，但是这里仍然重写，以增加控制，
            比如字段名是属性名前面加上_，并且要求是实体字段才允许这样访问，否则一律按属性处理。
            </summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.EntityBase.Dirtys">
            <summary>脏属性。存储哪些属性的数据被修改过了。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityBase.DmFramework#Data#IEntity#Dirtys">
            <summary>脏属性。存储哪些属性的数据被修改过了。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityBase.Extends">
            <summary>扩展属性</summary>
        </member>
        <member name="P:DmFramework.Data.EntityBase.DmFramework#Data#IEntity#Extends">
            <summary>扩展属性</summary>
        </member>
        <member name="P:DmFramework.Data.EntityBase.Depends">
            <summary>类型依赖</summary>
        </member>
        <member name="P:DmFramework.Data.EntityBase.StopExtend">
            <summary>是否停止扩展属性，停止扩展属性后，可以避免扩展属性自动触发获取数据的功能</summary>
        </member>
        <member name="P:DmFramework.Data.EntityBase.DmFramework#Data#IEntity#IsNullKey">
            <summary>主键是否为空</summary>
        </member>
        <member name="M:DmFramework.Data.Entity`1.#cctor">
            <summary>静态构造</summary>
        </member>
        <member name="M:DmFramework.Data.Entity`1.CreateInstance(System.Boolean)">
            <summary>
            创建实体。可以重写改方法以实现实体对象的一些初始化工作。
            切记，写为实例方法仅仅是为了方便重载，所要返回的实例绝对不会是当前实例。
            </summary>
            <param name="forEdit">是否为了编辑而创建，如果是，可以再次做一些相关的初始化工作</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.LoadData(System.Data.DataSet)">
            <summary>加载记录集。无数据时返回空集合而不是null。</summary>
            <param name="ds">记录集</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.LoadData(System.Data.DataTable)">
            <summary>加载数据表。无数据时返回空集合而不是null。</summary>
            <param name="dt">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.LoadData(System.Data.DataRow)">
            <summary>从一个数据行对象加载数据。不加载关联对象。</summary>
            <param name="dr">数据行</param>
        </member>
        <member name="M:DmFramework.Data.Entity`1.LoadData(System.Data.IDataReader)">
            <summary>加载数据读写器。无数据时返回空集合而不是null。</summary>
            <param name="dr">数据读写器</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.LoadDataReader(System.Data.IDataReader)">
            <summary>从一个数据行对象加载数据。不加载关联对象。</summary>
            <param name="dr">数据读写器</param>
        </member>
        <member name="M:DmFramework.Data.Entity`1.ToData(System.Data.DataRow@)">
            <summary>把数据复制到数据行对象中。</summary>
            <param name="dr">数据行</param>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Insert">
            <summary>插入数据，<see cref="M:DmFramework.Data.Entity`1.Valid(System.Boolean)"/>后，在事务中调用<see cref="M:DmFramework.Data.Entity`1.OnInsert"/>。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.OnInsert">
            <summary>把该对象持久化到数据库，添加/更新实体缓存。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Update">
            <summary>更新数据，<see cref="M:DmFramework.Data.Entity`1.Valid(System.Boolean)"/>后，在事务中调用<see cref="M:DmFramework.Data.Entity`1.OnUpdate"/>。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.OnUpdate">
            <summary>更新数据库，同时更新实体缓存</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Delete">
            <summary>删除数据，通过在事务中调用OnDelete实现。</summary>
            <remarks>
            删除时，如果有且仅有主键有脏数据，则可能是ObjectDataSource之类的删除操作。
            该情况下，实体类没有完整的信息（仅有主键信息），将会导致无法通过扩展属性删除附属数据。
            如果需要避开该机制，请清空脏数据。
            </remarks>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.OnDelete">
            <summary>从数据库中删除该对象，同时从实体缓存中删除</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Save">
            <summary>保存。根据主键检查数据库中是否已存在该对象，再决定调用Insert或Update</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.SaveWithoutValid">
            <summary>不需要验证的保存，不执行Valid，一般用于快速导入数据</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Valid(System.Boolean)">
            <summary>验证数据，通过抛出异常的方式提示验证失败。</summary>
            <remarks>建议重写者调用基类的实现，因为基类根据数据字段的唯一索引进行数据验证。</remarks>
            <param name="isNew">是否新数据</param>
        </member>
        <member name="M:DmFramework.Data.Entity`1.CheckExist(System.String[])">
            <summary>根据指定键检查数据是否已存在，若已存在，抛出ArgumentOutOfRangeException异常</summary>
            <param name="names"></param>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Exist(System.String[])">
            <summary>根据指定键检查数据，返回数据是否已存在</summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Find(System.String,System.Object)">
            <summary>根据属性以及对应的值，查找单个实体</summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Find(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，查找单个实体</summary>
            <param name="names">属性名称集合</param>
            <param name="values">属性值集合</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindUnique(System.String)">
            <summary>
            根据条件查找唯一的单个实体，因为是唯一的，所以不需要分页和排序。
            如果不确定是否唯一，一定不要调用该方法，否则会返回大量的数据。
            </summary>
            <param name="whereClause">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Find(System.String)">
            <summary>根据条件查找单个实体</summary>
            <param name="whereClause">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindByKey(System.Object)">
            <summary>根据主键查找单个实体</summary>
            <param name="key">唯一主键的值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindByKeyForEdit(System.Object)">
            <summary>根据主键查询一个实体对象用于表单编辑</summary>
            <param name="key">唯一主键的值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAll">
            <summary>获取所有实体对象。获取大量数据时会非常慢，慎用</summary>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAllDataSet">
            <summary>获取所有记录集。获取大量数据时会非常慢，慎用</summary>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAll(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>查询并返回实体对象集合。
            最经典的批量查询，看这个Select @selects From Table Where @whereClause Order By @orderClause Limit @startRowIndex,@maximumRows，你就明白各参数的意思了。
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAllDataSet(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>查询并返回实体对象集合。
            最经典的批量查询，看这个Select @selects From Table Where @whereClause Order By @orderClause Limit @startRowIndex,@maximumRows，你就明白各参数的意思了。
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAll(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，获取所有实体对象</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAllDataSet(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，获取所有实体对象</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAll(System.String,System.Object)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAllDataSet(System.String,System.Object)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAllByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAllByNameDataSet(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAll(System.String)">
            <summary>查询SQL并返回实体对象数组。
            Select方法将直接使用参数指定的查询语句进行查询，不进行任何转换。
            </summary>
            <param name="sql">查询语句</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAllDataSet(System.String)">
            <summary>查询SQL并返回实体对象数组。
            Select方法将直接使用参数指定的查询语句进行查询，不进行任何转换。
            </summary>
            <param name="sql">查询语句</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindSQL(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>获取查询SQL。主要用于构造子查询</summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindSQLWithKey(System.String)">
            <summary>获取查询唯一键的SQL。比如Select ID From Table</summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Search(System.String,System.String,System.Int32,System.Int32)">
            <summary>查询满足条件的记录集，分页、排序</summary>
            <param name="key">关键字</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.SearchCount(System.String,System.String,System.Int32,System.Int32)">
            <summary>查询满足条件的记录总数，分页和排序无效，带参数是因为ObjectDataSource要求它跟Search统一</summary>
            <param name="key">关键字</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>记录数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.SearchWhereByKeys(System.Text.StringBuilder,System.String)">
            <summary>构建关键字查询条件</summary>
            <param name="sb"></param>
            <param name="keys"></param>
        </member>
        <member name="M:DmFramework.Data.Entity`1.SearchWhereByKeys(System.Text.StringBuilder,System.String,System.Func{System.String,DmFramework.Data.WhereExpression})">
            <summary>构建关键字查询条件</summary>
            <param name="sb"></param>
            <param name="keys"></param>
            <param name="func"></param>
        </member>
        <member name="M:DmFramework.Data.Entity`1.SearchWhereByKeys(System.String,System.Func{System.String,DmFramework.Data.WhereExpression})">
            <summary>根据空格分割的关键字集合构建查询条件</summary>
            <param name="keys">空格分割的关键字集合</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.SearchWhereByKey(System.String)">
            <summary>构建关键字查询条件</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindWithCache(System.String,System.Object)">
            <summary>根据属性以及对应的值，在缓存中查找单个实体</summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAllWithCache">
            <summary>查找所有缓存</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindAllWithCache(System.String,System.Object)">
            <summary>根据属性以及对应的值，在缓存中获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindCount">
            <summary>返回总记录数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindCount(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>返回总记录数</summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="selects">查询列。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="startRowIndex">开始行，0表示第一行。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="maximumRows">最大返回行数，0表示所有行。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindCount(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，返回总记录数</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindCount(System.String,System.Object)">
            <summary>根据属性以及对应的值，返回总记录数</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FindCountByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>根据属性以及对应的值，返回总记录数</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="startRowIndex">开始行，0表示第一行。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <param name="maximumRows">最大返回行数，0表示所有行。这里无意义，仅仅为了保持与FindAll相同的方法签名</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Insert(`0)">
            <summary>把一个实体对象持久化到数据库</summary>
            <param name="obj">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Insert(System.String[],System.Object[])">
            <summary>把一个实体对象持久化到数据库</summary>
            <param name="names">更新属性列表</param>
            <param name="values">更新值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Update(`0)">
            <summary>把一个实体对象更新到数据库</summary>
            <param name="obj">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Update(System.String,System.String)">
            <summary>更新一批实体数据</summary>
            <param name="setClause">要更新的项和数据</param>
            <param name="whereClause">指定要更新的实体</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>更新一批实体数据</summary>
            <param name="setNames">更新属性列表</param>
            <param name="setValues">更新值列表</param>
            <param name="whereNames">条件属性列表</param>
            <param name="whereValues">条件值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Delete(`0)">
            <summary>从数据库中删除指定实体对象。
            实体类应该实现该方法的另一个副本，以唯一键或主键作为参数
            </summary>
            <param name="obj">实体对象</param>
            <returns>返回受影响的行数，可用于判断被删除了多少行，从而知道操作是否成功</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Delete(System.String)">
            <summary>从数据库中删除指定条件的实体对象。</summary>
            <param name="whereClause">限制条件</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Delete(System.String[],System.Object[])">
            <summary>从数据库中删除指定属性列表和值列表所限定的实体对象。</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Save(`0)">
            <summary>把一个实体对象更新到数据库</summary>
            <param name="obj">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.SQL(DmFramework.Data.Entity{`0},System.ComponentModel.DataObjectMethodType)">
            <summary>把SQL模版格式化为SQL语句</summary>
            <param name="obj">实体对象</param>
            <param name="methodType"></param>
            <returns>SQL字符串</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.MakeCondition(System.String[],System.Object[],System.String)">
            <summary>
            根据属性列表和值列表，构造查询条件。
            例如构造多主键限制查询条件。
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <param name="action">联合方式</param>
            <returns>条件子串</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.MakeCondition(System.String,System.Object,System.String)">
            <summary>构造条件</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.MakeCondition(DmFramework.Data.Configuration.FieldItem,System.Object,System.String)">
            <summary>构造条件</summary>
            <param name="field">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.DefaultCondition(DmFramework.Data.Entity{`0})">
            <summary>
            默认条件。
            若有标识列，则使用一个标识列作为条件；
            如有主键，则使用全部主键作为条件。
            </summary>
            <param name="obj">实体对象</param>
            <returns>条件</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FromXml(System.String)">
            <summary>导入</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.FromJson(System.String)">
            <summary>导入</summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.ToJson">
            <summary>导出Json</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Clone">
            <summary>创建当前对象的克隆对象，仅拷贝基本字段</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.CloneEntity(System.Boolean)">
            <summary>克隆实体。创建当前对象的克隆对象，仅拷贝基本字段</summary>
            <param name="setDirty">是否设置脏数据。默认不设置</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.CloneEntityInternal(System.Boolean)">
            <summary>克隆实体</summary>
            <param name="setDirty"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.SetDirty(System.Boolean)">
            <summary>设置所有数据的脏属性</summary>
            <param name="isDirty">改变脏属性的属性个数</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.OnPropertyChanging(System.String,System.Object)">
            <summary>如果字段带有默认值，则需要设置脏数据，因为显然用户想设置该字段，而不是采用数据库的默认值</summary>
            <param name="fieldName"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.GetExtend``1(System.String,System.Func{System.String,System.Object})">
            <summary>获取依赖于当前实体类的扩展属性</summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="key">键</param>
            <param name="func">回调</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.GetExtend``1(System.String,System.Func{System.String,System.Object},System.Boolean)">
            <summary>获取依赖于当前实体类的扩展属性</summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="key">键</param>
            <param name="func">回调</param>
            <param name="cacheDefault">是否缓存默认值，可选参数，默认缓存</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.SetExtend(System.String,System.Object)">
            <summary>设置依赖于当前实体类的扩展属性</summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Item(System.String)">
            <summary>
            获取/设置 字段值。
            一个索引，反射实现。
            派生实体类可重写该索引，以避免发射带来的性能损耗。
            基类已经实现了通用的快速访问，但是这里仍然重写，以增加控制，
            比如字段名是属性名前面加上_，并且要求是实体字段才允许这样访问，否则一律按属性处理。
            </summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Entity`1.HasDirty">
            <summary>是否有脏数据。决定是否可以Update</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.AdditionalFields">
            <summary>默认累加字段</summary>
        </member>
        <member name="T:DmFramework.Data.Entity`1.Meta">
            <summary>实体元数据</summary>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.Query(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int32,System.Int32)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.Query(System.String)">
            <summary>查询</summary>
            <param name="sql">SQL语句</param>
            <returns>结果记录集</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.QueryCount(System.String)">
            <summary>查询记录数</summary>
            <param name="sql">SQL语句</param>
            <returns>记录数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.QueryCount(DmFramework.Data.DataAccessLayer.SelectBuilder)">
            <summary>查询记录数</summary>
            <param name="sb">查询生成器</param>
            <returns>记录数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.Execute(System.String)">
            <summary>执行</summary>
            <param name="sql">SQL语句</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.InsertAndGetIdentity(System.String)">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.Execute(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="F:DmFramework.Data.Entity`1.Meta.hasCheckInitData">
            <summary>记录已进行数据初始化的表</summary>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.WaitForInitData(System.Int32)">
            <summary>检查并初始化数据。参数等待时间为0表示不等待</summary>
            <param name="millisecondsTimeout">等待时间，-1表示不限，0表示不等待</param>
            <returns>如果等待，返回是否收到信号</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.BeginTrans">
            <summary>开始事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.Commit">
            <summary>提交事务</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.Rollback">
            <summary>回滚事务，忽略异常</summary>
            <returns>剩下的事务计数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.CreateParameter">
            <summary>创建参数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.FormatParameterName(System.String)">
            <summary>格式化参数名</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.FormatName(System.String)">
            <summary>格式化关键字</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.FormatKeyWord(System.String)">
            <summary>格式化关键字</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.FormatDateTime(System.DateTime)">
            <summary>格式化时间</summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.FormatValue(System.String,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.Meta.FormatValue(DmFramework.Data.Configuration.FieldItem,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:DmFramework.Data.Entity`1.Meta._Count">
            <summary>总记录数较小时，使用静态字段，较大时增加使用Cache</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.ThisType">
            <summary>实体类型</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.Table">
            <summary>表信息</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.ConnName">
            <summary>链接名。线程内允许修改，修改者负责还原。若要还原默认值，设为null即可</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.TableName">
            <summary>表名。线程内允许修改，修改者负责还原</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.AllFields">
            <summary>所有数据属性</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.Fields">
            <summary>所有绑定到数据表的属性</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.FieldNames">
            <summary>字段名列表</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.Unique">
            <summary>唯一键，返回第一个标识列或者唯一的主键</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.Factory">
            <summary>实体操作者</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.DBO">
            <summary>数据操作对象。</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.DbType">
            <summary>数据库类型</summary>
        </member>
        <member name="E:DmFramework.Data.Entity`1.Meta.OnDataChange">
            <summary>数据改变后触发。参数指定触发该事件的实体类</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.UsingTrans">
            <summary>是否在事务保护中</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.Cache">
            <summary>实体缓存</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.SingleCache">
            <summary>
            单对象实体缓存。
            建议自定义查询数据方法，并从二级缓存中获取实体数据，以抵消因初次填充而带来的消耗。
            </summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.Count">
            <summary>总记录数，小于1000时是精确的，大于1000时缓存10分钟</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.LongCount">
            <summary>总记录数，小于1000时是精确的，大于1000时缓存10分钟</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.AllowInsertIdentity">
            <summary>是否允许向自增列插入数据。为免冲突，仅本线程有效</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.Meta.AutoSetGuidField">
            <summary>自动设置Guid的字段。对实体类有效，可在实体类类型构造函数里面设置</summary>
        </member>
        <member name="T:DmFramework.Data.IEntityOperate">
            <summary>数据实体操作接口</summary>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Create(System.Boolean)">
            <summary>创建一个实体对象</summary>
            <param name="forEdit">是否为了编辑而创建，如果是，可以再次做一些相关的初始化工作</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.LoadData(System.Data.DataSet)">
            <summary>加载记录集</summary>
            <param name="ds">记录集</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Find(System.String,System.Object)">
            <summary>根据属性以及对应的值，查找单个实体</summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Find(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，查找单个实体</summary>
            <param name="names">属性名称集合</param>
            <param name="values">属性值集合</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Find(System.String)">
            <summary>根据条件查找单个实体</summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindByKey(System.Object)">
            <summary>根据主键查找单个实体</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindByKeyForEdit(System.Object)">
            <summary>根据主键查询一个实体对象用于表单编辑</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAll">
            <summary>获取所有实体对象。获取大量数据时会非常慢，慎用</summary>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAllDataSet">
            <summary>获取所有记录集。获取大量数据时会非常慢，慎用</summary>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAll(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            查询并返回实体对象集合。
            表名以及所有字段名，请使用类名以及字段对应的属性名，方法内转换为表名和列名
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAllDataSet(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>查询并返回实体对象集合。
            表名以及所有字段名，请使用类名以及字段对应的属性名，方法内转换为表名和列名
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAll(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，获取所有实体对象</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAllDataSet(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，获取所有实体对象</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAll(System.String,System.Object)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAllDataSet(System.String,System.Object)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAllByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAllByNameDataSet(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAll(System.String)">
            <summary>查询SQL并返回实体对象数组。
            Select方法将直接使用参数指定的查询语句进行查询，不进行任何转换。
            </summary>
            <param name="sql">查询语句</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAllDataSet(System.String)">
            <summary>查询SQL并返回实体对象数组。
            Select方法将直接使用参数指定的查询语句进行查询，不进行任何转换。
            </summary>
            <param name="sql">查询语句</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindSQL(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>获取查询SQL。主要用于构造子查询</summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindSQLWithKey(System.String)">
            <summary>获取查询唯一键的SQL。比如Select ID From Table</summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Search(System.String,System.String,System.Int32,System.Int32)">
            <summary>查询满足条件的记录集，分页、排序</summary>
            <param name="key">关键字</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.SearchCount(System.String,System.String,System.Int32,System.Int32)">
            <summary>查询满足条件的记录总数，分页和排序无效，带参数是因为ObjectDataSource要求它跟Search统一</summary>
            <param name="key">关键字</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>记录数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.SearchWhereByKeys(System.Text.StringBuilder,System.String)">
            <summary>构建关键字查询条件</summary>
            <param name="sb"></param>
            <param name="keys"></param>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.SearchWhereByKeys(System.Text.StringBuilder,System.String,System.Func{System.String,DmFramework.Data.WhereExpression})">
            <summary>构建关键字查询条件</summary>
            <param name="sb"></param>
            <param name="keys"></param>
            <param name="func"></param>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.SearchWhereByKeys(System.String,System.Func{System.String,DmFramework.Data.WhereExpression})">
            <summary>构建关键字查询条件</summary>
            <param name="keys"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.SearchWhereByKey(System.String)">
            <summary>构建关键字查询条件</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindWithCache(System.String,System.Object)">
            <summary>根据属性以及对应的值，在缓存中查找单个实体</summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAllWithCache">
            <summary>查找所有缓存</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindAllWithCache(System.String,System.Object)">
            <summary>根据属性以及对应的值，在缓存中获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindCount">
            <summary>返回总记录数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindCount(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>返回总记录数</summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindCount(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，返回总记录数</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindCount(System.String,System.Object)">
            <summary>根据属性以及对应的值，返回总记录数</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FindCountByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>根据属性以及对应的值，返回总记录数</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FromXml(System.String)">
            <summary>导入</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FromJson(System.String)">
            <summary>导入</summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Query(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int32,System.Int32)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Query(System.String)">
            <summary>查询</summary>
            <param name="sql">SQL语句</param>
            <returns>结果记录集</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.QueryCount(System.String)">
            <summary>查询记录数</summary>
            <param name="sql">SQL语句</param>
            <returns>记录数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.QueryCount(DmFramework.Data.DataAccessLayer.SelectBuilder)">
            <summary>查询记录数</summary>
            <param name="sb">查询生成器</param>
            <returns>记录数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Execute(System.String)">
            <summary>执行</summary>
            <param name="sql">SQL语句</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.InsertAndGetIdentity(System.String)">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Execute(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Update(System.String,System.String)">
            <summary>更新一批实体数据</summary>
            <param name="setClause">要更新的项和数据</param>
            <param name="whereClause">指定要更新的实体</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>更新一批实体数据</summary>
            <param name="setNames">更新属性列表</param>
            <param name="setValues">更新值列表</param>
            <param name="whereNames">条件属性列表</param>
            <param name="whereValues">条件值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Delete(System.String)">
            <summary>从数据库中删除指定条件的实体对象。</summary>
            <param name="whereClause">限制条件</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Delete(System.String[],System.Object[])">
            <summary>从数据库中删除指定属性列表和值列表所限定的实体对象。</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.BeginTransaction">
            <summary>开始事务</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Commit">
            <summary>提交事务</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.Rollback">
            <summary>回滚事务</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.CreateParameter">
            <summary>创建参数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FormatParameterName(System.String)">
            <summary>格式化参数名</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FormatName(System.String)">
            <summary>格式化关键字</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FormatDateTime(System.DateTime)">
            <summary>格式化时间</summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FormatValue(System.String,System.Object)">
            <summary>
            取得一个值的Sql值。
            当这个值是字符串类型时，会在该值前后加单引号；
            </summary>
            <param name="name">字段</param>
            <param name="value">对象</param>
            <returns>Sql值的字符串形式</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.FormatValue(DmFramework.Data.Configuration.FieldItem,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.MakeCondition(System.String[],System.Object[],System.String)">
            <summary>
            根据属性列表和值列表，构造查询条件。
            例如构造多主键限制查询条件。
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <param name="action">联合方式</param>
            <returns>条件子串</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.MakeCondition(System.String,System.Object,System.String)">
            <summary>构造条件</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityOperate.MakeCondition(DmFramework.Data.Configuration.FieldItem,System.Object,System.String)">
            <summary>构造条件</summary>
            <param name="field">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.Default">
            <summary>默认实体</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.ThisType">
            <summary>实体类型</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.Table">
            <summary>数据表元数据</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.AllFields">
            <summary>所有数据属性</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.Fields">
            <summary>所有绑定到数据表的属性</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.FieldNames">
            <summary>字段名列表</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.Unique">
            <summary>唯一键，返回第一个标识列或者唯一的主键</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.Cache">
            <summary>实体缓存</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.SingleCache">
            <summary>单对象实体缓存</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.Count">
            <summary>总记录数</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.AllowInsertIdentity">
            <summary>是否允许向自增列插入数据。为免冲突，仅本线程有效</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityOperate.AutoSetGuidField">
            <summary>自动设置Guid的字段。对实体类有效，可在实体类类型构造函数里面设置</summary>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Create(System.Boolean)">
            <summary>创建一个实体对象</summary>
            <param name="forEdit">是否为了编辑而创建，如果是，可以再次做一些相关的初始化工作</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.LoadData(System.Data.DataSet)">
            <summary>加载记录集</summary>
            <param name="ds">记录集</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.ToList(DmFramework.Data.IEntityList)">
            <summary>把一个FindAll返回的集合转为实体接口列表集合</summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Find(System.String,System.Object)">
            <summary>根据属性以及对应的值，查找单个实体</summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Find(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，查找单个实体</summary>
            <param name="names">属性名称集合</param>
            <param name="values">属性值集合</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Find(System.String)">
            <summary>根据条件查找单个实体</summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindByKey(System.Object)">
            <summary>根据主键查找单个实体</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindByKeyForEdit(System.Object)">
            <summary>根据主键查询一个实体对象用于表单编辑</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAll">
            <summary>获取所有实体对象。获取大量数据时会非常慢，慎用</summary>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAllDataSet">
            <summary>获取所有记录集。获取大量数据时会非常慢，慎用</summary>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAll(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>查询并返回实体对象集合。
            表名以及所有字段名，请使用类名以及字段对应的属性名，方法内转换为表名和列名
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAllDataSet(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>查询并返回实体对象集合。
            最经典的批量查询，看这个Select @selects From Table Where @whereClause Order By @orderClause Limit @startRowIndex,@maximumRows，你就明白各参数的意思了。
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAll(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，获取所有实体对象</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAllDataSet(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，获取所有实体对象</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAll(System.String,System.Object)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAllDataSet(System.String,System.Object)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAllByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAllByNameDataSet(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>根据属性以及对应的值，获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAll(System.String)">
            <summary>查询SQL并返回实体对象数组。
            Select方法将直接使用参数指定的查询语句进行查询，不进行任何转换。
            </summary>
            <param name="sql">查询语句</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAllDataSet(System.String)">
            <summary>查询SQL并返回实体对象数组。
            Select方法将直接使用参数指定的查询语句进行查询，不进行任何转换。
            </summary>
            <param name="sql">查询语句</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindSQL(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>获取查询SQL。主要用于构造子查询</summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindSQLWithKey(System.String)">
            <summary>获取查询唯一键的SQL。比如Select ID From Table</summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Search(System.String,System.String,System.Int32,System.Int32)">
            <summary>查询满足条件的记录集，分页、排序</summary>
            <param name="key">关键字</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.SearchCount(System.String,System.String,System.Int32,System.Int32)">
            <summary>查询满足条件的记录总数，分页和排序无效，带参数是因为ObjectDataSource要求它跟Search统一</summary>
            <param name="key">关键字</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>记录数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.SearchWhereByKeys(System.Text.StringBuilder,System.String)">
            <summary>构建关键字查询条件</summary>
            <param name="sb"></param>
            <param name="keys"></param>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.SearchWhereByKeys(System.Text.StringBuilder,System.String,System.Func{System.String,DmFramework.Data.WhereExpression})">
            <summary>构建关键字查询条件</summary>
            <param name="sb"></param>
            <param name="keys"></param>
            <param name="func"></param>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.SearchWhereByKeys(System.String,System.Func{System.String,DmFramework.Data.WhereExpression})">
            <summary>构建关键字查询条件</summary>
            <param name="keys"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.SearchWhereByKey(System.String)">
            <summary>构建关键字查询条件</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindWithCache(System.String,System.Object)">
            <summary>根据属性以及对应的值，在缓存中查找单个实体</summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAllWithCache">
            <summary>查找所有缓存</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindAllWithCache(System.String,System.Object)">
            <summary>根据属性以及对应的值，在缓存中获取所有实体对象</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindCount">
            <summary>返回总记录数</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindCount(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>返回总记录数</summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindCount(System.String[],System.Object[])">
            <summary>根据属性列表以及对应的值列表，返回总记录数</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindCount(System.String,System.Object)">
            <summary>根据属性以及对应的值，返回总记录数</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FindCountByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>根据属性以及对应的值，返回总记录数</summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FromXml(System.String)">
            <summary>导入</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FromJson(System.String)">
            <summary>导入</summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Query(DmFramework.Data.DataAccessLayer.SelectBuilder,System.Int32,System.Int32)">
            <summary>执行SQL查询，返回记录集</summary>
            <param name="builder">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Query(System.String)">
            <summary>查询</summary>
            <param name="sql">SQL语句</param>
            <returns>结果记录集</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.QueryCount(System.String)">
            <summary>查询记录数</summary>
            <param name="sql">SQL语句</param>
            <returns>记录数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.QueryCount(DmFramework.Data.DataAccessLayer.SelectBuilder)">
            <summary>查询记录数</summary>
            <param name="sb">查询生成器</param>
            <returns>记录数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Execute(System.String)">
            <summary>执行</summary>
            <param name="sql">SQL语句</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.InsertAndGetIdentity(System.String)">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Execute(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.InsertAndGetIdentity(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>执行插入语句并返回新增行的自动编号</summary>
            <param name="sql">SQL语句</param>
            <param name="type">命令类型，默认SQL文本</param>
            <param name="ps">命令参数</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Update(System.String,System.String)">
            <summary>更新一批实体数据</summary>
            <param name="setClause">要更新的项和数据</param>
            <param name="whereClause">指定要更新的实体</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>更新一批实体数据</summary>
            <param name="setNames">更新属性列表</param>
            <param name="setValues">更新值列表</param>
            <param name="whereNames">条件属性列表</param>
            <param name="whereValues">条件值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Delete(System.String)">
            <summary>从数据库中删除指定条件的实体对象。</summary>
            <param name="whereClause">限制条件</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Delete(System.String[],System.Object[])">
            <summary>从数据库中删除指定属性列表和值列表所限定的实体对象。</summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.BeginTransaction">
            <summary>开始事务</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Commit">
            <summary>提交事务</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.Rollback">
            <summary>回滚事务</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FormatName(System.String)">
            <summary>格式化关键字</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FormatDateTime(System.DateTime)">
            <summary>格式化时间</summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FormatValue(System.String,System.Object)">
            <summary>
            取得一个值的Sql值。
            当这个值是字符串类型时，会在该值前后加单引号；
            </summary>
            <param name="name">字段</param>
            <param name="value">对象</param>
            <returns>Sql值的字符串形式</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.FormatValue(DmFramework.Data.Configuration.FieldItem,System.Object)">
            <summary>格式化数据为SQL数据</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.MakeCondition(System.String[],System.Object[],System.String)">
            <summary>
            根据属性列表和值列表，构造查询条件。
            例如构造多主键限制查询条件。
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <param name="action">联合方式</param>
            <returns>条件子串</returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.MakeCondition(System.String,System.Object,System.String)">
            <summary>构造条件</summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Entity`1.EntityOperate.MakeCondition(DmFramework.Data.Configuration.FieldItem,System.Object,System.String)">
            <summary>构造条件</summary>
            <param name="field">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.Default">
            <summary>默认实体</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.ThisType">
            <summary>实体类型</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.Table">
            <summary>数据表元数据</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.AllFields">
            <summary>所有数据属性</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.Fields">
            <summary>所有绑定到数据表的属性</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.FieldNames">
            <summary>字段名列表</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.Unique">
            <summary>唯一键，返回第一个标识列或者唯一的主键</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.Cache">
            <summary>实体缓存</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.SingleCache">
            <summary>单对象实体缓存</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.Count">
            <summary>总记录数</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.AllowInsertIdentity">
            <summary>是否允许向自增列插入数据。为免冲突，仅本线程有效</summary>
        </member>
        <member name="P:DmFramework.Data.Entity`1.EntityOperate.AutoSetGuidField">
            <summary>自动设置Guid的字段。对实体类有效，可在实体类类型构造函数里面设置</summary>
        </member>
        <member name="T:DmFramework.Data.EntityFactory">
            <summary>实体工厂</summary>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.Create(System.String)">
            <summary>创建指定类型的实例</summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.Create(System.Type)">
            <summary>创建指定类型的实例</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.CreateOperate(System.String)">
            <summary>创建实体操作接口</summary>
            <remarks>因为只用来做实体操作，所以只需要一个实例即可</remarks>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.CreateOperate(System.Type)">
            <summary>创建实体操作接口</summary>
            <remarks>因为只用来做实体操作，所以只需要一个实例即可</remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.Register(System.Type,DmFramework.Data.IEntityOperate)">
            <summary>使用指定的实体对象创建实体操作接口，主要用于Entity内部调用，避免反射带来的损耗</summary>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.LoadEntities">
            <summary>列出所有实体类</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.LoadEntities(System.String)">
            <summary>获取指定连接名下的所有实体类</summary>
            <param name="connName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.LoadEntities(System.String,System.Boolean)">
            <summary>获取指定连接名下的所有实体类</summary>
            <param name="connName"></param>
            <param name="isLoadAssembly">是否从未加载程序集中获取类型。使用仅反射的方法检查目标类型，如果存在，则进行常规加载</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.GetTables(System.String)">
            <summary>获取指定连接名下的所有实体数据表</summary>
            <param name="connName"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.IsCommonEntity(System.Type)">
            <summary>是否普通实体类</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityFactory.EnsureInit(System.Type)">
            <summary>确保实体类已经执行完静态构造函数，因为那里实在是太容易导致死锁了</summary>
            <param name="type"></param>
        </member>
        <member name="T:DmFramework.Data.EntityList`1">
             <summary>实体集合，提供批量查询和批量操作实体等操作。若需要使用Linq，需要先用<see cref="M:DmFramework.Data.EntityList`1.ToList"/>方法。</summary>
             <remarks>
             在.Net 2.0时代，没有Linq可用时，该类的对象查询等方法发挥了很大的作用。
             但是弱类型比较的写法，不太方便，并且有时会带来非常难以查找的错误。
             比如Object.Equal比较Int16和Int32两个数字，是不相等的，也就是说，如果有个Int32字段，传入Int16的数字是无法找到任何匹配项的。
            
             后来在.Net 2.0上实现了Linq，该类的对象查询方法将会逐步淡出，建议优先考虑Linq。
             </remarks>
        </member>
        <member name="T:DmFramework.Data.IEntityList">
            <summary>实体列表接口</summary>
        </member>
        <member name="M:DmFramework.Data.IEntityList.FindAll(System.String,System.Object)">
            <summary>根据指定项查找</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.FindAll(System.String[],System.Object[])">
            <summary>根据指定项查找</summary>
            <param name="names">属性名</param>
            <param name="values">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Find(System.String,System.Object)">
            <summary>根据指定项查找</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.FindAllIgnoreCase(System.String,System.String)">
            <summary>根据指定项查找字符串。忽略大小写</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.FindIgnoreCase(System.String,System.String)">
            <summary>根据指定项查找字符串。忽略大小写</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Exists(System.String,System.Object)">
            <summary>集合是否包含指定项</summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Insert(System.Boolean)">
            <summary>把整个集合插入到数据库</summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Update(System.Boolean)">
            <summary>把整个集合更新到数据库</summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Save(System.Boolean)">
            <summary>把整个保存更新到数据库</summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Delete(System.Boolean)">
            <summary>把整个集合从数据库中删除</summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.SetItem(System.String,System.Object)">
            <summary>设置所有实体中指定项的值</summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Data.IEntityList.GetItem``1(System.String)">
            <summary>获取所有实体中指定项的值</summary>
            <typeparam name="TResult">指定项的类型</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Join(System.String,System.String)">
            <summary>串联指定成员，方便由实体集合构造用于查询的子字符串</summary>
            <param name="name"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Join(System.String)">
            <summary>串联</summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Sort(System.String,System.Boolean)">
            <summary>按指定字段排序</summary>
            <param name="name">字段</param>
            <param name="isDesc">是否降序</param>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Sort(System.String[],System.Boolean[])">
            <summary>按指定字段数组排序</summary>
            <param name="names">字段</param>
            <param name="isDescs">是否降序</param>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Top(DmFramework.Data.IEntity,System.String)">
            <summary>置顶指定实体，加大排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Up(DmFramework.Data.IEntity,System.String)">
            <summary>提升指定实体在当前列表中的位置，加大排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Down(DmFramework.Data.IEntity,System.String)">
            <summary>降低指定实体在当前列表中的位置，减少排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.Bottom(DmFramework.Data.IEntity,System.String)">
            <summary>置底指定实体，减少排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.FromXml(System.String)">
            <summary>导入Xml文本</summary>
            <param name="xml"></param>
        </member>
        <member name="M:DmFramework.Data.IEntityList.ToJson">
            <summary>导出Json</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.ToDataTable(System.Boolean)">
            <summary>转为DataTable</summary>
            <param name="allowUpdate">是否允许更新数据，如果允许，将可以对DataTable进行添删改等操作</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityList.ToDataSet">
            <summary>转为DataSet</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.#ctor">
            <summary>构造一个实体对象集合</summary>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>构造一个实体对象集合</summary>
            <param name="collection"></param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.#ctor(System.Int32)">
            <summary>构造一个实体对象集合</summary>
            <param name="capacity"></param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.#ctor(System.Collections.IEnumerable)">
            <summary>初始化</summary>
            <param name="collection"></param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.op_Addition(DmFramework.Data.EntityList{`0},DmFramework.Data.EntityList{`0})">
            <summary>集合相加</summary>
            <param name="entities1">第一个实体集合</param>
            <param name="entities2">第二个实体集合</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.op_Subtraction(DmFramework.Data.EntityList{`0},DmFramework.Data.EntityList{`0})">
            <summary>集合相减</summary>
            <param name="entities1">第一个实体集合</param>
            <param name="entities2">第二个实体集合</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>从集合中移除另一个集合指定的元素</summary>
            <param name="collection"></param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.FindAll(System.String,System.Object)">
            <summary>根据指定项查找</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.FindAll(System.String[],System.Object[])">
            <summary>根据指定项查找</summary>
            <param name="names">属性名集合</param>
            <param name="values">属性值集合</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.FindAll(System.Predicate{`0})">
            <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
            <param name="match">条件</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Find(System.String,System.Object)">
            <summary>根据指定项查找</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.FindAllIgnoreCase(System.String,System.String)">
            <summary>根据指定项查找字符串。忽略大小写</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.FindIgnoreCase(System.String,System.String)">
            <summary>根据指定项查找字符串。忽略大小写</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Exists(System.String,System.Object)">
            <summary>集合是否包含指定项</summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#FindAll(System.String,System.Object)">
            <summary>根据指定项查找</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#FindAll(System.String[],System.Object[])">
            <summary>根据指定项查找</summary>
            <param name="names">属性名</param>
            <param name="values">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#Find(System.String,System.Object)">
            <summary>根据指定项查找</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#FindAllIgnoreCase(System.String,System.String)">
            <summary>根据指定项查找字符串。忽略大小写</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#FindIgnoreCase(System.String,System.String)">
            <summary>根据指定项查找字符串。忽略大小写</summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#SetItem(System.String,System.Object)">
            <summary>设置所有实体中指定项的值</summary>
            <param name="name">指定项的名称</param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Insert(System.Boolean)">
            <summary>把整个集合插入到数据库</summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Insert">
            <summary>把整个集合插入到数据库</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Update(System.Boolean)">
            <summary>把整个集合更新到数据库</summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Update">
            <summary>把整个集合更新到数据库</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Save(System.Boolean)">
            <summary>把整个保存更新到数据库</summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Save">
            <summary>把整个集合保存到数据库</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Delete(System.Boolean)">
            <summary>把整个集合从数据库中删除</summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Delete">
            <summary>把整个集合从数据库中删除</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.SetItem(System.String,System.Object)">
            <summary>设置所有实体中指定项的值</summary>
            <param name="name">指定项的名称</param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.GetItem``1(System.String)">
            <summary>获取所有实体中指定项的值，不允许重复项</summary>
            <typeparam name="TResult">指定项的类型</typeparam>
            <param name="name">指定项的名称</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.GetItem``1(System.String,System.Boolean)">
            <summary>获取所有实体中指定项的值</summary>
            <remarks>
            有时候只是为了获取某个属性值的集合，可以允许重复项，而有时候是获取唯一主键，作为in操作的参数，不该允许重复项。
            </remarks>
            <typeparam name="TResult">指定项的类型</typeparam>
            <param name="name">指定项的名称</param>
            <param name="allowRepeated">是否允许重复项</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Join(System.String,System.String)">
            <summary>串联指定成员，方便由实体集合构造用于查询的子字符串</summary>
            <param name="name"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Join(System.String)">
            <summary>串联</summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Sort(System.String,System.Boolean)">
            <summary>按指定字段排序</summary>
            <param name="name">字段</param>
            <param name="isDesc">是否降序</param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Sort(System.String[],System.Boolean[])">
            <summary>按指定字段数组排序</summary>
            <param name="names">字段</param>
            <param name="isDescs">是否降序</param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#Sort(System.String,System.Boolean)">
            <summary>按指定字段排序</summary>
            <param name="name">字段</param>
            <param name="isDesc">是否降序</param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#Sort(System.String[],System.Boolean[])">
            <summary>按指定字段数组排序</summary>
            <param name="names">字段</param>
            <param name="isDescs">是否降序</param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Top(`0,System.String)">
            <summary>置顶指定实体，加大排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Up(`0,System.String)">
            <summary>提升指定实体在当前列表中的位置，加大排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Down(`0,System.String)">
            <summary>降低指定实体在当前列表中的位置，减少排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.Bottom(`0,System.String)">
            <summary>置底指定实体，减少排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#Top(DmFramework.Data.IEntity,System.String)">
            <summary>置顶指定实体，加大排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#Up(DmFramework.Data.IEntity,System.String)">
            <summary>提升指定实体在当前列表中的位置，加大排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#Down(DmFramework.Data.IEntity,System.String)">
            <summary>降低指定实体在当前列表中的位置，减少排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.DmFramework#Data#IEntityList#Bottom(DmFramework.Data.IEntity,System.String)">
            <summary>置底指定实体，减少排序键的值</summary>
            <param name="entity"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.FromXml(System.String)">
            <summary>导入Xml文本</summary>
            <param name="xml"></param>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.ToJson">
            <summary>导出Json</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.FromJson(System.String)">
            <summary>导入Json</summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.ToDataTable(System.Boolean)">
            <summary>转为DataTable</summary>
            <param name="allowUpdate">是否允许更新数据，如果允许，将可以对DataTable进行添删改等操作</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.ToDataSet">
            <summary>转为DataSet</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.ToList">
            <summary>转为泛型List，方便进行Linq</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.From(System.Collections.IEnumerable)">
            <summary>任意集合转为实体集合</summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityList`1.From``1(System.Collections.IEnumerable,System.Func{``0,`0})">
            <summary>拥有指定类型转换器的转换</summary>
            <typeparam name="T2"></typeparam>
            <param name="collection"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.EntityList`1.Empty">
            <summary>空集合</summary>
        </member>
        <member name="P:DmFramework.Data.EntityList`1.EntityType">
            <summary>真正的实体类型。有些场合为了需要会使用IEntity。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityList`1.Factory">
            <summary>实体操作者</summary>
        </member>
        <member name="T:DmFramework.Data.EntityListView`1">
            <summary>实体列表视图</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Data.EntityListView`1.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Data.EntityListView`1.Insert(System.Int32,`0)">
            <summary>已重载。新增元素时，触发事件改变</summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:DmFramework.Data.EntityListView`1.RemoveAt(System.Int32)">
            <summary>已重载。从列表中删除项时，同时从数据库中删除实体</summary>
            <param name="index"></param>
        </member>
        <member name="P:DmFramework.Data.EntityListView`1.System#ComponentModel#IBindingList#AllowEdit">
            <summary>获取是否可更新列表中的项。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityListView`1.System#ComponentModel#IBindingList#AllowNew">
            <summary>获取是否可以使用 System.ComponentModel.IBindingList.AddNew() 向列表中添加项。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityListView`1.System#ComponentModel#IBindingList#AllowRemove">
            <summary>获取是否可以使用 System.Collections.IList.Remove(System.Object) 或 System.Collections.IList.RemoveAt(System.Int32)从列表中移除项。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityListView`1.System#ComponentModel#IBindingList#IsSorted">
            <summary>获取是否对列表中的项进行排序。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityListView`1.SortDirection">
            <summary>获取排序的方向。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityListView`1.SortProperty">
            <summary>获取正在用于排序的 System.ComponentModel.PropertyDescriptor。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityListView`1.SortDescriptions">
            <summary>获取当前应用于数据源的排序说明的集合。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityListView`1.EntityType">
            <summary>真正的实体类型。有些场合为了需要会使用IEntity。</summary>
        </member>
        <member name="P:DmFramework.Data.EntityListView`1.Factory">
            <summary>实体操作者</summary>
        </member>
        <member name="T:DmFramework.Data.EntityTransaction`1">
             <summary>实体事务区域。配合using使用，进入区域事务即开始，直到<see cref="M:DmFramework.Data.EntityTransaction.Commit"/>提交，否则离开区域时回滚。</summary>
             <typeparam name="TEntity"></typeparam>
             <example>
             <code>
             using (var et = new EntityTransaction&lt;Administrator&gt;())
             {
                 var admin = Administrator.FindByName("admin");
                 admin.Logins++;
                 admin.Update();
            
                 et.Commit();
             }
             </code>
             </example>
        </member>
        <member name="T:DmFramework.Data.EntityTransaction">
             <summary>实体事务区域。配合using使用，进入区域事务即开始，直到<see cref="M:DmFramework.Data.EntityTransaction.Commit"/>提交，否则离开区域时回滚。</summary>
             <example>
             <code>
             using (var et = new EntityTransaction(DAL.Create("Common")))
             {
                 var admin = Administrator.FindByName("admin");
                 admin.Logins++;
                 admin.Update();
            
                 et.Commit();
             }
             </code>
             </example>
        </member>
        <member name="F:DmFramework.Data.EntityTransaction.hasFinish">
            <summary>是否已完成事务</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTransaction.#ctor(DmFramework.Data.DataAccessLayer.IDbSession)">
            <summary>用数据库会话来实例化一个事务区域</summary>
            <param name="session"></param>
        </member>
        <member name="M:DmFramework.Data.EntityTransaction.#ctor(DmFramework.Data.DataAccessLayer.DAL)">
            <summary>用数据访问对象来实例化一个事务区域</summary>
            <param name="dal"></param>
        </member>
        <member name="M:DmFramework.Data.EntityTransaction.#ctor(DmFramework.Data.IEntityOperate)">
            <summary>用实体操作接口来实例化一个事务区域</summary>
            <param name="eop"></param>
        </member>
        <member name="M:DmFramework.Data.EntityTransaction.OnDispose(System.Boolean)">
            <summary>子类重载实现资源释放逻辑时必须首先调用基类方法</summary>
            <param name="disposing">从Dispose调用（释放所有资源）还是析构函数调用（释放非托管资源）。
            因为该方法只会被调用一次，所以该参数的意义不太大。</param>
        </member>
        <member name="M:DmFramework.Data.EntityTransaction.Commit">
            <summary>提交事务</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTransaction.Rollback">
            <summary>回滚事务</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTransaction.Session">
            <summary>会话</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTransaction`1.#ctor">
            <summary>为实体类实例化一个事务区域</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTransaction`1.Commit">
            <summary>提交事务</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTransaction`1.Rollback">
            <summary>回滚事务</summary>
        </member>
        <member name="T:DmFramework.Data.IEntityPersistence">
            <summary>实体持久化接口。可通过实现该接口来自定义实体类持久化行为。</summary>
        </member>
        <member name="M:DmFramework.Data.IEntityPersistence.Insert(DmFramework.Data.IEntity)">
            <summary>插入</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityPersistence.Update(DmFramework.Data.IEntity)">
            <summary>更新</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityPersistence.Delete(DmFramework.Data.IEntity)">
            <summary>删除</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityPersistence.Insert(System.Type,System.String[],System.Object[])">
            <summary>把一个实体对象持久化到数据库</summary>
            <param name="entityType">实体类</param>
            <param name="names">更新属性列表</param>
            <param name="values">更新值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityPersistence.Update(System.Type,System.String,System.String)">
            <summary>更新一批实体数据</summary>
            <param name="entityType">实体类</param>
            <param name="setClause">要更新的项和数据</param>
            <param name="whereClause">指定要更新的实体</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityPersistence.Update(System.Type,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>更新一批实体数据</summary>
            <param name="entityType">实体类</param>
            <param name="setNames">更新属性列表</param>
            <param name="setValues">更新值列表</param>
            <param name="whereNames">条件属性列表</param>
            <param name="whereValues">条件值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.IEntityPersistence.Delete(System.Type,System.String)">
            <summary>从数据库中删除指定条件的实体对象。</summary>
            <param name="entityType">实体类</param>
            <param name="whereClause">限制条件</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityPersistence.Delete(System.Type,System.String[],System.Object[])">
            <summary>从数据库中删除指定属性列表和值列表所限定的实体对象。</summary>
            <param name="entityType">实体类</param>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityPersistence.GetPrimaryCondition(DmFramework.Data.IEntity)">
            <summary>获取主键条件</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.IEntityPersistence.GetSql(DmFramework.Data.IEntity,System.ComponentModel.DataObjectMethodType)">
            <summary>把SQL模版格式化为SQL语句</summary>
            <param name="entity">实体对象</param>
            <param name="methodType"></param>
            <returns>SQL字符串</returns>
        </member>
        <member name="T:DmFramework.Data.EntityPersistence">
            <summary>默认实体持久化</summary>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.Insert(DmFramework.Data.IEntity)">
            <summary>插入</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.Update(DmFramework.Data.IEntity)">
            <summary>更新</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.Delete(DmFramework.Data.IEntity)">
            <summary>删除</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.Insert(System.Type,System.String[],System.Object[])">
            <summary>把一个实体对象持久化到数据库</summary>
            <param name="entityType">实体类</param>
            <param name="names">更新属性列表</param>
            <param name="values">更新值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.Update(System.Type,System.String,System.String)">
            <summary>更新一批实体数据</summary>
            <param name="entityType">实体类</param>
            <param name="setClause">要更新的项和数据</param>
            <param name="whereClause">指定要更新的实体</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.Update(System.Type,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>更新一批实体数据</summary>
            <param name="entityType">实体类</param>
            <param name="setNames">更新属性列表</param>
            <param name="setValues">更新值列表</param>
            <param name="whereNames">条件属性列表</param>
            <param name="whereValues">条件值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.Delete(System.Type,System.String)">
            <summary>从数据库中删除指定条件的实体对象。</summary>
            <param name="entityType">实体类</param>
            <param name="whereClause">限制条件</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.Delete(System.Type,System.String[],System.Object[])">
            <summary>从数据库中删除指定属性列表和值列表所限定的实体对象。</summary>
            <param name="entityType">实体类</param>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.GetSql(DmFramework.Data.IEntity,System.ComponentModel.DataObjectMethodType)">
            <summary>把SQL模版格式化为SQL语句</summary>
            <param name="entity">实体对象</param>
            <param name="methodType"></param>
            <returns>SQL字符串</returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.SQL(DmFramework.Data.IEntity,System.ComponentModel.DataObjectMethodType,System.Data.Common.DbParameter[]@)">
            <summary>把SQL模版格式化为SQL语句</summary>
            <param name="entity">实体对象</param>
            <param name="methodType"></param>
            <param name="parameters"></param>
            <returns>SQL字符串</returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.GetPrimaryCondition(DmFramework.Data.IEntity)">
            <summary>获取主键条件</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityPersistence.DefaultCondition(DmFramework.Data.IEntity)">
            <summary>
            默认条件。
            若有标识列，则使用一个标识列作为条件；
            如有主键，则使用全部主键作为条件。
            </summary>
            <param name="entity">实体对象</param>
            <returns>条件</returns>
        </member>
        <member name="T:DmFramework.Data.Exceptions.HmCodeException">
            <summary>DmFramework.Data异常</summary>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmCodeException.#ctor">
            <summary>初始化</summary>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmCodeException.#ctor(System.String)">
            <summary>初始化</summary>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmCodeException.#ctor(System.String,System.Object[])">
            <summary>初始化</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmCodeException.#ctor(System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmCodeException.#ctor(System.Exception)">
            <summary>初始化</summary>
            <param name="innerException"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmCodeException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>初始化</summary>
            <param name="innerException"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmCodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DmFramework.Data.Exceptions.HmDbException">
            <summary>数据访问层异常</summary>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbException.#ctor(DmFramework.Data.DataAccessLayer.IDatabase)">
            <summary>初始化</summary>
            <param name="db"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbException.#ctor(DmFramework.Data.DataAccessLayer.IDatabase,System.String)">
            <summary>初始化</summary>
            <param name="db"></param>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbException.#ctor(DmFramework.Data.DataAccessLayer.IDatabase,System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="db"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbException.#ctor(DmFramework.Data.DataAccessLayer.IDatabase,System.Exception)">
            <summary>初始化</summary>
            <param name="db"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:DmFramework.Data.Exceptions.HmDbException.Database">
            <summary>数据库</summary>
        </member>
        <member name="T:DmFramework.Data.Exceptions.HmDbMetaDataException">
            <summary>数据库元数据异常</summary>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbMetaDataException.#ctor(DmFramework.Data.DataAccessLayer.IMetaData)">
            <summary>初始化</summary>
            <param name="metadata"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbMetaDataException.#ctor(DmFramework.Data.DataAccessLayer.IMetaData,System.String)">
            <summary>初始化</summary>
            <param name="metadata"></param>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbMetaDataException.#ctor(DmFramework.Data.DataAccessLayer.IMetaData,System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="metadata"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbMetaDataException.#ctor(DmFramework.Data.DataAccessLayer.IMetaData,System.Exception)">
            <summary>初始化</summary>
            <param name="metadata"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:DmFramework.Data.Exceptions.HmDbMetaDataException.MetaData">
            <summary>数据库元数据</summary>
        </member>
        <member name="T:DmFramework.Data.Exceptions.HmDbSessionException">
            <summary>数据访问层异常</summary>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbSessionException.#ctor(DmFramework.Data.DataAccessLayer.IDbSession)">
            <summary>初始化</summary>
            <param name="session"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbSessionException.#ctor(DmFramework.Data.DataAccessLayer.IDbSession,System.String)">
            <summary>初始化</summary>
            <param name="session"></param>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbSessionException.#ctor(DmFramework.Data.DataAccessLayer.IDbSession,System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="session"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmDbSessionException.#ctor(DmFramework.Data.DataAccessLayer.IDbSession,System.Exception)">
            <summary>初始化</summary>
            <param name="session"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:DmFramework.Data.Exceptions.HmDbSessionException.Session">
            <summary>数据库会话</summary>
        </member>
        <member name="T:DmFramework.Data.Exceptions.HmSqlException">
            <summary>数据访问层SQL异常</summary>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmSqlException.#ctor(System.String,DmFramework.Data.DataAccessLayer.IDbSession)">
            <summary>初始化</summary>
            <param name="sql"></param>
            <param name="session"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmSqlException.#ctor(System.String,DmFramework.Data.DataAccessLayer.IDbSession,System.String)">
            <summary>初始化</summary>
            <param name="sql"></param>
            <param name="session"></param>
            <param name="message"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmSqlException.#ctor(System.String,DmFramework.Data.DataAccessLayer.IDbSession,System.String,System.Exception)">
            <summary>初始化</summary>
            <param name="sql"></param>
            <param name="session"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmSqlException.#ctor(System.String,DmFramework.Data.DataAccessLayer.IDbSession,System.Exception)">
            <summary>初始化</summary>
            <param name="sql"></param>
            <param name="session"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:DmFramework.Data.Exceptions.HmSqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>从序列化信息中读取Sql</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:DmFramework.Data.Exceptions.HmSqlException.Sql">
            <summary>SQL语句</summary>
        </member>
        <member name="T:DmFramework.Data.OrderExpression">
            <summary>排序表达式</summary>
        </member>
        <member name="M:DmFramework.Data.OrderExpression.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:DmFramework.Data.OrderExpression.#ctor(System.String)">
            <summary>实例化</summary>
            <param name="exp"></param>
        </member>
        <member name="M:DmFramework.Data.OrderExpression.And(System.String)">
            <summary>增加</summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.OrderExpression.Asc(System.String)">
            <summary>升序</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.OrderExpression.Desc(System.String)">
            <summary>降序</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.OrderExpression.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.OrderExpression.op_Implicit(DmFramework.Data.OrderExpression)~System.String">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.OrderExpression.op_BitwiseAnd(DmFramework.Data.OrderExpression,System.Object)">
            <summary>重载运算符实现And操作，同时通过布尔型支持AndIf</summary>
            <param name="exp"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.OrderExpression.Builder">
            <summary>内置字符串</summary>
        </member>
        <member name="T:DmFramework.Data.WhereExpression">
            <summary>条件表达式</summary>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.#ctor">
            <summary>实例化</summary>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.#ctor(System.String)">
            <summary>实例化</summary>
            <param name="exp"></param>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.Append(System.String,System.String)">
            <summary>添加自定义条件</summary>
            <param name="action">操作符</param>
            <param name="content">表达式</param>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.And(System.String)">
            <summary>And操作</summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.Or(System.String)">
            <summary>Or操作</summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.AndIf(System.Boolean,System.String)">
            <summary>有条件And操作</summary>
            <param name="condition"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.OrIf(System.Boolean,System.String)">
            <summary>有条件Or操作</summary>
            <param name="condition"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.Left">
            <summary>左括号</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.Right">
            <summary>右括号</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.op_Implicit(DmFramework.Data.WhereExpression)~System.String">
            <summary>类型转换</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.op_BitwiseAnd(DmFramework.Data.WhereExpression,System.Object)">
            <summary>重载运算符实现And操作，同时通过布尔型支持AndIf</summary>
            <param name="exp"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.WhereExpression.op_BitwiseOr(DmFramework.Data.WhereExpression,System.Object)">
            <summary>重载运算符实现Or操作，同时通过布尔型支持OrIf</summary>
            <param name="exp"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.WhereExpression.Builder">
            <summary>内置字符串</summary>
        </member>
        <member name="T:DmFramework.Data.Model.HmCodeService">
            <summary>DmFramework.Data服务对象提供者</summary>
        </member>
        <member name="M:DmFramework.Data.Model.HmCodeService.CreateTable">
            <summary>创建模型数据表</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Model.HmCodeService.CreateDataRowEntityAccessor(System.Type)">
            <summary>创建实体类的数据行访问器</summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.Sync.ISyncMaster">
            <summary>同步架构主方接口</summary>
            <remarks>
            同步框架中的数据供应方，同步是双向的，从方可以从主方拿数据，也可以把更新数据提交给主方。
            可通过<see cref="P:DmFramework.Data.Sync.ISyncMaster.ReadOnly"/>来指定主方是否只读，只读的主方不接受数据提交。
            </remarks>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncMaster.GetAllUpdated(System.DateTime,System.Int32,System.Int32)">
            <summary>获取指定时间后更新过的数据</summary>
            <param name="last"></param>
            <param name="start"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncMaster.GetAllUpdatedCount(System.DateTime)">
            <summary>获取指定时间后更新过的数据数量</summary>
            <param name="last"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncMaster.Insert(DmFramework.Data.Sync.ISyncMasterEntity[])">
            <summary>提交新增数据</summary>
            <param name="list"></param>
            <returns>返回新增成功后的数据，包括自增字段</returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncMaster.Update(DmFramework.Data.Sync.ISyncMasterEntity)">
            <summary>更新数据</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncMaster.Delete(System.Object[])">
            <summary>根据主键数组删除数据</summary>
            <param name="keys"></param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncMaster.CheckExists(System.Object[])">
            <summary>根据主键数组检查数据是否仍然存在</summary>
            <param name="keys"></param>
            <returns>是否存在</returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncMaster.Create">
            <summary>创建一个空白实体</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncMaster.GetNames">
            <summary>获取要同步的字段名</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Sync.ISyncMaster.ReadOnly">
            <summary>是否只读。只读的主方不接受数据提交</summary>
        </member>
        <member name="T:DmFramework.Data.Sync.ISyncMasterEntity">
            <summary>同步框架主方实体接口，由主方实体类实现</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.ISyncMasterEntity.Key">
            <summary>唯一标识数据的键值</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.ISyncMasterEntity.LastUpdate">
            <summary>最后修改时间。包括修改同步状态为假删除</summary>
        </member>
        <member name="T:DmFramework.Data.Sync.SyncMaster">
            <summary>同步架构主方</summary>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncMaster.GetAllUpdated(System.DateTime,System.Int32,System.Int32)">
            <summary>检查在指定时间后更新过的数据</summary>
            <param name="last"></param>
            <param name="start"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncMaster.GetAllUpdatedCount(System.DateTime)">
            <summary>获取指定时间后更新过的数据数量</summary>
            <param name="last"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncMaster.Insert(DmFramework.Data.Sync.ISyncMasterEntity[])">
            <summary>提交新增数据</summary>
            <param name="list"></param>
            <returns>返回新增成功后的数据，包括自增字段</returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncMaster.Update(DmFramework.Data.Sync.ISyncMasterEntity)">
            <summary>更新数据</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncMaster.Delete(System.Object[])">
            <summary>根据主键数组删除数据</summary>
            <param name="keys"></param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncMaster.CheckExists(System.Object[])">
            <summary>根据主键数组检查数据是否仍然存在</summary>
            <param name="keys"></param>
            <returns>是否存在</returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncMaster.Create">
            <summary>创建一个空白实体</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncMaster.GetNames">
            <summary>获取要同步的字段名</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncMaster.Facotry">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncMaster.KeyName">
            <summary>主键名</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncMaster.LastUpdateName">
            <summary>最后更新字段名。如果没有指定，将每次都同步全部数据</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncMaster.ReadOnly">
            <summary>是否只读。只读的主方不接受数据提交</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncMaster.SyncMasterEntity.Host">
            <summary>宿主</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncMaster.SyncMasterEntity.Entity">
            <summary>实体</summary>
        </member>
        <member name="T:DmFramework.Data.Sync.ISyncSlave">
            <summary>同步框架从方接口</summary>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncSlave.GetAllNew(System.Int32,System.Int32)">
            <summary>获取所有新添加的数据</summary>
            <param name="start"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncSlave.GetAllDelete(System.Int32,System.Int32)">
            <summary>获取所有删除的数据</summary>
            <param name="start"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncSlave.GetAllOld(System.DateTime,System.Int32,System.Int32)">
            <summary>获取所有未同步的旧数据</summary>
            <param name="now"></param>
            <param name="start"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncSlave.FindByKey(System.Object)">
            <summary>根据主键查找</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncSlave.Create">
            <summary>创建一个空白实体</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncSlave.GetNames">
            <summary>获取要同步的字段名</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Sync.ISyncSlave.LastSync">
            <summary>最后同步时间</summary>
            <returns></returns>
        </member>
        <member name="T:DmFramework.Data.Sync.ISyncSlaveEntity">
            <summary>同步框架从方实体接口，由从方实体类实现</summary>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncSlaveEntity.ChangeKey(System.Object)">
            <summary>改变主键。本地新增加的数据，在提交到提供方后，可能主键会改变（如自增字段），需要更新本地主键为新主键</summary>
            <param name="key"></param>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncSlaveEntity.Insert">
            <summary>插入</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncSlaveEntity.Update">
            <summary>更新</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.ISyncSlaveEntity.Delete">
            <summary>删除本地数据</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Sync.ISyncSlaveEntity.Key">
            <summary>唯一标识数据的键值</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.ISyncSlaveEntity.LastUpdate">
            <summary>最后修改时间。包括修改同步状态为假删除</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.ISyncSlaveEntity.LastSync">
            <summary>最后同步时间。包括向主方询问数据是否已删除</summary>
        </member>
        <member name="T:DmFramework.Data.Sync.SyncSlave">
            <summary>同步框架从方，实体类默认实现。要求实体类实现<see cref="T:DmFramework.Data.Sync.ISyncSlaveEntity"/>接口</summary>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncSlave.GetLastSync">
            <summary>获取最后同步时间</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncSlave.GetAllNew(System.Int32,System.Int32)">
            <summary>获取所有新添加的数据</summary>
            <param name="start"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncSlave.GetAllDelete(System.Int32,System.Int32)">
            <summary>获取所有删除的数据</summary>
            <param name="start"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncSlave.GetAllOld(System.DateTime,System.Int32,System.Int32)">
            <summary>获取所有未同步的旧数据</summary>
            <param name="now"></param>
            <param name="start"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncSlave.FindByKey(System.Object)">
            <summary>根据主键查找</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncSlave.Create">
            <summary>创建一个空白实体</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncSlave.GetNames">
            <summary>获取要同步的字段名</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncSlave.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncSlave.KeyName">
            <summary>主键名</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncSlave.LastUpdateName">
            <summary>最后更新字段名</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncSlave.LastSyncName">
            <summary>最后更新字段名</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncSlave.LastUpdateField">
            <summary>最后更新字段名。先硬编码，不考虑可变</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncSlave.LastSyncField">
            <summary>最后同步字段名</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncSlave.LastSync">
            <summary>最后同步时间</summary>
        </member>
        <member name="T:DmFramework.Data.Sync.SyncManager">
            <summary>同步管理器</summary>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncManager.Start">
            <summary>开始处理</summary>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncManager.ProcessNew">
            <summary>处理本地添加的数据</summary>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncManager.ProcessDelete">
            <summary>处理本地删除的数据</summary>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncManager.ProcessItems">
            <summary>处理更新的数据</summary>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncManager.ProcessItem(DmFramework.Data.Sync.ISyncMasterEntity)">
            <summary>处理更新的数据项</summary>
            <param name="remote"></param>
        </member>
        <member name="M:DmFramework.Data.Sync.SyncManager.ProcessOthers(System.DateTime)">
            <summary>查找还有哪些没有同步的，可能提供者已经删除</summary>
            <param name="now"></param>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncManager.Master">
            <summary>同步框架主方，数据提供者。</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncManager.Slave">
            <summary>同步框架从方，数据消费者</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncManager.BatchSize">
            <summary>同步批大小</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncManager.Names">
            <summary>字段集合</summary>
        </member>
        <member name="P:DmFramework.Data.Sync.SyncManager.UpdateConflictByLastUpdate">
            <summary>是否根据最后修改时间来解决双方同时更新而带来的冲突，否则强制优先本地</summary>
        </member>
        <member name="T:DmFramework.Data.Transform.DataTransform">
            <summary>数据转换</summary>
        </member>
        <member name="T:DmFramework.Data.Transform.TransformBase`1">
            <summary>数据转换基类</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DmFramework.Data.Transform.TransformBase`1.Transform(System.String,System.String)">
            <summary>把一个链接的数据全部导入到另一个链接</summary>
            <param name="srcConn"></param>
            <param name="desConn"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Transform.TransformBase`1.Transform">
            <summary>把一个链接的数据全部导入到另一个链接</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Transform.TransformBase`1.SrcConn">
            <summary>源</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.TransformBase`1.DesConn">
            <summary>目的</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.TransformBase`1.TableNames">
            <summary>要导数据的表，为空表示全部</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.TransformBase`1.BatchSize">
            <summary>每批处理多少行数据，默认1000</summary>
        </member>
        <member name="M:DmFramework.Data.Transform.EntityTransform.Transform">
            <summary>把一个链接的数据全部导入到另一个链接</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.Transform.EntityTransform.TransformTable(DmFramework.Data.IEntityOperate,System.Int32,System.Nullable{System.Boolean},System.Func{System.Int32,System.Int32,DmFramework.Data.IEntityList})">
            <summary>把一个表的数据全部导入到另一个表</summary>
            <param name="eop">实体操作者。</param>
            <param name="count">要迁移的记录数，默认0表示全部</param>
            <param name="isDesc">是否降序。默认升序</param>
            <param name="getData">用于获取数据的委托</param>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Transform.EntityTransform.SrcConn">
            <summary>源</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.EntityTransform.DesConn">
            <summary>目的</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.EntityTransform.TableNames">
            <summary>要导数据的表，为空表示全部</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.EntityTransform.BatchSize">
            <summary>每批处理多少行数据，默认1000</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.EntityTransform.AllowInsertIdentity">
            <summary>是否允许插入自增列</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.EntityTransform.OnlyTransformToEmptyTable">
            <summary>仅迁移到空表。对于已有数据的表，不执行迁移。</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.EntityTransform.PartialTableNames">
            <summary>需要局部迁移的表。局部迁移就是只迁移一部分数据。</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.EntityTransform.PartialCount">
            <summary>局部迁移记录数。默认1000</summary>
        </member>
        <member name="P:DmFramework.Data.Transform.EntityTransform.PartialDesc">
            <summary>局部迁移降序。默认为true，也就是只迁移最后的一批数据。</summary>
        </member>
        <member name="E:DmFramework.Data.Transform.EntityTransform.OnTransformTable">
            <summary>转换表时触发。如果参数被置空，表示不转换该表</summary>
        </member>
        <member name="E:DmFramework.Data.Transform.EntityTransform.OnTransformEntity">
            <summary>转换实体时触发</summary>
        </member>
        <member name="T:DmFramework.Data.EntityTree`1">
            <summary>主键为整型的实体树基类</summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:DmFramework.Data.EntityTree`2">
             <summary>实体树基类，具有树形结构的实体继承该类即可得到各种树操作功能</summary>
             <remarks>
             实体树很神奇，子类可以通过<see cref="P:DmFramework.Data.EntityTree`2.KeyName"/>、<see cref="P:DmFramework.Data.EntityTree`2.ParentKeyName"/>、<see cref="P:DmFramework.Data.EntityTree`2.SortingKeyName"/>、<see cref="P:DmFramework.Data.EntityTree`2.NameKeyName"/>等设置型属性，
             指定关联键、关联父键、排序键、名称键，其中前两个是必须的，它们是构造一棵树的根基！
            
             整个表会形成一颗实体树，同时也是一个实体列表，子级紧靠父级，同级排序，<see cref="P:DmFramework.Data.EntityTree`2.Root"/>就是这棵树的根。
             所以，Root.Childs可以得到顶级节点集合，Root.AllChilds得到整棵树。
             </remarks>
             <typeparam name="TKey">主键类型</typeparam>
             <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:DmFramework.Data.IEntityTree">
            <summary>实体树接口</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityTree.Parent">
            <summary>父实体</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityTree.Childs">
            <summary>子实体集合</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityTree.AllChilds">
            <summary>子孙实体集合。以深度层次树结构输出</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityTree.AllParents">
            <summary>父亲实体集合。以深度层次树结构输出</summary>
        </member>
        <member name="P:DmFramework.Data.IEntityTree.Deepth">
            <summary>深度</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindChilds">
            <summary>子节点</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindParent">
            <summary>父节点</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindByKeyWithCache(`0)">
            <summary>父节点</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindAllByParent(`0)">
            <summary>根据父级查找所有子级，带排序功能</summary>
            <remarks>如果是顶级，那么包含所有无头节点，无头节点由错误数据造成</remarks>
            <param name="parentKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindAllNoParent">
            <summary>查找所有无头节点（没有父节点的节点）集合（其实就是父节点已经被删掉了的非法节点）</summary>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindAllChildsByParent(`0)">
            <summary>查找指定键的所有子节点，以深度层次树结构输出，包括当前节点，并作为根节点</summary>
            <param name="parentKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindAllChildsNoParent(`0)">
            <summary>查找指定键的所有子节点，以深度层次树结构输出</summary>
            <param name="parentKey"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindAllParentsByKey(`0)">
            <summary>查找指定键的所有父节点，从高到底以深度层次树结构输出</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindAllChilds(DmFramework.Data.IEntityTree)">
            <summary>查找指定节点的所有子节点，以深度层次树结构输出</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindAllParents(DmFramework.Data.IEntityTree)">
            <summary>查找指定节点的所有父节点，从高到底以深度层次树结构输出</summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.FindByPath(System.String,System.String[])">
            <summary>根据层次路径查找</summary>
            <param name="path">层次路径</param>
            <param name="keys">用于在每一层匹配实体的键值，默认是NameKeyName</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.Contains(`0)">
            <summary>是否包含子节点</summary>
            <param name="key">子节点键值</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.MakeTree(System.Web.UI.WebControls.TreeNodeCollection,DmFramework.Data.EntityList{`1},System.String,System.Func{`1,System.Web.UI.WebControls.TreeNode})">
            <summary>创建菜单树</summary>
            <param name="nodes">父集合</param>
            <param name="list">菜单列表</param>
            <param name="url">格式化地址，可以使用{ID}和{Name}</param>
            <param name="func">由菜单项创建树节点的委托</param>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.GetFullPath(System.Boolean)">
            <summary>取得全路径的实体，由上向下排序</summary>
            <param name="includeSelf"></param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.GetFullPath(System.Boolean,System.String,System.Func{`1,System.String})">
            <summary>取得全路径的实体，由上向下排序</summary>
            <param name="includeSelf">是否包含自己</param>
            <param name="separator">分隔符</param>
            <param name="func">回调</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.ClearRelation">
            <summary>删除子级到本级的关系。导出数据前可以先删除关系，以减少导出的大小</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.BatchSave(System.Boolean)">
            <summary>批量保存，保存整棵树</summary>
            <param name="saveSelf">是否保存自己</param>
            <returns></returns>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.Up">
            <summary>排序上升</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.Down">
            <summary>排序下降</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTree`2.Valid(System.Boolean)">
            <summary>验证树形数据是否有效</summary>
            <param name="isNew">是否新数据</param>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.KeyName">
            <summary>关联键名称，一般是主键，如ID</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.ParentKeyName">
            <summary>关联父键名，一般是Parent加主键，如ParentID</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.SortingKeyName">
            <summary>排序字段，默认是"Sorting", "Sort", "Rank"之一</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.NameKeyName">
            <summary>名称键名，如Name，否则使用第一个非自增字段</summary>
            <remarks>影响NodeName、TreeNodeName、TreeNodeName2、FindByPath、GetFullPath、GetFullPath2等</remarks>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.EnableCaching">
            <summary>是否缓存Childs、AllChilds、Parent等</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.BigSort">
            <summary>是否大排序，较大排序值在前面</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.MaxDeepth">
            <summary>允许的最大深度。默认0，不限制</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.Sort">
            <summary>排序值</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.Childs">
            <summary>子节点</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.Parent">
            <summary>父节点</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.AllChilds">
            <summary>子孙节点</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.AllParents">
            <summary>父节点集合</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.Deepth">
            <summary>深度</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.Root">
            <summary>根</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.NodeName">
            <summary>节点名</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.ParentNodeName">
            <summary>父级节点名</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.TreeNodeName">
            <summary>树形节点名，根据深度带全角空格前缀</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.TreeNodeName2">
            <summary>树形节点名，根据深度带全角空格前缀</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.FullPath">
            <summary>斜杠分隔的全路径</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.FullParentPath">
            <summary>斜杠分隔的全父路径</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.ChildKeys">
            <summary>子级键值集合</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.ChildKeyString">
            <summary>逗号分隔的子级键值字符串，一般可用于SQL语句中</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.AllChildKeys">
            <summary>子孙键值集合</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.AllChildKeyString">
            <summary>逗号分隔的子孙键值字符串，一般可用于SQL语句中</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.DmFramework#Data#IEntityTree#Parent">
            <summary>父实体</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.DmFramework#Data#IEntityTree#Childs">
            <summary>子实体集合</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.DmFramework#Data#IEntityTree#AllChilds">
            <summary>子孙实体集合。以深度层次树结构输出</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTree`2.DmFramework#Data#IEntityTree#AllParents">
            <summary>父亲实体集合。以深度层次树结构输出</summary>
        </member>
        <member name="T:DmFramework.Data.EntityTreeKeys">
            <summary>模型字段排序模式</summary>
        </member>
        <member name="F:DmFramework.Data.EntityTreeKeys.Key">
            <summary>关联主键</summary>
        </member>
        <member name="F:DmFramework.Data.EntityTreeKeys.ParentKey">
            <summary>关联父级键</summary>
        </member>
        <member name="F:DmFramework.Data.EntityTreeKeys.SortKey">
            <summary>关联排序键</summary>
        </member>
        <member name="F:DmFramework.Data.EntityTreeKeys.NameKey">
            <summary>关联名称键</summary>
        </member>
        <member name="T:DmFramework.Data.EntityTreeKeyAttribute">
            <summary>用于指定实体树各个键</summary>
        </member>
        <member name="M:DmFramework.Data.EntityTreeKeyAttribute.#ctor(DmFramework.Data.EntityTreeKeys,System.String)">
            <summary>指定实体类的模型字段排序模式</summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:DmFramework.Data.EntityTreeKeyAttribute.Key">
            <summary>实体树键类型</summary>
        </member>
        <member name="P:DmFramework.Data.EntityTreeKeyAttribute.Value">
            <summary>实体树键名</summary>
        </member>
        <member name="T:DmFramework.Data.Web.DbRunTimeModule">
            <summary>页面查询执行时间模块</summary>
        </member>
        <member name="M:DmFramework.Data.Web.DbRunTimeModule.OnInit">
            <summary>初始化模块，准备拦截请求。</summary>
        </member>
        <member name="M:DmFramework.Data.Web.DbRunTimeModule.Render">
            <summary>输出</summary>
            <returns></returns>
        </member>
        <member name="P:DmFramework.Data.Web.DbRunTimeModule.DbRunTimeFormat">
            <summary>执行时间字符串</summary>
        </member>
    </members>
</doc>
