/*** jQuery MiniUI 2.0** Date : 2012-03-25* * Commercial License : http://www.miniui.com/license** Copyright(c) 2012 All Rights Reserved. PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. */mini = {	components : {},	uids : {},	isReady : false,	byId : function ($) {		if (typeof $ == "string") {			if ($.charAt(0) == "#")				$ = $.substr(1);			return document.getElementById($)		} else			return $	},	get : function (_) {		if (!_)			return null;		if (typeof _ == "string")			if (_.charAt(0) == "#")				_ = _.substr(1);		if (typeof _ == "string")			return mini.components[_];		else {			var $ = mini.uids[_.uid];			if ($ && $.el == _)				return $		}		return null	},	getbyUID : function ($) {		return mini.uids[$]	},	findControls : function (E, B) {		if (!E)			return [];		B = B || mini;		var $ = [],		D = mini.uids;		for (var A in D) {			var _ = D[A],			C = E.call(B, _);			if (C !== false) {				$.push(_);				if (C === 1)					break			}		}		return $	},	createNameControls : function (A, F) {		if (!A || !A.el)			return;		if (!F)			F = "_";		var C = A.el,		$ = mini.findControls(function ($) {				if (!$.el || !$.name)					return false;				if (mini.isAncestor(C, $.el))					return true;				return false			});		for (var _ = 0, D = $.length; _ < D; _++) {			var B = $[_],			E = F + B.name;			if (F === true)				E = B.name[0].toUpperCase() + B.name.substring(1, B.name.length);			A[E] = B		}	},	getbyName : function (A, _) {		if (_ && mini.isControl(_))			_ = _.el;		_ = mini.byId(_);		_ = _ || document.body;		var $ = this.findControls(function ($) {				if (!$.el)					return false;				if ($.name == A && mini.isAncestor(_, $.el))					return 1;				return false			}, this);		return $[0]	},	getParams : function (C) {		if (!C)			C = location.href;		C = C.split("?")[1];		var B = {};		if (C) {			var A = C.split("&");			for (var _ = 0, D = A.length; _ < D; _++) {				var $ = A[_].split("=");				B[$[0]] = decodeURIComponent($[1])			}		}		return B	},	reg : function ($) {		this.components[$.id] = $;		this.uids[$.uid] = $	},	unreg : function ($) {		delete this.components[$.id];		delete this.uids[$.uid]	},	classes : {},	uiClasses : {},	getClass : function ($) {		if (!$)			return null;		return this.classes[$.toLowerCase()]	},	getClassByUICls : function ($) {		return this.uiClasses[$.toLowerCase()]	},	regClass : function (_, $) {		$ = $.toLowerCase();		mini.classes[$] = _;		_.prototype.type = $;		mini.uiClasses[_.prototype.uiCls] = _	},	idPre : "mini-",	idIndex : 1,	newId : function ($) {		return ($ || this.idPre) + this.idIndex++	},	copyTo : function ($, A) {		if ($ && A)			for (var _ in A)				$[_] = A[_];		return $	},	copyIf : function ($, A) {		if ($ && A)			for (var _ in A)				if (mini.isNull($[_]))					$[_] = A[_];		return $	},	createDelegate : function (_, $) {		if (!_)			return function () {};		return function () {			return _.apply($, arguments)		}	},	extend : function (E, A, $) {		if (typeof A != "function")			return this;		var D = E,		C = D.prototype,		_ = A.prototype;		if (D.superclass == _)			return;		D.superclass = _;		D.superclass.constructor = A;		for (var B in _)			C[B] = _[B];		if ($)			for (B in $)				C[B] = $[B];		return D	},	isControl : function ($) {		return $ && $.isControl	},	isElement : function ($) {		return $ && $.appendChild	},	isDate : function ($) {		return $ && $.getFullYear	},	isArray : function ($) {		return $ && !!$.unshift	},	isNull : function ($) {		return $ === null || $ === undefined	},	isNumber : function ($) {		return typeof $ == "number"	},	isEquals : function ($, _) {		if ($ !== 0 && _ !== 0)			if ((mini.isNull($) || $ == "") && (mini.isNull(_) || _ == ""))				return true;		if ($ && _ && $.getFullYear && _.getFullYear)			return $.getTime() === _.getTime();		if (typeof $ == "object" && typeof _ == "object" && $ === _)			return true;		return String($) === String(_)	},	forEach : function (E, D, B) {		var _ = E.clone();		for (var A = 0, C = _.length; A < C; A++) {			var $ = _[A];			if (D.call(B, $, A, E) === false)				break		}	},	sort : function (A, _, $) {		$ = $ || A;		A.sort(_)	},	removeNode : function ($) {		jQuery($).remove()	},	elWarp : document.createElement("div")};mini._BindCallbacks = [];mini._BindEvents = function (_, $) {	mini._BindCallbacks.push([_, $]);	if (!mini._EventTimer)		mini._EventTimer = setTimeout(function () {				mini._FireBindEvents()			}, 1)};mini._FireBindEvents = function () {	for (var $ = 0, _ = mini._BindCallbacks.length; $ < _; $++) {		var A = mini._BindCallbacks[$];		A[0].call(A[1])	}	mini._BindCallbacks = [];	mini._EventTimer = null};mini.getAndCreate = function ($) {	if (!$)		return null;	if (typeof $ == "string")		return mini.components[$];	if (typeof $ == "object")		if (mini.isControl($))			return $;		else if (mini.isElement($))			return mini.uids[$.uid];		else			return mini.create($);	return null};mini.create = function ($) {	if (!$)		return null;	if (mini.get($.id) === $)		return $;	var _ = this.getClass($.type);	if (!_)		return null;	var A = new _();	A.set($);	return A};mini.append = function ($, _) {	if (typeof _ == "string" && _.charAt(0) == "#")		_ = mini.byId(_);	return jQuery($).append(_)[0].lastChild};mini.prepend = function ($, _) {	if (typeof _ == "string" && _.charAt(0) == "#")		_ = mini.byId(_);	return jQuery($).prepend(_)[0].firstChild};mini.Component = function () {	this._events = {};	this.uid = mini.newId(this.idPre);	if (!this.id)		this.id = this.uid;	mini.reg(this);	this._doInit()};mini.Component.prototype = {	isControl : true,	id : null,	_idPre : "mini-",	_idSet : false,	canFire : true,	inited : false,	_doInit : function () {		if (this.inited == false) {			this.inited = true;			this.fire("init")		}	},	set : function (B) {		if (typeof B == "string")			return this;		var A = this.allowLayout;		this.allowLayout = false;		var C = B.renderTo || B.render;		delete B.renderTo;		delete B.render;		for (var $ in B)			if ($.toLowerCase().indexOf("on") == 0) {				var F = B[$];				this.on($.substring(2, $.length).toLowerCase(), F);				delete B[$]			}		for ($ in B) {			var E = B[$],			D = "set" + $.charAt(0).toUpperCase() + $.substring(1, $.length),			_ = this[D];			if (_)				_.call(this, E);			else				this[$] = E		}		if (C && this.render)			this.render(C);		this.allowLayout = A;		if (this.doLayout)			this.doLayout();		return this	},	fire : function (A, B) {		if (this.canFire == false)			return;		A = A.toLowerCase();		var _ = this._events[A];		if (_) {			if (!B)				B = {};			if (B && B != this) {				B.source = B.sender = this;				if (!B.type)					B.type = A			}			for (var $ = 0, D = _.length; $ < D; $++) {				var C = _[$];				if (C)					C[0].apply(C[1], [B])			}		}	},	on : function (type, fn, scope) {		if (typeof fn == "string") {			var f = window[fn];			if (!f)				eval("fn = function(e){" + fn + ".call(this,e)}");			else				fn = f		}		if (typeof fn != "function" || !type)			return false;		type = type.toLowerCase();		var event = this._events[type];		if (!event)			event = this._events[type] = [];		scope = scope || this;		if (!this.findListener(type, fn, scope))			event.push([fn, scope]);		return this	},	un : function ($, C, _) {		if (typeof C != "function")			return false;		$ = $.toLowerCase();		var A = this._events[$];		if (A) {			_ = _ || this;			var B = this.findListener($, C, _);			if (B)				A.remove(B)		}		return this	},	findListener : function (A, E, B) {		A = A.toLowerCase();		B = B || this;		var _ = this._events[A];		if (_)			for (var $ = 0, D = _.length; $ < D; $++) {				var C = _[$];				if (C[0] === E && C[1] === B)					return C			}	},	setId : function ($) {		if (!$)			throw new Error("id not null");		if (this._idSet)			throw new Error("id just set only one");		mini.unreg(this);		this.id = $;		if (this.el)			this.el.id = $;		if (this.textEl)			this.textEl.id = $ + "$text";		if (this.valueEl)			this.valueEl.id = $ + "$value";		this._idSet = true;		mini.reg(this)	},	destroy : function () {		mini.unreg(this);		this.fire("destroy")	}};mini.Control = function () {	this._inited = true;	mini.Control.superclass.constructor.call(this);	this._create();	this.el.uid = this.uid;	this._initEvents();	this._doInit();	if (this._clearBorder)		this.el.style.borderWidth = "0";	this.addCls(this.uiCls);	this.setWidth(this.width);	this.setHeight(this.height)};mini.extend(mini.Control, mini.Component, {	jsName : null,	width : "",	height : "",	visible : true,	readOnly : false,	enabled : true,	readOnlyCls : "mini-readonly",	disabledCls : "mini-disabled",	_create : function () {		this.el = document.createElement("div")	},	_initEvents : function () {},	within : function ($) {		if (mini.isAncestor(this.el, $.target))			return true;		return false	},	name : "",	setName : function ($) {		this.name = $	},	isRender : function () {		return !!(this.el && this.el.parentNode && this.el.parentNode.tagName)	},	render : function (_, $) {		if (typeof _ === "string")			if (_ == "#body")				_ = document.body;			else				_ = mini.byId(_);		if (!_)			return;		if (!$)			$ = "append";		$ = $.toLowerCase();		if ($ == "before")			jQuery(_).before(this.el);		else if ($ == "preend")			jQuery(_).preend(this.el);		else if ($ == "after")			jQuery(_).after(this.el);		else			_.appendChild(this.el);		this.el.id = this.id;		this.doLayout();		this.fire("render")	},	getEl : function () {		return this.el	},	setJsName : function ($) {		this.jsName = $;		window[$] = this	},	setWidth : function ($) {		if (parseInt($) == $)			$ += "px";		this.el.style.width = $;		this.doLayout()	},	getWidth : function (_) {		var $ = _ ? jQuery(this.el).width() : jQuery(this.el).outerWidth();		if (_ && this.borderEl) {			var A = mini.getBorders(this.borderEl);			$ = $ - A.left - A.right		}		return $	},	setHeight : function ($) {		if (parseInt($) == $)			$ += "px";		this.el.style.height = $;		this.doLayout()	},	getHeight : function (_) {		var $ = _ ? jQuery(this.el).height() : jQuery(this.el).outerHeight();		if (_ && this.borderEl) {			var A = mini.getBorders(this.borderEl);			$ = $ - A.top - A.bottom		}		return $	},	getBox : function () {		return mini.getBox(this.el)	},	setBorderStyle : function ($) {		var _ = this.borderEl || this.el;		mini.setStyle(_, $);		this.doLayout()	},	_clearBorder : true,	setStyle : function ($) {		mini.setStyle(this.el, $);		if (this._clearBorder)			this.el.style.borderWidth = "0";		this.doLayout()	},	setCls : function ($) {		mini.removeClass(this.el, this.cls);		mini.addClass(this.el, $);		this.cls = $	},	addCls : function ($) {		mini.addClass(this.el, $)	},	removeCls : function ($) {		mini.removeClass(this.el, $)	},	setReadOnly : function ($) {		this.readOnly = $;		if ($)			this.addCls(this.readOnlyCls);		else			this.removeCls(this.readOnlyCls)	},	getParent : function (A) {		var $ = document,		B = this.el.parentNode;		while (B != $ && B != null) {			var _ = mini.get(B);			if (_) {				if (!mini.isControl(_))					return null;				if (!A || _.uiCls == A)					return _			}			B = B.parentNode		}		return null	},	isReadOnly : function () {		if (this.readOnly || !this.enabled)			return true;		var $ = this.getParent();		if ($)			return $.isReadOnly();		return false	},	setEnabled : function ($) {		this.enabled = $;		if ($)			this.removeCls(this.disabledCls);		else			this.addCls(this.disabledCls)	},	getEnabled : function () {		return this.enabled	},	enable : function () {		this.setEnabled(true)	},	disable : function () {		this.setEnabled(false)	},	displayStyle : "",	setVisible : function ($) {		this.visible = $;		this.el.style.display = $ ? this.displayStyle : "none";		this.doLayout()	},	getVisible : function () {		return this.visible	},	show : function () {		this.setVisible(true)	},	hide : function () {		this.setVisible(false)	},	isDisplay : function () {		if (mini.WindowVisible == false)			return false;		var $ = document.body,		_ = this.el;		while (1) {			if (_ == null || !_.style)				return false;			if (_ && _.style && _.style.display == "none")				return false;			if (_ == $)				return true;			_ = _.parentNode		}		return true	},	allowUpdate : true,	beginUpdate : function () {		this.allowUpdate = false	},	endUpdate : function () {		this.allowUpdate = true;		this.doUpdate()	},	doUpdate : function () {},	canLayout : function () {		if (this.allowLayout == false)			return false;		return this.isDisplay()	},	doLayout : function () {},	layoutChanged : function () {		if (this.canLayout() == false)			return;		this.doLayout()	},	destroy : function () {		if (this.el) {			mini.clearEvent(this.el);			mini.removeChilds(this.el);			jQuery(this.el).remove();			this.el = null		}		this.borderEl = null;		mini.unreg(this);		this.fire("destroy")	},	focus : function () {		try {			this.el.focus()		} catch ($) {}			},	blur : function () {		try {			this.el.blur()		} catch ($) {}			},	allowAnim : true,	setAllowAnim : function ($) {		this.allowAnim = $	},	_getMaskWrapEl : function () {		return this.el	},	mask : function ($) {		if (typeof $ == "string")			$ = {				html : $			};		$ = $ || {};		$.el = this._getMaskWrapEl();		if (!$.cls)			$.cls = this.maskCls;		mini.mask($)	},	unmask : function () {		mini.unmask(this._getMaskWrapEl());		this.isLoading = false	},	maskCls : "mini-mask-loading",	loadingMsg : "Loading...",	loading : function () {		this.isLoading = true;		this.mask(this.loadingMsg)	},	contextMenu : null,	setContextMenu : function ($) {		var _ = $;		if (typeof $ == "string") {			_ = mini.get($);			if (!_) {				mini.parse($);				_ = mini.get($)			}		} else if (mini.isArray($))			_ = {				type : "menu",				items : $			};		else if (!mini.isControl($))			_ = mini.create($);		if (this.contextMenu !== _) {			this.contextMenu = _;			this.contextMenu.owner = this;			mini.on(this.el, "contextmenu", function (_) {				var $ = {					popupEl : this.el,					htmlEvent : _,					cancel : false				};				this.contextMenu.fire("BeforeOpen", $);				if ($.cancel == true)					return;				this.contextMenu.fire("opening", $);				if ($.cancel == true)					return;				this.contextMenu.showAtPos(_.pageX, _.pageY);				this.contextMenu.fire("Open", $);				return false			}, this)		}	},	setApplyTo : function ($) {		this.applyTo($)	},	applyTo : function (_) {		_ = mini.byId(_);		if (!_)			return this;		if (mini.get(_))			throw new Error("not applyTo a mini control");		var $ = this.getAttrs(_);		delete $.applyTo;		if (mini.isNull($.defaultValue) && !mini.isNull($.value))			$.defaultValue = $.value;		var A = _.parentNode;		if (A)			A.replaceChild(this.el, _);		this.set($);		this._afterApply(_);		return this	},	_afterApply : function ($) {},	getAttrs : function (_) {		var C = {},		B = _.className;		if (B)			C.cls = B;		mini._ParseString(_, C, ["id", "name", "width", "height", "menu", "borderStyle", "value", "defaultValue", "contextMenu"]);		mini._ParseBool(_, C, ["visible", "enabled", "readOnly"]);		var A = _.style.cssText;		if (A)			C.style = A;		if (mini.isIE9) {			var $ = _.style.background;			if ($) {				if (!C.style)					C.style = "";				C.style += ";background:" + $			}		}		if (this.style)			if (C.style)				C.style = this.style + ";" + C.style;			else				C.style = this.style;		if (this.borderStyle)			if (C.borderStyle)				C.borderStyle = this.borderStyle + ";" + C.borderStyle;			else				C.borderStyle = this.borderStyle;		return C	}});mini.ValidatorBase = function () {	mini.ValidatorBase.superclass.constructor.call(this)};mini.extend(mini.ValidatorBase, mini.Control, {	required : false,	requiredErrorText : "not empty",	requiredCls : "mini-required",	errorText : "",	errorCls : "mini-error",	invalidCls : "mini-invalid",	errorMode : "icon",	validateOnChanged : true,	_IsValid : true,	validate : function () {		var $ = {			value : this.getValue(),			errorText : "",			isValid : true		};		if (this.required)			if (mini.isNull($.value) || $.value === "") {				$.isValid = false;				$.errorText = this.requiredErrorText			}		this.fire("validation", $);		this.errorText = $.errorText;		this.setIsValid($.isValid);		return this.isValid()	},	isValid : function () {		return this._IsValid	},	setIsValid : function ($) {		this._IsValid = $;		this.doUpdateValid()	},	setErrorMode : function ($) {		if (!$)			$ = "none";		this.errorMode = $.toLowerCase();		if (this._IsValid == false)			this.doUpdateValid()	},	setErrorText : function ($) {		this.errorText = $;		if (this._IsValid == false)			this.doUpdateValid()	},	setRequired : function ($) {		this.required = $;		this.doUpdate()	},	setRquiredErrorText : function ($) {		this.requiredErrorText = $	},	errorIconEl : null,	getErrorIconEl : function () {		return this.errorIconEl	},	_RemoveErrorIcon : function () {},	doUpdateValid : function () {		this.removeCls(this.errorCls);		this.removeCls(this.invalidCls);		this.el.title = "";		if (this._IsValid == false)			switch (this.errorMode) {			case "icon":				this.addCls(this.errorCls);				var $ = this.getErrorIconEl();				if ($)					$.title = this.errorText;				break;			case "border":				this.addCls(this.invalidCls);				this.el.title = this.errorText;			default:				this._RemoveErrorIcon();				break			}		else			this._RemoveErrorIcon()	},	_OnValueChanged : function () {		if (this.validateOnChanged)			this.validate();		this.fire("valuechanged", {			value : this.getValue()		})	},	onValueChanged : function (_, $) {		this.on("valuechanged", _, $)	},	onValidation : function (_, $) {		this.on("validation", _, $)	},	getAttrs : function (_) {		var A = mini.ValidatorBase.superclass.getAttrs.call(this, _);		mini._ParseString(_, A, ["onvaluechanged", "onvalidation", "requiredErrorText", "errorMode"]);		mini._ParseBool(_, A, ["validateOnChanged"]);		var $ = _.getAttribute("required");		if (!$)			$ = _.required;		if ($)			A.required = $ != "false" ? true : false;		return A	}});mini.ListControl = function () {	this.data = [];	this.selecteds = [];	mini.ListControl.superclass.constructor.call(this);	this.doUpdate()};mini.extend(mini.ListControl, mini.ValidatorBase, {	defaultValue : "",	value : "",	valueField : "id",	textField : "text",	delimiter : ",",	data : null,	url : "",	itemCls : "mini-list-item",	itemHoverCls : "mini-list-item-hover",	itemSelectedCls : "mini-list-item-selected",	set : function (A) {		if (typeof A == "string")			return this;		var $ = A.value;		delete A.value;		var B = A.url;		delete A.url;		var _ = A.data;		delete A.data;		mini.ListControl.superclass.set.call(this, A);		if (!mini.isNull(_))			this.setData(_);		if (!mini.isNull(B))			this.setUrl(B);		if (!mini.isNull($))			this.setValue($);		return this	},	uiCls : "mini-list",	_create : function () {},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.el, "click", this.__OnClick, this);			mini.on(this.el, "dblclick", this.__OnDblClick, this);			mini.on(this.el, "mousedown", this.__OnMouseDown, this);			mini.on(this.el, "mouseup", this.__OnMouseUp, this);			mini.on(this.el, "mousemove", this.__OnMouseMove, this);			mini.on(this.el, "mouseover", this.__OnMouseOver, this);			mini.on(this.el, "mouseout", this.__OnMouseOut, this);			mini.on(this.el, "keydown", this.__OnKeyDown, this);			mini.on(this.el, "keyup", this.__OnKeyUp, this);			mini.on(this.el, "contextmenu", this.__OnContextMenu, this)		}, this)	},	name : "",	setName : function ($) {		this.name = $;		if (this.valueEl)			mini.setAttr(this.valueEl, "name", this.name)	},	getItemByEvent : function (_) {		var A = mini.findParent(_.target, this.itemCls);		if (A) {			var $ = parseInt(mini.getAttr(A, "index"));			return this.data[$]		}	},	addItemCls : function (_, A) {		var $ = this.getItemEl(_);		if ($)			mini.addClass($, A)	},	removeItemCls : function (_, A) {		var $ = this.getItemEl(_);		if ($)			mini.removeClass($, A)	},	getItemEl : function (_) {		_ = this.getItem(_);		var $ = this.data.indexOf(_),		A = this._createItemId($);		return document.getElementById(A)	},	focusItem : function (_, $) {		_ = this.getItem(_);		if (!_)			return;		var A = this.getItemEl(_);		if ($ && A)			this.scrollIntoView(_);		if (this.focusedItem == _)			return;		this.blurItem();		this.focusedItem = _;		mini.addClass(A, this.itemHoverCls)	},	blurItem : function () {		if (!this.focusedItem)			return;		var $ = this.getItemEl(this.focusedItem);		if ($)			mini.removeClass($, this.itemHoverCls);		this.focusedItem = null	},	getFocusedItem : function () {		return this.focusedItem	},	getFocusedIndex : function () {		return this.data.indexOf(this.focusedItem)	},	scrollIntoView : function (_) {		var $ = this.getItemEl(_);		mini.scrollIntoView($, this.el, false)	},	getItem : function ($) {		if (typeof $ == "object")			return $;		if (typeof $ == "number")			return this.data[$];		return this.findItems($)[0]	},	getCount : function () {		return this.data.length	},	indexOf : function ($) {		return this.data.indexOf($)	},	getAt : function ($) {		return this.data[$]	},	updateItem : function ($, _) {		$ = this.getItem($);		if (!$)			return;		mini.copyTo($, _);		this.doUpdate()	},	load : function ($) {		if (typeof $ == "string")			this.setUrl($);		else			this.setData($)	},	loadData : function ($) {		this.setData($)	},	setData : function (data) {		if (typeof data == "string")			data = eval(data);		if (!mini.isArray(data))			data = [];		this.data = data;		this._checkSelecteds();		this.doUpdate()	},	getData : function () {		return this.data.clone()	},	setUrl : function ($) {		if (this.url != $) {			this.url = $;			this._doLoad({})		}	},	_doLoad : function (params) {		try {			this.url = eval(this.url)		} catch (e) {}				var e = {			url : this.url,			async : false,			type : "get",			params : params,			cancel : false		};		this.fire("beforeload", e);		if (e.cancel == true)			return;		var sf = this;		this._ajaxer = jQuery.ajax({				url : e.url,				async : e.async,				data : e.params,				type : e.type,				cache : false,				dataType : "text",				success : function ($) {					var _ = null;					try {						_ = mini.decode($)					} catch (A) {}										var A = {						data : _,						cancel : false					};					sf.fire("preload", A);					if (A.cancel == true)						return;					sf.setData(A.data);					sf.fire("load");					setTimeout(function () {						sf.doLayout()					}, 100)				},				error : function ($, A, _) {					var B = {						xmlHttp : $,						errorCode : A					};					sf.fire("loaderror", B)				}			})	},	setValue : function ($) {		if (mini.isNull($))			$ = "";		if (this.value !== $) {			var _ = this.findItems(this.value);			this.deselects(_);			this.value = $;			if (this.valueEl)				this.valueEl.value = $;			_ = this.findItems(this.value);			this.selects(_)		}	},	getValue : function () {		return this.value	},	getFormValue : function () {		return this.value	},	setValueField : function ($) {		this.valueField = $	},	setTextField : function ($) {		this.textField = $	},	getItemValue : function ($) {		return String($[this.valueField])	},	getItemText : function ($) {		var _ = $[this.textField];		return mini.isNull(_) ? "" : String(_)	},	getValueAndText : function (A) {		if (mini.isNull(A))			A = [];		if (!mini.isArray(A))			A = this.findItems(A);		var B = [],		C = [];		for (var _ = 0, D = A.length; _ < D; _++) {			var $ = A[_];			if ($) {				B.push(this.getItemValue($));				C.push(this.getItemText($))			}		}		return [B.join(this.delimiter), C.join(this.delimiter)]	},	findItems : function (B) {		if (mini.isNull(B) || B === "")			return [];		var E = String(B).split(this.delimiter),		D = this.data,		H = {};		for (var F = 0, A = D.length; F < A; F++) {			var _ = D[F],			I = _[this.valueField];			H[I] = _		}		var C = [];		for (var $ = 0, G = E.length; $ < G; $++) {			I = E[$],			_ = H[I];			if (_)				C.push(_)		}		return C	},	selected : null,	selecteds : [],	multiSelect : false,	_checkSelecteds : function () {		for (var _ = this.selecteds.length - 1; _ >= 0; _--) {			var $ = this.selecteds[_];			if (this.data.indexOf($) == -1)				this.selecteds.removeAt(_)		}		var A = this.getValueAndText(this.selecteds);		this.value = A[0];		if (this.valueEl)			this.valueEl.value = this.value	},	setMultiSelect : function ($) {		this.multiSelect = $	},	isSelected : function ($) {		if (!$)			return false;		return this.selecteds.indexOf($) != -1	},	getSelecteds : function () {		return this.selecteds.clone()	},	setSelected : function ($) {		if ($) {			this.selected = $;			this.select($)		}	},	getSelected : function () {		return this.selected	},	select : function ($) {		$ = this.getItem($);		if (!$)			return;		if (this.isSelected($))			return;		this.selects([$])	},	deselect : function ($) {		$ = this.getItem($);		if (!$)			return;		if (!this.isSelected($))			return;		this.deselects([$])	},	selectAll : function () {		var $ = this.data.clone();		this.selects($)	},	deselectAll : function () {		this.deselects(this.selecteds)	},	clearSelect : function () {		this.deselectAll()	},	selects : function (A) {		if (!A || A.length == 0)			return;		A = A.clone();		for (var _ = 0, B = A.length; _ < B; _++) {			var $ = A[_];			if (!this.isSelected($))				this.selecteds.push($)		}		this._doSelects()	},	deselects : function (A) {		if (!A || A.length == 0)			return;		A = A.clone();		for (var _ = A.length - 1; _ >= 0; _--) {			var $ = A[_];			if (this.isSelected($))				this.selecteds.remove($)		}		this._doSelects()	},	_doSelects : function () {		var C = this.getValueAndText(this.selecteds);		this.value = C[0];		if (this.valueEl)			this.valueEl.value = this.value;		for (var A = 0, D = this.data.length; A < D; A++) {			var _ = this.data[A],			F = this.isSelected(_);			if (F)				this.addItemCls(_, this.itemSelectedCls);			else				this.removeItemCls(_, this.itemSelectedCls);			var $ = this.data.indexOf(_),			E = this._createCheckId($),			B = document.getElementById(E);			if (B)				B.checked = !!F		}	},	_OnSelectionChanged : function (_, B) {		var $ = this.getValueAndText(this.selecteds);		this.value = $[0];		if (this.valueEl)			this.valueEl.value = this.value;		var A = {			selecteds : this.getSelecteds(),			selected : this.getSelected(),			value : this.getValue()		};		this.fire("SelectionChanged", A)	},	_createCheckId : function ($) {		return this.uid + "$ck$" + $	},	_createItemId : function ($) {		return this.uid + "$" + $	},	__OnClick : function ($) {		this._fireEvent($, "Click")	},	__OnDblClick : function ($) {		this._fireEvent($, "Dblclick")	},	__OnMouseDown : function ($) {		this._fireEvent($, "MouseDown")	},	__OnMouseUp : function ($) {		this._fireEvent($, "MouseUp")	},	__OnMouseMove : function ($) {		this._fireEvent($, "MouseMove")	},	__OnMouseOver : function ($) {		this._fireEvent($, "MouseOver")	},	__OnMouseOut : function ($) {		this._fireEvent($, "MouseOut")	},	__OnKeyDown : function ($) {		this._fireEvent($, "KeyDown")	},	__OnKeyUp : function ($) {		this._fireEvent($, "KeyUp")	},	__OnContextMenu : function ($) {		this._fireEvent($, "ContextMenu")	},	_fireEvent : function (C, A) {		if (!this.enabled)			return;		var $ = this.getItemByEvent(C);		if (!$)			return;		var B = this["_OnItem" + A];		if (B)			B.call(this, $, C);		else {			var _ = {				item : $,				htmlEvent : C			};			this.fire("item" + A, _)		}	},	_OnItemClick : function ($, A) {		if ($.enabled === false)			return;		var _ = this.getValue();		if (this.multiSelect) {			if (this.isSelected($)) {				this.deselect($);				if (this.selected == $)					this.selected = null			} else {				this.select($);				this.selected = $			}			this._OnSelectionChanged()		} else if (!this.isSelected($)) {			this.deselectAll();			this.select($);			this.selected = $;			this._OnSelectionChanged()		}		if (_ != this.getValue())			this._OnValueChanged();		var A = {			item : $,			htmlEvent : A		};		this.fire("itemclick", A)	},	blurOnOut : true,	_OnItemMouseOut : function ($, _) {		if (!this.enabled)			return;		if (this.blurOnOut)			this.blurItem();		var _ = {			item : $,			htmlEvent : _		};		this.fire("itemmousedown", _)	},	_OnItemMouseMove : function ($, _) {		if (!this.enabled || $.enabled === false)			return;		this.focusItem($);		var _ = {			item : $,			htmlEvent : _		};		this.fire("itemmousemove", _)	},	onItemClick : function (_, $) {		this.on("itemclick", _, $)	},	onItemMouseDown : function (_, $) {		this.on("itemmousedown", _, $)	},	onBeforeLoad : function (_, $) {		this.on("beforeload", _, $)	},	onLoad : function (_, $) {		this.on("load", _, $)	},	onLoadError : function (_, $) {		this.on("loaderror", _, $)	},	onPreLoad : function (_, $) {		this.on("preload", _, $)	},	getAttrs : function (C) {		var G = mini.ListControl.superclass.getAttrs.call(this, C);		mini._ParseString(C, G, ["url", "data", "value", "textField", "valueField", "onitemclick", "onitemmousemove", "onselectionchanged", "onbeforeload", "onload", "onloaderror", "ondataload"]);		mini._ParseBool(C, G, ["multiSelect"]);		var E = G.valueField || this.valueField,		B = G.textField || this.textField;		if (C.nodeName.toLowerCase() == "select") {			var D = [];			for (var A = 0, F = C.length; A < F; A++) {				var _ = C.options[A],				$ = {};				$[B] = _.text;				$[E] = _.value;				D.push($)			}			if (D.length > 0)				G.data = D		}		return G	}});mini._Layouts = {};mini.layout = function ($) {	function _(B) {		var C = mini.get(B);		if (C) {			if (C.doLayout)				if (!mini._Layouts[C.uid]) {					mini._Layouts[C.uid] = C;					C.doLayout(false);					delete mini._Layouts[C.uid]				}		} else {			var D = B.childNodes;			if (D)				for (var $ = 0, E = D.length; $ < E; $++) {					var A = D[$];					_(A)				}		}	}	if (!$)		$ = document.body;	_($)};mini._Removes = [];mini.parse = function (_) {	if (typeof _ == "string") {		var A = _;		_ = mini.byId(A);		if (!_)			_ = document.body	}	if (_ && !mini.isElement(_))		_ = _.el;	if (!_)		_ = document.body;	function $(H) {		var G = H.nodeName.toLowerCase();		if (!G)			return;		var C = H.className;		if (C) {			var _ = mini.get(H);			if (!_) {				var I = C.split(" ");				for (var F = 0, D = I.length; F < D; F++) {					var B = I[F],					J = mini.getClassByUICls(B);					if (J) {						mini.removeClass(H, B);						var E = new J();						E.applyTo(H);						H = E.el;						break					}				}			}		}		if (G == "select" || mini.hasClass(H, "mini-menu") || mini.hasClass(H, "mini-datagrid") || mini.hasClass(H, "mini-treegrid") || mini.hasClass(H, "mini-tree"))			return;		var K = mini.getChildNodes(H, true);		for (F = 0, D = K.length; F < D; F++) {			var A = K[F];			if (A.nodeType == 1)				$(A)		}	}	$(_);	mini.layout()};mini._ParseString = function (B, A, F) {	var E = jQuery(B);	for (var $ = 0, D = F.length; $ < D; $++) {		var C = F[$],		_ = E.attr(C);		if (_)			A[C] = _	}};mini._ParseBool = function (B, A, F) {	var E = jQuery(B);	for (var $ = 0, D = F.length; $ < D; $++) {		var C = F[$],		_ = E.attr(C);		if (_)			A[C] = _ == "true" ? true : false	}};mini._ParseInt = function (B, A, F) {	var E = jQuery(B);	for (var $ = 0, D = F.length; $ < D; $++) {		var C = F[$],		_ = parseInt(E.attr(C));		if (!isNaN(_))			A[C] = _	}};mini._ParseColumns = function (N) {	var G = [],	O = mini.getChildNodes(N);	for (var M = 0, H = O.length; M < H; M++) {		var C = O[M],		T = jQuery(C),		D = {},		J = null,		K = null,		_ = mini.getChildNodes(C);		if (_)			for (var $ = 0, P = _.length; $ < P; $++) {				var B = _[$],				A = jQuery(B).attr("property");				if (!A)					continue;				A = A.toLowerCase();				if (A == "columns") {					D.columns = mini._ParseColumns(B);					jQuery(B).remove()				}				if (A == "editor" || A == "filter") {					var F = B.className,					R = F.split(" ");					for (var L = 0, S = R.length; L < S; L++) {						var E = R[L],						Q = mini.getClassByUICls(E);						if (Q) {							var I = new Q();							if (A == "filter") {								K = I.getAttrs(B);								K.type = I.type							} else {								J = I.getAttrs(B);								J.type = I.type							}							break						}					}					jQuery(B).remove()				}			}		D.header = C.innerHTML;		mini._ParseString(C, D, ["name", "header", "field", "editor", "filter", "renderer", "width", "type", "renderer", "headerAlign", "align", "headerCls", "cellCls", "headerStyle", "cellStyle", "displayField", "dateFormat", "listFormat", "mapFormat", "trueValue", "falseValue"]);		mini._ParseBool(C, D, ["visible", "readOnly", "allowSort", "allowReisze", "allowMove", "allowDrag"]);		if (J)			D.editor = J;		if (K)			D.filter = K;		G.push(D)	}	return G};mini._Columns = {};mini.getColumn = function ($) {	var _ = mini._Columns[$.toLowerCase()];	if (!_)		return {};	return _()};mini.IndexColumn = function ($) {	return mini.copyTo({		width : 30,		cellCls : "",		align : "center",		draggable : false,		renderer : function (_) {			var $ = _.sender;			if (this.draggable) {				if (!_.cellStyle)					_.cellStyle = "";				_.cellStyle += ";cursor:move;"			}			return ($.pageIndex * $.pageSize) + _.rowIndex + 1		}	}, $)};mini._Columns["indexcolumn"] = mini.IndexColumn;mini.CheckColumn = function ($) {	return mini.copyTo({		width : 30,		cellCls : "mini-checkcolumn",		headerCls : "mini-checkcolumn",		multiSelect : true,		header : function ($) {			var _ = this.uid + "checkall";			return "<input type=\"checkbox\" id=\"" + _ + "\" />"		},		getCheckId : function ($) {			return this._gridUID + "$checkcolumn$" + $[this._rowIdField]		},		renderer : function (A) {			var _ = this.getCheckId(A.record),			$ = A.sender.isSelected(A.record);			return "<input type=\"checkbox\" id=\"" + _ + "\" " + ($ ? "checked" : "") + " hidefocus style=\"outline:none;\" onclick=\"return false\"/>"		},		onHeaderCellClick : function (B) {			var $ = B.sender,			A = $.uid + "checkall",			_ = document.getElementById(A);			if (_)				if (_.checked)					$.selectAll();				else					$.deselectAll()		},		onSelectionChanged : function (G) {			var $ = G.sender,			C = $.toArray();			for (var A = 0, D = C.length; A < D; A++) {				var _ = C[A],				F = $.isSelected(_),				E = $.uid + "$checkcolumn$" + _[$._rowIdField],				B = document.getElementById(E);				if (B)					B.checked = F			}		}	}, $)};mini._Columns["checkcolumn"] = mini.CheckColumn;mini.ExpandColumn = function ($) {	return mini.copyTo({		width : 30,		cellCls : "",		align : "center",		draggable : false,		cellStyle : "padding:0",		renderer : function ($) {			return "<a class=\"mini-grid-ecIcon\" href=\"javascript:#\" onclick=\"return false\"></a>"		},		onCellClick : function (A) {			var $ = A.sender;			if (A.column == this)				if (mini.findParent(A.htmlEvent.target, "mini-grid-ecIcon")) {					var _ = $.isShowRowDetail(A.record);					$.hideAllRowDetail();					if (_);					else						$.showRowDetail(A.record)				}		}	}, $)};mini._Columns["expandcolumn"] = mini.ExpandColumn;mini.CheckBoxColumn = function ($) {	return mini.copyTo({		header : "#",		headerAlign : "center",		cellCls : "mini-checkcolumn",		trueValue : true,		falseValue : false,		readOnly : false,		getCheckId : function ($) {			return this._gridUID + "$checkbox$" + $._id		},		renderer : function (A) {			var _ = this.getCheckId(A.record),			$ = A.record[A.field] == this.trueValue ? true : false;			return "<input type=\"checkbox\" id=\"" + _ + "\" " + ($ ? "checked" : "") + " hidefocus style=\"outline:none;\" onclick=\"return false;\"/>"		},		init : function ($) {			this.grid = $;			$.on("cellclick", function (C) {				if (C.column == this) {					if (this.readOnly)						return;					var B = this.getCheckId(C.record),					A = C.htmlEvent.target;					if (A.id == B) {						C.cancel = false;						C.value = C.record[C.field];						$.fire("cellbeginedit", C);						if (C.cancel !== true) {							var _ = C.record[C.field] == this.trueValue ? this.falseValue : this.trueValue;							if ($._OnCellCommitEdit)								$._OnCellCommitEdit(C.record, C.column, _)						}					}				}			}, this);			var _ = parseInt(this.trueValue),			A = parseInt(this.falseValue);			if (!isNaN(_))				this.trueValue = _;			if (!isNaN(A))				this.falseValue = A		}	}, $)};mini._Columns["checkboxcolumn"] = mini.CheckBoxColumn;mini._GridResizer = function ($) {	this.owner = $;	mini.on(this.owner.el, "mousedown", this.__OnMouseDown, this)};mini._GridResizer.prototype = {	__OnMouseDown : function (_) {		if (mini.hasClass(_.target, "mini-grid-resizeGrid") && this.owner.allowResize) {			var $ = this._getResizeDrag();			$.start(_)		}	},	_getResizeDrag : function () {		if (!this._resizeDragger)			this._resizeDragger = new mini.Drag({					capture : true,					onStart : mini.createDelegate(this._OnDragStart, this),					onMove : mini.createDelegate(this._OnDragMove, this),					onStop : mini.createDelegate(this._OnDragStop, this)				});		return this._resizeDragger	},	_OnDragStart : function ($) {		this.proxy = mini.append(document.body, "<div class=\"mini-grid-resizeProxy\"></div>");		this.proxy.style.cursor = "se-resize";		this.elBox = mini.getBox(this.owner.el);		mini.setBox(this.proxy, this.elBox)	},	_OnDragMove : function (A) {		var C = A.now[0] - A.init[0],		$ = A.now[1] - A.init[1],		_ = this.elBox.width + C,		B = this.elBox.height + $;		if (_ < this.minWidth)			_ = this.minWidth;		if (B < this.minHeight)			B = this.minHeight;		if (_ > this.maxWidth)			_ = this.maxWidth;		if (B > this.maxHeight)			B = this.maxHeight;		mini.setSize(this.proxy, _, B)	},	_OnDragStop : function ($) {		var _ = mini.getBox(this.proxy);		jQuery(this.proxy).remove();		this.proxy = null;		this.elBox = null;		this.owner.setWidth(_.width);		this.owner.setHeight(_.height)	}};mini.__IFrameCreateCount = 1;mini.createIFrame = function (C, B, F) {	var E = "__iframe_onload" + mini.__IFrameCreateCount++;	window[E] = _;	var D = "<iframe src=\"" + C + "\" style=\"width:100%;height:100%;\" onload=\"" + E + "()\" frameborder=\"0\"></iframe>",	$ = document.createElement("div"),	A = mini.append($, D);	function _() {		setTimeout(function () {			if (B)				B(A)		}, 1);		A.onload = null;		window[E] = null	}	A.onunload = function () {		if (F)			F(A);		A.src = "";		A = null;		A.onunload = null	};	A._ondestroy = function () {		if (F)			F(A);		A.src = "";		A._ondestroy = null;		A = null	};	return A};mini._doOpen = function (C) {	if (typeof C == "string")		C = {			url : C		};	C = mini.copyTo({			width : 700,			height : 400,			allowResize : true,			allowModal : true,			title : "",			titleIcon : "",			iconCls : "",			iconStyle : "",			bodyStyle : "padding: 0",			url : "",			showCloseButton : true,			showFooter : false		}, C);	C.closeAction = "destroy";	var $ = C.onload;	delete C.onload;	var A = C.ondestory;	delete C.ondestory;	var _ = C.url;	delete C.url;	var B = new mini.Window();	B.set(C);	B.load(_, $, A);	B.show();	return B};mini.open = function ($) {	mini._doOpen($)};mini.openTop = function ($) {	if (top && top != window)		top.mini.open($);	else		mini._doOpen($)};mini.getData = function (C, A, E, D, _) {	var $ = mini.getText(C, A, E, D, _),	B = mini.decode($);	return B};mini.getText = function (B, A, D, C, _) {	var $ = null;	jQuery.ajax({		url : B,		data : A,		async : false,		type : _ ? _ : "get",		cache : false,		dataType : "text",		success : function (A, _) {			$ = A		},		error : C	});	return $};if (!window.mini_RootPath)	mini_RootPath = "/";mini_CreateJSPath = function () {	var A = document.getElementsByTagName("script"),	D = "";	for (var $ = 0, E = A.length; $ < E; $++) {		var B = A[$];		try {			var C = B.src;			if (C.indexOf("miniui.js") != -1) {				var F = C.split("miniui.js");				D = F[0];				if (D.indexOf("http") == -1) {					var _ = location.href;					_ = _.split("#")[0];					_ = _.split("?")[0];					F = _.split("/");					F.length = F.length - 1;					_ = F.join("/");					D = _ + "/" + D				}				break			}		} catch (G) {}			}	return D};if (!window.mini_JSPath)	mini_JSPath = mini_CreateJSPath();mini.update = function (A, _) {	if (typeof A == "string")		A = {			url : A		};	if (_)		A.el = _;	A = mini.copyTo({			el : null,			url : "",			async : false,			type : "get",			cache : false,			dataType : "text",			success : function (_) {				var B = A.el;				if (B) {					$(B).html(_);					mini.parse(B)				}			},			error : function ($, A, _) {}					}, A);	jQuery.ajax(A)};mini.createSingle = function ($) {	if (typeof $ == "string")		$ = mini.getClass($);	if (typeof $ != "function")		return;	var _ = $.single;	if (!_)		_ = $.single = new $();	return _};mini.createTopSingle = function ($) {	if (typeof $ != "function")		return;	var _ = $.prototype.type;	if (top && top != window && top.mini && top.mini.getClass(_))		return top.mini.createSingle(_);	else		return mini.createSingle($)};mini.emptyFn = function () {};mini.Drag = function ($) {	mini.copyTo(this, $)};mini.Drag.prototype = {	onStart : mini.emptyFn,	onMove : mini.emptyFn,	onStop : mini.emptyFn,	capture : false,	fps : 20,	event : null,	delay : 80,	start : function (_) {		_.preventDefault();		if (_)			this.event = _;		this.now = this.init = [this.event.pageX, this.event.pageY];		var $ = document;		mini.on($, "mousemove", this.move, this);		mini.on($, "mouseup", this.stop, this);		mini.on($, "contextmenu", this.contextmenu, this);		if (this.context)			mini.on(this.context, "contextmenu", this.contextmenu, this);		this.trigger = _.target;		mini.selectable(this.trigger, false);		mini.selectable($.body, false);		if (this.capture)			if (mini.isIE)				this.trigger.setCapture(true);			else if (document.captureEvents)				document.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);		this.started = false;		this.startTime = new Date()	},	contextmenu : function ($) {		if (this.context)			mini.un(this.context, "contextmenu", this.contextmenu, this);		mini.un(document, "contextmenu", this.contextmenu, this);		$.preventDefault();		$.stopPropagation()	},	move : function (_) {		if (this.delay)			if (new Date() - this.startTime < this.delay)				return;		if (!this.started) {			this.started = true;			this.onStart(this)		}		var $ = this;		if (!this.timer) {			$.now = [_.pageX, _.pageY];			$.event = _;			$.onMove($);			$.timer = null		}	},	stop : function (B) {		this.now = [B.pageX, B.pageY];		this.event = B;		if (this.timer) {			clearTimeout(this.timer);			this.timer = null		}		var A = document;		mini.selectable(this.trigger, true);		mini.selectable(A.body, true);		if (this.capture)			if (mini.isIE)				this.trigger.releaseCapture();			else if (document.captureEvents)				document.releaseEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);		var _ = mini.MouseButton.Right != B.button;		if (_ == false)			B.preventDefault();		mini.un(A, "mousemove", this.move, this);		mini.un(A, "mouseup", this.stop, this);		var $ = this;		setTimeout(function () {			mini.un(document, "contextmenu", $.contextmenu, $);			if ($.context)				mini.un($.context, "contextmenu", $.contextmenu, $)		}, 1);		if (this.started)			this.onStop(this, _)	}};mini.JSON = new(function () {		var sb = [],		useHasOwn = !!{}				.hasOwnProperty,		replaceString = function ($, A) {			var _ = m[A];			if (_)				return _;			_ = A.charCodeAt();			return "\\u00" + Math.floor(_ / 16).toString(16) + (_ % 16).toString(16)		},		doEncode = function ($) {			if ($ === null) {				sb[sb.length] = "null";				return			}			var A = typeof $;			if (A == "undefined") {				sb[sb.length] = "null";				return			} else if ($.push) {				sb[sb.length] = "[";				var D,				_,				C = $.length,				E;				for (_ = 0; _ < C; _ += 1) {					E = $[_];					A = typeof E;					if (A == "undefined" || A == "function" || A == "unknown");					else {						if (D)							sb[sb.length] = ",";						doEncode(E);						D = true					}				}				sb[sb.length] = "]";				return			} else if ($.getFullYear) {				var B;				sb[sb.length] = "\"";				sb[sb.length] = $.getFullYear();				sb[sb.length] = "-";				B = $.getMonth() + 1;				sb[sb.length] = B < 10 ? "0" + B : B;				sb[sb.length] = "-";				B = $.getDate();				sb[sb.length] = B < 10 ? "0" + B : B;				sb[sb.length] = "T";				B = $.getHours();				sb[sb.length] = B < 10 ? "0" + B : B;				sb[sb.length] = ":";				B = $.getMinutes();				sb[sb.length] = B < 10 ? "0" + B : B;				sb[sb.length] = ":";				B = $.getSeconds();				sb[sb.length] = B < 10 ? "0" + B : B;				sb[sb.length] = "\"";				return			} else if (A == "string") {				if (strReg1.test($)) {					sb[sb.length] = "\"";					sb[sb.length] = $.replace(strReg2, replaceString);					sb[sb.length] = "\"";					return				}				sb[sb.length] = "\"" + $ + "\"";				return			} else if (A == "number") {				sb[sb.length] = $;				return			} else if (A == "boolean") {				sb[sb.length] = String($);				return			} else {				sb[sb.length] = "{";				D,				_,				E;				for (_ in $)					if (!useHasOwn || $.hasOwnProperty(_)) {						E = $[_];						A = typeof E;						if (A == "undefined" || A == "function" || A == "unknown");						else {							if (D)								sb[sb.length] = ",";							doEncode(_);							sb[sb.length] = ":";							doEncode(E);							D = true						}					}				sb[sb.length] = "}";				return			}		},		m = {			"\b" : "\\b",			"\t" : "\\t",			"\n" : "\\n",			"\f" : "\\f",			"\r" : "\\r",			"\"" : "\\\"",			"\\" : "\\\\"		},		strReg1 = /["\\\x00-\x1f]/,		strReg2 = /([\x00-\x1f\\"])/g;		this.encode = function () {			var $;			return function ($, _) {				sb = [];				doEncode($);				return sb.join("")			}		}		();		this.decode = function () {			var re = /[\"\'](\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})[\"\']/g;			return function (json) {				if (json === "" || json === null || json === undefined)					return json;				json = json.replace(re, "new Date($1,$2-1,$3,$4,$5,$6)");				var s = eval("(" + json + ")");				return s			}		}		()	})();mini.encode = mini.JSON.encode;mini.decode = mini.JSON.decode;mini.clone = function ($) {	if ($ === null || $ === undefined)		return $;	var B = mini.encode($),	_ = mini.decode(B);	function A(B) {		for (var _ = 0, D = B.length; _ < D; _++) {			var $ = B[_];			delete $._state;			delete $._id;			delete $._pid;			for (var C in $) {				var E = $[C];				if (E instanceof Array)					A(E)			}		}	}	A(_ instanceof Array ? _ : [_]);	return _};var DAY_MS = 86400000, HOUR_MS = 3600000, MINUTE_MS = 60000;mini.copyTo(mini, {	clearTime : function ($) {		if (!$)			return null;		return new Date($.getFullYear(), $.getMonth(), $.getDate())	},	maxTime : function ($) {		if (!$)			return null;		return new Date($.getFullYear(), $.getMonth(), $.getDate(), 23, 59, 59)	},	cloneDate : function ($) {		if (!$)			return null;		return new Date($.getTime())	},	addDate : function (A, $, _) {		if (!_)			_ = "D";		A = new Date(A.getTime());		switch (_.toUpperCase()) {		case "Y":			A.setFullYear(A.getFullYear() + $);			break;		case "MO":			A.setMonth(A.getMonth() + $);			break;		case "D":			A.setDate(A.getDate() + $);			break;		case "H":			A.setHours(A.getHours() + $);			break;		case "M":			A.setMinutes(A.getMinutes() + $);			break;		case "S":			A.setSeconds(A.getSeconds() + $);			break;		case "MS":			A.setMilliseconds(A.getMilliseconds() + $);			break		}		return A	},	getWeek : function (D, $, _) {		$ += 1;		var E = Math.floor((14 - ($)) / 12),		G = D + 4800 - E,		A = ($) + (12 * E) - 3,		C = _ + Math.floor(((153 * A) + 2) / 5) + (365 * G) + Math.floor(G / 4) - Math.floor(G / 100) + Math.floor(G / 400) - 32045,		F = (C + 31741 - (C % 7)) % 146097 % 36524 % 1461,		H = Math.floor(F / 1460),		B = ((F - H) % 365) + H;		NumberOfWeek = Math.floor(B / 7) + 1;		return NumberOfWeek	},	getWeekStartDate : function (C, B) {		if (!B)			B = 0;		if (B > 6 || B < 0)			throw new Error("out of weekday");		var A = C.getDay(),		_ = B - A;		if (A < B)			_ -= 7;		var $ = new Date(C.getFullYear(), C.getMonth(), C.getDate() + _);		return $	},	getShortWeek : function (_) {		var $ = this.dateInfo.daysShort;		return $[_]	},	getLongWeek : function (_) {		var $ = this.dateInfo.daysLong;		return $[_]	},	getShortMonth : function ($) {		var _ = this.dateInfo.monthsShort;		return _[$]	},	getLongMonth : function ($) {		var _ = this.dateInfo.monthsLong;		return _[$]	},	dateInfo : {		monthsLong : ["January", "Febraury", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],		monthsShort : ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],		daysLong : ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],		daysShort : ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],		quarterLong : ["Q1", "Q2", "Q3", "Q4"],		quarterShort : ["Q1", "Q2", "Q3", "Q4"],		halfYearLong : ["first half", "second half"],		patterns : {			"d" : "M/d/yyyy",			"D" : "dddd, MMMM dd, yyyy",			"f" : "dddd, MMMM dd, yyyy H:mm tt",			"F" : "dddd, MMMM dd, yyyy H:mm:ss tt",			"g" : "M/d/yyyy H:mm tt",			"G" : "M/d/yyyy H:mm:ss tt",			"m" : "MMMM dd",			"o" : "yyyy-MM-ddTHH:mm:ss.fff",			"s" : "yyyy-MM-ddTHH:mm:ss",			"t" : "H:mm tt",			"T" : "H:mm:ss tt",			"U" : "dddd, MMMM dd, yyyy HH:mm:ss tt",			"y" : "MMM, yyyy"		},		tt : {			"AM" : "AM",			"PM" : "PM"		},		ten : {			"Early" : "Early",			"Mid" : "Mid",			"Late" : "Late"		},		today : "Today",		clockType : 24	}});Date.prototype.getHalfYear = function () {	if (!this.getMonth)		return null;	var $ = this.getMonth();	if ($ < 6)		return 0;	return 1};Date.prototype.getQuarter = function () {	if (!this.getMonth)		return null;	var $ = this.getMonth();	if ($ < 3)		return 0;	if ($ < 6)		return 1;	if ($ < 9)		return 2;	return 3};mini.formatDate = function (C, O, F) {	if (!C || !C.getFullYear || isNaN(C))		return "";	var G = C.toString(),	B = mini.dateInfo;	if (!B)		B = mini.dateInfo;	if (typeof(B) !== "undefined") {		var M = typeof(B.patterns[O]) !== "undefined" ? B.patterns[O] : O,		J = C.getFullYear();		G = M.replace(/yyyy/g, J);		G = G.replace(/yy/g, (J + "").substring(2));		var L = C.getHalfYear();		G = G.replace(/hy/g, B.halfYearLong[L]);		var I = C.getQuarter();		G = G.replace(/Q/g, B.quarterLong[I]);		G = G.replace(/q/g, B.quarterShort[I]);		var $ = C.getMonth();		G = G.replace(/MMMM/g, B.monthsLong[$].escapeDateTimeTokens());		G = G.replace(/MMM/g, B.monthsShort[$].escapeDateTimeTokens());		G = G.replace(/MM/g, $ + 1 < 10 ? "0" + ($ + 1) : $ + 1);		G = G.replace(/(\\)?M/g, function (A, _) {				return _ ? A : $ + 1			});		var N = C.getDay();		G = G.replace(/dddd/g, B.daysLong[N].escapeDateTimeTokens());		G = G.replace(/ddd/g, B.daysShort[N].escapeDateTimeTokens());		var _ = C.getDate();		G = G.replace(/dd/g, _ < 10 ? "0" + _ : _);		G = G.replace(/(\\)?d/g, function (A, $) {				return $ ? A : _			});		var H = C.getHours(),		A = H > 12 ? H - 12 : H;		if (B.clockType == 12)			if (H > 12)				H -= 12;		G = G.replace(/HH/g, H < 10 ? "0" + H : H);		G = G.replace(/(\\)?H/g, function (_, $) {				return $ ? _ : H			});		G = G.replace(/hh/g, A < 10 ? "0" + A : A);		G = G.replace(/(\\)?h/g, function (_, $) {				return $ ? _ : A			});		var D = C.getMinutes();		G = G.replace(/mm/g, D < 10 ? "0" + D : D);		G = G.replace(/(\\)?m/g, function (_, $) {				return $ ? _ : D			});		var K = C.getSeconds();		G = G.replace(/ss/g, K < 10 ? "0" + K : K);		G = G.replace(/(\\)?s/g, function (_, $) {				return $ ? _ : K			});		G = G.replace(/fff/g, C.getMilliseconds());		G = G.replace(/tt/g, C.getHours() > 12 || C.getHours() == 0 ? B.tt["PM"] : B.tt["AM"]);		var C = C.getDate(),		E = "";		if (C <= 10)			E = B.ten["Early"];		else if (C <= 20)			E = B.ten["Mid"];		else			E = B.ten["Late"];		G = G.replace(/ten/g, E)	}	return G.replace(/\\/g, "")};String.prototype.escapeDateTimeTokens = function () {	return this.replace(/([dMyHmsft])/g, "\\$1")};mini.fixDate = function ($, _) {	if (+$)		while ($.getDate() != _.getDate())			$.setTime(+$ + ($ < _ ? 1 : -1) * HOUR_MS)};mini.parseDate = function (A, _) {	if (typeof A == "object")		return isNaN(A) ? null : A;	if (typeof A == "number") {		var $ = new Date(A * 1000);		return isNaN($) ? null : $	}	if (typeof A == "string") {		if (A.match(/^\d+(\.\d+)?$/))			return new Date(parseFloat(A) * 1000);		if (_ === undefined)			_ = true;		$ = mini.parseISO8601(A, _) || (A ? new Date(A) : null);		return isNaN($) ? null : $	}	return null};mini.parseISO8601 = function (D, $) {	var _ = D.match(/^([0-9]{4})([-\/]([0-9]{1,2})([-\/]([0-9]{1,2})([T ]([0-9]{1,2}):([0-9]{1,2})(:([0-9]{1,2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);	if (!_) {		_ = D.match(/^([0-9]{4})[-\/]([0-9]{2})[-\/]([0-9]{2})[T ]([0-9]{1,2})/);		if (_) {			var A = new Date(_[1], _[2] - 1, _[3], _[4]);			return A		}		_ = D.match(/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/);		if (!_)			return null;		else {			A = new Date(_[3], _[1] - 1, _[2]);			return A		}	}	A = new Date(_[1], 0, 1);	if ($ || !_[14]) {		var C = new Date(_[1], 0, 1, 9, 0);		if (_[3]) {			A.setMonth(_[3] - 1);			C.setMonth(_[3] - 1)		}		if (_[5]) {			A.setDate(_[5]);			C.setDate(_[5])		}		mini.fixDate(A, C);		if (_[7])			A.setHours(_[7]);		if (_[8])			A.setMinutes(_[8]);		if (_[10])			A.setSeconds(_[10]);		if (_[12])			A.setMilliseconds(Number("0." + _[12]) * 1000);		mini.fixDate(A, C)	} else {		A.setUTCFullYear(_[1], _[3] ? _[3] - 1 : 0, _[5] || 1);		A.setUTCHours(_[7] || 0, _[8] || 0, _[10] || 0, _[12] ? Number("0." + _[12]) * 1000 : 0);		var B = Number(_[16]) * 60 + (_[18] ? Number(_[18]) : 0);		B *= _[15] == "-" ? 1 : -1;		A = new Date(+A + (B * 60 * 1000))	}	return A};mini.parseTime = function (E, F) {	if (!E)		return null;	var B = parseInt(E);	if (B == E && F) {		$ = new Date(0);		if (F[0] == "H")			$.setHours(B);		else if (F[0] == "m")			$.setMinutes(B);		else if (F[0] == "s")			$.setSeconds(B);		return $	}	var $ = mini.parseDate(E);	if (!$) {		var D = E.split(":"),		_ = parseInt(D[0]),		C = parseInt(D[1]),		A = parseInt(D[2]);		if (!isNaN(_) && !isNaN(C) && !isNaN(A)) {			$ = new Date(0);			$.setHours(_);			$.setMinutes(C);			$.setSeconds(A)		}		if (!isNaN(_) && (F == "H" || F == "HH")) {			$ = new Date(0);			$.setHours(_)		} else if (!isNaN(_) && !isNaN(C) && (F == "H:mm" || F == "HH:mm")) {			$ = new Date(0);			$.setHours(_);			$.setMinutes(C)		} else if (!isNaN(_) && !isNaN(C) && F == "mm:ss") {			$ = new Date(0);			$.setMinutes(_);			$.setSeconds(C)		}	}	return $};mini.dateInfo = {	monthsLong : ["\u4e00\u6708", "\u4e8c\u6708", "\u4e09\u6708", "\u56db\u6708", "\u4e94\u6708", "\u516d\u6708", "\u4e03\u6708", "\u516b\u6708", "\u4e5d\u6708", "\u5341\u6708", "\u5341\u4e00\u6708", "\u5341\u4e8c\u6708"],	monthsShort : ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"],	daysLong : ["\u661f\u671f\u65e5", "\u661f\u671f\u4e00", "\u661f\u671f\u4e8c", "\u661f\u671f\u4e09", "\u661f\u671f\u56db", "\u661f\u671f\u4e94", "\u661f\u671f\u516d"],	daysShort : ["\u65e5", "\u4e00", "\u4e8c", "\u4e09", "\u56db", "\u4e94", "\u516d"],	quarterLong : ["\u4e00\u5b63\u5ea6", "\u4e8c\u5b63\u5ea6", "\u4e09\u5b63\u5ea6", "\u56db\u5b63\u5ea6"],	quarterShort : ["Q1", "Q2", "Q2", "Q4"],	halfYearLong : ["\u4e0a\u534a\u5e74", "\u4e0b\u534a\u5e74"],	patterns : {		"d" : "yyyy-M-d",		"D" : "yyyy\u5e74M\u6708d\u65e5",		"f" : "yyyy\u5e74M\u6708d\u65e5 H:mm",		"F" : "yyyy\u5e74M\u6708d\u65e5 H:mm:ss",		"g" : "yyyy-M-d H:mm",		"G" : "yyyy-M-d H:mm:ss",		"m" : "MMMd\u65e5",		"o" : "yyyy-MM-ddTHH:mm:ss.fff",		"s" : "yyyy-MM-ddTHH:mm:ss",		"t" : "H:mm",		"T" : "H:mm:ss",		"U" : "yyyy\u5e74M\u6708d\u65e5 HH:mm:ss",		"y" : "yyyy\u5e74MM\u6708"	},	tt : {		"AM" : "\u4e0a\u5348",		"PM" : "\u4e0b\u5348"	},	ten : {		"Early" : "\u4e0a\u65ec",		"Mid" : "\u4e2d\u65ec",		"Late" : "\u4e0b\u65ec"	},	today : "\u4eca\u5929",	clockType : 24};mini.copyTo(mini, {	getChildNodes : function (A, C) {		A = mini.byId(A);		if (!A)			return;		var B = [];		for (var $ = 0, D = A.childNodes.length; $ < D; $++) {			var _ = A.childNodes[$];			if (_.nodeType == 1 || C === true)				B.push(_)		}		return B	},	removeChilds : function (B, _) {		B = mini.byId(B);		if (!B)			return;		var C = mini.getChildNodes(B, true);		for (var $ = 0, D = C.length; $ < D; $++) {			var A = C[$];			if (_ && A == _);			else				B.removeChild(C[$])		}	},	isAncestor : function (A, $) {		var _ = false;		A = mini.byId(A);		$ = mini.byId($);		if (A === $)			return true;		if (A && $)			if (A.contains)				return A.contains($);			else if (A.compareDocumentPosition)				return !!(A.compareDocumentPosition($) & 16);			else				while ($ = $.parentNode)					_ = $ == A || _;		return _	},	findParent : function (B, A, $) {		B = mini.byId(B);		var C = document.body,		_ = 0,		D;		$ = $ || 50;		if (typeof $ != "number") {			D = mini.byId($);			$ = 10		}		while (B && B.nodeType == 1 && _ < $ && B != C && B != D) {			if (this.hasClass(B, A))				return B;			_++;			B = B.parentNode		}		return null	},	findChild : function (_, A) {		_ = mini.byId(_);		var B = _.getElementsByTagName("*");		for (var $ = 0, C = B.length; $ < C; $++) {			var _ = B[$];			if (this.hasClass(_, A))				return _		}	},	isAncestor : function (A, $) {		var _ = false;		A = mini.byId(A);		$ = mini.byId($);		if (A === $)			return true;		if (A && $)			if (A.contains)				return A.contains($);			else if (A.compareDocumentPosition)				return !!(A.compareDocumentPosition($) & 16);			else				while ($ = $.parentNode)					_ = $ == A || _;		return _	},	getOffsetsTo : function (_, A) {		var $ = this.getXY(_),		B = this.getXY(A);		return [$[0] - B[0], $[1] - B[1]]	},	scrollIntoView : function (I, H, F) {		var B = mini.byId(H) || document.body,		$ = this.getOffsetsTo(I, B),		C = $[0] + B.scrollLeft,		J = $[1] + B.scrollTop,		D = J + I.offsetHeight,		A = C + I.offsetWidth,		G = B.clientHeight,		K = parseInt(B.scrollTop, 10),		_ = parseInt(B.scrollLeft, 10),		L = K + G,		E = _ + B.clientWidth;		if (I.offsetHeight > G || J < K)			B.scrollTop = J;		else if (D > L)			B.scrollTop = D - G;		B.scrollTop = B.scrollTop;		if (F !== false) {			if (I.offsetWidth > B.clientWidth || C < _)				B.scrollLeft = C;			else if (A > E)				B.scrollLeft = A - B.clientWidth;			B.scrollLeft = B.scrollLeft		}		return this	},	hasClass : function ($, _) {		$ = mini.byId($);		if (!$)			return;		var A = $.className.split(" ");		return A.indexOf(_) != -1	},	addClass : function ($, _) {		if (!_)			return;		if (mini.hasClass($, _) == false)			jQuery($).addClass(_)	},	removeClass : function ($, _) {		if (!_)			return;		jQuery($).removeClass(_)	},	repaint : function ($) {		if (!$)			$ = document.body;		this.addClass($, "mini-repaint");		setTimeout(function () {			mini.removeClass($, "mini-repaint")		}, 1)	},	getMargins : function ($) {		$ = mini.byId($);		var _ = jQuery($);		return {			top : parseInt(_.css("margin-top"), 10) || 0,			left : parseInt(_.css("margin-left"), 10) || 0,			bottom : parseInt(_.css("margin-bottom"), 10) || 0,			right : parseInt(_.css("margin-right"), 10) || 0		}	},	getBorders : function ($) {		$ = mini.byId($);		var _ = jQuery($);		return {			top : parseInt(_.css("border-top-width"), 10) || 0,			left : parseInt(_.css("border-left-width"), 10) || 0,			bottom : parseInt(_.css("border-bottom-width"), 10) || 0,			right : parseInt(_.css("border-right-width"), 10) || 0		}	},	getPaddings : function ($) {		$ = mini.byId($);		var _ = jQuery($);		return {			top : parseInt(_.css("padding-top"), 10) || 0,			left : parseInt(_.css("padding-left"), 10) || 0,			bottom : parseInt(_.css("padding-bottom"), 10) || 0,			right : parseInt(_.css("padding-right"), 10) || 0		}	},	setWidth : function (A, _) {		A = mini.byId(A);		_ = parseInt(_);		if (isNaN(_) || !A)			return;		if (jQuery.boxModel) {			var B = mini.getPaddings(A),			C = mini.getBorders(A);			_ = _ - B.left - B.right - C.left - C.right		}		var $ = mini.getMargins(A);		_ = _ - $.left - $.right;		if (_ < 0)			_ = 0;		A.style.width = _ + "px"	},	setHeight : function (A, _) {		A = mini.byId(A);		_ = parseInt(_);		if (isNaN(_) || !A)			return;		if (jQuery.boxModel) {			var B = mini.getPaddings(A),			C = mini.getBorders(A);			_ = _ - B.top - B.bottom - C.top - C.bottom		}		var $ = mini.getMargins(A);		_ = _ - $.top - $.bottom;		if (_ < 0)			_ = 0;		A.style.height = _ + "px"	},	getHeight : function ($, _) {		$ = mini.byId($);		return _ ? jQuery($).height() : jQuery($).outerHeight()	},	getWidth : function ($, _) {		$ = mini.byId($);		return _ ? jQuery($).width() : jQuery($).outerWidth()	},	getSize : function ($, _) {		return {			width : this.getWidth($, _),			height : this.getHeight($, _)		}	},	setSize : function (A, $, _) {		this.setWidth(A, $);		this.setHeight(A, _)	},	setX : function (_, B) {		var $ = jQuery(_).offset(),		A = $.top;		if (A === undefined)			A = $[1];		this.setXY(_, B, A)	},	setY : function (_, A) {		var $ = jQuery(_).offset(),		B = $.left;		if (B === undefined)			B = $[0];		this.setXY(_, B, A)	},	setXY : function (_, B, A) {		var $ = {			left : B,			top : A		};		jQuery(_).offset($);		jQuery(_).offset($)	},	getXY : function (_) {		var $ = jQuery(_).offset();		return [$.left, $.top]	},	getBox : function (A) {		var $ = this.getXY(A),		_ = {			x : $[0],			y : $[1],			width : this.getWidth(A),			height : this.getHeight(A)		};		_.left = _.x;		_.top = _.y;		_.right = _.x + _.width;		_.bottom = _.y + _.height;		return _	},	setBox : function (A, C, B, $, _) {		if (B === undefined) {			B = C.y;			$ = C.width;			_ = C.height;			C = C.x		}		this.setXY(A, C, B);		this.setWidth(A, $);		this.setHeight(A, _)	},	getViewportBox : function () {		var $ = jQuery(window).width(),		_ = jQuery(window).height(),		B = jQuery(document).scrollLeft(),		A = jQuery(document.body).scrollTop();		if (document.documentElement)			A = document.documentElement.scrollTop;		return {			x : B,			y : A,			width : $,			height : _,			right : B + $,			bottom : A + _		}	},	selectable : function (_, $) {		_ = mini.byId(_);		if (!!$) {			jQuery(_).removeClass("mini-unselectable");			if (mini.isIE)				_.unselectable = "off";			else {				_.style.MozUserSelect = "";				_.style.KhtmlUserSelect = "";				_.style.UserSelect = ""			}		} else {			jQuery(_).addClass("mini-unselectable");			if (mini.isIE)				_.unselectable = "on";			else {				_.style.MozUserSelect = "none";				_.style.UserSelect = "none";				_.style.KhtmlUserSelect = "none"			}		}	},	selectRange : function (B, A, _) {		if (B.createTextRange) {			var $ = B.createTextRange();			$.moveStart("character", A);			$.moveEnd("character", _ - B.value.length);			$.select()		} else if (B.setSelectionRange)			B.setSelectionRange(A, _);		try {			B.focus()		} catch (C) {}			},	getSelectRange : function (A) {		A = mini.byId(A);		if (!A)			return;		try {			A.focus()		} catch (C) {}				var $ = 0,		B = 0;		if (A.createTextRange) {			var _ = document.selection.createRange().duplicate();			_.moveEnd("character", A.value.length);			if (_.text === "")				$ = A.value.length;			else				$ = A.value.lastIndexOf(_.text);			_ = document.selection.createRange().duplicate();			_.moveStart("character", -A.value.length);			B = _.text.length		} else {			$ = A.selectionStart;			B = A.selectionEnd		}		return [$, B]	},	setAttr : function (_, A, $) {		jQuery(_).attr(A, $)	},	getAttr : function ($, _) {		return jQuery($).attr(_)	},	removeAttr : function ($, _) {		jQuery($).removeAttr(_, value)	}});mini.setStyle = function (A, B) {	A = mini.byId(A);	if (!A || typeof B != "string")		return;	var F = jQuery(A),	_ = B.toLowerCase().split(";");	for (var $ = 0, C = _.length; $ < C; $++) {		var E = _[$],		D = E.split(":");		if (D.length == 2)			F.css(D[0].trim(), D[1].trim())	}};mini.getStyle = function () {	var $ = document.defaultView;	return new Function("el", "style", ["style.indexOf('-')>-1 && (style=style.replace(/-(\\w)/g,function(m,a){return a.toUpperCase()}));", "style=='float' && (style='", $ ? "cssFloat" : "styleFloat", "');return el.style[style] || ", $ ? "window.getComputedStyle(el, null)[style]" : "el.currentStyle[style]", " || null;"].join(""))}();mini.copyTo(mini, {	listeners : [],	on : function (_, $, D, A) {		_ = mini.byId(_);		A = A || _;		if (!_ || !$ || !D || !A)			return false;		var B = this.findListener(_, $, D, A);		if (B)			return false;		var C = mini.createDelegate(D, A);		this.listeners.push([_, $, D, A, C]);		if (jQuery.browser.mozilla && $ == "mousewheel")			$ = "DOMMouseScroll";		jQuery(_).bind($, C)	},	un : function (_, $, C, A) {		_ = mini.byId(_);		A = A || _;		if (!_ || !$ || !C || !A)			return false;		var B = this.findListener(_, $, C, A);		if (!B)			return false;		this.listeners.remove(B);		if (jQuery.browser.mozilla && $ == "mousewheel")			$ = "DOMMouseScroll";		jQuery(_).unbind($, B[4])	},	findListener : function (A, _, F, B) {		A = mini.byId(A);		B = B || A;		if (!A || !_ || !F || !B)			return false;		var D = this.listeners;		for (var $ = 0, E = D.length; $ < E; $++) {			var C = D[$];			if (C[0] == A && C[1] == _ && C[2] == F && C[3] == B)				return C		}	},	clearEvent : function (A, _) {		A = mini.byId(A);		if (!A)			return false;		var C = this.listeners;		for (var $ = C.length - 1; $ >= 0; $--) {			var B = C[$];			if (B[0] == A)				if (!_ || _ == B[1])					this.un(A, B[1], B[2], B[3])		}	}});mini.copyTo(Array.prototype, {	add : Array.prototype.enqueue = function ($) {		this[this.length] = $;		return this	},	getRange : function (_, A) {		var B = [];		for (var $ = _; $ <= A; $++)			B[B.length] = this[$];		return B	},	addRange : function (A) {		for (var $ = 0, _ = A.length; $ < _; $++)			this[this.length] = A[$];		return this	},	clear : function () {		this.length = 0;		return this	},	clone : function () {		if (this.length === 1)			return [this[0]];		else			return Array.apply(null, this)	},	contains : function ($) {		return (this.indexOf($) >= 0)	},	indexOf : function (_, B) {		var $ = this.length;		for (var A = (B < 0) ? Math.max(0, $ + B) : B || 0; A < $; A++)			if (this[A] === _)				return A;		return -1	},	dequeue : function () {		return this.shift()	},	insert : function (_, $) {		this.splice(_, 0, $);		return this	},	insertRange : function (_, B) {		for (var A = B.length - 1; A >= 0; A--) {			var $ = B[A];			this.splice(_, 0, $)		}		return this	},	remove : function (_) {		var $ = this.indexOf(_);		if ($ >= 0)			this.splice($, 1);		return ($ >= 0)	},	removeAt : function ($) {		var _ = this[$];		this.splice($, 1);		return _	},	removeRange : function (_) {		_ = _.clone();		for (var $ = 0, A = _.length; $ < A; $++)			this.remove(_[$])	}});mini.Keyboard = {	Left : 37,	Top : 38,	Right : 39,	Bottom : 40,	PageUp : 33,	PageDown : 34,	End : 35,	Home : 36,	Enter : 13,	ESC : 27,	Space : 32,	Tab : 9,	Del : 46,	F1 : 112,	F2 : 113,	F3 : 114,	F4 : 115,	F5 : 116,	F6 : 117,	F7 : 118,	F8 : 119,	F9 : 120,	F10 : 121,	F11 : 122,	F12 : 123};var ua = navigator.userAgent.toLowerCase(), check = function ($) {	return $.test(ua)}, DOC = document, isStrict = DOC.compatMode == "CSS1Compat", isOpera = Object.prototype.toString.call(window.opera) == "[object Opera]", isChrome = check(/chrome/), isWebKit = check(/webkit/), isSafari = !isChrome && check(/safari/), isSafari2 = isSafari && check(/applewebkit\/4/), isSafari3 = isSafari && check(/version\/3/), isSafari4 = isSafari && check(/version\/4/), isIE = !!window.attachEvent && !isOpera, isIE7 = isIE && check(/msie 7/), isIE8 = isIE && check(/msie 8/), isIE6 = isIE && !isIE7 && !isIE8, isIE9 = isIE && !! + "\v1", isFirefox = navigator.userAgent.indexOf("Firefox") > 0, isGecko = !isWebKit && check(/gecko/), isGecko2 = isGecko && check(/rv:1\.8/), isGecko3 = isGecko && check(/rv:1\.9/), isBorderBox = isIE && !isStrict, isWindows = check(/windows|win32/), isMac = check(/macintosh|mac os x/), isAir = check(/adobeair/), isLinux = check(/linux/), isSecure = /^https/i.test(window.location.protocol);if (isIE6) {	try {		DOC.execCommand("BackgroundImageCache", false, true)	} catch (e) {}	}mini.isIE = isIE;mini.isIE7 = isIE7;mini.isIE8 = isIE8;mini.isIE9 = isIE9;mini.isFireFox = jQuery.browser.mozilla;mini.isOpera = jQuery.browser.opera;mini.isSafari = jQuery.browser.safari;mini.noBorderBox = false;if (jQuery.boxModel == false && mini.isIE && mini.isIE9 == false)	mini.noBorderBox = true;mini.MouseButton = {	Left : 0,	Middle : 1,	Right : 2};if (mini.isIE && !mini.isIE9)	mini.MouseButton = {		Left : 1,		Middle : 4,		Right : 2	};mini._MaskID = 1;mini._MaskObjects = {};mini.mask = function (C) {	var _ = mini.byId(C);	if (mini.isElement(_))		C = {			el : _		};	else if (typeof C == "string")		C = {			html : C		};	C = mini.copyTo({			html : "",			cls : "",			style : "",			backStyle : "background:#ccc"		}, C);	C.el = mini.byId(C.el);	if (!C.el)		C.el = document.body;	_ = C.el;	this.unmask(C.el);	_._maskid = mini._MaskID++;	mini._MaskObjects[_._maskid] = C;	var $ = mini.append(_, "<div class=\"mini-mask\">" + "<div class=\"mini-mask-background\" style=\"" + C.backStyle + "\"></div>" + "<div class=\"mini-mask-msg " + C.cls + "\" style=\"" + C.style + "\">" + C.html + "</div>" + "</div>");	C.maskEl = $;	if (!mini.isNull(C.opacity))		mini.setOpacity($.firstChild, C.opacity);	var B = $.lastChild,	A = mini.getSize(B);	B.style.marginLeft = -A.width / 2 + "px";	B.style.marginTop = -A.height / 2 + "px"};mini.unmask = function (_) {	_ = mini.byId(_);	if (!_)		_ = document.body;	var A = mini._MaskObjects[_._maskid];	if (!A)		return;	delete mini._MaskObjects[_._maskid];	var $ = A.maskEl;	A.maskEl = null;	if ($ && $.parentNode)		$.parentNode.removeChild($)};mini.copyTo(mini, {	treeToArray : function (C, I, J, A, $) {		if (!I)			I = "children";		var F = [];		for (var H = 0, D = C.length; H < D; H++) {			var B = C[H];			F[F.length] = B;			if (A)				B[A] = $;			var _ = B[I];			if (_ && _.length > 0) {				var E = B[J],				G = this.treeToArray(_, I, J, A, E);				F.addRange(G)			}		}		return F	},	arrayToTree : function (C, A, H, B) {		if (!A)			A = "children";		H = H || "_id";		B = B || "_pid";		var G = [],		F = {};		for (var _ = 0, E = C.length; _ < E; _++) {			var $ = C[_];			F[$[H]] = $;			delete $[A]		}		for (_ = 0, E = C.length; _ < E; _++) {			var $ = C[_],			D = F[$[B]];			if (!D) {				G.push($);				continue			}			if (!D[A])				D[A] = [];			D[A].push($)		}		return G	}});function UUID() {	var A = [],	_ = "0123456789ABCDEF".split("");	for (var $ = 0; $ < 36; $++)		A[$] = Math.floor(Math.random() * 16);	A[14] = 4;	A[19] = (A[19] & 3) | 8;	for ($ = 0; $ < 36; $++)		A[$] = _[A[$]];	A[8] = A[13] = A[18] = A[23] = "-";	return A.join("")}String.format = function (_) {	var $ = Array.prototype.slice.call(arguments, 1);	_ = _ || "";	return _.replace(/\{(\d+)\}/g, function (A, _) {		return $[_]	})};String.prototype.trim = function () {	var $ = /^\s+|\s+$/g;	return function () {		return this.replace($, "")	}}();mini._window = window;mini.copyTo(mini, {	measureText : function (B, _, C) {		if (!this.measureEl)			this.measureEl = mini.append(document.body, "<div></div>");		this.measureEl.style.cssText = "position:absolute;left:-1000px;top:-1000px;visibility:hidden;";		if (typeof B == "string")			this.measureEl.className = B;		else {			this.measureEl.className = "";			var G = jQuery(B),			A = jQuery(this.measureEl),			F = ["font-size", "font-style", "font-weight", "font-family", "line-height", "text-transform", "letter-spacing"];			for (var $ = 0, E = F.length; $ < E; $++) {				var D = F[$];				A.css(D, G.css(D))			}		}		if (C)			mini.setStyle(this.measureEl, C);		this.measureEl.innerHTML = _;		return mini.getSize(this.measureEl)	}});jQuery(function () {	mini.isReady = true;	mini.parse();	mini._FireBindEvents()});mini.on(window, "load", function ($) {	mini.layout()});mini.__LastWindowWidth = 0;mini.__LastWindowHeight = 0;mini.doWindowResizeTimer = null;mini.on(window, "resize", function ($) {	if (mini.doWindowResizeTimer)		clearTimeout(mini.doWindowResizeTimer);	if (mini.isWindowDisplay() == false)		return;	if (typeof Ext != "undefined")		mini.doWindowResizeTimer = setTimeout(function () {				var _ = jQuery(window).width(),				$ = jQuery(window).height();				if (mini.__LastWindowWidth == _ && mini.__LastWindowHeight == $);				else					mini.layout();				mini.doWindowResizeTimer = null			}, 300);	else		mini.doWindowResizeTimer = setTimeout(function () {				var _ = jQuery(window).width(),				$ = jQuery(window).height();				if (mini.__LastWindowWidth == _ && mini.__LastWindowHeight == $);				else					mini.layout();				mini.doWindowResizeTimer = null			}, 50)});mini.isDisplay = function (_, A) {	var $ = A || document.body;	while (1) {		if (_ == null || !_.style)			return false;		if (_ && _.style && _.style.display == "none")			return false;		if (_ == $)			return true;		_ = _.parentNode	}	return true};mini.isWindowDisplay = function () {	var _ = window.parent,	D = _ != window;	if (D) {		var E = _.document.getElementsByTagName("iframe"),		B = null;		for (var $ = 0, C = E.length; $ < C; $++) {			var A = E[$];			if (A.contentWindow == window) {				B = A;				break			}		}		if (!B)			return false;		return mini.isDisplay(B, _.document.body)	} else		return true};mini.WindowVisible = mini.isWindowDisplay();var __MiniWindowTimer = setInterval(function () {		var $ = mini.isWindowDisplay();		if ($ != mini.WindowVisible && $ == true) {			mini.WindowVisible = true;			mini.layout();			clearInterval(__MiniWindowTimer)		}	}, 150);mini.layoutIFrames = function (_) {	if (!_)		_ = document.body;	var D = document.getElementsByTagName("iframe");	for (var $ = 0, B = D.length; $ < B; $++) {		var A = D[$];		if (mini.isDisplay(A) && mini.isAncestor(_, A)) {			try {				A.contentWindow.mini.layout();				A.contentWindow.mini.layoutIFrames()			} catch (C) {}					}	}};$.ajaxSetup({	cache : false});if (mini.isIE)	setInterval(function () {		CollectGarbage()	}, 1000);mini.on(window, "unload", function (A) {	for (var _ in mini.components) {		var $ = mini.components[_];		$.destroy()	}	try {		CollectGarbage()	} catch (A) {}	});mini.Hidden = function () {	mini.Hidden.superclass.constructor.call(this)};mini.extend(mini.Hidden, mini.Control, {	formField : true,	value : "",	uiCls : "mini-hidden",	_create : function () {		this.el = document.createElement("hidden");		this.el.className = "mini-hidden"	},	setValue : function ($) {		this.el.value = $	},	getValue : function () {		return this.el.value	},	getFormValue : function () {		return this.getValue()	}});mini.regClass(mini.Hidden, "hidden");mini.Popup = function () {	mini.Popup.superclass.constructor.call(this);	this.setVisible(false);	this.setAllowDrag(this.allowDrag);	this.setAllowResize(this.allowResize)};mini.extend(mini.Popup, mini.Control, {	_clearBorder : false,	uiCls : "mini-popup",	_create : function () {		var $ = this.el = document.createElement("div");		this.el.className = "mini-popup";		this.contentEl = this.el	},	destroy : function () {		mini.un(document, "mousedown", this.__OnBodyMouseDown, this);		mini.un(window, "resize", this.__OnWindowResize, this);		mini.Popup.superclass.destroy.call(this)	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(document, "mousedown", this.__OnBodyMouseDown, this);			mini.on(this.el, "mouseover", this.__OnMouseOver, this);			mini.on(window, "resize", this.__OnWindowResize, this)		}, this)	},	doLayout : function () {		if (!this.canLayout())			return;		mini.Popup.superclass.doLayout.call(this);		this._doShadow();		var A = this.el.childNodes;		if (A)			for (var $ = 0, B = A.length; $ < B; $++) {				var _ = A[$];				mini.layout(_)			}	},	destroy : function () {		mini.removeChilds(this.contentEl);		mini.un(document, "mousedown", this.__OnBodyMouseDown, this);		mini.un(window, "resize", this.__OnWindowResize, this);		if (this.modalEl) {			jQuery(this.modalEl).remove();			this.modalEl = null		}		if (this.shadowEl) {			jQuery(this.shadowEl).remove();			this.shadowEl = null		}		mini.Popup.superclass.destroy.call(this)	},	setBody : function (_) {		if (!_)			return;		if (!mini.isArray(_))			_ = [_];		for (var $ = 0, A = _.length; $ < A; $++)			mini.append(this.contentEl, _[$])	},	getAttrs : function ($) {		var A = mini.Popup.superclass.getAttrs.call(this, $);		mini._ParseString($, A, ["popupEl", "popupCls", "showAction", "hideAction", "hAlign", "vAlign", "modalStyle", "onbeforeopen", "open", "onbeforeclose", "onclose"]);		mini._ParseBool($, A, ["showModal", "showShadow", "allowDrag", "allowResize"]);		mini._ParseInt($, A, ["showDelay", "hideDelay", "hOffset", "vOffset", "minWidth", "minHeight", "maxWidth", "maxHeight"]);		var _ = mini.getChildNodes($, true);		A.body = _;		return A	}});mini.regClass(mini.Popup, "popup");mini.Popup.zIndex = 1000;mini.Popup.maxZIndex = function () {	return mini.Popup.zIndex++};mini.Popup_prototype = {	isPopup : false,	popupEl : null,	popupCls : "",	showAction : "mouseover",	hideAction : "outerclick",	showDelay : 300,	hideDelay : 500,	hAlign : "left",	vAlign : "below",	hOffset : 0,	vOffset : 0,	minWidth : 50,	minHeight : 25,	maxWidth : 2000,	maxHeight : 2000,	showModal : false,	showShadow : true,	modalStyle : "opacity:0.2",	dragCls : "mini-popup-drag",	resizeCls : "mini-popup-resize",	allowDrag : false,	allowResize : false,	_unbindPopupEl : function () {		if (!this.popupEl)			return;		mini.un(this.popupEl, "click", this.__OnLeftClick, this);		mini.un(this.popupEl, "contextmenu", this.__OnRightClick, this);		mini.un(this.popupEl, "mouseover", this.__OnMouseOver, this)	},	_bindPopupEl : function () {		if (!this.popupEl)			return;		mini.on(this.popupEl, "click", this.__OnLeftClick, this);		mini.on(this.popupEl, "contextmenu", this.__OnRightClick, this);		mini.on(this.popupEl, "mouseover", this.__OnMouseOver, this)	},	doShow : function (A) {		var $ = {			popupEl : this.popupEl,			htmlEvent : A,			cancel : false		};		this.fire("BeforeOpen", $);		if ($.cancel == true)			return;		this.fire("opening", $);		if ($.cancel == true)			return;		if (!this.popupEl)			this.show();		else {			var _ = {};			if (A)				_.xy = [A.pageX, A.pageY];			this.showAtEl(this.popupEl, _)		}	},	doHide : function (_) {		var $ = {			popupEl : this.popupEl,			htmlEvent : _,			cancel : false		};		this.fire("BeforeClose", $);		if ($.cancel == true)			return;		this.close()	},	show : function (_, $) {		this.showAtPos(_, $)	},	showAtPos : function (B, A) {		this.render(document.body);		if (!B)			B = "center";		if (!A)			A = "middle";		this.el.style.position = "absolute";		this.el.style.left = "-2000px";		this.el.style.top = "-2000px";		this.el.style.display = "";		this._measureSize();		var _ = mini.getViewportBox(),		$ = mini.getBox(this.el);		if (B == "left")			B = 0;		if (B == "center")			B = _.width / 2 - $.width / 2;		if (B == "right")			B = _.width - $.width;		if (A == "top")			A = 0;		if (A == "middle")			A = _.y + _.height / 2 - $.height / 2;		if (A == "bottom")			A = _.height - $.height;		if (B + $.width > _.right)			B = _.right - $.width;		if (A + $.height > _.bottom)			A = _.bottom - $.height;		this._Show(B, A)	},	_doModal : function () {		jQuery(this.modalEl).remove();		if (!this.showModal)			return;		if (this.visible == false)			return;		var $ = mini.getViewportBox();		this.modalEl = mini.append(document.body, "<div class=\"mini-modal\"></div>");		this.modalEl.style.height = $.height + "px";		this.modalEl.style.width = $.width + "px";		this.modalEl.style.zIndex = mini.getStyle(this.el, "zIndex") - 1;		mini.setStyle(this.modalEl, this.modalStyle)	},	_doShadow : function () {		if (!this.shadowEl)			this.shadowEl = mini.append(document.body, "<div class=\"mini-shadow\"></div>");		this.shadowEl.style.display = this.showShadow ? "" : "none";		if (this.showShadow) {			var $ = mini.getBox(this.el),			A = this.shadowEl.style;			A.width = $.width + "px";			A.height = $.height + "px";			A.left = $.x + "px";			A.top = $.y + "px";			var _ = mini.getStyle(this.el, "zIndex");			if (!isNaN(_))				this.shadowEl.style.zIndex = _ - 2		}	},	_measureSize : function () {		this.el.style.display = "";		var $ = mini.getBox(this.el);		if ($.width > this.maxWidth) {			mini.setWidth(this.el, this.maxWidth);			$ = mini.getBox(this.el)		}		if ($.height > this.maxHeight) {			mini.setHeight(this.el, this.maxHeight);			$ = mini.getBox(this.el)		}		if ($.width < this.minWidth) {			mini.setWidth(this.el, this.minWidth);			$ = mini.getBox(this.el)		}		if ($.height < this.minHeight) {			mini.setHeight(this.el, this.minHeight);			$ = mini.getBox(this.el)		}	},	showAtEl : function (H, D) {		H = mini.byId(H);		if (!H)			return;		if (!this.isRender())			this.render(document.body);		var A = {			hAlign : this.hAlign,			vAlign : this.vAlign,			hOffset : this.hOffset,			vOffset : this.vOffset,			popupCls : this.popupCls		};		mini.copyTo(A, D);		mini.addClass(H, A.popupCls);		H.popupCls = A.popupCls;		this._popupEl = H;		this.el.style.position = "absolute";		this.el.style.left = "-2000px";		this.el.style.top = "-2000px";		this.el.style.display = "";		this.doLayout();		this._measureSize();		var J = mini.getViewportBox(),		B = mini.getBox(this.el),		L = mini.getBox(H),		F = A.xy,		C = A.hAlign,		E = A.vAlign,		M = J.width / 2 - B.width / 2,		K = 0;		if (F) {			M = F[0];			K = F[1]		}		switch (A.hAlign) {		case "outleft":			M = L.x - B.width;			break;		case "left":			M = L.x;			break;		case "center":			M = L.x + L.width / 2 - B.width / 2;			break;		case "right":			M = L.right - B.width;			break;		case "outright":			M = L.right;			break;		default:			break		}		switch (A.vAlign) {		case "above":			K = L.y - B.height;			break;		case "top":			K = L.y;			break;		case "middle":			K = L.y + L.height / 2 - B.height / 2;			break;		case "bottom":			K = L.bottom - B.height;			break;		case "below":			K = L.bottom;			break;		default:			break		}		M = parseInt(M);		K = parseInt(K);		if (A.outVAlign || A.outHAlign) {			if (A.outVAlign == "above") {				if (K + B.height > J.bottom) {					var _ = L.y - J.y,					I = J.bottom - L.bottom;					if (_ > I)						K = L.y - B.height				}			} else if (A.outHAlign == "outleft")				if (M + B.width > J.right) {					var G = L.x - J.x,					$ = J.right - L.right;					if (G > $)						M = L.x - B.width				}			this._Show(M, K)		} else			this.showAtPos(M + A.hOffset, K + A.vOffset)	},	_Show : function (A, _) {		this.el.style.display = "";		this.el.style.zIndex = mini.Popup.maxZIndex();		mini.setX(this.el, A);		mini.setY(this.el, _);		this.setVisible(true);		if (this.hideAction == "mouseout")			mini.on(document, "mousemove", this.__OnBodyMouseMove, this);		var $ = this;		this._doShadow();		this._doModal();		mini.layoutIFrames(this.el);		mini.repaint(this.el);		this.isPopup = true;		this.fire("Open")	},	open : function () {		this.show()	},	close : function () {		this.hide()	},	hide : function () {		if (this.popupEl)			mini.removeClass(this.popupEl, this.popupEl.popupCls);		if (this._popupEl)			mini.removeClass(this._popupEl, this._popupEl.popupCls);		this._popupEl = null;		jQuery(this.modalEl).remove();		if (this.shadowEl)			this.shadowEl.style.display = "none";		mini.un(document, "mousemove", this.__OnBodyMouseMove, this);		this.setVisible(false);		this.isPopup = false;		this.fire("Close")	},	setPopupEl : function ($) {		$ = mini.byId($);		if (!$)			return;		this._unbindPopupEl();		this.popupEl = $;		this._bindPopupEl()	},	setPopupCls : function ($) {		this.popupCls = $	},	setShowAction : function ($) {		this.showAction = $	},	setHideAction : function ($) {		this.hideAction = $	},	setShowDelay : function ($) {		this.showDelay = $	},	setHideDelay : function ($) {		this.hideDelay = $	},	setHAlign : function ($) {		this.hAlign = $	},	setVAlign : function ($) {		this.vAlign = $	},	setHOffset : function ($) {		$ = parseInt($);		if (isNaN($))			$ = 0;		this.hOffset = $	},	setVOffset : function ($) {		$ = parseInt($);		if (isNaN($))			$ = 0;		this.vOffset = $	},	setShowModal : function ($) {		this.showModal = $	},	setShowShadow : function ($) {		this.showShadow = $	},	setMinWidth : function ($) {		if (isNaN($))			return;		this.minWidth = $	},	setMinHeight : function ($) {		if (isNaN($))			return;		this.minHeight = $	},	setMaxWidth : function ($) {		if (isNaN($))			return;		this.maxWidth = $	},	setMaxHeight : function ($) {		if (isNaN($))			return;		this.maxHeight = $	},	setAllowDrag : function ($) {		this.allowDrag = $;		mini.removeClass(this.el, this.dragCls);		if ($)			mini.addClass(this.el, this.dragCls)	},	setAllowResize : function ($) {		this.allowResize = $;		mini.removeClass(this.el, this.resizeCls);		if ($)			mini.addClass(this.el, this.resizeCls)	},	__OnLeftClick : function (_) {		if (this.inAniming)			return;		if (this.showAction != "leftclick")			return;		var $ = jQuery(this.popupEl).attr("allowPopup");		if (String($) == "false")			return;		this.doShow(_)	},	__OnRightClick : function (_) {		if (this.inAniming)			return;		if (this.showAction != "rightclick")			return;		var $ = jQuery(this.popupEl).attr("allowPopup");		if (String($) == "false")			return;		_.preventDefault();		this.doShow(_)	},	__OnMouseOver : function (A) {		if (this.inAniming)			return;		if (this.showAction != "mouseover")			return;		var _ = jQuery(this.popupEl).attr("allowPopup");		if (String(_) == "false")			return;		clearTimeout(this._hideTimer);		this._hideTimer = null;		if (this.isPopup)			return;		var $ = this;		this._showTimer = setTimeout(function () {				$.doShow(A)			}, this.showDelay)	},	__OnBodyMouseMove : function ($) {		if (this.hideAction != "mouseout")			return;		this._tryHide($)	},	__OnBodyMouseDown : function ($) {		if (this.hideAction != "outerclick")			return;		if (!this.isPopup)			return;		if (this.within($) || (this.popupEl && mini.isAncestor(this.popupEl, $.target)));		else			this.doHide($)	},	_tryHide : function (_) {		if (mini.isAncestor(this.el, _.target) || (this.popupEl && mini.isAncestor(this.popupEl, _.target)));		else {			clearTimeout(this._showTimer);			this._showTimer = null;			if (this._hideTimer)				return;			var $ = this;			this._hideTimer = setTimeout(function () {					$.doHide(_)				}, this.hideDelay)		}	},	__OnWindowResize : function ($) {		if (this.isDisplay())			this._doModal()	}};mini.copyTo(mini.Popup.prototype, mini.Popup_prototype);mini.Button = function () {	mini.Button.superclass.constructor.call(this)};mini.extend(mini.Button, mini.Control, {	text : "",	iconCls : "",	iconStyle : "",	plain : false,	checkOnClick : false,	checked : false,	groupName : "",	plainCls : "mini-button-plain",	hoverCls : "mini-button-hover",	pressedCls : "mini-button-pressed",	checkedCls : "mini-button-checked",	disabledCls : "mini-button-disabled",	allowCls : "",	_clearBorder : false,	set : function ($) {		if (typeof $ == "string")			return this;		this.allowUpdate = $.text || $.iconStyle || $.iconCls || $.iconPosition;		mini.Button.superclass.set.call(this, $);		if (this.allowUpdate === false) {			this.allowUpdate = true;			this.doUpdate()		}		return this	},	uiCls : "mini-button",	_create : function () {		this.el = document.createElement("a");		this.el.className = "mini-button";		this.el.hideFocus = true;		this.el.href = "javascript:void(0)";		this.el.onclick = function () {			return false		}	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.el, "mousedown", this.__OnMouseDown, this);			mini.on(this.el, "click", this.__OnClick, this)		}, this)	},	doUpdate : function () {		if (this.allowUpdate === false)			return;		var B = jQuery(this.el),		_ = "",		$ = this.text;		if (this.iconCls && $)			_ = " mini-button-icon " + this.iconCls;		else if (this.iconCls && $ === "") {			_ = " mini-button-iconOnly " + this.iconCls;			$ = "&nbsp;"		}		var A = "<span class=\"mini-button-text " + _ + "\">" + $ + "</span>";		if (this.allowCls)			A = A + "<span class=\"mini-button-allow " + this.allowCls + "\"></span>";		this.el.innerHTML = A	},	href : "",	setHref : function ($) {		this.el.href = $;		this.el.onclick = null	},	setText : function ($) {		if (this.text != $) {			this.text = $;			this.doUpdate()		}	},	setIconCls : function ($) {		this.iconCls = $;		this.doUpdate()	},	setIconStyle : function ($) {		this.iconStyle = $;		this.doUpdate()	},	setIconPosition : function ($) {		this.iconPosition = "left";		this.doUpdate()	},	setPlain : function ($) {		this.plain = $;		if ($)			this.addCls(this.plainCls);		else			this.removeCls(this.plainCls)	},	setGroupName : function ($) {		this.groupName = $	},	setCheckOnClick : function ($) {		this.checkOnClick = $	},	getCheckOnClick : function () {		return this.checkOnClick	},	setChecked : function ($) {		var _ = this.checked != $;		this.checked = $;		if ($)			this.addCls(this.checkedCls);		else			this.removeCls(this.checkedCls);		if (_)			this.fire("CheckedChanged")	},	doClick : function () {		this.__OnClick(null)	},	__OnClick : function (D) {		if (this.isReadOnly())			return;		this.focus();		if (this.checkOnClick)			if (this.groupName) {				var _ = this.groupName,				C = mini.findControls(function ($) {						if ($.type == "button" && $.groupName == _)							return true					});				if (C.length > 0) {					for (var $ = 0, A = C.length; $ < A; $++) {						var B = C[$];						if (B != this)							B.setChecked(false)					}					this.setChecked(true)				} else					this.setChecked(!this.checked)			} else				this.setChecked(!this.checked);		this.fire("click", {			htmlEvent : D		})	},	__OnMouseDown : function ($) {		if (this.isReadOnly())			return;		this.addCls(this.pressedCls);		mini.on(document, "mouseup", this.__OnDocMouseup, this)	},	__OnDocMouseup : function ($) {		this.removeCls(this.pressedCls);		mini.un(document, "mouseup", this.__OnDocMouseup, this)	},	onClick : function (_, $) {		this.on("click", _, $)	},	getAttrs : function ($) {		var _ = mini.Button.superclass.getAttrs.call(this, $);		_.text = $.innerHTML;		mini._ParseString($, _, ["text", "href", "iconCls", "iconStyle", "iconPosition", "groupName", "menu", "onclick", "oncheckedchanged"]);		mini._ParseBool($, _, ["plain", "checkOnClick"]);		return _	}});mini.regClass(mini.Button, "button");mini.MenuButton = function () {	mini.MenuButton.superclass.constructor.call(this)};mini.extend(mini.MenuButton, mini.Button, {	uiCls : "mini-menubutton",	allowCls : "mini-button-menu",	setMenu : function ($) {		if (mini.isArray($))			$ = {				type : "menu",				items : $			};		if (typeof $ == "string") {			mini.parse($);			$ = mini.get($)		}		if (this.menu !== $) {			this.menu = mini.getAndCreate($);			this.menu.setPopupEl(this.el);			this.menu.setPopupCls("mini-button-popup");			this.menu.setShowAction("leftclick");			this.menu.setHideAction("outerclick");			this.menu.setHAlign("left");			this.menu.setVAlign("below");			this.menu.hide();			this.menu.owner = this		}	},	setEnabled : function ($) {		this.enabled = $;		if ($)			this.removeCls(this.disabledCls);		else			this.addCls(this.disabledCls);		jQuery(this.el).attr("allowPopup", !!$)	}});mini.regClass(mini.MenuButton, "menubutton");mini.SplitButton = function () {	mini.SplitButton.superclass.constructor.call(this)};mini.extend(mini.SplitButton, mini.MenuButton, {	uiCls : "mini-splitbutton",	allowCls : "mini-button-split"});mini.regClass(mini.SplitButton, "splitbutton");mini.CheckBox = function () {	mini.CheckBox.superclass.constructor.call(this)};mini.extend(mini.CheckBox, mini.Control, {	formField : true,	text : "",	checked : false,	defaultValue : false,	trueValue : true,	falseValue : false,	uiCls : "mini-checkbox",	_create : function () {		var $ = this.uid + "$check";		this.el = document.createElement("span");		this.el.className = "mini-checkbox";		this.el.innerHTML = "<input id=\"" + $ + "\" name=\"" + this.id + "\" type=\"checkbox\" class=\"mini-checkbox-check\"><label for=\"" + $ + "\" onclick=\"return false;\">" + this.text + "</label>";		this.checkEl = this.el.firstChild;		this.labelEl = this.el.lastChild	},	destroy : function () {		if (this.checkEl) {			this.checkEl.onmouseup = null;			this.checkEl.onclick = null;			this.checkEl = null		}		mini.CheckBox.superclass.destroy.call(this)	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.el, "click", this.__onClick, this);			this.checkEl.onmouseup = function () {				return false			};			var $ = this;			this.checkEl.onclick = function () {				if ($.isReadOnly())					return false			}		}, this)	},	setName : function ($) {		this.name = $;		mini.setAttr(this.checkEl, "name", this.name)	},	setText : function ($) {		if (this.text !== $) {			this.text = $;			this.labelEl.innerHTML = $		}	},	setChecked : function ($) {		if ($ === true)			$ = true;		else if ($ == this.trueValue)			$ = true;		else if ($ == "true")			$ = true;		else if ($ === 1)			$ = true;		else if ($ == "Y")			$ = true;		else			$ = false;		if (this.checked !== $) {			this.checked = !!$;			this.checkEl.checked = this.checked;			this.value = this.getValue()		}	},	getChecked : function () {		return this.checked	},	setValue : function ($) {		if (this.checked != $) {			this.setChecked($);			this.value = this.getValue()		}	},	getValue : function () {		return String(this.checked == true ? this.trueValue : this.falseValue)	},	getFormValue : function () {		return this.getValue()	},	setTrueValue : function ($) {		this.checkEl.value = $;		this.trueValue = $	},	setFalseValue : function ($) {		this.falseValue = $	},	__onClick : function ($) {		if (this.isReadOnly())			return;		this.setChecked(!this.checked);		this.fire("checkedchanged", {			checked : this.checked		});		this.fire("valuechanged", {			value : this.getValue()		});		this.fire("click", $, this)	},	getAttrs : function (A) {		var D = mini.CheckBox.superclass.getAttrs.call(this, A),		C = jQuery(A);		D.text = A.innerHTML;		mini._ParseString(A, D, ["text", "oncheckedchanged", "onclick"]);		mini._ParseBool(A, D, ["enabled"]);		var B = C.attr("checked");		if (B)			D.checked = (B == "true" || B == "checked") ? true : false;		var _ = C.attr("trueValue");		if (_) {			D.trueValue = _;			_ = parseInt(_);			if (!isNaN(_))				D.trueValue = _		}		var $ = C.attr("falseValue");		if ($) {			D.falseValue = $;			$ = parseInt($);			if (!isNaN($))				D.falseValue = $		}		return D	}});mini.regClass(mini.CheckBox, "checkbox");mini.ButtonEdit = function () {	this._initButtons();	mini.ButtonEdit.superclass.constructor.call(this);	this.addCls("mini-buttonedit")};mini.extend(mini.ButtonEdit, mini.ValidatorBase, {	name : "",	formField : true,	defaultValue : "",	value : "",	text : "",	emptyText : "",	maxLength : 1000,	minLength : 0,	allowInput : true,	noInputCls : "mini-buttonedit-noInput",	readOnlyCls : "mini-buttonedit-readOnly",	disabledCls : "mini-buttonedit-disabled",	emptyCls : "mini-buttonedit-empty",	focusCls : "mini-buttonedit-focus",	buttonDisabledCls : "mini-buttonedit-button-disabled",	buttonCls : "mini-buttonedit-button",	buttonHoverCls : "mini-buttonedit-button-hover",	buttonPressedCls : "mini-buttonedit-button-pressed",	set : function ($) {		if (typeof $ == "string")			return this;		this.allowUpdate = !($.enabled == false || $.allowInput == false || $.readOnly);		mini.ButtonEdit.superclass.set.call(this, $);		if (this.allowUpdate === false) {			this.allowUpdate = true;			this.doUpdate()		}		return this	},	uiCls : "mini-buttonedit",	_create : function () {		this.el = document.createElement("div");		this.el.className = "mini-buttonedit";		var $ = this.password ? "password" : "text";		this.el.innerHTML = "<div class=\"mini-buttonedit-inner\"><input type=\"" + $ + "\" class=\"mini-buttonedit-input\" autocomplete=\"off\"/></div><div class=\"mini-buttonedit-errorIcon\"></div><input name=\"" + this.name + "\" type=\"hidden\"/>";		this.valueEl = this.el.lastChild;		this.innerEl = this.el.firstChild;		this.errorIconEl = this.el.childNodes[1];		this.textEl = this.innerEl.firstChild;		this.updateButtons();		this.doUpdate()	},	destroy : function () {		if (this.textEl) {			mini.clearEvent(this.textEl);			jQuery(this.textEl).remove();			this.textEl = null		}		mini.ButtonEdit.superclass.destroy.call(this)	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.el, "mousedown", this.__OnMouseDown, this);			mini.on(this.textEl, "focus", this.__OnFocus, this);			mini.on(this.textEl, "change", this.__OnInputTextChanged, this)		}, this)	},	_inputEventsInited : false,	_initInputEvents : function () {		if (this._inputEventsInited)			return;		this._inputEventsInited = true;		mini.on(this.el, "click", this.__OnClick, this);		mini.on(this.textEl, "blur", this.__OnBlur, this);		mini.on(this.textEl, "keydown", this.__OnInputKeyDown, this);		mini.on(this.textEl, "keyup", this.__OnInputKeyUp, this);		mini.on(this.textEl, "keypress", this.__OnInputKeyPress, this)	},	doUpdate : function () {		if (this.allowUpdate === false)			return;		if (this.enabled)			this.removeCls(this.disabledCls);		else			this.addCls(this.disabledCls);		if (this.isReadOnly() || this.allowInput == false)			this.textEl.readOnly = true;		else			this.textEl.readOnly = false;		if (this.isReadOnly())			this.addCls(this.readOnlyCls);		else			this.removeCls(this.readOnlyCls);		if (this.allowInput)			this.removeCls(this.noInputCls);		else			this.addCls(this.noInputCls);		if (this.required)			this.addCls(this.requiredCls);		else			this.removeCls(this.requiredCls)	},	_doEmpty : function () {},	focus : function () {		try {			this.textEl.focus();			var $ = this;			setTimeout(function () {				if ($.focused)					$.textEl.focus()			}, 10)		} catch (_) {}			},	blur : function () {		try {			this.textEl.blur()		} catch ($) {}			},	getTextEl : function () {		return this.textEl	},	setName : function ($) {		this.name = $;		this.valueEl.name = $	},	setEmptyText : function ($) {		if ($ === null || $ === undefined)			$ = "";		this.emptyText = $;		this._doEmpty()	},	setText : function ($) {		if ($ === null || $ === undefined)			$ = "";		var _ = this.text !== $;		this.text = $;		this.textEl.value = $	},	getText : function () {		var $ = this.textEl.value;		return $ != this.emptyText ? $ : ""	},	setValue : function ($) {		if ($ === null || $ === undefined)			$ = "";		var _ = this.value !== $;		this.value = $;		this._doEmpty()	},	getValue : function () {		return this.value	},	getFormValue : function () {		value = this.value;		if (value === null || value === undefined)			value = "";		return String(value)	},	setMaxLength : function ($) {		$ = parseInt($);		if (isNaN($))			return;		this.maxLength = $;		this.textEl.maxLength = $	},	setMinLength : function ($) {		$ = parseInt($);		if (isNaN($))			return;		this.minLength = $	},	setAllowInput : function ($) {		this.allowInput = $;		this.doUpdate()	},	setReadOnly : function ($) {		this.readOnly = $;		this.doUpdate()	},	setEnabled : function ($) {		if (this.enabled != $) {			this.enabled = $;			this.doUpdate()		}	},	createButton : function (_) {		var $ = mini.copyTo({				name : "",				cls : "",				style : "",				iconCls : "",				iconStyle : "",				position : "right",				visible : true,				enabled : true,				html : ""			}, _);		if ($.type == "spin")			$.html = "<div class=\"mini-buttonedit-spin\"><div id=\"up\" class=\"mini-buttonedit-up\"><span></span></div><div class=\"mini-buttonedit-spinSplit\"></div><div class=\"mini-buttonedit-down\"><span></span></div></div>";		return $	},	addButton : function (_, $) {		if (typeof _ == "string")			_ = {				iconCls : _			};		_ = this.createButton(_);		if (typeof $ != "number")			$ = this.buttons.length;		this.buttons.insert($, _);		this.updateButtons()	},	removeButton : function ($) {		var _ = this.getButton($);		if (!_)			return;		this.buttons.remove(_);		this.updateButtons()	},	updateButton : function ($, A) {		var _ = this.getButton($);		if (!_)			return;		mini.copyTo(_, A);		this.updateButtons()	},	getButtonEl : function (A) {		var E = this.getButton(A);		if (!E)			return;		var _ = this.innerEl.firstChild,		C = _.rows[0].cells;		for (var B = 0, D = C.length; B < D; B++) {			var $ = C[B];			if ($.id == A)				return $		}	},	getButton : function ($) {		if (typeof $ == "number")			return this.buttons[$];		else			for (var _ = 0, A = this.buttons.length; _ < A; _++) {				var B = this.buttons[_];				if (B.name == $)					return B			}	},	_cellSpacing : 1,	updateButtons : function () {		var H = "<table class=\"mini-buttonedit-border\" cellpadding=\"0\" cellspacing=\"" + this._cellSpacing + "\"><tr>",		C = "",		A = "",		_ = 0;		for (var $ = 0, E = this.buttons.length; $ < E; $++) {			var G = this.buttons[$];			if (!G.visible)				continue;			var D = G.cls || "";			if (G.enabled == false)				D += " " + this.buttonDisabledCls;			var B = "onmouseover=\"mini.addClass(this, '" + this.buttonHoverCls + "');\" " + "onmouseout=\"mini.removeClass(this, '" + this.buttonHoverCls + "');\"";			if (!G.enabled)				B = "";			var F = "<td " + B + " id=\"" + $ + "\" class=\"mini-buttonedit-button " + D + "\"  style=\"" + G.style + "\">";			if (G.html)				F += G.html;			else				F += "<div class=\"mini-buttonedit-icon " + G.iconCls + "\" style=\"" + G.iconStyle + "\"></div>";			F += "</td>";			if (G.position == "left") {				_++;				C += F			} else				A += F		}		H += C + "<td class=\"mini-buttonedit-inputWrap\"></td>" + A;		H += "</tr></table>";		this.textEl.parentNode.removeChild(this.textEl);		this.innerEl.innerHTML = H;		this.innerEl.firstChild.rows[0].cells[_].appendChild(this.textEl)	},	_initButtons : function () {		this.buttons = [];		var $ = this.createButton();		this.buttons.push($)	},	errorCls : "mini-buttonedit-error",	invalidCls : "mini-buttonedit-invalid",	_getButtonByEvent : function (_) {		var $ = mini.findParent(_.target, this.buttonCls);		if ($)			return this.getButton(parseInt($.id));		return null	},	__OnClick : function (_) {		if (this.isReadOnly())			return;		if (!mini.isAncestor(this.textEl, _.target)) {			var $ = this._getButtonByEvent(_);			if ($ && $.enabled)				this._OnButtonClick($, _)		} else			this.textEl.focus()	},	__OnMouseDown : function (D) {		if (this.isReadOnly())			return;		if (!mini.isAncestor(this.textEl, D.target)) {			var $ = this;			setTimeout(function () {				$.focus();				mini.selectRange($.textEl, 1000, 1000)			}, 1);			var B = this._getButtonByEvent(D),			_ = mini.findParent(D.target, this.buttonCls);			if (B && B.enabled) {				if (B.type == "spin") {					var A = mini.findParent(D.target, "mini-buttonedit-up"),					C = mini.findParent(D.target, "mini-buttonedit-down");					if (A) {						mini.addClass(A, this.buttonPressedCls);						this._OnButtonMouseDown(B, D, "up")					} else if (C) {						mini.addClass(C, this.buttonPressedCls);						this._OnButtonMouseDown(B, D, "down")					}				} else {					mini.addClass(_, this.buttonPressedCls);					this._OnButtonMouseDown(B, D)				}				mini.on(document, "mouseup", this.__OnDocMouseup, this)			}		}	},	__OnDocMouseup : function (A) {		var _ = this.innerEl.firstChild.rows[0].cells,		$ = this;		setTimeout(function () {			for (var B = 0, C = _.length; B < C; B++) {				var A = _[B];				mini.removeClass(A, $.buttonPressedCls);				var D = $.getButton(parseInt(A.id));				if (D && D.type == "spin") {					mini.removeClass(A.firstChild.firstChild, $.buttonPressedCls);					mini.removeClass(A.firstChild.lastChild, $.buttonPressedCls)				}			}			mini.removeClass($.el, $.pressedCls)		}, 80);		mini.un(document, "mouseup", this.__OnDocMouseup, this)	},	__OnFocus : function ($) {		this.doUpdate();		this._initInputEvents();		if (this.isReadOnly())			return;		this.focused = true;		this.addCls(this.focusCls)	},	__OnBlur : function (_) {		this.focused = false;		var $ = this;		setTimeout(function () {			if ($.focused == false)				$.removeCls($.focusCls)		}, 2)	},	__OnInputKeyDown : function ($) {		this.fire("keydown", {			htmlEvent : $		});		if ($.keyCode == 8 && (this.isReadOnly() || this.allowInput == false))			return false;		if ($.keyCode == 13)			this.fire("enter")	},	__OnInputKeyUp : function ($) {		this.fire("keyup", {			htmlEvent : $		})	},	__OnInputKeyPress : function ($) {		this.fire("keypress", {			htmlEvent : $		})	},	_OnButtonClick : function (_, $) {		var A = {			htmlEvent : $,			button : _,			index : this.buttons.indexOf(_),			name : _.name,			cancel : false		};		this.fire("beforebuttonclick", A);		if (A.cancel == true)			return;		this.fire("buttonclick", A)	},	_OnButtonMouseDown : function (A, _, $) {		this.focus();		this.addCls(this.focusCls);		this.fire("buttonmousedown", {			htmlEvent : _,			button : A,			index : this.buttons.indexOf(A),			name : A.name,			spinType : $		})	},	onButtonClick : function (_, $) {		this.on("buttonclick", _, $)	},	onButtonMouseDown : function (_, $) {		this.on("buttonmousedown", _, $)	},	onTextChanged : function (_, $) {		this.on("textchanged", _, $)	},	getAttrs : function ($) {		var A = mini.ButtonEdit.superclass.getAttrs.call(this, $),		_ = jQuery($);		mini._ParseString($, A, ["value", "text", "onenter", "onkeydown", "onkeyup", "onkeypress", "onbuttonclick", "onbuttonmousedown", "ontextchanged"]);		mini._ParseBool($, A, ["allowInput"]);		mini._ParseInt($, A, ["maxLength", "minLength"]);		return A	}});mini.regClass(mini.ButtonEdit, "buttonedit");mini.TextBox = function () {	mini.TextBox.superclass.constructor.call(this)};mini.extend(mini.TextBox, mini.ValidatorBase, {	name : "",	formField : true,	text : "",	value : "",	defaultValue : "",	maxLength : 1000,	minLength : 0,	focusCls : "mini-textbox-focus",	disabledCls : "mini-disabled",	uiCls : "mini-textbox",	_InputType : "text",	_create : function () {		this.el = document.createElement("table");		this.el.className = "mini-textbox";		this.el.cellPadding = "0";		this.el.cellSpacing = "0";		var _ = "<input type=\"" + this._InputType + "\" class=\"mini-textbox-input\" autocomplete=\"off\"/>";		if (this._InputType == "textarea")			_ = "<textarea class=\"mini-textbox-input\" autocomplete=\"off\"/></textarea>";		_ = "<tr ><td class=\"mini-textbox-border\">" + _ + "<input type=\"hidden\"/></td></tr>";		mini.append(this.el, _);		var $ = this.el.rows[0].cells[0];		this.valueEl = $.lastChild;		this.textEl = $.firstChild	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.textEl, "focus", this.__OnFocus, this);			mini.on(this.el, "mousedown", this.__OnMouseDown, this);			mini.on(this.textEl, "change", this.__OnInputTextChanged, this)		}, this)	},	_inputEventsInited : false,	_initInputEvents : function () {		if (this._inputEventsInited)			return;		this._inputEventsInited = true;		mini.on(this.textEl, "blur", this.__OnBlur, this);		mini.on(this.textEl, "keydown", this.__OnInputKeyDown, this);		mini.on(this.textEl, "keyup", this.__OnInputKeyUp, this);		mini.on(this.textEl, "keypress", this.__OnInputKeyPress, this)	},	setName : function ($) {		if (this.name != $) {			this.name = $;			this.valueEl.name = $		}	},	setValue : function ($) {		if ($ === null || $ === undefined)			$ = "";		if (this.value != $) {			this.value = $;			this.valueEl.value = this.textEl.value = this.getFormValue()		}	},	getValue : function () {		return this.value	},	getFormValue : function () {		value = this.value;		if (value === null || value === undefined)			value = "";		return String(value)	},	setMaxLength : function ($) {		$ = parseInt($);		if (isNaN($))			return;		this.maxLength = $;		this.textEl.maxLength = $	},	setMinLength : function ($) {		$ = parseInt($);		if (isNaN($))			return;		this.minLength = $	},	setAllowInput : function ($) {		if (this.allowInput != $) {			this.allowInput = $;			this.doUpdate()		}	},	setReadOnly : function ($) {		if (this.readOnly != $) {			this.readOnly = $;			this.doUpdate()		}	},	setEnabled : function ($) {		if (this.enabled != $) {			this.enabled = $;			this.doUpdate()		}	},	doUpdate : function () {		if (this.enabled)			this.removeCls(this.disabledCls);		else			this.addCls(this.disabledCls);		if (this.isReadOnly() || this.allowInput == false)			this.textEl.readOnly = true;		else			this.textEl.readOnly = false;		if (this.required)			this.addCls(this.requiredCls);		else			this.removeCls(this.requiredCls)	},	focus : function () {		try {			this.textEl.focus()		} catch ($) {}			},	blur : function () {		try {			this.textEl.blur()		} catch ($) {}			},	errorIconEl : null,	getErrorIconEl : function () {		if (!this.errorIconEl) {			var _ = this.el.rows[0],			$ = _.insertCell(1);			$.style.cssText = "width:18px;vertical-align:top;";			$.innerHTML = "<div class=\"mini-errorIcon\"></div>";			this.errorIconEl = $.firstChild		}		return this.errorIconEl	},	_RemoveErrorIcon : function () {		if (this.errorIconEl)			jQuery(this.errorIconEl.parentNode).remove();		this.errorIconEl = null	},	__OnMouseDown : function (_) {		var $ = this;		if (!mini.isAncestor(this.textEl, _.target))			setTimeout(function () {				$.focus();				mini.selectRange($.textEl, 1000, 1000)			}, 1);		else			this.textEl.focus()	},	__OnInputTextChanged : function (_) {		var $ = this.getValue();		this.setValue(this.textEl.value);		if ($ !== this.getValue())			this._OnValueChanged()	},	__OnInputKeyDown : function (_) {		this.fire("keydown", {			htmlEvent : _		});		if (_.keyCode == 8 && (this.isReadOnly() || this.allowInput == false))			return false;		if (_.keyCode == 13) {			var $ = this;			setTimeout(function () {				if (mini.isIE9)					$.__OnInputTextChanged(null);				$.fire("enter")			}, 10)		}	},	__OnInputKeyUp : function ($) {		this.fire("keyup", {			htmlEvent : $		})	},	__OnInputKeyPress : function ($) {		this.fire("keypress", {			htmlEvent : $		})	},	__OnFocus : function ($) {		this.doUpdate();		this.focused = true;		this.addCls(this.focusCls);		this._initInputEvents()	},	__OnBlur : function (_) {		this.focused = false;		var $ = this;		setTimeout(function () {			if ($.focused == false)				$.removeCls($.focusCls)		}, 2)	},	getAttrs : function ($) {		var A = mini.TextBox.superclass.getAttrs.call(this, $),		_ = jQuery($);		mini._ParseString($, A, ["value", "text", "onenter", "onkeydown", "onkeyup", "onkeypress"]);		mini._ParseBool($, A, ["allowInput"]);		mini._ParseInt($, A, ["maxLength", "minLength"]);		return A	}});mini.regClass(mini.TextBox, "textbox");mini.Password = function () {	mini.Password.superclass.constructor.call(this)};mini.extend(mini.Password, mini.TextBox, {	uiCls : "mini-password",	_InputType : "password"});mini.regClass(mini.Password, "password");mini.TextArea = function () {	mini.TextArea.superclass.constructor.call(this)};mini.extend(mini.TextArea, mini.TextBox, {	width : 180,	height : 50,	_InputType : "textarea",	uiCls : "mini-textarea",	doLayout : function () {		mini.TextArea.superclass.doLayout.call(this);		this._doHeight()	},	_doHeight : function () {		this.textEl.style.display = "none";		var $ = mini.getHeight(this.textEl.parentNode);		$ -= 4;		if ($ < 0)			$ = 0;		this.textEl.style.display = "block";		this.textEl.style.height = $ + "px"	},	setStyle : function ($) {		mini.setStyle(this.el, $);		this._doHeight()	},	setHeight : function ($) {		if (parseInt($) == $)			$ += "px";		this.el.style.height = $;		this._doHeight()	}});mini.regClass(mini.TextArea, "textarea");mini.PopupEdit = function () {	mini.PopupEdit.superclass.constructor.call(this);	this._createPopup()};mini.extend(mini.PopupEdit, mini.ButtonEdit, {	uiCls : "mini-popupedit",	popup : null,	popupCls : "mini-buttonedit-popup",	hoverCls : "mini-buttonedit-hover",	pressedCls : "mini-buttonedit-pressed",	_initEvents : function () {		mini.PopupEdit.superclass._initEvents.call(this);		mini._BindEvents(function () {			mini.on(this.el, "mouseover", this.__OnMouseOver, this);			mini.on(this.el, "mouseout", this.__OnMouseOut, this);			this.on("buttonclick", this.__OnButtonClick, this)		}, this)	},	_initButtons : function () {		this.buttons = [];		var $ = this.createButton({				cls : "mini-buttonedit-popup",				iconCls : "mini-buttonedit-icons-popup",				name : "popup"			});		this.buttons.push($)	},	__OnMouseOver : function ($) {		if (this.isReadOnly() || this.allowInput)			return;		if (mini.findParent($.target, "mini-buttonedit-border"))			this.addCls(this.hoverCls)	},	__OnMouseOut : function ($) {		if (this.isReadOnly() || this.allowInput)			return;		this.removeCls(this.hoverCls)	},	__OnMouseDown : function ($) {		if (this.isReadOnly())			return;		mini.PopupEdit.superclass.__OnMouseDown.call(this, $);		if (this.allowInput == false && mini.findParent($.target, "mini-buttonedit-border")) {			mini.addClass(this.el, this.pressedCls);			mini.on(document, "mouseup", this.__OnDocMouseup, this)		}	},	__OnInputKeyDown : function ($) {		this.fire("keydown", {			htmlEvent : $		});		if ($.keyCode == 8 && (this.isReadOnly() || this.allowInput == false))			return false;		if ($.keyCode == 9) {			this.hidePopup();			return		}		if ($.keyCode == 27) {			this.hidePopup();			return		}		if ($.keyCode == 13)			this.fire("enter");		if (this.isShowPopup())			if ($.keyCode == 13 || $.keyCode == 27)				$.stopPropagation()	},	within : function ($) {		if (mini.isAncestor(this.el, $.target))			return true;		if (this.popup.within($))			return true;		return false	},	popupWidth : "100%",	popupMinWidth : 50,	popupMaxWidth : 2000,	popupHeight : "",	popupMinHeight : 30,	popupMaxHeight : 2000,	setPopup : function ($) {		if (typeof $ == "string") {			mini.parse($);			$ = mini.get($)		}		var _ = mini.getAndCreate($);		if (!_)			return;		_.setVisible(true);		_.render(this.popup.contentEl);		_.owner = this	},	getPopup : function () {		if (!this.popup)			this._createPopup();		return this.popup	},	_createPopup : function () {		this.popup = new mini.Popup();		this.popup.setShowAction("none");		this.popup.setHideAction("outerclick");		this.popup.setPopupEl(this.el);		this.popup.on("BeforeClose", this.__OnPopupBeforeClose, this)	},	__OnPopupBeforeClose : function ($) {		if (this.within($.htmlEvent))			$.cancel = true	},	showPopup : function () {		var _ = this.getPopup(),		B = this.getBox(),		$ = this.popupWidth;		if (this.popupWidth == "100%")			$ = B.width;		_.setWidth($);		var A = parseInt(this.popupHeight);		if (!isNaN(A))			_.setHeight(A);		else			_.setHeight("auto");		_.setMinWidth(this.popupMinWidth);		_.setMinHeight(this.popupMinHeight);		_.setMaxWidth(this.popupMaxWidth);		_.setMaxHeight(this.popupMaxHeight);		_.showAtEl(this.el, {			hAlign : "left",			vAlign : "below",			outVAlign : "above",			popupCls : this.popupCls		})	},	hidePopup : function () {		var $ = this.getPopup();		$.close()	},	isShowPopup : function () {		if (this.popup && this.popup.visible)			return true;		else			return false	},	setPopupWidth : function ($) {		this.popupWidth = $	},	__OnClick : function (A) {		if (this.isReadOnly())			return;		if (!mini.isAncestor(this.textEl, A.target)) {			var _ = this._getButtonByEvent(A);			if (_ && _.enabled) {				this._OnButtonClick(_, A);				return			}		}		if (!this.allowInput && mini.findParent(A.target, "mini-buttonedit-border"))			if (this.isShowPopup())				this.hidePopup();			else {				var $ = this;				setTimeout(function () {					$.showPopup()				}, 1)			}	},	__OnButtonClick : function (_) {		if (_.name == "popup")			if (this.isShowPopup())				this.hidePopup();			else {				var $ = this;				setTimeout(function () {					$.showPopup()				}, 1)			}	},	getAttrs : function ($) {		var _ = mini.PopupEdit.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["popupWidth", "popupHeight", "popup"]);		mini._ParseInt($, _, ["popupMinWidth", "popupMaxWidth", "popupMinHeight", "popupMaxHeight"]);		return _	}});mini.regClass(mini.PopupEdit, "popupedit");mini.ComboBox = function () {	this.data = [];	this.columns = [];	mini.ComboBox.superclass.constructor.call(this)};mini.extend(mini.ComboBox, mini.PopupEdit, {	text : "",	value : "",	valueField : "id",	textField : "text",	delimiter : ",",	multiSelect : false,	data : [],	url : "",	columns : [],	allowInput : false,	popupMaxHeight : 300,	set : function (A) {		if (typeof A == "string")			return this;		var $ = A.value;		delete A.value;		var B = A.url;		delete A.url;		var _ = A.data;		delete A.data;		mini.ComboBox.superclass.set.call(this, A);		if (!mini.isNull(_)) {			this.setData(_);			A.data = _		}		if (!mini.isNull(B)) {			this.setUrl(B);			A.url = B		}		if (!mini.isNull($)) {			this.setValue($);			A.value = $		}		return this	},	uiCls : "mini-combobox",	_createPopup : function () {		mini.ComboBox.superclass._createPopup.call(this);		this.listbox = new mini.ListBox();		this.listbox.setBorderStyle("border:0;");		this.listbox.setStyle("width:100%;height:auto;");		this.listbox.render(this.popup.contentEl);		this.listbox.on("itemclick", this.__OnItemClick, this)	},	showPopup : function () {		this.listbox.setHeight("auto");		mini.ComboBox.superclass.showPopup.call(this);		var $ = this.popup.el.style.height;		if ($ == "" || $ == "auto")			this.listbox.setHeight("auto");		else			this.listbox.setHeight("100%");		this.listbox.setValue(this.value)	},	getItem : function ($) {		return typeof $ == "object" ? $ : this.data[$]	},	indexOf : function ($) {		return this.data.indexOf($)	},	getAt : function ($) {		return this.data[$]	},	load : function ($) {		if (typeof $ == "string")			this.setUrl($);		else			this.setData($)	},	setData : function (data) {		if (typeof data == "string")			data = eval("(" + data + ")");		if (!mini.isArray(data))			data = [];		this.listbox.setData(data);		this.data = this.listbox.data;		var v = this.listbox.getValue();		this.setValue(v)	},	setUrl : function ($) {		this.getPopup();		this.listbox.setUrl($);		this.url = this.listbox.url;		this.data = this.listbox.data	},	setValueField : function ($) {		this.valueField = $;		if (this.listbox)			this.listbox.setValueField($)	},	setTextField : function ($) {		if (this.listbox)			this.listbox.setTextField($);		this.textField = $	},	setDisplayField : function ($) {		this.setTextField($)	},	setValue : function ($) {		if (this.value != $) {			var _ = this.listbox.getValueAndText($);			this.value = _[0];			this.valueEl.value = this.value;			this.textEl.value = _[1]		} else {			_ = this.listbox.getValueAndText($);			this.textEl.value = _[1]		}	},	setMultiSelect : function ($) {		if (this.multiSelect != $) {			this.multiSelect = $;			if (this.listbox) {				this.listbox.setMultiSelect($);				this.listbox.setShowCheckBox($)			}		}	},	setColumns : function ($) {		if (!mini.isArray($))			$ = [];		this.columns = $;		this.listbox.setColumns($)	},	showNullItem : false,	setShowNullItem : function ($) {		if (this.showNullItem != $) {			this.showNullItem = $;			this.listbox.setShowNullItem($)		}	},	__OnItemClick : function (A) {		var _ = this.listbox.getValue(),		$ = this.getValue();		this.setValue(_);		if ($ != this.getValue())			this._OnValueChanged();		if (!this.multiSelect)			this.hidePopup();		this.focus()	},	__OnInputKeyDown : function (C) {		this.fire("keydown", {			htmlEvent : C		});		if (C.keyCode == 8 && (this.isReadOnly() || this.allowInput == false))			return false;		if (C.keyCode == 9) {			this.hidePopup();			return		}		switch (C.keyCode) {		case 27:			if (this.isShowPopup())				C.stopPropagation();			this.hidePopup();			break;		case 13:			if (this.isShowPopup()) {				C.preventDefault();				C.stopPropagation();				var _ = this.listbox.getFocusedIndex();				if (_ != -1) {					var $ = this.listbox.getAt(_),					B = this.listbox.getValueAndText([$]),					A = B[0];					this.setValue(A);					this._OnValueChanged();					this.hidePopup()				}			} else				this.fire("enter");			break;		case 37:			break;		case 38:			_ = this.listbox.getFocusedIndex();			if (_ == -1) {				_ = 0;				if (!this.multiSelect) {					$ = this.listbox.findItems(this.value)[0];					if ($)						_ = this.listbox.indexOf($)				}			}			if (this.isShowPopup())				if (!this.multiSelect) {					_ -= 1;					if (_ < 0)						_ = 0;					this.listbox.focusItem(_)				}			break;		case 39:			break;		case 40:			_ = this.listbox.getFocusedIndex();			if (_ == -1) {				_ = 0;				if (!this.multiSelect) {					$ = this.listbox.findItems(this.value)[0];					if ($)						_ = this.listbox.indexOf($)				}			}			if (this.isShowPopup()) {				if (!this.multiSelect) {					_ += 1;					if (_ > this.listbox.getCount() - 1)						_ = this.listbox.getCount() - 1;					this.listbox.focusItem(_)				}			} else {				this.showPopup();				if (!this.multiSelect)					this.listbox.focusItem(_)			}			break;		default:			this._tryQuery(this.textEl.value);			break		}	},	__OnInputKeyUp : function ($) {		this.fire("keyup", {			htmlEvent : $		})	},	__OnInputKeyPress : function ($) {		this.fire("keypress", {			htmlEvent : $		})	},	_tryQuery : function (_) {		var $ = this;		setTimeout(function () {			var A = $.textEl.value;			if (A != _)				$._doQuery(A)		}, 10)	},	_doQuery : function (A) {		var _ = [];		for (var B = 0, D = this.data.length; B < D; B++) {			var $ = this.data[B],			C = $[this.textField];			if (typeof C == "string")				if (C.indexOf(A) != -1)					_.push($)		}		this.listbox.setData(_);		this._filtered = true;		if (A !== "" || this.isShowPopup())			this.showPopup()	},	hidePopup : function () {		var $ = this.getPopup();		$.close();		if (this._filtered) {			this._filtered = false;			this.listbox.setData(this.data)		}	},	__OnInputTextChanged : function ($) {		if (this.multiSelect);		else if (this.textEl.value == "" && !this.value) {			this.setValue("");			this._OnValueChanged()		}	},	getAttrs : function (G) {		var E = mini.ComboBox.superclass.getAttrs.call(this, G);		mini._ParseString(G, E, ["url", "data", "textField", "valueField", "displayField"]);		mini._ParseBool(G, E, ["multiSelect", "showNullItem"]);		if (E.displayField)			E.textField = E.displayField;		var C = E.valueField || this.valueField,		H = E.textField || this.textField;		if (G.nodeName.toLowerCase() == "select") {			var I = [];			for (var F = 0, D = G.length; F < D; F++) {				var $ = G.options[F],				_ = {};				_[H] = $.text;				_[C] = $.value;				I.push(_)			}			if (I.length > 0)				E.data = I		} else {			var J = mini.getChildNodes(G);			for (F = 0, D = J.length; F < D; F++) {				var A = J[F],				B = jQuery(A).attr("property");				if (!B)					continue;				B = B.toLowerCase();				if (B == "columns")					E.columns = mini._ParseColumns(A);				else if (B == "data")					E.data = A.innerHTML			}		}		return E	}});mini.regClass(mini.ComboBox, "combobox");mini.DatePicker = function () {	mini.DatePicker.superclass.constructor.call(this)};mini.extend(mini.DatePicker, mini.PopupEdit, {	format : "yyyy-MM-dd",	popupWidth : "",	viewDate : new Date(),	showTime : false,	timeFormat : "H:mm",	showTodayButton : true,	showClearButton : true,	uiCls : "mini-datepicker",	_getCalendar : function () {		if (!mini.DatePicker._Calendar) {			var $ = mini.DatePicker._Calendar = new mini.Calendar();			$.setStyle("border:0;")		}		return mini.DatePicker._Calendar	},	_createPopup : function () {		mini.DatePicker.superclass._createPopup.call(this);		this.calendar = this._getCalendar()	},	showPopup : function () {		this.calendar.beginUpdate();		this.calendar.render(this.popup.contentEl);		this.calendar.set({			showTime : this.showTime,			timeFormat : this.timeFormat,			showClearButton : this.showClearButton,			showTodayButton : this.showTodayButton		});		this.calendar.setValue(this.value);		if (this.value)			this.calendar.setViewDate(this.value);		else			this.calendar.setViewDate(this.viewDate);		if (this.calendar._target) {			var $ = this.calendar._target;			this.calendar.un("timechanged", $.__OnTimeChanged, $);			this.calendar.un("dateclick", $.__OnDateClick, $);			this.calendar.un("drawdate", $.__OnDrawDate, $)		}		this.calendar.on("timechanged", this.__OnTimeChanged, this);		this.calendar.on("dateclick", this.__OnDateClick, this);		this.calendar.on("drawdate", this.__OnDrawDate, this);		this.calendar.endUpdate();		mini.DatePicker.superclass.showPopup.call(this);		this.calendar._target = this	},	hidePopup : function () {		mini.DatePicker.superclass.hidePopup.call(this);		this.calendar.un("timechanged", this.__OnTimeChanged, this);		this.calendar.un("dateclick", this.__OnDateClick, this);		this.calendar.un("drawdate", this.__OnDrawDate, this)	},	within : function ($) {		if (mini.isAncestor(this.el, $.target))			return true;		if (this.calendar.within($))			return true;		return false	},	__OnDrawDate : function ($) {		this.fire("drawdate", $)	},	__OnDateClick : function (A) {		var _ = this.calendar.getValue(),		$ = this.getFormValue();		this.setValue(_);		if ($ !== this.getFormValue())			this._OnValueChanged();		this.focus();		this.hidePopup()	},	__OnTimeChanged : function (_) {		var $ = this.calendar.getValue();		this.setValue($);		this._OnValueChanged()	},	setFormat : function ($) {		if (typeof $ != "string")			return;		if (this.format != $) {			this.format = $;			this.textEl.value = this.valueEl.value = this.getFormValue()		}	},	setValue : function ($) {		$ = mini.parseDate($);		if (mini.isNull($))			$ = "";		if (this.value != $) {			this.value = $;			this.textEl.value = this.valueEl.value = this.getFormValue()		}	},	getValue : function () {		if (!mini.isDate(this.value))			return null;		return this.value	},	getFormValue : function () {		if (!mini.isDate(this.value))			return "";		return mini.formatDate(this.value, this.format)	},	setViewDate : function ($) {		$ = mini.parseDate($);		if (!mini.isDate($))			return;		this.viewDate = $	},	setShowTime : function ($) {		if (this.showTime != $)			this.showTime = $	},	setTimeFormat : function ($) {		if (this.timeFormat != $)			this.timeFormat = $	},	setShowTodayButton : function ($) {		this.showTodayButton = $	},	setShowClearButton : function ($) {		this.showClearButton = $	},	__OnInputTextChanged : function (B) {		var A = this.textEl.value,		$ = mini.parseDate(A);		if (!$ || isNaN($) || $.getFullYear() == 1970)			$ = null;		var _ = this.getFormValue();		this.setValue($);		if ($ == null)			this.textEl.value = "";		if (_ !== this.getFormValue())			this._OnValueChanged()	},	__OnInputKeyDown : function ($) {		this.fire("keydown", {			htmlEvent : $		});		if ($.keyCode == 8 && (this.isReadOnly() || this.allowInput == false))			return false;		if ($.keyCode == 9) {			this.hidePopup();			return		}		switch ($.keyCode) {		case 27:			if (this.isShowPopup())				$.stopPropagation();			this.hidePopup();			break;		case 13:			if (this.isShowPopup()) {				$.preventDefault();				$.stopPropagation();				this.hidePopup()			} else				this.fire("enter");			break;		case 37:			break;		case 38:			break;		case 39:			break;		case 40:			this.showPopup();			break;		default:			break		}	},	getAttrs : function ($) {		var _ = mini.DatePicker.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["format", "viewDate", "timeFormat", "ondrawdate"]);		mini._ParseBool($, _, ["showTime", "showTodayButton", "showClearButton"]);		return _	}});mini.regClass(mini.DatePicker, "datepicker");mini.Calendar = function () {	this.viewDate = new Date(),	this.selectedDates = [];	mini.Calendar.superclass.constructor.call(this)};mini.extend(mini.Calendar, mini.Control, {	width : 230,	height : 200,	_clearBorder : false,	viewDate : null,	selectedDate : "",	selectedDates : [],	multiSelect : false,	firstDayOfWeek : 0,	todayText : "Today",	clearText : "Clear",	okText : "OK",	cancelText : "Cancel",	daysShort : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],	format : "MMM, yyyy",	timeFormat : "H:mm",	showTime : false,	currentTime : false,	rows : 1,	columns : 1,	headerCls : "",	bodyCls : "",	footerCls : "",	todayCls : "mini-calendar-today",	weekendCls : "mini-calendar-weekend",	otherMonthCls : "mini-calendar-othermonth",	selectedDateCls : "mini-calendar-selected",	showHeader : true,	showFooter : true,	showWeekNumber : true,	showDaysHeader : true,	showMonthButtons : true,	showYearButtons : true,	showTodayButton : true,	showClearButton : true,	isWeekend : function (_) {		var $ = _.getDay();		return $ == 0 || $ == 6	},	getFirstDateOfMonth : function ($) {		var $ = new Date($.getFullYear(), $.getMonth(), 1);		return mini.getWeekStartDate($, this.firstDayOfWeek)	},	getShortWeek : function ($) {		return this.daysShort[$]	},	uiCls : "mini-calendar",	_create : function () {		var $ = this.el = document.createElement("table");		this.el.className = "mini-calendar";		this.el.cellSpacing = "0";		this.el.cellPadding = "0";		jQuery(this.el).append("<tr style=\"width:100%;\"><td style=\"width:100%;\"></td></tr>");		jQuery(this.el).append("<tr ><td><div class=\"mini-calendar-footer\">" + "<span style=\"display:inline-block;\"><input name=\"time\" class=\"mini-timespinner\" style=\"width:70px\" format=\"" + this.timeFormat + "\"/>" + "<span class=\"mini-calendar-footerSpace\"></span></span>" + "<span class=\"mini-calendar-tadayButton\">" + this.todayText + "</span>" + "<span class=\"mini-calendar-footerSpace\"></span>" + "<span class=\"mini-calendar-clearButton\">" + this.clearText + "</span>" + "</div></td></tr>");		this.innerEl = this.el.rows[0].cells[0];		this.footerEl = this.el.rows[1].cells[0].firstChild;		this.timeWrapEl = this.footerEl.childNodes[0];		this.todayButtonEl = this.footerEl.childNodes[1];		this.footerSpaceEl = this.footerEl.childNodes[2];		this.closeButtonEl = this.footerEl.lastChild;		mini.parse(this.footerEl);		this.timeSpinner = mini.getbyName("time", this.el);		this.doUpdate()	},	_initEvents : function () {		this.timeSpinner.on("valuechanged", this.__OnTimeChanged, this);		mini._BindEvents(function () {			mini.on(this.el, "click", this.__OnClick, this);			mini.on(this.el, "mousedown", this.__OnMouseDown, this)		}, this)	},	getDateEl : function ($) {		if (!$)			return null;		var _ = this.uid + "$" + mini.clearTime($).getTime();		return document.getElementById(_)	},	within : function ($) {		if (mini.isAncestor(this.el, $.target))			return true;		if (this.menuEl && mini.isAncestor(this.menuEl, $.target))			return true;		return false	},	setHeaderCls : function ($) {		this.headerCls = $;		this.doUpdate()	},	setBodyCls : function ($) {		this.bodyCls = $;		this.doUpdate()	},	setFooterCls : function ($) {		this.footerCls = $;		this.doUpdate()	},	setTodayCls : function ($) {		this.todayCls = $;		this.doUpdate()	},	setOtherMonthCls : function ($) {		this.otherMonthCls = $;		this.doUpdate()	},	setWeekendCls : function ($) {		this.weekendCls = $;		this.doUpdate()	},	setShowClearButton : function ($) {		this.showClearButton = $;		var _ = this.getButton("clear");		if (_)			this.doUpdate()	},	setShowHeader : function ($) {		this.showHeader = $;		this.doUpdate()	},	setShowFooter : function ($) {		this.showFooter = $;		this.doUpdate()	},	setShowWeekNumber : function ($) {		this.showWeekNumber = $;		this.doUpdate()	},	setShowDaysHeader : function ($) {		this.showDaysHeader = $;		this.doUpdate()	},	setShowMonthButtons : function ($) {		this.showMonthButtons = $;		this.doUpdate()	},	setShowYearButtons : function ($) {		this.showYearButtons = $;		this.doUpdate()	},	setShowTodayButton : function ($) {		this.showTodayButton = $;		this.doUpdate()	},	setShowClearButton : function ($) {		this.showClearButton = $;		this.doUpdate()	},	setViewDate : function ($) {		if (!$)			$ = new Date();		this.viewDate = $;		this.doUpdate()	},	setSelectedDate : function ($) {		$ = mini.parseDate($);		if (!mini.isDate($))			$ = "";		else			$ = new Date($.getTime());		var _ = this.getDateEl(this.selectedDate);		if (_)			mini.removeClass(_, this.selectedDateCls);		this.selectedDate = $;		if (this.selectedDate)			this.selectedDate = mini.cloneDate(this.selectedDate);		_ = this.getDateEl(this.selectedDate);		if (_)			mini.addClass(_, this.selectedDateCls);		this.fire("datechanged")	},	setSelectedDates : function ($) {		if (!mini.isArray($))			$ = [];		this.selectedDates = $;		this.doUpdate()	},	getSelectedDate : function () {		return this.selectedDate ? this.selectedDate : ""	},	setTime : function ($) {		this.timeSpinner.setValue($)	},	getTime : function () {		return this.timeSpinner.getFormValue()	},	setValue : function ($) {		this.setSelectedDate($);		this.setTime($)	},	getValue : function () {		var $ = this.selectedDate;		if ($) {			$ = mini.clearTime($);			if (this.showTime) {				var _ = this.timeSpinner.getValue();				$.setHours(_.getHours());				$.setMinutes(_.getMinutes());				$.setSeconds(_.getSeconds())			}		}		return $ ? $ : ""	},	getFormValue : function () {		var $ = this.getValue();		if ($)			return mini.formatDate($, "yyyy-MM-dd HH:mm:ss");		return ""	},	isSelectedDate : function ($) {		if (!$ || !this.selectedDate)			return false;		return mini.clearTime($).getTime() == mini.clearTime(this.selectedDate).getTime()	},	setMultiSelect : function ($) {		this.multiSelect = $;		this.doUpdate()	},	setRows : function ($) {		if (isNaN($))			return;		if ($ < 1)			$ = 1;		this.rows = $;		this.doUpdate()	},	setColumns : function ($) {		if (isNaN($))			return;		if ($ < 1)			$ = 1;		this.columns = $;		this.doUpdate()	},	setShowTime : function ($) {		if (this.showTime != $) {			this.showTime = $;			this.doLayout()		}	},	setTimeFormat : function ($) {		if (this.timeFormat != $) {			this.timeSpinner.setFormat($);			this.timeFormat = this.timeSpinner.format		}	},	doLayout : function () {		if (!this.canLayout())			return;		this.timeWrapEl.style.display = this.showTime ? "" : "none";		this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";		this.closeButtonEl.style.display = this.showClearButton ? "" : "none";		this.footerSpaceEl.style.display = (this.showClearButton && this.showTodayButton) ? "" : "none";		this.footerEl.style.display = this.showFooter ? "" : "none";		var B = this.el.rows[0].cells[0].firstChild,		_ = this.el.style.height,		$ = this.el.style.width,		A = _ == "auto" || _ == "";		if (!A) {			B.style.display = "none";			h = jQuery(this.el).height();			B.style.display = "";			h -= jQuery(this.footerEl).outerHeight();			B.parentNode.style.height = h + "px"		} else			B.parentNode.style.height = ""	},	doUpdate : function () {		var F = new Date(this.viewDate.getTime()),		A = this.rows == 1 && this.columns == 1,		B = 100 / this.rows,		E = "<table class=\"mini-calendar-views\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">";		for (var $ = 0, D = this.rows; $ < D; $++) {			E += "<tr >";			for (var C = 0, _ = this.columns; C < _; C++) {				E += "<td style=\"height:" + B + "%\">";				E += this._CreateView(F, $, C);				E += "</td>";				F = new Date(F.getFullYear(), F.getMonth() + 1, 1)			}			E += "</tr>"		}		E += "</table>";		this.innerEl.innerHTML = E;		mini.repaint(this.el);		this.doLayout()	},	_CreateView : function (R, J, C) {		var _ = R.getMonth(),		F = this.getFirstDateOfMonth(R),		K = new Date(F.getTime()),		A = mini.clearTime(new Date()).getTime(),		D = this.value ? mini.clearTime(this.value).getTime() : -1,		N = this.rows > 1 || this.columns > 1,		P = "";		P += "<table class=\"mini-calendar-view\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">";		if (this.showHeader) {			P += "<tr ><td colSpan=\"10\" class=\"mini-calendar-header\"><div class=\"mini-calendar-headerInner\">";			if (J == 0 && C == 0) {				P += "<div class=\"mini-calendar-prev\">";				if (this.showYearButtons)					P += "<span class=\"mini-calendar-yearPrev\"></span>";				if (this.showMonthButtons)					P += "<span class=\"mini-calendar-monthPrev\"></span>";				P += "</div>"			}			if (J == 0 && C == this.columns - 1) {				P += "<div class=\"mini-calendar-next\">";				if (this.showMonthButtons)					P += "<span class=\"mini-calendar-monthNext\"></span>";				if (this.showYearButtons)					P += "<span class=\"mini-calendar-yearNext\"></span>";				P += "</div>"			}			P += "<span class=\"mini-calendar-title\">" + mini.formatDate(R, this.format);			 + "</span>";			P += "</div></td></tr>"		}		P += "<tr class=\"mini-calendar-daysheader\"><td class=\"mini-calendar-space\"></td>";		if (this.showWeekNumber)			P += "<td sclass=\"mini-calendar-weeknumber\"></td>";		for (var L = this.firstDayOfWeek, B = L + 7; L < B; L++) {			var O = this.getShortWeek(L);			P += "<td valign=\"middle\">";			P += O;			P += "</td>";			F = new Date(F.getFullYear(), F.getMonth(), F.getDate() + 1)		}		P += "<td class=\"mini-calendar-space\"></td></tr>";		F = K;		for (var H = 0; H <= 5; H++) {			P += "<tr class=\"mini-calendar-days\"><td class=\"mini-calendar-space\"></td>";			if (this.showWeekNumber) {				var G = mini.getWeek(F.getFullYear(), F.getMonth() + 1, F.getDate());				if (String(G).length == 1)					G = "0" + G;				P += "<td class=\"mini-calendar-weeknumber\" valign=\"middle\">" + G + "</td>"			}			for (L = this.firstDayOfWeek, B = L + 7; L < B; L++) {				var M = this.isWeekend(F),				I = mini.clearTime(F).getTime(),				$ = I == A,				E = this.isSelectedDate(F);				if (_ != F.getMonth() && N)					I = -1;				var Q = this._OnDrawDate(F);				P += "<td valign=\"middle\" id=\"";				P += this.uid + "$" + I;				P += "\" class=\"mini-calendar-date ";				if (M)					P += " mini-calendar-weekend ";				if (Q.allowSelect == false)					P += " mini-calendar-disabled ";				if (_ != F.getMonth() && N);				else {					if (E)						P += " " + this.selectedDateCls + " ";					if ($)						P += " mini-calendar-today "				}				if (_ != F.getMonth())					P += " mini-calendar-othermonth ";				P += "\">";				if (_ != F.getMonth() && N);				else					P += Q.dateHtml;				P += "</td>";				F = new Date(F.getFullYear(), F.getMonth(), F.getDate() + 1)			}			P += "<td class=\"mini-calendar-space\"></td></tr>"		}		P += "<tr class=\"mini-calendar-bottom\" colSpan=\"10\"><td ></td></tr>";		P += "</table>";		return P	},	_OnDrawDate : function ($) {		var _ = {			date : $,			dateCls : "",			dateStyle : "",			dateHtml : $.getDate(),			allowSelect : true		};		this.fire("drawdate", _);		return _	},	_OnDateClick : function (_, $) {		var A = {			date : _,			action : $		};		this.fire("dateclick", A);		this._OnValueChanged()	},	menuEl : null,	menuYear : null,	menuSelectMonth : null,	menuSelectYear : null,	showMenu : function (_) {		if (!_)			return;		this.hideMenu();		this.menuYear = parseInt(this.viewDate.getFullYear() / 10) * 10;		this.menuSelectMonth = this.viewDate.getMonth();		this.menuSelectYear = this.viewDate.getFullYear();		var C = "<div class=\"mini-calendar-menu\"></div>";		this.menuEl = mini.append(document.body, C);		this.updateMenu(this.viewDate);		var $ = mini.getBox(_),		B = $.x,		A = $.y;		mini.setX(this.menuEl, B);		mini.setY(this.menuEl, A);		mini.on(this.menuEl, "click", this.__OnMenuClick, this);		mini.on(document, "mousedown", this.__OnBodyMenuMouseDown, this)	},	hideMenu : function () {		if (this.menuEl) {			mini.un(this.menuEl, "click", this.__OnMenuClick, this);			mini.un(document, "mousedown", this.__OnBodyMenuMouseDown, this);			jQuery(this.menuEl).remove();			this.menuEl = null		}	},	updateMenu : function () {		var C = "<div class=\"mini-calendar-menu-months\">";		for (var $ = 0, B = 12; $ < B; $++) {			var _ = mini.getShortMonth($),			A = "";			if (this.menuSelectMonth == $)				A = "mini-calendar-menu-selected";			C += "<a id=\"" + $ + "\" class=\"mini-calendar-menu-month " + A + "\" href=\"javascript:void(0);\" hideFocus onclick=\"return false\">" + _ + "</a>"		}		C += "<div style=\"clear:both;\"></div></div>";		C += "<div class=\"mini-calendar-menu-years\">";		for ($ = this.menuYear, B = this.menuYear + 10; $ < B; $++) {			_ = $,			A = "";			if (this.menuSelectYear == $)				A = "mini-calendar-menu-selected";			C += "<a id=\"" + $ + "\" class=\"mini-calendar-menu-year " + A + "\" href=\"javascript:void(0);\" hideFocus onclick=\"return false\">" + _ + "</a>"		}		C += "<div class=\"mini-calendar-menu-prevYear\"></div><div class=\"mini-calendar-menu-nextYear\"></div><div style=\"clear:both;\"></div></div>";		C += "<div class=\"mini-calendar-footer\">" + "<span class=\"mini-calendar-okButton\">" + this.okText + "</span>" + "<span class=\"mini-calendar-footerSpace\"></span>" + "<span class=\"mini-calendar-cancelButton\">" + this.cancelText + "</span>" + "</div><div style=\"clear:both;\"></div>";		this.menuEl.innerHTML = C	},	__OnMenuClick : function (C) {		var _ = C.target,		B = mini.findParent(_, "mini-calendar-menu-month"),		$ = mini.findParent(_, "mini-calendar-menu-year");		if (B) {			this.menuSelectMonth = parseInt(B.id);			this.updateMenu()		} else if ($) {			this.menuSelectYear = parseInt($.id);			this.updateMenu()		} else if (mini.findParent(_, "mini-calendar-menu-prevYear")) {			this.menuYear = this.menuYear - 1;			this.menuYear = parseInt(this.menuYear / 10) * 10;			this.updateMenu()		} else if (mini.findParent(_, "mini-calendar-menu-nextYear")) {			this.menuYear = this.menuYear + 11;			this.menuYear = parseInt(this.menuYear / 10) * 10;			this.updateMenu()		} else if (mini.findParent(_, "mini-calendar-okButton")) {			var A = new Date(this.menuSelectYear, this.menuSelectMonth, 1);			this.setViewDate(A);			this.hideMenu()		} else if (mini.findParent(_, "mini-calendar-cancelButton"))			this.hideMenu()	},	__OnBodyMenuMouseDown : function ($) {		if (!mini.findParent($.target, "mini-calendar-menu"))			this.hideMenu()	},	__OnClick : function (H) {		var G = this.viewDate,		C = H.target,		F = mini.findParent(H.target, "mini-calendar-title");		if (mini.findParent(C, "mini-calendar-monthNext")) {			G.setMonth(G.getMonth() + 1);			this.setViewDate(G)		} else if (mini.findParent(C, "mini-calendar-yearNext")) {			G.setFullYear(G.getFullYear() + 1);			this.setViewDate(G)		} else if (mini.findParent(C, "mini-calendar-monthPrev")) {			G.setMonth(G.getMonth() - 1);			this.setViewDate(G)		} else if (mini.findParent(C, "mini-calendar-yearPrev")) {			G.setFullYear(G.getFullYear() - 1);			this.setViewDate(G)		} else if (mini.findParent(C, "mini-calendar-tadayButton")) {			var _ = mini.clearTime(new Date());			this.setViewDate(_);			this.setSelectedDate(_);			if (this.currentTime) {				var $ = new Date();				this.setTime($)			}			this._OnDateClick(_, "today")		} else if (mini.findParent(C, "mini-calendar-clearButton")) {			this.setSelectedDate(null);			this.setTime(null);			this._OnDateClick(null, "clear")		} else if (F)			this.showMenu(F);		var E = mini.findParent(H.target, "mini-calendar-date");		if (E && !mini.hasClass(E, "mini-calendar-disabled")) {			var A = E.id.split("$"),			B = parseInt(A[A.length - 1]);			if (B == -1)				return;			var D = new Date(B);			this._OnDateClick(D)		}	},	__OnMouseDown : function (C) {		var B = mini.findParent(C.target, "mini-calendar-date");		if (B && !mini.hasClass(B, "mini-calendar-disabled")) {			var $ = B.id.split("$"),			_ = parseInt($[$.length - 1]);			if (_ == -1)				return;			var A = new Date(_);			this.setSelectedDate(A)		}	},	__OnTimeChanged : function ($) {		this.fire("timechanged");		this._OnValueChanged()	},	_OnValueChanged : function () {		this.fire("valuechanged")	},	getAttrs : function ($) {		var _ = mini.Calendar.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["viewDate", "rows", "columns", "ondateclick", "ondrawdate", "ondatechanged", "timeFormat", "ontimechanged", "onvaluechanged"]);		mini._ParseBool($, _, ["multiSelect", "showHeader", "showFooter", "showWeekNumber", "showDaysHeader", "showMonthButtons", "showYearButtons", "showTodayButton", "showClearButton", "showTime"]);		return _	}});mini.regClass(mini.Calendar, "calendar");mini.ListBox = function () {	mini.ListBox.superclass.constructor.call(this)};mini.extend(mini.ListBox, mini.ListControl, {	formField : true,	width : 200,	columns : null,	columnWidth : 80,	showNullItem : false,	nullText : "&nbsp;",	showEmpty : false,	emptyText : "",	showCheckBox : false,	showAllCheckBox : true,	multiSelect : false,	itemCls : "mini-listbox-item",	itemHoverCls : "mini-listbox-item-hover",	itemSelectedCls : "mini-listbox-item-selected",	uiCls : "mini-listbox",	_create : function () {		var $ = this.el = document.createElement("div");		this.el.className = "mini-listbox";		this.el.innerHTML = "<div class=\"mini-listbox-border\"><div class=\"mini-listbox-header\"></div><div class=\"mini-listbox-view\"></div><input type=\"hidden\"/></div><div class=\"mini-errorIcon\"></div>";		this.borderEl = this.el.firstChild;		this.headerEl = this.borderEl.firstChild;		this.viewEl = this.borderEl.childNodes[1];		this.valueEl = this.borderEl.childNodes[2];		this.errorIconEl = this.el.lastChild	},	destroy : function () {		if (this.viewEl) {			mini.clearEvent(this.viewEl);			jQuery(this.viewEl).remove();			this.viewEl = null		}		this.borderEl = null;		this.headerEl = null;		this.viewEl = null;		this.valueEl = null;		mini.ListBox.superclass.destroy.call(this)	},	_initEvents : function () {		mini.ListBox.superclass._initEvents.call(this);		mini._BindEvents(function () {			mini.on(this.viewEl, "scroll", this.__OnScroll, this)		}, this)	},	setColumns : function (_) {		if (!mini.isArray(_))			_ = [];		this.columns = _;		for (var $ = 0, C = this.columns.length; $ < C; $++) {			var B = this.columns[$],			A = B.width;			if (mini.isNumber(A))				B.width = A + "px";			if (mini.isNull(B.width))				B.width = this.columnWidth + "px"		}		this.doUpdate()	},	doUpdate : function () {		if (this.allowUpdate === false)			return;		var T = this.columns && this.columns.length > 0;		if (T)			mini.addClass(this.el, "mini-listbox-showColumns");		else			mini.removeClass(this.el, "mini-listbox-showColumns");		this.headerEl.style.display = T ? "" : "none";		var I = [];		if (T) {			I[I.length] = "<table class=\"mini-listbox-headerInner\" cellspacing=\"0\" cellpadding=\"0\"><tr>";			var D = this.uid + "$ck$all";			I[I.length] = "<td class=\"mini-listbox-checkbox\"><input type=\"checkbox\" id=\"" + D + "\"></td>";			for (var S = 0, _ = this.columns.length; S < _; S++) {				var B = this.columns[S],				E = B.header;				if (mini.isNull(E))					E = "&nbsp;";				var A = B.width;				if (typeof A == "number")					A = A + "px";				I[I.length] = "<td class=\"";				if (B.headerCls)					I[I.length] = B.headerCls;				I[I.length] = "\" style=\"";				if (B.headerStyle)					I[I.length] = B.headerStyle + ";";				if (A)					I[I.length] = "width:" + A + ";";				if (B.headerAlign)					I[I.length] = "text-align:" + B.headerAlign + ";";				I[I.length] = "\">";				I[I.length] = E;				I[I.length] = "</td>"			}			I[I.length] = "</tr></table>"		}		this.headerEl.innerHTML = I.join("");		var I = [],		Q = this.data;		I[I.length] = "<table class=\"mini-listbox-items\" cellspacing=\"0\" cellpadding=\"0\">";		if (this.showEmpty && Q.length == 0)			I[I.length] = "<tr><td colspan=\"20\">" + this.emptyText + "</td></tr>";		else {			this._doNullItem();			for (var L = 0, G = Q.length; L < G; L++) {				var $ = Q[L],				N = -1,				P = " ",				K = -1,				O = " ";				I[I.length] = "<tr id=\"";				I[I.length] = this._createItemId(L);				I[I.length] = "\" index=\"";				I[I.length] = L;				I[I.length] = "\" class=\"mini-listbox-item ";				if ($.enabled === false)					I[I.length] = " mini-disabled ";				N = I.length;				I[I.length] = P;				I[I.length] = "\" style=\"";				K = I.length;				I[I.length] = O;				I[I.length] = "\">";				var H = this._createCheckId(L),				M = this.name,				F = this.getItemValue($),				C = "";				if ($.enabled === false)					C = "disabled";				I[I.length] = "<td class=\"mini-listbox-checkbox\"><input " + C + " id=\"" + H + "\" type=\"checkbox\" ></td>";				if (T) {					for (S = 0, _ = this.columns.length; S < _; S++) {						var B = this.columns[S],						U = this._OnDrawCell($, L, B),						J = $[B.field];						if (mini.isNull(J))							J = "&nbsp;";						A = B.width;						if (typeof A == "number")							A = A + "px";						I[I.length] = "<td class=\"";						if (U.cellCls)							I[I.length] = U.cellCls;						I[I.length] = "\" style=\"";						if (U.cellStyle)							I[I.length] = U.cellStyle + ";";						if (A)							I[I.length] = "width:" + A + ";";						if (B.align)							I[I.length] = "text-align:" + B.align + ";";						I[I.length] = "\">";						I[I.length] = J;						I[I.length] = "</td>";						if (U.rowCls)							P = U.rowCls;						if (U.rowStyle)							O = U.rowStyle					}				} else {					U = this._OnDrawCell($, L, null);					I[I.length] = "<td class=\"";					if (U.cellCls)						I[I.length] = U.cellCls;					I[I.length] = "\" style=\"";					if (U.cellStyle)						I[I.length] = U.cellStyle;					I[I.length] = "\">";					I[I.length] = U.cellHtml;					I[I.length] = "</td>";					if (U.rowCls)						P = U.rowCls;					if (U.rowStyle)						O = U.rowStyle				}				I[N] = P;				I[K] = O;				I[I.length] = "</tr>"			}		}		I[I.length] = "</table>";		var R = I.join("");		this.viewEl.innerHTML = R;		this._doSelects();		this.doLayout()	},	doLayout : function () {		if (!this.canLayout())			return;		if (this.columns && this.columns.length > 0)			mini.addClass(this.el, "mini-listbox-showcolumns");		else			mini.removeClass(this.el, "mini-listbox-showcolumns");		if (this.showCheckBox)			mini.removeClass(this.el, "mini-listbox-hideCheckBox");		else			mini.addClass(this.el, "mini-listbox-hideCheckBox");		var E = this.uid + "$ck$all",		C = document.getElementById(E);		if (C)			C.style.display = this.showAllCheckBox ? "" : "none";		var B = this.el.style.height,		F = B == "auto" || B == "";		h = this.getHeight(true);		_ = this.getWidth(true);		var D = _,		G = this.viewEl;		if (!F) {			var $ = mini.getHeight(this.headerEl);			h = h - $;			G.style.height = h + "px"		} else			G.style.height = "auto";		if (mini.isIE) {			var A = this.headerEl.firstChild,			H = this.viewEl.firstChild;			if (this.viewEl.offsetHeight >= this.viewEl.scrollHeight) {				H.style.width = "100%";				if (A)					A.style.width = "100%"			} else {				var _ = parseInt(H.parentNode.offsetWidth - 17) + "px";				H.style.width = _;				if (A)					A.style.width = _			}		}		if (this.viewEl.offsetHeight < this.viewEl.scrollHeight)			this.headerEl.style.width = (D - 17) + "px";		else			this.headerEl.style.width = "100%"	},	setShowCheckBox : function ($) {		this.showCheckBox = $;		this.doLayout()	},	setShowAllCheckBox : function ($) {		this.showAllCheckBox = $;		this.doLayout()	},	setShowNullItem : function ($) {		if (this.showNullItem != $) {			this.showNullItem = $;			this._doNullItem();			this.doUpdate()		}	},	_doNullItem : function () {		for (var _ = 0, A = this.data.length; _ < A; _++) {			var $ = this.data[_];			if ($.__NullItem) {				this.data.removeAt(_);				break			}		}		if (this.showNullItem) {			$ = {				__NullItem : true			};			$[this.textField] = this.nullText;			$[this.valueField] = "";			this.data.insert(0, $)		}	},	removeAll : function () {		var $ = this.getData();		this.removeItems($)	},	addItems : function (_, $) {		if (!mini.isArray(_))			return;		if (mini.isNull($))			$ = this.data.length;		this.data.insertRange($, _);		this.doUpdate()	},	addItem : function (_, $) {		if (!_)			return;		if (this.data.indexOf(_) != -1)			return;		if (mini.isNull($))			$ = this.data.length;		this.data.insert($, _);		this.doUpdate()	},	removeItems : function ($) {		if (!mini.isArray($))			return;		this.data.removeRange($);		this._checkSelecteds();		this.doUpdate()	},	removeItem : function (_) {		var $ = this.data.indexOf(_);		if ($ != -1) {			this.data.removeAt($);			this._checkSelecteds();			this.doUpdate()		}	},	moveItem : function (_, $) {		if (!_ || !mini.isNumber($))			return;		if ($ < 0)			$ = 0;		if ($ > this.data.length)			$ = this.data.length;		this.data.remove(_);		this.data.insert($, _);		this.doUpdate()	},	_OnDrawCell : function (_, $, B) {		var A = B ? _[B.field] : this.getItemText(_),		C = {			index : $,			record : _,			item : _,			column : B,			field : B ? B.field : null,			value : A,			cellHtml : A,			rowCls : null,			cellCls : B ? (B.cellCls || "") : "",			rowStyle : null,			cellStyle : B ? (B.cellStyle || "") : ""		};		this.fire("drawcell", C);		if (C.cellHtml === null || C.cellHtml === undefined || C.cellHtml === "")			C.cellHtml = "&nbsp;";		return C	},	__OnScroll : function ($) {		this.headerEl.scrollLeft = this.viewEl.scrollLeft	},	__OnClick : function (C) {		var A = this.uid + "$ck$all";		if (C.target.id == A) {			var _ = document.getElementById(A);			if (_) {				var B = _.checked,				$ = this.getValue();				this._CanFireSelectionChanged = true;				if (B)					this.selectAll();				else					this.deselectAll();				this._CanFireSelectionChanged = false;				if ($ != this.getValue()) {					this._OnValueChanged();					this.fire("itemclick", {						htmlEvent : C					})				}			}			return		}		this._fireEvent(C, "Click")	},	getAttrs : function (_) {		var E = mini.ListBox.superclass.getAttrs.call(this, _);		mini._ParseBool(_, E, ["showCheckBox", "showAllCheckBox", "showNullItem"]);		if (_.nodeName.toLowerCase() != "select") {			var C = mini.getChildNodes(_);			for (var $ = 0, D = C.length; $ < D; $++) {				var B = C[$],				A = jQuery(B).attr("property");				if (!A)					continue;				A = A.toLowerCase();				if (A == "columns")					E.columns = mini._ParseColumns(B);				else if (A == "data")					E.data = B.innerHTML			}		}		return E	}});mini.regClass(mini.ListBox, "listbox");mini.CheckBoxList = function () {	mini.CheckBoxList.superclass.constructor.call(this)};mini.extend(mini.CheckBoxList, mini.ListControl, {	formField : true,	multiSelect : true,	repeatItems : 0,	repeatLayout : "none",	repeatDirection : "horizontal",	itemCls : "mini-checkboxlist-item",	itemHoverCls : "mini-checkboxlist-item-hover",	itemSelectedCls : "mini-checkboxlist-item-selected",	tableCls : "mini-checkboxlist-table",	tdCls : "mini-checkboxlist-td",	_checkType : "checkbox",	uiCls : "mini-checkboxlist",	_create : function () {		var $ = this.el = document.createElement("div");		this.el.className = this.uiCls;		this.el.innerHTML = "<div class=\"mini-list-inner\"></div><div class=\"mini-list-errorIcon\"></div><input type=\"hidden\" />";		this.innerEl = this.el.firstChild;		this.valueEl = this.el.lastChild;		this.errorIconEl = this.el.childNodes[1]	},	getRepeatTable : function () {		var B = [];		if (this.repeatItems > 0) {			if (this.repeatDirection == "horizontal") {				var D = [];				for (var C = 0, E = this.data.length; C < E; C++) {					var A = this.data[C];					if (D.length == this.repeatItems) {						B.push(D);						D = []					}					D.push(A)				}				B.push(D)			} else {				var _ = this.repeatItems > this.data.length ? this.data.length : this.repeatItems;				for (C = 0, E = _; C < E; C++)					B.push([]);				for (C = 0, E = this.data.length; C < E; C++) {					var A = this.data[C],					$ = C % this.repeatItems;					B[$].push(A)				}			}		} else			B = [this.data.clone()];		return B	},	doUpdate : function () {		var D = this.data,		G = "";		for (var A = 0, F = D.length; A < F; A++) {			var _ = D[A];			_._i = A		}		if (this.repeatLayout == "flow") {			var $ = this.getRepeatTable();			for (A = 0, F = $.length; A < F; A++) {				var C = $[A];				for (var E = 0, B = C.length; E < B; E++) {					_ = C[E];					G += this._createItemHtml(_, _._i)				}				if (A != F - 1)					G += "<br/>"			}		} else if (this.repeatLayout == "table") {			$ = this.getRepeatTable();			G += "<table class=\"" + this.tableCls + "\" cellpadding=\"0\" cellspacing=\"1\">";			for (A = 0, F = $.length; A < F; A++) {				C = $[A];				G += "<tr>";				for (E = 0, B = C.length; E < B; E++) {					_ = C[E];					G += "<td class=\"" + this.tdCls + "\">";					G += this._createItemHtml(_, _._i);					G += "</td>"				}				G += "</tr>"			}			G += "</table>"		} else			for (A = 0, F = D.length; A < F; A++) {				_ = D[A];				G += this._createItemHtml(_, A)			}		this.innerEl.innerHTML = G;		for (A = 0, F = D.length; A < F; A++) {			_ = D[A];			delete _._i		}	},	_createItemHtml : function (_, $) {		var F = this._OnDrawItem(_, $),		E = this._createItemId($),		A = this._createCheckId($),		C = this.getItemValue(_),		B = "",		D = "<div id=\"" + E + "\" index=\"" + $ + "\" class=\"" + this.itemCls + " ";		if (_.enabled === false) {			D += " mini-disabled ";			B = "disabled"		}		D += F.itemCls + "\" style=\"" + F.itemStyle + "\"><input " + B + " value=\"" + C + "\" id=\"" + A + "\" type=\"" + this._checkType + "\"/><label for=\"" + A + "\" onclick=\"return false;\">";		D += F.itemHtml + "</label></div>";		return D	},	_OnDrawItem : function (_, $) {		var A = this.getItemText(_),		B = {			index : $,			item : _,			itemHtml : A,			itemCls : "",			itemStyle : ""		};		this.fire("drawitem", B);		if (B.itemHtml === null || B.itemHtml === undefined)			B.itemHtml = "";		return B	},	setRepeatItems : function ($) {		$ = parseInt($);		if (isNaN($))			$ = 0;		if (this.repeatItems != $) {			this.repeatItems = $;			this.doUpdate()		}	},	setRepeatLayout : function ($) {		if ($ != "flow" && $ != "table")			$ = "none";		if (this.repeatLayout != $) {			this.repeatLayout = $;			this.doUpdate()		}	},	setRepeatDirection : function ($) {		if ($ != "vertical")			$ = "horizontal";		if (this.repeatDirection != $) {			this.repeatDirection = $;			this.doUpdate()		}	},	getAttrs : function (_) {		var D = mini.CheckBoxList.superclass.getAttrs.call(this, _),		C = jQuery(_),		$ = parseInt(C.attr("repeatItems"));		if (!isNaN($))			D.repeatItems = $;		var B = C.attr("repeatLayout");		if (B)			D.repeatLayout = B;		var A = C.attr("repeatDirection");		if (A)			D.repeatDirection = A;		return D	}});mini.regClass(mini.CheckBoxList, "checkboxlist");mini.RadioButtonList = function () {	mini.RadioButtonList.superclass.constructor.call(this)};mini.extend(mini.RadioButtonList, mini.CheckBoxList, {	multiSelect : false,	itemCls : "mini-radiobuttonlist-item",	itemHoverCls : "mini-radiobuttonlist-item-hover",	itemSelectedCls : "mini-radiobuttonlist-item-selected",	tableCls : "mini-radiobuttonlist-table",	tdCls : "mini-radiobuttonlist-td",	_checkType : "radio",	uiCls : "mini-radiobuttonlist"});mini.regClass(mini.RadioButtonList, "radiobuttonlist");mini.TreeSelect = function () {	this.data = [];	mini.TreeSelect.superclass.constructor.call(this)};mini.extend(mini.TreeSelect, mini.PopupEdit, {	text : "",	value : "",	valueField : "id",	textField : "text",	delimiter : ",",	multiSelect : false,	data : [],	url : "",	allowInput : false,	popupMaxHeight : 250,	popupMinWidth : 200,	set : function (A) {		if (typeof A == "string")			return this;		var $ = A.value;		delete A.value;		var B = A.url;		delete A.url;		var _ = A.data;		delete A.data;		mini.TreeSelect.superclass.set.call(this, A);		if (!mini.isNull(_))			this.setData(_);		if (!mini.isNull(B))			this.setUrl(B);		if (!mini.isNull($))			this.setValue($);		return this	},	uiCls : "mini-treeselect",	_createPopup : function () {		mini.TreeSelect.superclass._createPopup.call(this);		this.tree = new mini.Tree();		this.tree.setShowTreeIcon(true);		this.tree.setStyle("border:0;width:100%;height:100%;");		this.tree.render(this.popup.contentEl);		this.tree.on("nodeclick", this.__OnNodeClick, this);		this.tree.on("nodecheck", this.__OnCheckedChanged, this);		this.tree.on("expand", this.__OnTreeExpand, this);		this.tree.on("collapse", this.__OnTreeCollapse, this);		this.tree.allowAnim = false	},	__OnTreeExpand : function ($) {		this.showPopup()	},	__OnTreeCollapse : function ($) {		this.showPopup()	},	showPopup : function () {		this.tree.setHeight("auto");		mini.TreeSelect.superclass.showPopup.call(this);		var $ = this.popup.el.style.height;		if ($ == "" || $ == "auto")			this.tree.setHeight("auto");		else			this.tree.setHeight("100%");		this.tree.setValue(this.value)	},	getItem : function ($) {		return typeof $ == "object" ? $ : this.data[$]	},	indexOf : function ($) {		return this.data.indexOf($)	},	getAt : function ($) {		return this.data[$]	},	load : function ($) {		this.tree.load($)	},	setData : function ($) {		this.tree.setData($);		this.data = this.tree.data	},	setUrl : function ($) {		this.getPopup();		this.tree.setUrl($);		this.url = this.tree.url	},	setValueField : function ($) {		if (this.tree)			this.tree.setIdField($);		this.valueField = $	},	setTextField : function ($) {		if (this.tree)			this.tree.setTextField($);		this.textField = $	},	setValue : function ($) {		if (this.value != $) {			var _ = this.tree.getValueAndText($);			this.value = _[0];			this.valueEl.value = this.value;			this.textEl.value = _[1];			this._doEmpty()		}	},	setMultiSelect : function ($) {		if (this.multiSelect != $) {			this.multiSelect = $;			this.tree.setShowCheckBox($);			this.tree.setAllowSelect(!$)		}	},	__OnNodeClick : function (B) {		if (this.multiSelect)			return;		var _ = this.tree.getSelectedNode(),		A = this.tree.getItemValue(_),		$ = this.getValue();		this.setValue(A);		if ($ != this.getValue())			this._OnValueChanged();		this.hidePopup()	},	__OnCheckedChanged : function (A) {		if (!this.multiSelect)			return;		var _ = this.tree.getValue(),		$ = this.getValue();		this.setValue(_);		if ($ != this.getValue())			this._OnValueChanged()	},	getAttrs : function ($) {		var _ = mini.ComboBox.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["url", "data", "textField", "valueField"]);		mini._ParseBool($, _, ["multiSelect"]);		return _	}});mini.regClass(mini.TreeSelect, "TreeSelect");mini.Spinner = function () {	mini.Spinner.superclass.constructor.call(this);	this.setValue(this.minValue)};mini.extend(mini.Spinner, mini.ButtonEdit, {	value : 0,	minValue : 0,	maxValue : 100,	increment : 1,	decimalPlaces : 0,	set : function (_) {		if (typeof _ == "string")			return this;		var $ = _.value;		delete _.value;		mini.Spinner.superclass.set.call(this, _);		if (!mini.isNull($))			this.setValue($);		return this	},	uiCls : "mini-spinner",	_initButtons : function () {		this.buttons = [];		var $ = this.createButton({				type : "spin",				cls : "mini-buttonedit-spinButton"			});		this.buttons.push($)	},	_initEvents : function () {		mini.Spinner.superclass._initEvents.call(this);		mini._BindEvents(function () {			this.on("buttonmousedown", this.__OnButtonMouseDown, this);			mini.on(this.el, "mousewheel", this.__OnMousewheel, this);			mini.on(this.textEl, "keydown", this.__OnKeyDown, this)		}, this)	},	_ValueLimit : function () {		if (this.minValue > this.maxValue)			this.maxValue = this.minValue + 100;		if (this.value < this.minValue)			this.setValue(this.minValue);		if (this.value > this.maxValue)			this.setValue(this.maxValue)	},	setValue : function ($) {		$ = parseFloat($);		if (isNaN($))			$ = this.minValue;		$ = parseFloat($.toFixed(this.decimalPlaces));		if (this.value != $) {			this.value = $;			this._ValueLimit();			this.textEl.value = this.valueEl.value = this.getFormValue()		} else			this.textEl.value = this.getFormValue()	},	setMaxValue : function ($) {		$ = parseFloat($);		if (isNaN($))			return;		$ = parseFloat($.toFixed(this.decimalPlaces));		if (this.maxValue != $) {			this.maxValue = $;			this._ValueLimit()		}	},	setMinValue : function ($) {		$ = parseFloat($);		if (isNaN($))			return;		$ = parseFloat($.toFixed(this.decimalPlaces));		if (this.minValue != $) {			this.minValue = $;			this._ValueLimit()		}	},	setIncrement : function ($) {		$ = parseFloat($);		if (isNaN($))			return;		if (this.increment != $)			this.increment = $	},	setDecimalPlaces : function ($) {		$ = parseInt($);		if (isNaN($) || $ < 0)			return;		this.decimalPlaces = $	},	_SpinTimer : null,	_StartSpin : function (D, B, C) {		this._StopSpin();		this.setValue(this.value + D);		this._OnValueChanged();		var A = this,		_ = C,		$ = new Date();		this._SpinTimer = setInterval(function () {				A.setValue(A.value + D);				A._OnValueChanged();				C--;				if (C == 0 && B > 50)					A._StartSpin(D, B - 100, _ + 3);				var E = new Date();				if (E - $ > 500)					A._StopSpin();				$ = E			}, B);		mini.on(document, "mouseup", this._OnDocumentMouseUp, this)	},	_StopSpin : function () {		clearInterval(this._SpinTimer);		this._SpinTimer = null	},	__OnButtonMouseDown : function ($) {		this._DownValue = this.getFormValue();		if ($.spinType == "up")			this._StartSpin(this.increment, 230, 2);		else			this._StartSpin(-this.increment, 230, 2)	},	__OnKeyDown : function (_) {		var $ = mini.Keyboard;		switch (_.keyCode) {		case $.Top:			this.setValue(this.value + this.increment);			this._OnValueChanged();			break;		case $.Bottom:			this.setValue(this.value - this.increment);			this._OnValueChanged();			break		}	},	__OnMousewheel : function (A) {		var $ = A.wheelDelta;		if (mini.isNull($))			$ = -A.detail * 24;		var _ = this.increment;		if ($ < 0)			_ = -_;		this.setValue(this.value + _);		this._OnValueChanged();		return false	},	_OnDocumentMouseUp : function ($) {		this._StopSpin();		mini.un(document, "mouseup", this._OnDocumentMouseUp, this);		if (this._DownValue != this.getFormValue())			this._OnValueChanged()	},	__OnInputTextChanged : function (A) {		var _ = this.getValue(),		$ = parseFloat(this.textEl.value);		this.setValue($);		if (_ != this.getValue())			this._OnValueChanged()	},	getAttrs : function ($) {		var _ = mini.Spinner.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["minValue", "maxValue", "increment", "decimalPlaces"]);		return _	}});mini.regClass(mini.Spinner, "spinner");mini.TimeSpinner = function () {	mini.TimeSpinner.superclass.constructor.call(this);	this.setValue("00:00:00")};mini.extend(mini.TimeSpinner, mini.ButtonEdit, {	value : null,	format : "H:mm:ss",	uiCls : "mini-timespinner",	_initButtons : function () {		this.buttons = [];		var $ = this.createButton({				type : "spin",				cls : "mini-buttonedit-spinButton"			});		this.buttons.push($)	},	_initEvents : function () {		mini.TimeSpinner.superclass._initEvents.call(this);		mini._BindEvents(function () {			this.on("buttonmousedown", this.__OnButtonMouseDown, this);			mini.on(this.el, "mousewheel", this.__OnMousewheel, this);			mini.on(this.textEl, "keydown", this.__OnKeyDown, this)		}, this)	},	setFormat : function ($) {		if (typeof $ != "string")			return;		var _ = ["H:mm:ss", "HH:mm:ss", "H:mm", "HH:mm", "H", "HH", "mm:ss"];		if (_.indexOf($) == -1)			return;		if (this.format != $) {			this.format = $;			this.textEl.value = this.getFormattedValue()		}	},	setValue : function ($) {		$ = mini.parseTime($, this.format);		if (!$)			$ = mini.parseTime("00:00:00", this.format);		if (mini.isDate($))			$ = new Date($.getTime());		if (mini.formatDate(this.value, "H:mm:ss") != mini.formatDate($, "H:mm:ss")) {			this.value = $;			this.textEl.value = this.getFormattedValue();			this.valueEl.value = this.getFormValue()		}	},	getValue : function () {		return this.value == null ? null : new Date(this.value.getTime())	},	getFormValue : function () {		if (!this.value)			return "";		return mini.formatDate(this.value, "H:mm:ss")	},	getFormattedValue : function () {		if (!this.value)			return "";		return mini.formatDate(this.value, this.format)	},	_ChangeValue : function (D, C) {		var $ = this.getValue();		if ($)			switch (C) {			case "hours":				var A = $.getHours() + D;				if (A > 23)					A = 23;				if (A < 0)					A = 0;				$.setHours(A);				break;			case "minutes":				var B = $.getMinutes() + D;				if (B > 59)					B = 59;				if (B < 0)					B = 0;				$.setMinutes(B);				break;			case "seconds":				var _ = $.getSeconds() + D;				if (_ > 59)					_ = 59;				if (_ < 0)					_ = 0;				$.setSeconds(_);				break			}		else			$ = "00:00:00";		this.setValue($)	},	_SpinTimer : null,	_StartSpin : function (D, B, C) {		this._StopSpin();		this._ChangeValue(D, this._timeType);		var A = this,		_ = C,		$ = new Date();		this._SpinTimer = setInterval(function () {				A._ChangeValue(D, A._timeType);				C--;				if (C == 0 && B > 50)					A._StartSpin(D, B - 100, _ + 3);				var E = new Date();				if (E - $ > 500)					A._StopSpin();				$ = E			}, B);		mini.on(document, "mouseup", this._OnDocumentMouseUp, this)	},	_StopSpin : function () {		clearInterval(this._SpinTimer);		this._SpinTimer = null	},	__OnButtonMouseDown : function ($) {		this._DownValue = this.getFormValue();		this._timeType = "hours";		if ($.spinType == "up")			this._StartSpin(1, 230, 2);		else			this._StartSpin(-1, 230, 2)	},	_OnDocumentMouseUp : function ($) {		this._StopSpin();		mini.un(document, "mouseup", this._OnDocumentMouseUp, this);		if (this._DownValue != this.getFormValue())			this._OnValueChanged()	},	__OnInputTextChanged : function (_) {		var $ = this.getFormValue();		this.setValue(this.textEl.value);		if ($ != this.getFormValue())			this._OnValueChanged()	},	getAttrs : function ($) {		var _ = mini.TimeSpinner.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["format"]);		return _	}});mini.regClass(mini.TimeSpinner, "timespinner");mini.HtmlFile = function () {	mini.HtmlFile.superclass.constructor.call(this);	this.on("validation", this.__OnValidation, this)};mini.extend(mini.HtmlFile, mini.ButtonEdit, {	width : 180,	buttonText : "\u6d4f\u89c8...",	limitType : "",	limitTypeErrorText : "\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f\u4e3a\uff1a",	readOnly : true,	_cellSpacing : 0,	uiCls : "mini-htmlfile",	_create : function () {		mini.HtmlFile.superclass._create.call(this);		this.fileEl = mini.append(this.el, "<input type=\"file\" hideFocus class=\"mini-htmlfile-file\" name=\"" + this.name + "\" ContentEditable=false/>");		mini.on(this.innerEl, "mousemove", this.__OnMouseMove, this);		mini.on(this.fileEl, "change", this.__OnFileChange, this)	},	__OnFileChange : function ($) {		this.value = this.textEl.value = this.fileEl.value;		this._OnValueChanged()	},	__OnMouseMove : function (B) {		var A = B.pageX,		_ = B.pageY,		$ = mini.getBox(this.el);		this.fileEl.style.left = (A - $.x - 5) + "px";		this.fileEl.style.top = (_ - $.y - 5) + "px"	},	__OnValidation : function (B) {		var A = B.value.split("."),		$ = "*." + A[A.length - 1],		_ = this.limitType.split(";");		if (_.length > 0 && _.indexOf($) == -1) {			B.errorText = this.limitTypeErrorText + this.limitType;			B.isValid = false		}	},	setName : function ($) {		this.name = $;		mini.setAttr(this.fileEl, "name", this.name)	},	getValue : function () {		return this.textEl.value	},	_initButtons : function () {		this.buttons = [];		var $ = this.createButton();		$.html = this.buttonText;		this.buttons.push($)	},	getAttrs : function ($) {		var _ = mini.HtmlFile.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["limitType"]);		return _	}});mini.regClass(mini.HtmlFile, "htmlfile");mini.FileUpload = function ($) {	mini.FileUpload.superclass.constructor.call(this, $);	this.on("validation", this.__OnValidation, this)};mini.extend(mini.FileUpload, mini.ButtonEdit, {	width : 180,	buttonText : "\u6d4f\u89c8...",	limitTypeErrorText : "\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f\u4e3a\uff1a",	readOnly : true,	_cellSpacing : 0,	limitSize : "",	limitType : "",	typesDescription : "\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f",	uploadLimit : 0,	queueLimit : "",	flashUrl : "",	uploadUrl : "",	uploadOnSelect : false,	uiCls : "mini-fileupload",	_create : function () {		mini.FileUpload.superclass._create.call(this);		mini.addClass(this.el, "mini-htmlfile");		this.fileEl = mini.append(this.el, "<div></div>");		this.uploadEl = this.fileEl;		mini.on(this.innerEl, "mousemove", this.__OnMouseMove, this)	},	destroy : function () {		if (this.innerEl) {			mini.clearEvent(this.innerEl);			jQuery(this.innerEl).remove();			this.innerEl = null		}		mini.FileUpload.superclass.destroy.call(this)	},	_initButtons : function () {		this.buttons = [];		var $ = this.createButton();		$.html = this.buttonText;		this.buttons.push($)	},	__OnMouseMove : function (A) {		var $ = this;		if (!this.swfUpload) {			var B = new SWFUpload({					file_post_name : this.name,					upload_url : $.uploadUrl,					flash_url : $.flashUrl,					file_size_limit : $.limitSize,					file_types : $.limitType,					file_types_description : $.typesDescription,					file_upload_limit : parseInt($.uploadLimit),					file_queue_limit : $.queueLimit,					file_queued_handler : mini.createDelegate(this.__on_file_queued, this),					upload_error_handler : mini.createDelegate(this.__on_upload_error, this),					upload_success_handler : mini.createDelegate(this.__on_upload_success, this),					upload_complete_handler : mini.createDelegate(this.__on_upload_complete, this),					button_placeholder : $.uploadEl,					button_width : 20,					button_height : 20,					button_window_mode : "transparent",					debug : false				});			B.flashReady();			this.swfUpload = B		} else {			A = A || window.event;			var _ = A.clientY,			C = A.clientX;			this.swfUpload.movieElement.style.left = C - 17 + "px";			this.swfUpload.movieElement.style.top = _ - 17 + "px"		}	},	setLimitSize : function ($) {		this.limitSize = $	},	setLimitType : function ($) {		this.limitType = $	},	setTypesDescription : function ($) {		this.typesDescription = $	},	setUploadLimit : function ($) {		this.uploadLimit = $	},	setQueueLimit : function ($) {		this.queueLimit = $	},	setFlashUrl : function ($) {		this.flashUrl = $	},	setUploadUrl : function ($) {		this.uploadUrl = $	},	setName : function ($) {		this.name = $	},	startUpload : function ($) {		this.swfUpload.startUpload()	},	__on_file_queued : function ($) {		if (this.uploadOnSelect)			this.swfUpload.startUpload();		this.setText($.name)	},	__on_upload_success : function (_, $) {		var A = {			file : _,			serverData : $		};		this.fire("uploadsuccess", A)	},	__on_upload_error : function ($) {		var _ = {			file : $,			fileName : fileName		};		this.fire("uploaderror", _)	},	__on_upload_complete : function ($) {		this.fire("uploadcomplete", $)	},	__fileError : function () {},	getAttrs : function ($) {		var _ = mini.FileUpload.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["limitType", "limitSize", "flashUrl", "uploadUrl", "uploadLimit", "onuploadsuccess", "onuploaderror", "onuploadcomplete"]);		mini._ParseBool($, _, ["uploadOnSelect"]);		return _	}});mini.regClass(mini.FileUpload, "fileupload");mini.Lookup = function () {	this.data = [];	mini.Lookup.superclass.constructor.call(this);	mini.on(this.textEl, "mouseup", this.__OnMouseUp, this)};mini.extend(mini.Lookup, mini.PopupEdit, {	allowInput : true,	valueField : "id",	textField : "text",	delimiter : ",",	multiSelect : false,	data : [],	grid : null,	uiCls : "mini-lookup",	setMultiSelect : function ($) {		this.multiSelect = $;		if (this.grid)			this.grid.setMultiSelect($)	},	setGrid : function ($) {		if (typeof $ == "string") {			mini.parse($);			$ = mini.get($)		}		this.grid = mini.getAndCreate($);		if (this.grid) {			this.grid.setMultiSelect(this.multiSelect);			this.grid.setCheckSelectOnLoad(false);			this.grid.on("selectionchanged", this.__OnGridSelectionChanged, this);			this.grid.on("load", this.__OnGridLoad, this)		}	},	setValueField : function ($) {		this.valueField = $	},	setTextField : function ($) {		this.textField = $	},	getItemValue : function ($) {		return String($[this.valueField])	},	getItemText : function ($) {		var _ = $[this.textField];		return mini.isNull(_) ? "" : String(_)	},	getValueAndText : function (A) {		if (mini.isNull(A))			A = [];		var B = [],		C = [];		for (var _ = 0, D = A.length; _ < D; _++) {			var $ = A[_];			if ($) {				B.push(this.getItemValue($));				C.push(this.getItemText($))			}		}		return [B.join(this.delimiter), C.join(this.delimiter)]	},	_getValueMaps : function (A) {		var D = {};		for (var $ = 0, B = A.length; $ < B; $++) {			var _ = A[$],			C = _[this.valueField];			D[C] = _		}		return D	},	__OnGridSelectionChanged : function (G) {		var B = this._getValueMaps(this.grid.getData()),		C = this._getValueMaps(this.grid.getSelecteds()),		F = this._getValueMaps(this.data);		if (this.multiSelect == false) {			F = {};			this.data = []		}		var A = {};		for (var E in F) {			var $ = F[E];			if (B[E])				if (C[E]);				else					A[E] = $		}		for (var _ = this.data.length - 1; _ >= 0; _--) {			$ = this.data[_],			E = $[this.valueField];			if (A[E])				this.data.removeAt(_)		}		for (E in C) {			$ = C[E];			if (!F[E])				this.data.push($)		}		var D = this.getValueAndText(this.data);		this.setValue(D[0]);		this.setText(D[1]);		this._OnValueChanged()	},	__OnGridLoad : function (F) {		var E = this.value.split(this.delimiter),		A = this.grid.getData(),		E = this._getValueMaps(this.data),		B = [];		for (var $ = 0, C = A.length; $ < C; $++) {			var _ = A[$],			D = _[this.valueField];			if (E[D])				B.push(_)		}		this.grid.selects(B)	},	doUpdate : function () {		mini.Lookup.superclass.doUpdate.call(this);		this.textEl.readOnly = true;		this.el.style.cursor = "default"	},	__OnInputKeyDown : function ($) {		mini.Lookup.superclass.__OnInputKeyDown.call(this, $);		$.preventDefault();		switch ($.keyCode) {		case 46:		case 8:			break;		case 37:			break;		case 39:			break		}	},	__OnMouseUp : function (C) {		if (this.isReadOnly())			return;		var _ = mini.getSelectRange(this.textEl),		A = _[0],		B = _[1],		$ = this._findTextIndex(A)	},	_findTextIndex : function (E) {		var _ = -1;		if (this.text == "")			return _;		var C = this.text.split(this.delimiter),		$ = 0;		for (var A = 0, D = C.length; A < D; A++) {			var B = C[A];			if ($ < E && E <= $ + B.length) {				_ = A;				break			}			$ = $ + B.length + 1		}		return _	},	getAttrs : function ($) {		var _ = mini.Lookup.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["grid", "valueField", "textField"]);		mini._ParseBool($, _, ["multiSelect"]);		return _	}});mini.regClass(mini.Lookup, "lookup");mini.TextBoxList = function () {	mini.TextBoxList.superclass.constructor.call(this);	this.data = [];	this.doUpdate()};mini.extend(mini.TextBoxList, mini.ValidatorBase, {	value : "",	text : "",	valueField : "id",	textField : "text",	url : "",	delay : 250,	allowInput : true,	editIndex : 0,	focusCls : "mini-textboxlist-focus",	itemHoverClass : "mini-textboxlist-item-hover",	itemSelectedClass : "mini-textboxlist-item-selected",	closeHoverClass : "mini-textboxlist-close-hover",	uiCls : "mini-textboxlist",	_create : function () {		this.el = document.createElement("table");		this.el.className = "mini-textboxlist";		this.el.cellPadding = "0";		this.el.cellSpacing = "0";		var _ = "<tr ><td class=\"mini-textboxlist-border\"><ul></ul><a href=\"#\"></a><input type=\"hidden\"/></td></tr>";		mini.append(this.el, _);		var $ = this.el.rows[0].cells[0];		this.ulEl = $.firstChild;		this.valueEl = $.lastChild;		this.focusEl = $.childNodes[1]	},	_initEvents : function () {		mini.TextBoxList.superclass._initEvents.call(this);		mini.on(this.el, "mousemove", this.__OnMouseMove, this);		mini.on(this.el, "mouseout", this.__OnMouseOut, this);		mini.on(this.el, "mousedown", this.__OnMouseDown, this);		mini.on(this.el, "click", this.__OnClick, this);		mini.on(this.el, "keydown", this.__OnKeyDown, this);		mini.on(document, "mousedown", function ($) {			if (this.isShowPopup)				if (!mini.isAncestor(this.popup.el, $.target))					this.hidePopup();			if (this.focused)				if (this.within($) == false) {					this.select(null, false);					this.showInput(false);					this.removeCls(this.focusCls);					this.focused = false				}		}, this)	},	errorIconEl : null,	getErrorIconEl : function () {		if (!this.errorIconEl) {			var _ = this.el.rows[0],			$ = _.insertCell(1);			$.style.cssText = "width:18px;vertical-align:top;";			$.innerHTML = "<div class=\"mini-errorIcon\"></div>";			this.errorIconEl = $.firstChild		}		return this.errorIconEl	},	_RemoveErrorIcon : function () {		if (this.errorIconEl)			jQuery(this.errorIconEl.parentNode).remove();		this.errorIconEl = null	},	doLayout : function () {		if (this.canLayout() == false)			return;		mini.TextBoxList.superclass.doLayout.call(this);		if (this.isReadOnly() || this.allowInput == false)			this.inputEl.readOnly = true;		else			this.inputEl.readOnly = false	},	doUpdate : function () {		if (this._ValueChangeTimer)			clearInterval(this._ValueChangeTimer);		if (this.inputEl)			mini.un(this.inputEl, "keydown", this.__OnInputKeyDown, this);		var G = [],		F = this.uid;		for (var A = 0, E = this.data.length; A < E; A++) {			var _ = this.data[A],			C = F + "$text$" + A,			B = _[this.textField];			if (mini.isNull(B))				B = "";			G[G.length] = "<li id=\"" + C + "\" class=\"mini-textboxlist-item\">";			G[G.length] = B;			G[G.length] = "<span class=\"mini-textboxlist-close\"></span></li>"		}		var $ = F + "$input";		G[G.length] = "<li id=\"" + $ + "\" class=\"mini-textboxlist-inputLi\"><input class=\"mini-textboxlist-input\" type=\"text\" autocomplete=\"off\"></li>";		this.ulEl.innerHTML = G.join("");		this.editIndex = this.data.length;		if (this.editIndex < 0)			this.editIndex = 0;		this.inputLi = this.ulEl.lastChild;		this.inputEl = this.inputLi.firstChild;		mini.on(this.inputEl, "keydown", this.__OnInputKeyDown, this);		var D = this;		this.inputEl.onkeyup = function () {			D._syncInputSize()		};		D._ValueChangeTimer = null;		D._LastInputText = D.inputEl.value;		this.inputEl.onfocus = function () {			D._ValueChangeTimer = setInterval(function () {					if (D._LastInputText != D.inputEl.value) {						D._startQuery();						D._LastInputText = D.inputEl.value					}				}, 10);			D.addCls(D.focusCls);			D.focused = true		};		this.inputEl.onblur = function () {			clearInterval(D._ValueChangeTimer)		}	},	getItemByEvent : function (_) {		var A = mini.findParent(_.target, "mini-textboxlist-item");		if (A) {			var $ = A.id.split("$"),			B = $[$.length - 1];			return this.data[B]		}	},	getItem : function ($) {		if (typeof $ == "number")			return this.data[$];		if (typeof $ == "object")			return $	},	getItemEl : function (_) {		var $ = this.data.indexOf(_),		A = this.uid + "$text$" + $;		return document.getElementById(A)	},	hoverItem : function ($, A) {		this.blurItem();		var _ = this.getItemEl($);		mini.addClass(_, this.itemHoverClass);		if (A && mini.hasClass(A.target, "mini-textboxlist-close"))			mini.addClass(A.target, this.closeHoverClass)	},	blurItem : function () {		var _ = this.data.length;		for (var A = 0, C = _; A < C; A++) {			var $ = this.data[A],			B = this.getItemEl($);			if (B) {				mini.removeClass(B, this.itemHoverClass);				mini.removeClass(B.lastChild, this.closeHoverClass)			}		}	},	showInput : function (A) {		this.select(null);		if (mini.isNumber(A))			this.editIndex = A;		else			this.editIndex = this.data.length;		if (this.editIndex < 0)			this.editIndex = 0;		if (this.editIndex > this.data.length)			this.editIndex = this.data.length;		var B = this.inputLi;		B.style.display = "block";		if (mini.isNumber(A) && A < this.data.length) {			var _ = this.data[A],			$ = this.getItemEl(_);			jQuery($).before(B)		} else			this.ulEl.appendChild(B);		if (A !== false)			setTimeout(function () {				try {					B.firstChild.focus();					mini.selectRange(B.firstChild, 100)				} catch ($) {}							}, 10);		else {			this.lastInputText = "";			this.inputEl.value = ""		}		return B	},	select : function (_) {		_ = this.getItem(_);		if (this.selected) {			var $ = this.getItemEl(this.selected);			mini.removeClass($, this.itemSelectedClass)		}		this.selected = _;		if (this.selected) {			$ = this.getItemEl(this.selected);			mini.addClass($, this.itemSelectedClass)		}		var A = this;		if (this.selected)			this.focusEl.focus();		if (this.selected) {			A.addCls(A.focusCls);			A.focused = true		}	},	_doInsertSelectValue : function () {		var _ = this.listbox.getSelected(),		$ = this.editIndex;		if (_) {			_ = mini.clone(_);			this.insertItem($, _)		}	},	insertItem : function (_, $) {		this.data.insert(_, $);		var B = this.getText(),		A = this.getValue();		this.setValue(A, false);		this.setText(B, false);		this._createData();		this.doUpdate();		this.showInput(_ + 1);		this._OnValueChanged()	},	removeItem : function (_) {		if (!_)			return;		var $ = this.getItemEl(_);		mini.removeNode($);		this.data.remove(_);		var B = this.getText(),		A = this.getValue();		this.setValue(A, false);		this.setText(B, false);		this._OnValueChanged()	},	_createData : function () {		var C = (this.text ? this.text : "").split(","),		B = (this.value ? this.value : "").split(",");		if (B[0] == "")			B = [];		var _ = B.length;		this.data.length = _;		for (var A = 0, D = _; A < D; A++) {			var $ = this.data[A];			if (!$) {				$ = {};				this.data[A] = $			}			$[this.textField] = !mini.isNull(C[A]) ? C[A] : "";			$[this.valueField] = !mini.isNull(B[A]) ? B[A] : ""		}		this.value = this.getValue();		this.text = this.getText()	},	getInputText : function () {		return this.inputEl ? this.inputEl.value : ""	},	getText : function () {		var C = [];		for (var _ = 0, A = this.data.length; _ < A; _++) {			var $ = this.data[_],			B = $[this.textField];			if (mini.isNull(B))				B = "";			B = B.replace(",", "\uff0c");			C.push(B)		}		return C.join(",")	},	getValue : function () {		var B = [];		for (var _ = 0, A = this.data.length; _ < A; _++) {			var $ = this.data[_];			B.push($[this.valueField])		}		return B.join(",")	},	setName : function ($) {		if (this.name != $) {			this.name = $;			this.valueEl.name = $		}	},	setValue : function ($) {		if (mini.isNull($))			$ = "";		if (this.value != $) {			this.value = $;			this.valueEl.value = $;			this._createData();			this.doUpdate()		}	},	setText : function ($) {		if (mini.isNull($))			$ = "";		if (this.text !== $) {			this.text = $;			this._createData();			this.doUpdate()		}	},	setValueField : function ($) {		this.valueField = $	},	setTextField : function ($) {		this.textField = $	},	setAllowInput : function ($) {		this.allowInput = $;		this.doLayout()	},	setUrl : function ($) {		this.url = $	},	setPopupHeight : function ($) {		this.popupHeight = $	},	setPopupMinHeight : function ($) {		this.popupMinHeight = $	},	setPopupMaxHeight : function ($) {		this.popupMaxHeight = $	},	_syncInputSize : function () {		var _ = this.getInputText(),		B = mini.measureText(this.inputEl, _),		$ = B.width > 20 ? B.width + 4 : 20,		A = mini.getWidth(this.el, true);		if ($ > A - 15)			$ = A - 15;		this.inputEl.style.width = $ + "px"	},	_startQuery : function (_) {		var $ = this;		setTimeout(function () {			$._syncInputSize()		}, 1);		this.showPopup("loading");		this._stopQuery();		this.delayTimer = setTimeout(function () {				var _ = $.inputEl.value;				$._doQuery()			}, this.delay)	},	_doQuery : function () {		var _ = this.getInputText(),		A = this,		$ = this.listbox.getData(),		B = {			key : _,			value : this.getValue(),			text : this.getText()		},		C = this.url,		E = typeof C == "function" ? C : window[C];		if (typeof E == "function")			C = E(this);		var D = {			url : C,			async : true,			data : B,			type : "GET",			cache : false,			dataType : "text",			cancel : false		};		this.fire("beforeload", D);		if (D.cancel)			return;		mini.copyTo(D, {			success : function ($) {				var _ = mini.decode($);				A.listbox.setData(_);				A.showPopup();				A.listbox.focusItem(0, true);				A.fire("load")			},			error : function ($, B, _) {				A.showPopup("error")			}		});		A.ajaxer = jQuery.ajax(D)	},	_stopQuery : function () {		if (this.delayTimer) {			clearTimeout(this.delayTimer);			this.delayTimer = null		}		if (this.ajaxer)			this.ajaxer.abort()	},	within : function ($) {		if (mini.isAncestor(this.el, $.target))			return true;		if (this.showPopup && this.popup && this.popup.within($))			return true;		return false	},	popupLoadingText : "<span class='mini-textboxlist-popup-loading'>Loading...</span>",	popupErrorText : "<span class='mini-textboxlist-popup-error'>Error</span>",	popupEmptyText : "<span class='mini-textboxlist-popup-noresult'>No Result</span>",	isShowPopup : false,	popupHeight : "",	popupMinHeight : 30,	popupMaxHeight : 150,	_createPopup : function () {		if (!this.popup) {			this.popup = new mini.ListBox();			this.popup.addCls("mini-textboxlist-popup");			this.popup.setStyle("position:absolute;left:0;top:0;");			this.popup.showEmpty = true;			this.popup.setValueField(this.valueField);			this.popup.setTextField(this.textField);			this.popup.render(document.body);			this.popup.on("itemclick", function ($) {				this.hidePopup();				this._doInsertSelectValue()			}, this)		}		this.listbox = this.popup;		return this.popup	},	showPopup : function ($) {		this.isShowPopup = true;		var _ = this._createPopup();		_.el.style.zIndex = mini.Popup.maxZIndex();		this.listbox.emptyText = this.popupEmptyText;		if ($ == "loading") {			this.listbox.emptyText = this.popupLoadingText;			this.listbox.setData([])		} else if ($ == "error") {			this.listbox.emptyText = this.popupErrorText;			this.listbox.setData([])		}		this.listbox.doUpdate();		var A = this.getBox(),		C = A.x,		B = A.y + A.height;		this.popup.el.style.display = "block";		mini.setXY(_.el, -1000, -1000);		this.popup.setWidth(A.width);		this.popup.setHeight(this.popupHeight);		if (this.popup.getHeight() < this.popupMinHeight)			this.popup.setHeight(this.popupMinHeight);		if (this.popup.getHeight() > this.popupMaxHeight)			this.popup.setHeight(this.popupMaxHeight);		mini.setXY(_.el, C, B)	},	hidePopup : function () {		this.isShowPopup = false;		if (this.popup)			this.popup.el.style.display = "none"	},	__OnMouseMove : function (_) {		if (this.enabled == false)			return;		var $ = this.getItemByEvent(_);		if (!$) {			this.blurItem();			return		}		this.hoverItem($, _)	},	__OnMouseOut : function ($) {		this.blurItem()	},	__OnClick : function (_) {		if (this.enabled == false)			return;		if (this.isReadOnly() || this.allowInput == false)			return;		var $ = this.getItemByEvent(_);		if (!$) {			if (mini.findParent(_.target, "mini-textboxlist-input"));			else				this.showInput();			return		}		this.focusEl.focus();		this.select($);		if (_ && mini.hasClass(_.target, "mini-textboxlist-close"))			this.removeItem($)	},	__OnKeyDown : function (B) {		if (this.isReadOnly() || this.allowInput == false)			return false;		var $ = this.data.indexOf(this.selected),		_ = this;		function A() {			var A = _.data[$];			_.removeItem(A);			A = _.data[$];			if (!A)				A = _.data[$ - 1];			_.select(A);			if (!A)				_.showInput()		}		switch (B.keyCode) {		case 8:			B.preventDefault();			A();			break;		case 37:		case 38:			this.select(null);			this.showInput($);			break;		case 39:		case 40:			$ += 1;			this.select(null);			this.showInput($);			break;		case 46:			A();			break		}	},	__OnInputKeyDown : function (G) {		G.stopPropagation();		if (this.isReadOnly() || this.allowInput == false)			return;		var E = mini.getSelectRange(this.inputEl),		B = E[0],		D = E[1],		F = this.inputEl.value.length,		C = B == D && B == 0,		A = B == D && D == F;		if (this.isReadOnly() || this.allowInput == false)			G.preventDefault();		if (G.keyCode == 9) {			this.hidePopup();			return		}		if (G.keyCode == 16 || G.keyCode == 17 || G.keyCode == 18)			return;		switch (G.keyCode) {		case 13:			if (this.isShowPopup) {				G.preventDefault();				var _ = this.listbox.getFocusedItem();				if (_)					this.listbox.setSelected(_);				this.lastInputText = this.text;				this.hidePopup();				this._doInsertSelectValue()			}			break;		case 27:			G.preventDefault();			this.hidePopup();			break;		case 8:		case 37:			if (C)				if (this.isShowPopup)					this.hidePopup();				else if (this.editIndex > 0) {					var $ = this.editIndex - 1;					if ($ < 0)						$ = 0;					if ($ >= this.data.length)						$ = this.data.length - 1;					this.showInput(false);					this.select($)				}			break;		case 39:			if (A)				if (this.isShowPopup)					this.hidePopup();				else if (this.editIndex <= this.data.length - 1) {					$ = this.editIndex;					this.showInput(false);					this.select($)				}			break;		case 38:			G.preventDefault();			if (this.isShowPopup) {				$ = -1,				_ = this.listbox.getFocusedItem();				if (_)					$ = this.listbox.indexOf(_);				$--;				if ($ < 0)					$ = 0;				this.listbox.focusItem($, true)			}			break;		case 40:			G.preventDefault();			if (this.isShowPopup) {				$ = -1,				_ = this.listbox.getFocusedItem();				if (_)					$ = this.listbox.indexOf(_);				$++;				if ($ < 0)					$ = 0;				if ($ >= this.listbox.getCount())					$ = this.listbox.getCount() - 1;				this.listbox.focusItem($, true)			} else				this._startQuery(true);			break;		default:			break		}	},	focus : function () {		try {			this.inputEl.focus()		} catch ($) {}			},	blur : function () {		try {			this.inputEl.blur()		} catch ($) {}			},	getAttrs : function ($) {		var A = mini.TextBox.superclass.getAttrs.call(this, $),		_ = jQuery($);		mini._ParseString($, A, ["value", "text", "valueField", "textField", "url", "popupHeight"]);		mini._ParseBool($, A, ["allowInput"]);		mini._ParseInt($, A, ["popupMinHeight", "popupMaxHeight"]);		return A	}});mini.regClass(mini.TextBoxList, "textboxlist");mini.Form = function ($) {	this.el = mini.byId($);	mini.Form.superclass.constructor.call(this)};mini.extend(mini.Form, mini.Component, {	el : null,	getFields : function () {		if (!this.el)			return [];		var $ = mini.findControls(function ($) {				if (!$.el || !$.name || $.formField != true)					return false;				if (mini.isAncestor(this.el, $.el))					return true;				return false			}, this);		return $	},	getFieldsMap : function () {		var B = this.getFields(),		A = {};		for (var $ = 0, C = B.length; $ < C; $++) {			var _ = B[$];			A[_.name] = _		}		return A	},	getField : function ($) {		if (!this.el)			return null;		return mini.getbyName($, this.el)	},	getData : function (B) {		var A = B ? "getFormValue" : "getValue",		$ = this.getFields(),		D = {};		for (var _ = 0, E = $.length; _ < E; _++) {			var C = $[_],			F = C[A];			if (!F)				continue;			D[C.name] = F.call(C)		}		return D	},	setData : function (B) {		if (typeof B != "object")			return;		var _ = this.getFieldsMap();		for (var A in B) {			var $ = _[A];			if (!$ || !$.setValue)				continue;			$.setValue(B[A])		}	},	reset : function () {		var $ = this.getFields();		for (var _ = 0, B = $.length; _ < B; _++) {			var A = $[_];			if (!A.setValue)				continue;			A.setValue(A.defaultValue)		}		this.setIsValid(true)	},	clear : function () {		var $ = this.getFields();		for (var _ = 0, B = $.length; _ < B; _++) {			var A = $[_];			if (!A.setValue)				continue;			A.setValue("")		}		this.setIsValid(true)	},	validate : function (C) {		var $ = this.getFields();		for (var _ = 0, D = $.length; _ < D; _++) {			var A = $[_];			if (!A.validate)				continue;			var B = A.validate();			if (B == false && C === false)				break		}		return this.isValid()	},	setIsValid : function (B) {		var $ = this.getFields();		for (var _ = 0, C = $.length; _ < C; _++) {			var A = $[_];			if (!A.setIsValid)				continue;			A.setIsValid(B)		}	},	isValid : function () {		var $ = this.getFields();		for (var _ = 0, B = $.length; _ < B; _++) {			var A = $[_];			if (!A.isValid)				continue;			if (A.isValid() == false)				return false		}		return true	},	getErrorTexts : function () {		var A = [],		_ = this.getErrors();		for (var $ = 0, C = _.length; $ < C; $++) {			var B = _[$];			A.push(B.errorText)		}		return A	},	getErrors : function () {		var A = [],		$ = this.getFields();		for (var _ = 0, C = $.length; _ < C; _++) {			var B = $[_];			if (!B.isValid)				continue;			if (B.isValid() == false)				A.push(B)		}		return A	},	mask : function ($) {		if (typeof $ == "string")			$ = {				html : $			};		$ = $ || {};		$.el = this.el;		if (!$.cls)			$.cls = this.maskCls;		mini.mask($)	},	unmask : function () {		mini.unmask(this.el)	},	maskCls : "mini-mask-loading",	loadingMsg : "\u6570\u636e\u52a0\u8f7d\u4e2d\uff0c\u8bf7\u7a0d\u540e...",	loading : function () {		this.mask(this.loadingMsg)	}});mini.Panel = function () {	this._initButtons();	mini.Panel.superclass.constructor.call(this)};mini.extend(mini.Panel, mini.Control, {	width : 250,	title : "",	iconCls : "",	iconStyle : "",	url : "",	refreshOnExpand : false,	maskOnLoad : true,	showCollapseButton : false,	showCloseButton : false,	closeAction : "display",	showHeader : true,	showToolbar : false,	showFooter : false,	headerCls : "",	headerStyle : "",	bodyCls : "",	bodyStyle : "",	footerCls : "",	footerStyle : "",	toolbarCls : "",	toolbarStyle : "",	set : function (A) {		if (typeof A == "string")			return this;		var _ = this.allowLayout;		this.allowLayout = false;		var C = A.toolbar;		delete A.toolbar;		var $ = A.footer;		delete A.footer;		var B = A.url;		delete A.url;		mini.Panel.superclass.set.call(this, A);		if (C)			this.setToolbar(C);		if ($)			this.setFooter($);		if (B)			this.setUrl(B);		this.allowLayout = _;		this.doLayout();		return this	},	uiCls : "mini-panel",	_create : function () {		this.el = document.createElement("div");		this.el.className = "mini-panel";		var _ = "<div class=\"mini-panel-border\">" + "<div class=\"mini-panel-header\" ><div class=\"mini-panel-header-inner\" ><span class=\"mini-panel-icon\"></span><div class=\"mini-panel-title\" ></div><div class=\"mini-tools\" ></div></div></div>" + "<div class=\"mini-panel-viewport\">" + "<div class=\"mini-panel-toolbar\"></div>" + "<div class=\"mini-panel-body\" ></div>" + "<div class=\"mini-panel-footer\"></div>" + "<div class=\"mini-panel-resizeGrid\"></div>" + "</div>" + "</div>";		this.el.innerHTML = _;		this.borderEl = this.el.firstChild;		this.headerEl = this.borderEl.firstChild;		this.viewportEl = this.borderEl.lastChild;		this.toolbarEl = this.viewportEl.childNodes[0];		this.bodyEl = this.viewportEl.childNodes[1];		this.footerEl = this.viewportEl.childNodes[2];		this.resizeGridEl = this.viewportEl.childNodes[3];		var $ = this.headerEl.firstChild;		this.iconEl = $.firstChild;		this.titleEl = $.childNodes[1];		this.toolsEl = $.childNodes[2];		mini.setStyle(this.bodyEl, this.bodyStyle);		this.doUpdate()	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.el, "click", this.__OnClick, this)		}, this)	},	doUpdate : function () {		this.titleEl.innerHTML = this.title;		this.iconEl.style.display = (this.iconCls || this.iconStyle) ? "inline" : "none";		this.iconEl.className = "mini-panel-icon " + this.iconCls;		mini.setStyle(this.iconEl, this.iconStyle);		this.headerEl.style.display = this.showHeader ? "" : "none";		this.toolbarEl.style.display = this.showToolbar ? "" : "none";		this.footerEl.style.display = this.showFooter ? "" : "none";		var A = "";		for (var $ = this.buttons.length - 1; $ >= 0; $--) {			var _ = this.buttons[$];			A += "<span id=\"" + $ + "\" class=\"" + _.cls + " " + (_.enabled ? "" : "mini-disabled") + "\" style=\"" + _.style + ";" + (_.visible ? "" : "display:none;") + "\"></span>"		}		this.toolsEl.innerHTML = A;		this.doLayout()	},	count : 1,	doLayout : function () {		if (!this.canLayout())			return;		this.resizeGridEl.style.display = this.allowResize ? "" : "none";		this.bodyEl.style.height = "";		this.bodyEl.style.width = "";		this.headerEl.style.width = "";		this.viewportEl.style.width = "";		var F = this.el.style.height,		$ = this.el.style.width,		H = F == "auto" || F == "",		D = $ == "auto" || $ == "",		A = mini.getPaddings(this.bodyEl),		I = mini.getBorders(this.bodyEl),		L = mini.getMargins(this.bodyEl);		if (!H) {			var K = mini.getBorders(this.borderEl),			B = this.getHeight(true),			C = this.showHeader ? jQuery(this.headerEl).outerHeight() : 0,			E = this.showToolbar ? jQuery(this.toolbarEl).outerHeight() : 0,			J = this.showFooter ? jQuery(this.footerEl).outerHeight() : 0;			this.viewportEl.style.height = (B - C) + "px";			B = B - C - E - J;			if (jQuery.boxModel)				B = B - A.top - A.bottom - I.top - I.bottom;			B = B - L.top - L.bottom;			if (B < 0)				B = 0;			this.bodyEl.style.height = B + "px"		}		var _ = this.getWidth(true),		G = _;		_ = _ - L.left - L.right;		if (jQuery.boxModel)			_ = _ - A.left - A.right - I.left - I.right;		if (_ < 0)			_ = 0;		this.bodyEl.style.width = _ + "px";		_ = G;		this.headerEl.style.width = _ + "px";		this.toolbarEl.style.width = _ + "px";		this.footerEl.style.width = "auto";		mini.layout(this.borderEl)	},	setHeaderStyle : function ($) {		mini.setStyle(this.headerEl, $);		this.doLayout()	},	setBodyStyle : function ($) {		mini.setStyle(this.bodyEl, $);		this.doLayout()	},	setToolbarStyle : function ($) {		mini.setStyle(this.toolbarEl, $);		this.doLayout()	},	setFooterStyle : function ($) {		mini.setStyle(this.footerEl, $);		this.doLayout()	},	setHeaderCls : function ($) {		jQuery(this.headerEl).removeClass(this.headerCls);		jQuery(this.headerEl).addClass($);		this.headerCls = $;		this.doLayout()	},	setBodyCls : function ($) {		jQuery(this.bodyEl).removeClass(this.bodyCls);		jQuery(this.bodyEl).addClass($);		this.bodyCls = $;		this.doLayout()	},	setToolbarCls : function ($) {		jQuery(this.toolbarEl).removeClass(this.toolbarCls);		jQuery(this.toolbarEl).addClass($);		this.toolbarCls = $;		this.doLayout()	},	setFooterCls : function ($) {		jQuery(this.footerEl).removeClass(this.footerCls);		jQuery(this.footerEl).addClass($);		this.footerCls = $;		this.doLayout()	},	setTitle : function ($) {		this.title = $;		this.doUpdate()	},	setIconCls : function ($) {		this.iconCls = $;		this.doUpdate()	},	setShowCloseButton : function ($) {		this.showCloseButton = $;		var _ = this.getButton("close");		_.visible = $;		if (_)			this.doUpdate()	},	setCloseAction : function ($) {		this.closeAction = $	},	setShowCollapseButton : function ($) {		this.showCollapseButton = $;		var _ = this.getButton("collapse");		_.visible = $;		if (_)			this.doUpdate()	},	setShowHeader : function ($) {		this.showHeader = $;		this.doUpdate()	},	setShowToolbar : function ($) {		this.showToolbar = $;		this.doUpdate()	},	setShowFooter : function ($) {		this.showFooter = $;		this.doUpdate()	},	__OnClick : function (A) {		var $ = mini.findParent(A.target, "mini-tools");		if ($) {			var _ = this.getButton(parseInt(A.target.id));			if (_)				this._OnButtonClick(_, A)		}	},	_OnButtonClick : function (_, $) {		var A = {			button : _,			index : this.buttons.indexOf(_),			name : _.name.toLowerCase(),			htmlEvent : $,			cancel : false		};		this.fire("beforebuttonclick", A);		if (A.cancel == true)			return;		this.fire("buttonclick", A);		if (A.name == "close")			if (this.closeAction == "destroy") {				this.__HideAction = "close";				this.destroy()			} else				this.hide();		if (A.name == "collapse") {			this.toggle();			if (this.refreshOnExpand && this.expanded && this.url)				this.reload()		}	},	onButtonClick : function (_, $) {		this.on("buttonclick", _, $)	},	_initButtons : function () {		this.buttons = [];		var _ = this.createButton({				name : "close",				cls : "mini-tools-close",				visible : this.showCloseButton			});		this.buttons.push(_);		var $ = this.createButton({				name : "collapse",				cls : "mini-tools-collapse",				visible : this.showCollapseButton			});		this.buttons.push($)	},	createButton : function (_) {		var $ = mini.copyTo({				name : "",				cls : "",				style : "",				visible : true,				enabled : true,				html : ""			}, _);		return $	},	addButton : function (_, $) {		if (typeof _ == "string")			_ = {				iconCls : _			};		_ = this.createButton(_);		if (typeof $ != "number")			$ = this.buttons.length;		this.buttons.insert($, _);		this.doUpdate()	},	updateButton : function ($, A) {		var _ = this.getButton($);		if (!_)			return;		mini.copyTo(_, A);		this.doUpdate()	},	removeButton : function ($) {		var _ = this.getButton($);		if (!_)			return;		this.buttons.remove(_);		this.doUpdate()	},	getButton : function ($) {		if (typeof $ == "number")			return this.buttons[$];		else			for (var _ = 0, A = this.buttons.length; _ < A; _++) {				var B = this.buttons[_];				if (B.name == $)					return B			}	},	destroy : function () {		this._doRemoveIFrame();		this.iframeEl = null;		mini.removeChilds(this.toolbarEl);		mini.removeChilds(this.bodyEl);		mini.removeChilds(this.footerEl);		this.toolbarEl = null;		this.bodyEl = null;		this.footerEl = null;		mini.Panel.superclass.destroy.call(this)	},	setBody : function (_) {		if (!_)			return;		if (!mini.isArray(_))			_ = [_];		for (var $ = 0, A = _.length; $ < A; $++)			mini.append(this.bodyEl, _[$]);		mini.parse(this.bodyEl);		this.doLayout()	},	setToolbar : function (_) {		if (!_)			return;		if (!mini.isArray(_))			_ = [_];		for (var $ = 0, A = _.length; $ < A; $++)			mini.append(this.toolbarEl, _[$]);		mini.parse(this.toolbarEl);		this.doLayout()	},	setFooter : function (_) {		if (!_)			return;		if (!mini.isArray(_))			_ = [_];		for (var $ = 0, A = _.length; $ < A; $++)			mini.append(this.footerEl, _[$]);		mini.parse(this.footerEl);		this.doLayout()	},	getToolbarEl : function () {		return this.toolbarEl	},	getBodyEl : function () {		return this.bodyEl	},	getFooterEl : function () {		return this.footerEl	},	getIFrameEl : function ($) {		return this.iframeEl	},	_getMaskWrapEl : function () {		return this.bodyEl	},	_doRemoveIFrame : function () {		if (this.iframeEl && this.iframeEl.parentNode) {			this.iframeEl._ondestroy();			this.iframeEl.parentNode.removeChild(this.iframeEl);			try {				this.iframeEl.removeNode(true)			} catch ($) {}					}		this.iframeEl = null;		try {			CollectGarbage()		} catch ($) {}				mini.removeChilds(this.bodyEl)	},	deferLoadingTime : 80,	_doLoad : function () {		this._doRemoveIFrame();		var A = new Date(),		$ = this;		this.loadedUrl = this.url;		if (this.maskOnLoad)			this.loading();		var _ = mini.createIFrame(this.url, function () {				var _ = (A - new Date()) + $.deferLoadingTime;				if (_ < 0)					_ = 0;				setTimeout(function () {					$.unmask()				}, _);				try {					$.iframeEl.contentWindow.CloseOwnerWindow = function (_) {						setTimeout(function () {							$.__HideAction = _;							$.destroy()						}, 1)					}				} catch (B) {}								if ($.__onLoad)					$.__onLoad();				var B = {					iframe : $.iframeEl				};				$.fire("load", B)			}, function () {				if ($.__onDestroy)					$.__onDestroy($.__HideAction);				var _ = {					iframe : $.iframeEl				};				$.fire("unload", _)			});		this.bodyEl.appendChild(_);		this.iframeEl = _	},	load : function (_, $, A) {		this.setUrl(_, $, A)	},	reload : function () {		this.setUrl(this.url)	},	setUrl : function ($, _, A) {		this.url = $;		this.__onLoad = _;		this.__onDestroy = A;		if (this.expanded)			this._doLoad()	},	setRefreshOnExpand : function ($) {		this.refreshOnExpand = $	},	setMaskOnLoad : function ($) {		this.maskOnLoad = $	},	expanded : true,	setExpanded : function ($) {		if (this.expanded != $) {			this.expanded = $;			if (this.expanded)				this.expand();			else				this.collapse()		}	},	toggle : function () {		if (this.expanded)			this.collapse();		else			this.expand()	},	collapse : function () {		this.expanded = false;		this._height = this.el.style.height;		this.el.style.height = "auto";		this.viewportEl.style.display = "none";		mini.addClass(this.el, "mini-panel-collapse");		this.doLayout()	},	expand : function () {		this.expanded = true;		this.el.style.height = this._height;		this.viewportEl.style.display = "block";		delete this._height;		mini.removeClass(this.el, "mini-panel-collapse");		if (this.url && this.url != this.loadedUrl)			this._doLoad();		this.doLayout()	},	getAttrs : function (_) {		var D = mini.Panel.superclass.getAttrs.call(this, _);		mini._ParseString(_, D, ["title", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "toolbarCls", "toolbarStyle", "footer", "toolbar", "url", "closeAction"]);		mini._ParseBool(_, D, ["allowResize", "showCloseButton", "showHeader", "showToolbar", "showFooter", "showCollapseButton", "refreshOnExpand", "maskOnLoad", "expanded"]);		var C = mini.getChildNodes(_, true);		for (var $ = C.length - 1; $ >= 0; $--) {			var B = C[$],			A = jQuery(B).attr("property");			if (!A)				continue;			A = A.toLowerCase();			if (A == "toolbar")				D.toolbar = B;			else if (A == "footer")				D.footer = B		}		D.body = C;		return D	}});mini.regClass(mini.Panel, "panel");mini.Window = function () {	mini.Window.superclass.constructor.call(this);	this.addCls("mini-window");	this.setVisible(false);	this.setAllowDrag(this.allowDrag);	this.setAllowResize(this.allowResize)};mini.extend(mini.Window, mini.Panel);mini.copyTo(mini.Window.prototype, mini.Popup_prototype);mini.copyTo(mini.Window.prototype, {	dragCls : "mini-window-drag",	resizeCls : "mini-window-resize",	allowDrag : true,	allowResize : false,	showCloseButton : true,	showModal : true,	minWidth : 150,	minHeight : 80,	showAction : "leftclick",	hideAction : "none",	uiCls : "mini-window",	_initEvents : function () {		mini.Window.superclass._initEvents.call(this);		mini._BindEvents(function () {			mini.on(document, "mousedown", this.__OnBodyMouseDown, this);			mini.on(this.el, "mouseover", this.__OnMouseOver, this);			mini.on(window, "resize", this.__OnWindowResize, this);			var $ = this;			mini.on(this.el, "mousedown", this.__OnWindowMouseDown, this)		}, this)	},	doLayout : function () {		if (!this.canLayout())			return;		mini.Window.superclass.doLayout.call(this);		this._doShadow()	},	setAllowResize : function ($) {		if (this.allowResize != $) {			this.allowResize = $;			this.doLayout()		}	},	__OnWindowMouseDown : function (B) {		var _ = this;		if (this.allowDrag && mini.isAncestor(this.headerEl, B.target) && !mini.findParent(B.target, "mini-tools")) {			var _ = this,			A = this.getBox(),			$ = new mini.Drag({					capture : false,					onStart : function () {						_.maskProxy = mini.append(document.body, "<div class=\"mini-resizer-mask\"></div>")					},					onMove : function (B) {						var F = B.now[0] - B.init[0],						E = B.now[1] - B.init[1];						F = A.x + F;						E = A.y + E;						var D = mini.getViewportBox(),						$ = F + A.width,						C = E + A.height;						if ($ > D.width - 5)							F = D.width - A.widht - 5;						if (C > D.bottom - 5)							E = D.bottom - A.height - 5;						if (F < 0)							F = 0;						if (E < 0)							E = 0;						mini.setXY(_.el, F, E);						if (_.shadowEl)							mini.setXY(_.shadowEl, F, E)					},					onStop : function () {						jQuery(_.maskProxy).remove();						_.maskProxy = null					}				});			$.start(B)		}		if (mini.isAncestor(this.resizeGridEl, B.target) && this.allowResize) {			$ = this._getResizeDrag();			$.start(B)		}	},	_getResizeDrag : function () {		if (!this._resizeDragger)			this._resizeDragger = new mini.Drag({					capture : true,					onStart : mini.createDelegate(this._OnDragStart, this),					onMove : mini.createDelegate(this._OnDragMove, this),					onStop : mini.createDelegate(this._OnDragStop, this)				});		return this._resizeDragger	},	_OnDragStart : function ($) {		this.proxy = mini.append(document.body, "<div class=\"mini-windiw-resizeProxy\"></div>");		this.proxy.style.cursor = "se-resize";		this.elBox = mini.getBox(this.el);		mini.setBox(this.proxy, this.elBox)	},	_OnDragMove : function (A) {		var C = A.now[0] - A.init[0],		$ = A.now[1] - A.init[1],		_ = this.elBox.width + C,		B = this.elBox.height + $;		if (_ < this.minWidth)			_ = this.minWidth;		if (B < this.minHeight)			B = this.minHeight;		if (_ > this.maxWidth)			_ = this.maxWidth;		if (B > this.maxHeight)			B = this.maxHeight;		mini.setSize(this.proxy, _, B)	},	_OnDragStop : function ($) {		var _ = mini.getBox(this.proxy);		jQuery(this.proxy).remove();		this.proxy = null;		this.elBox = null;		this.setWidth(_.width);		this.setHeight(_.height)	},	destroy : function () {		mini.un(document, "mousedown", this.__OnBodyMouseDown, this);		mini.un(window, "resize", this.__OnWindowResize, this);		if (this.modalEl) {			jQuery(this.modalEl).remove();			this.modalEl = null		}		if (this.shadowEl) {			jQuery(this.shadowEl).remove();			this.shadowEl = null		}		mini.Window.superclass.destroy.call(this)	},	getAttrs : function ($) {		var _ = mini.Window.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["popupEl", "popupCls", "showAction", "hideAction", "hAlign", "vAlign", "modalStyle", "onbeforeopen", "open", "onbeforeclose", "onclose"]);		mini._ParseBool($, _, ["showModal", "showShadow", "allowDrag", "allowResize"]);		mini._ParseInt($, _, ["showDelay", "hideDelay", "hOffset", "vOffset", "minWidth", "minHeight", "maxWidth", "maxHeight"]);		return _	}});mini.regClass(mini.Window, "window");mini.MessageBox = {	alertTitle : "\u63d0\u9192",	confirmTitle : "\u786e\u8ba4",	prompTitle : "\u8f93\u5165",	prompMessage : "\u8bf7\u8f93\u5165\u5185\u5bb9\uff1a",	buttonText : {		ok : "\u786e\u5b9a",		cancel : "\u53d6\u6d88",		yes : "\u662f",		no : "\u5426"	},	show : function (F) {		F = mini.copyTo({				width : "auto",				height : "auto",				minWidth : 150,				maxWidth : 800,				minHeight : 100,				maxHeight : 350,				title : "",				titleIcon : "",				iconCls : "",				iconStyle : "",				message : "",				html : "",				spaceStyle : "margin-right:15px",				showCloseButton : true,				buttons : null,				buttonWidth : 55,				callback : null			}, F);		var I = F.callback,		C = new mini.Window();		C.setBodyStyle("overflow:hidden");		C.setShowModal(true);		C.setTitle(F.title || "");		C.setIconCls(F.titleIcon);		C.setShowCloseButton(F.showCloseButton);		var J = C.uid + "$table",		N = C.uid + "$content",		L = "<div class=\"" + F.iconCls + "\" style=\"" + F.iconStyle + "\"></div>",		Q = "<table class=\"mini-messagebox-table\" id=\"" + J + "\" style=\"\" cellspacing=\"0\" cellpadding=\"0\"><tr><td>" + L + "</td><td id=\"" + N + "\" style=\"text-align:center;padding:8px;padding-left:0;\">" + (F.message || "") + "</td></tr></table>",		_ = "<div class=\"mini-messagebox-content\"></div>" + "<div class=\"mini-messagebox-buttons\"></div>";		C.bodyEl.innerHTML = _;		var M = C.bodyEl.firstChild;		if (F.html) {			if (typeof F.html == "string")				M.innerHTML = F.html;			else if (mini.isElement(F.html))				M.appendChild(F.html)		} else			M.innerHTML = Q;		C._Buttons = [];		var P = C.bodyEl.lastChild;		if (F.buttons && F.buttons.length > 0) {			for (var H = 0, D = F.buttons.length; H < D; H++) {				var E = F.buttons[H],				K = mini.MessageBox.buttonText[E],				$ = new mini.Button();				$.setText(K);				$.setWidth(F.buttonWidth);				$.render(P);				$.action = E;				$.on("click", function (_) {					var $ = _.sender;					if (I)						I($.action);					mini.MessageBox.hide(C)				});				if (H != D - 1)					$.setStyle(F.spaceStyle);				C._Buttons.push($)			}		} else			P.style.display = "none";		C.setMinWidth(F.minWidth);		C.setMinHeight(F.minHeight);		C.setMaxWidth(F.maxWidth);		C.setMaxHeight(F.maxHeight);		C.setWidth(F.width);		C.setHeight(F.height);		C.show();		var A = C.getWidth();		C.setWidth(A);		var B = document.getElementById(J);		if (B)			B.style.width = "100%";		var G = document.getElementById(N);		if (G)			G.style.width = "100%";		var O = C._Buttons[0];		if (O)			O.focus();		else			C.focus();		C.on("beforebuttonclick", function ($) {			if (I)				I("close");			$.cancel = true;			mini.MessageBox.hide(C)		});		mini.on(C.el, "keydown", function ($) {			if ($.keyCode == 27) {				if (I)					I("close");				$.cancel = true;				mini.MessageBox.hide(C)			}		});		return C.uid	},	hide : function (C) {		if (!C)			return;		var _ = typeof C == "object" ? C : mini.getbyUID(C);		if (!_)			return;		for (var $ = 0, A = _._Buttons.length; $ < A; $++) {			var B = _._Buttons[$];			B.destroy()		}		_._Buttons = null;		_.destroy()	},	alert : function (A, _, $) {		return mini.MessageBox.show({			minWidth : 250,			title : _ || mini.MessageBox.alertTitle,			buttons : ["ok"],			message : A,			iconCls : "mini-messagebox-warning",			callback : $		})	},	confirm : function (A, _, $) {		return mini.MessageBox.show({			minWidth : 250,			title : _ || mini.MessageBox.confirmTitle,			buttons : ["ok", "cancel"],			message : A,			iconCls : "mini-messagebox-question",			callback : $		})	},	prompt : function (C, B, A, _) {		var F = "prompt$" + new Date().getTime(),		E = C || mini.MessageBox.promptMessage;		if (_)			E = E + "<br/><textarea id=\"" + F + "\" style=\"width:200px;height:60px;margin-top:3px;\"></textarea>";		else			E = E + "<br/><input id=\"" + F + "\" type=\"text\" style=\"width:200px;margin-top:3px;\"/>";		var D = mini.MessageBox.show({				title : B || mini.MessageBox.promptTitle,				buttons : ["ok", "cancel"],				width : 250,				html : "<div style=\"padding:5px;padding-left:10px;\">" + E + "</div>",				callback : function (_) {					var $ = document.getElementById(F);					if (A)						A(_, $.value)				}			}),		$ = document.getElementById(F);		$.focus();		return D	},	loading : function (_, $) {		return mini.MessageBox.show({			minHeight : 50,			title : $,			showCloseButton : false,			message : _,			iconCls : "mini-messagebox-waiting"		})	}};mini.alert = mini.MessageBox.alert;mini.confirm = mini.MessageBox.confirm;mini.prompt = mini.MessageBox.prompt;mini.loading = mini.MessageBox.loading;mini.showMessageBox = mini.MessageBox.show;mini.hideMessageBox = mini.MessageBox.hide;mini.Splitter = function () {	this._initPanes();	mini.Splitter.superclass.constructor.call(this)};mini.extend(mini.Splitter, mini.Control, {	width : 300,	height : 180,	vertical : false,	allowResize : true,	pane1 : null,	pane2 : null,	showHandleButton : true,	handlerStyle : "",	handlerCls : "",	handlerSize : 6,	uiCls : "mini-splitter",	_create : function () {		this.el = document.createElement("div");		this.el.className = "mini-splitter";		this.el.innerHTML = "<div class=\"mini-splitter-border\"><div id=\"1\" class=\"mini-splitter-pane mini-splitter-pane1\"></div><div id=\"2\" class=\"mini-splitter-pane mini-splitter-pane2\"></div><div class=\"mini-splitter-handler\"></div></div>";		this.borderEl = this.el.firstChild;		this.pane1El = this.borderEl.firstChild;		this.pane2El = this.borderEl.childNodes[1];		this.handlerEl = this.borderEl.lastChild	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.el, "click", this.__OnClick, this);			mini.on(this.el, "mousedown", this.__OnMouseDown, this)		}, this)	},	_initPanes : function () {		this.pane1 = {			index : 1,			minSize : 80,			maxSize : 3000,			size : "",			showCollapseButton : false,			cls : "",			style : "",			visible : true,			expanded : true		};		this.pane2 = mini.copyTo({}, this.pane1);		this.pane2.index = 2	},	doUpdate : function () {		this.doLayout()	},	doLayout : function () {		if (!this.canLayout())			return;		this.handlerEl.style.cursor = this.allowResize ? "" : "default";		mini.removeClass(this.el, "mini-splitter-vertical");		if (this.vertical)			mini.addClass(this.el, "mini-splitter-vertical");		mini.removeClass(this.handlerEl, "mini-splitter-handler-vertical");		if (this.vertical)			mini.addClass(this.handlerEl, "mini-splitter-handler-vertical");		mini.setStyle(this.pane1El, this.pane1.style);		mini.setStyle(this.pane2El, this.pane2.style);		var B = this.getHeight(true),		_ = this.getWidth(true);		if (!jQuery.boxModel) {			var Q = mini.getBorders(this.borderEl);			B = B + Q.top + Q.bottom;			_ = _ + Q.left + Q.right		}		this.borderEl.style.width = _ + "px";		this.borderEl.style.height = B + "px";		var $ = this.pane1El,		C = this.pane2El,		G = jQuery($),		I = jQuery(C);		$.style.display = C.style.display = this.handlerEl.style.display = "";		var D = this.handlerSize;		this.pane1.size = String(this.pane1.size);		this.pane2.size = String(this.pane2.size);		var F = parseFloat(this.pane1.size),		H = parseFloat(this.pane2.size),		O = isNaN(F),		T = isNaN(H),		N = !isNaN(F) && this.pane1.size.indexOf("%") != -1,		R = !isNaN(H) && this.pane2.size.indexOf("%") != -1,		J = !O && !N,		M = !T && !R,		P = this.vertical ? B - this.handlerSize : _ - this.handlerSize,		K = p2Size = 0;		if (O || T) {			if (O && T) {				K = parseInt(P / 2);				p2Size = P - K			} else if (J) {				K = F;				p2Size = P - K			} else if (N) {				K = parseInt(P * F / 100);				p2Size = P - K			} else if (M) {				p2Size = H;				K = P - p2Size			} else if (R) {				p2Size = parseInt(P * H / 100);				K = P - p2Size			}		} else if (N && M) {			p2Size = H;			K = P - p2Size		} else if (J && R) {			K = F;			p2Size = P - K		} else {			var L = F + H;			K = parseInt(P * F / L);			p2Size = P - K		}		if (K > this.pane1.maxSize) {			K = this.pane1.maxSize;			p2Size = P - K		}		if (p2Size > this.pane2.maxSize) {			p2Size = this.pane2.maxSize;			K = P - p2Size		}		if (K < this.pane1.minSize) {			K = this.pane1.minSize;			p2Size = P - K		}		if (p2Size < this.pane2.minSize) {			p2Size = this.pane2.minSize;			K = P - p2Size		}		if (this.pane1.expanded == false) {			p2Size = P;			K = 0;			$.style.display = "none"		} else if (this.pane2.expanded == false) {			K = P;			p2Size = 0;			C.style.display = "none"		}		if (this.pane1.visible == false) {			p2Size = P + D;			K = D = 0;			$.style.display = "none";			this.handlerEl.style.display = "none"		} else if (this.pane2.visible == false) {			K = P + D;			p2Size = D = 0;			C.style.display = "none";			this.handlerEl.style.display = "none"		}		if (this.vertical) {			mini.setWidth($, _);			mini.setWidth(C, _);			mini.setHeight($, K);			mini.setHeight(C, p2Size);			C.style.top = (K + D) + "px";			this.handlerEl.style.left = "0px";			this.handlerEl.style.top = K + "px";			mini.setWidth(this.handlerEl, _);			mini.setHeight(this.handlerEl, this.handlerSize);			$.style.left = "0px";			C.style.left = "0px"		} else {			mini.setWidth($, K);			mini.setWidth(C, p2Size);			mini.setHeight($, B);			mini.setHeight(C, B);			C.style.left = (K + D) + "px";			this.handlerEl.style.top = "0px";			this.handlerEl.style.left = K + "px";			mini.setWidth(this.handlerEl, this.handlerSize);			mini.setHeight(this.handlerEl, B);			$.style.top = "0px";			C.style.top = "0px"		}		var S = "<div class=\"mini-splitter-handler-buttons\">";		if (!this.pane1.expanded || !this.pane2.expanded) {			if (!this.pane1.expanded) {				if (this.pane1.showCollapseButton)					S += "<a id=\"1\" class=\"mini-splitter-pane2-button\"></a>"			} else if (this.pane2.showCollapseButton)				S += "<a id=\"2\" class=\"mini-splitter-pane1-button\"></a>"		} else {			if (this.pane1.showCollapseButton)				S += "<a id=\"1\" class=\"mini-splitter-pane1-button\"></a>";			if (this.allowResize)				if ((this.pane1.showCollapseButton && this.pane2.showCollapseButton) || (!this.pane1.showCollapseButton && !this.pane2.showCollapseButton))					S += "<span class=\"mini-splitter-resize-button\"></span>";			if (this.pane2.showCollapseButton)				S += "<a id=\"2\" class=\"mini-splitter-pane2-button\"></a>"		}		S += "</div>";		this.handlerEl.innerHTML = S;		var E = this.handlerEl.firstChild;		E.style.display = this.showHandleButton ? "" : "none";		var A = mini.getBox(E);		if (this.vertical)			E.style.marginLeft = -A.width / 2 + "px";		else			E.style.marginTop = -A.height / 2 + "px";		if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded)			mini.addClass(this.handlerEl, "mini-splitter-nodrag");		else			mini.removeClass(this.handlerEl, "mini-splitter-nodrag");		mini.layout(this.borderEl)	},	getPaneBox : function ($) {},	getPane : function ($) {		if ($ == 1)			return this.pane1;		else if ($ == 2)			return this.pane2;		return $	},	setPanes : function (_) {		if (!mini.isArray(_))			return;		for (var $ = 0; $ < 2; $++) {			var A = _[$];			this.updatePane($ + 1, A)		}	},	getPaneEl : function ($) {		if ($ == 1)			return this.pane1El;		return this.pane2El	},	updatePane : function (_, E) {		var $ = this.getPane(_);		if (!$)			return;		mini.copyTo($, E);		var C = $.body;		delete $.body;		if (C) {			if (!mini.isArray(C))				C = [C];			var B = this.getPaneEl(_);			for (var A = 0, D = C.length; A < D; A++)				mini.append(B, C[A])		}		this.doUpdate()	},	setVertical : function ($) {		this.vertical = $;		this.doUpdate()	},	expandPane : function (_) {		var $ = this.getPane(_);		if (!$)			return;		$.expanded = true;		this.doUpdate()	},	collapsePane : function (_) {		var $ = this.getPane(_);		if (!$)			return;		$.expanded = false;		var A = $ == this.pane1 ? this.pane2 : this.pane1;		if (A.expanded == false) {			A.expanded = true;			A.visible = true		}		this.doUpdate()	},	togglePane : function (_) {		var $ = this.getPane(_);		if (!$)			return;		if ($.expanded)			this.collapsePane($);		else			this.expandPane($)	},	showPane : function (_) {		var $ = this.getPane(_);		if (!$)			return;		$.visible = true;		this.doUpdate()	},	hidePane : function (_) {		var $ = this.getPane(_);		if (!$)			return;		$.visible = false;		var A = $ == this.pane1 ? this.pane2 : this.pane1;		if (A.visible == false) {			A.expanded = true;			A.visible = true		}		this.doUpdate()	},	setAllowResize : function ($) {		if (this.allowResize != $) {			this.allowResize = $;			this.doLayout()		}	},	setHandlerSize : function ($) {		if (this.handlerSize != $) {			this.handlerSize = $;			this.doLayout()		}	},	__OnClick : function (B) {		var A = B.target;		if (!mini.isAncestor(this.handlerEl, A))			return;		var _ = parseInt(A.id),		$ = this.getPane(_),		B = {			pane : $,			paneIndex : _,			cancel : false		};		if ($.expanded)			this.fire("beforecollapse", B);		else			this.fire("beforeexpand", B);		if (B.cancel == true)			return;		if (A.className == "mini-splitter-pane1-button")			this.togglePane(_);		else if (A.className == "mini-splitter-pane2-button")			this.togglePane(_)	},	_OnButtonClick : function ($, _) {		this.fire("buttonclick", {			pane : $,			index : this.pane1 == $ ? 1 : 2,			htmlEvent : _		})	},	onButtonClick : function (_, $) {		this.on("buttonclick", _, $)	},	__OnMouseDown : function (A) {		var _ = A.target;		if (!this.allowResize)			return;		if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded)			return;		if (mini.isAncestor(this.handlerEl, _))			if (_.className == "mini-splitter-pane1-button" || _.className == "mini-splitter-pane2-button");			else {				var $ = this._getDrag();				$.start(A)			}	},	_getDrag : function () {		if (!this.drag)			this.drag = new mini.Drag({					capture : true,					onStart : mini.createDelegate(this._OnDragStart, this),					onMove : mini.createDelegate(this._OnDragMove, this),					onStop : mini.createDelegate(this._OnDragStop, this)				});		return this.drag	},	_OnDragStart : function ($) {		this.maskProxy = mini.append(document.body, "<div class=\"mini-resizer-mask\"></div>");		this.dragProxy = mini.append(document.body, "<div class=\"mini-proxy\"></div>");		this.dragProxy.style.cursor = this.vertical ? "n-resize" : "w-resize";		this.handlerBox = mini.getBox(this.handlerEl);		this.elBox = mini.getBox(this.borderEl, true);		mini.setBox(this.dragProxy, this.handlerBox)	},	_OnDragMove : function (C) {		if (!this.handlerBox)			return;		if (!this.elBox)			this.elBox = mini.getBox(this.borderEl, true);		var B = this.elBox.width,		D = this.elBox.height,		E = this.handlerSize,		I = this.vertical ? D - this.handlerSize : B - this.handlerSize,		A = this.pane1.minSize,		F = this.pane1.maxSize,		$ = this.pane2.minSize,		G = this.pane2.maxSize;		if (this.vertical == true) {			var _ = C.now[1] - C.init[1],			H = this.handlerBox.y + _;			if (H - this.elBox.y > F)				H = this.elBox.y + F;			if (H + this.handlerBox.height < this.elBox.bottom - G)				H = this.elBox.bottom - G - this.handlerBox.height;			if (H - this.elBox.y < A)				H = this.elBox.y + A;			if (H + this.handlerBox.height > this.elBox.bottom - $)				H = this.elBox.bottom - $ - this.handlerBox.height;			mini.setY(this.dragProxy, H)		} else {			var J = C.now[0] - C.init[0],			K = this.handlerBox.x + J;			if (K - this.elBox.x > F)				K = this.elBox.x + F;			if (K + this.handlerBox.width < this.elBox.right - G)				K = this.elBox.right - G - this.handlerBox.width;			if (K - this.elBox.x < A)				K = this.elBox.x + A;			if (K + this.handlerBox.width > this.elBox.right - $)				K = this.elBox.right - $ - this.handlerBox.width;			mini.setX(this.dragProxy, K)		}	},	_OnDragStop : function (_) {		var $ = this.elBox.width,		B = this.elBox.height,		C = this.handlerSize,		D = parseFloat(this.pane1.size),		E = parseFloat(this.pane2.size),		I = isNaN(D),		N = isNaN(E),		J = !isNaN(D) && this.pane1.size.indexOf("%") != -1,		M = !isNaN(E) && this.pane2.size.indexOf("%") != -1,		G = !I && !J,		K = !N && !M,		L = this.vertical ? B - this.handlerSize : $ - this.handlerSize,		A = mini.getBox(this.dragProxy),		H = A.x - this.elBox.x,		F = L - H;		if (this.vertical) {			H = A.y - this.elBox.y;			F = L - H		}		if (I || N) {			if (I && N) {				D = parseFloat(H / L * 100).toFixed(1);				this.pane1.size = D + "%"			} else if (G) {				D = H;				this.pane1.size = D			} else if (J) {				D = parseFloat(H / L * 100).toFixed(1);				this.pane1.size = D + "%"			} else if (K) {				E = F;				this.pane2.size = E			} else if (M) {				E = parseFloat(F / L * 100).toFixed(1);				this.pane2.size = E + "%"			}		} else if (J && K)			this.pane2.size = F;		else if (G && M)			this.pane1.size = H;		else {			this.pane1.size = parseFloat(H / L * 100).toFixed(1);			this.pane2.size = 100 - this.pane1.size		}		jQuery(this.dragProxy).remove();		jQuery(this.maskProxy).remove();		this.maskProxy = null;		this.dragProxy = null;		this.elBox = this.handlerBox = null;		this.doLayout()	},	getAttrs : function (B) {		var H = mini.Splitter.superclass.getAttrs.call(this, B);		mini._ParseBool(B, H, ["allowResize", "vertical", "showHandleButton"]);		mini._ParseInt(B, H, ["handlerSize"]);		var A = [],		G = mini.getChildNodes(B);		for (var _ = 0, F = 2; _ < F; _++) {			var C = G[_],			E = jQuery(C),			$ = {};			A.push($);			if (!C)				continue;			$.style = C.style.cssText;			mini._ParseString(C, $, ["cls", "size"]);			mini._ParseBool(C, $, ["visible", "expanded", "showCollapseButton"]);			mini._ParseInt(C, $, ["minSize", "maxSize", "handlerSize"]);			var D = mini.getChildNodes(C, true);			$.body = D		}		H.panes = A;		return H	}});mini.regClass(mini.Splitter, "splitter");mini.Layout = function () {	this.regions = [];	this.regionMap = {};	mini.Layout.superclass.constructor.call(this)};mini.extend(mini.Layout, mini.Control, {	regions : [],	splitSize : 6,	collapseWidth : 28,	collapseHeight : 25,	regionWidth : 150,	regionHeight : 80,	regionMinWidth : 50,	regionMinHeight : 25,	regionMaxWidth : 2000,	regionMaxHeight : 2000,	uiCls : "mini-layout",	_create : function () {		this.el = document.createElement("div");		this.el.className = "mini-layout";		this.el.innerHTML = "<div class=\"mini-layout-border\"></div>";		this.borderEl = this.el.firstChild;		this.doUpdate()	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.el, "click", this.__OnClick, this);			mini.on(this.el, "mousedown", this.__OnMouseDown, this);			mini.on(this.el, "mouseover", this.__OnMouseOver, this);			mini.on(this.el, "mouseout", this.__OnMouseOut, this);			mini.on(document, "mousedown", this.__OnDocMouseDown, this)		}, this)	},	getRegionEl : function ($) {		var $ = this.getRegion($);		if (!$)			return null;		return $._el	},	getRegionHeaderEl : function ($) {		var $ = this.getRegion($);		if (!$)			return null;		return $._header	},	getRegionBodyEl : function ($) {		var $ = this.getRegion($);		if (!$)			return null;		return $._body	},	getRegionSplitEl : function ($) {		var $ = this.getRegion($);		if (!$)			return null;		return $._split	},	getRegionProxyEl : function ($) {		var $ = this.getRegion($);		if (!$)			return null;		return $._proxy	},	getRegionBox : function (_) {		var $ = this.getRegionEl(_);		if ($)			return mini.getBox($);		return null	},	getRegion : function ($) {		if (typeof $ == "string")			return this.regionMap[$];		return $	},	_getButton : function (_, B) {		var D = _.buttons;		for (var $ = 0, A = D.length; $ < A; $++) {			var C = D[$];			if (C.name == B)				return C		}	},	_createRegion : function (_) {		var $ = mini.copyTo({				region : "",				title : "",				iconCls : "",				iconStyle : "",				showCloseButton : false,				showCollapseButton : true,				buttons : [{						name : "close",						cls : "mini-tools-close",						html : "",						visible : false					}, {						name : "collapse",						cls : "mini-tools-collapse",						html : "",						visible : true					}				],				showSplit : true,				showHeader : true,				splitSize : this.splitSize,				collapseSize : this.collapseWidth,				width : this.regionWidth,				height : this.regionHeight,				minWidth : this.regionMinWidth,				minHeight : this.regionMinHeight,				maxWidth : this.regionMaxWidth,				maxHeight : this.regionMaxHeight,				allowResize : true,				cls : "",				style : "",				headerCls : "",				headerStyle : "",				bodyCls : "",				bodyStyle : "",				visible : true,				expanded : true			}, _);		return $	},	_CreateRegionEl : function ($) {		var $ = this.getRegion($);		if (!$)			return;		jQuery(this.borderEl).append("<div id=\"" + $.region + "\" class=\"mini-layout-region\"><div class=\"mini-layout-region-header\" style=\"" + $.headerStyle + "\"></div><div class=\"mini-layout-region-body\" style=\"" + $.bodyStyle + "\"></div></div>");		$._el = this.borderEl.lastChild;		$._header = $._el.firstChild;		$._body = $._el.lastChild;		if ($.cls)			mini.addClass($._el, $.cls);		if ($.style)			mini.setStyle($._el, $.style);		mini.addClass($._el, "mini-layout-region-" + $.region);		if ($.region != "center") {			jQuery(this.borderEl).append("<div uid=\"" + this.uid + "\" id=\"" + $.region + "\" class=\"mini-layout-split\"></div>");			$._split = this.borderEl.lastChild;			mini.addClass($._split, "mini-layout-split-" + $.region)		}		if ($.region != "center") {			jQuery(this.borderEl).append("<div id=\"" + $.region + "\" class=\"mini-layout-proxy\"></div>");			$._proxy = this.borderEl.lastChild;			mini.addClass($._proxy, "mini-layout-proxy-" + $.region)		}	},	setRegions : function (A) {		if (!mini.isArray(A))			return;		for (var $ = 0, _ = A.length; $ < _; $++)			this.addRegion(A[$])	},	addRegion : function (D, $) {		var F = D;		D = this._createRegion(D);		if (!D.region)			D.region = "center";		D.region = D.region.toLowerCase();		if (D.region == "center" && F && !F.showHeader)			D.showHeader = false;		if (D.region == "north" || D.region == "south")			if (!F.collapseSize)				D.collapseSize = this.collapseHeight;		this._measureRegion(D);		if (typeof $ != "number")			$ = this.regions.length;		var A = this.regionMap[D.region];		if (A)			return;		this.regions.insert($, D);		this.regionMap[D.region] = D;		this._CreateRegionEl(D);		var C = D.body;		delete D.body;		if (C) {			if (!mini.isArray(C))				C = [C];			var B = this.getRegionBodyEl(D);			for (var _ = 0, E = C.length; _ < E; _++)				mini.append(B, C[_])		}		this.doUpdate()	},	removeRegion : function ($) {		var $ = this.getRegion($);		if (!$)			return;		this.regions.remove($);		delete this.regionMap[$.region];		jQuery($._el).remove();		jQuery($._split).remove();		jQuery($._proxy).remove();		this.doUpdate()	},	moveRegion : function (A, $) {		var A = this.getRegion(A);		if (!A)			return;		var _ = this.regions[$];		if (!_ || _ == A)			return;		this.regions.remove(A);		var $ = this.region.indexOf(_);		this.regions.insert($, A);		this.doUpdate()	},	_measureRegion : function ($) {		var _ = this._getButton($, "close");		_.visible = $.showCloseButton;		_ = this._getButton($, "collapse");		_.visible = $.showCollapseButton;		if ($.width < $.minWidth)			$.width = mini.minWidth;		if ($.width > $.maxWidth)			$.width = mini.maxWidth;		if ($.height < $.minHeight)			$.height = mini.minHeight;		if ($.height > $.maxHeight)			$.height = mini.maxHeight	},	updateRegion : function ($, _) {		$ = this.getRegion($);		if (!$)			return;		if (_)			delete _.region;		mini.copyTo($, _);		this._measureRegion($);		this.doUpdate()	},	expandRegion : function ($) {		$ = this.getRegion($);		if (!$)			return;		$.expanded = true;		this.doUpdate()	},	collapseRegion : function ($) {		$ = this.getRegion($);		if (!$)			return;		$.expanded = false;		this.doUpdate()	},	toggleRegion : function ($) {		$ = this.getRegion($);		if (!$)			return;		if ($.expanded)			this.collapseRegion($);		else			this.expandRegion($)	},	showRegion : function ($) {		$ = this.getRegion($);		if (!$)			return;		$.visible = true;		this.doUpdate()	},	hideRegion : function ($) {		$ = this.getRegion($);		if (!$)			return;		$.visible = false;		this.doUpdate()	},	isExpandRegion : function ($) {		$ = this.getRegion($);		if (!$)			return null;		return this.region.expanded	},	isVisibleRegion : function ($) {		$ = this.getRegion($);		if (!$)			return null;		return this.region.visible	},	_tryToggleRegion : function ($) {		$ = this.getRegion($);		var _ = {			region : $,			cancel : false		};		if ($.expanded) {			this.fire("BeforeCollapse", _);			if (_.cancel == false)				this.collapseRegion($)		} else {			this.fire("BeforeExpand", _);			if (_.cancel == false)				this.expandRegion($)		}	},	_getProxyElByEvent : function (_) {		var $ = mini.findParent(_.target, "mini-layout-proxy");		return $	},	_getRegionElByEvent : function (_) {		var $ = mini.findParent(_.target, "mini-layout-region");		return $	},	__OnClick : function (D) {		if (this.inAniming)			return;		var A = this._getProxyElByEvent(D);		if (A) {			var _ = A.id,			C = mini.findParent(D.target, "mini-tools-collapse");			if (C)				this._tryToggleRegion(_);			else				this._VirtualToggle(_)		}		var B = this._getRegionElByEvent(D);		if (B && mini.findParent(D.target, "mini-layout-region-header")) {			_ = B.id,			C = mini.findParent(D.target, "mini-tools-collapse");			if (C)				this._tryToggleRegion(_);			var $ = mini.findParent(D.target, "mini-tools-close");			if ($)				this.updateRegion(_, {					visible : false				})		}	},	_OnButtonClick : function (_, A, $) {		this.fire("buttonclick", {			htmlEvent : $,			region : _,			button : A,			index : this.buttons.indexOf(A),			name : A.name		})	},	_OnButtonMouseDown : function (_, A, $) {		this.fire("buttonmousedown", {			htmlEvent : $,			region : _,			button : A,			index : this.buttons.indexOf(A),			name : A.name		})	},	hoverProxyEl : null,	__OnMouseOver : function (_) {		var $ = this._getProxyElByEvent(_);		if ($) {			mini.addClass($, "mini-layout-proxy-hover");			this.hoverProxyEl = $		}	},	__OnMouseOut : function ($) {		if (this.hoverProxyEl)			mini.removeClass(this.hoverProxyEl, "mini-layout-proxy-hover");		this.hoverProxyEl = null	},	onButtonClick : function (_, $) {		this.on("buttonclick", _, $)	},	onButtonMouseDown : function (_, $) {		this.on("buttonmousedown", _, $)	}});mini.copyTo(mini.Layout.prototype, {	_createHeader : function (_, A) {		var C = "<div class=\"mini-tools\">";		if (A)			C += "<span class=\"mini-tools-collapse\"></span>";		else			for (var $ = _.buttons.length - 1; $ >= 0; $--) {				var B = _.buttons[$];				C += "<span class=\"" + B.cls + "\" style=\"";				C += B.style + ";" + (B.visible ? "" : "display:none;") + "\">" + B.html + "</span>"			}		C += "</div>";		C += "<div class=\"mini-layout-region-icon " + _.iconCls + "\" style=\"" + _.iconStyle + ";" + ((_.iconStyle || _.iconCls) ? "" : "display:none;") + "\"></div>";		C += "<div class=\"mini-layout-region-title\">" + _.title + "</div>";		return C	},	doUpdate : function () {		for (var $ = 0, E = this.regions.length; $ < E; $++) {			var B = this.regions[$],			_ = B.region,			A = B._el,			D = B._split,			C = B._proxy;			B._header.style.display = B.showHeader ? "" : "none";			B._header.innerHTML = this._createHeader(B);			if (B._proxy)				B._proxy.innerHTML = this._createHeader(B, true);			if (D) {				mini.removeClass(D, "mini-layout-split-nodrag");				if (B.expanded == false || !B.allowResize)					mini.addClass(D, "mini-layout-split-nodrag")			}		}		this.doLayout()	},	doLayout : function () {		if (!this.canLayout())			return;		if (this.inAniming)			return;		var C = jQuery(this.el).height(),		_ = jQuery(this.el).width(),		D = {			x : 0,			y : 0,			width : _,			height : C		},		I = this.regions.clone(),		P = this.getRegion("center");		I.remove(P);		if (P)			I.push(P);		for (var K = 0, H = I.length; K < H; K++) {			var E = I[K];			E._Expanded = false;			mini.removeClass(E._el, "mini-layout-popup");			var A = E.region,			L = E._el,			F = E._split,			G = E._proxy;			if (E.visible == false) {				L.style.display = "none";				if (A != "center")					F.style.display = G.style.display = "none";				continue			}			L.style.display = "";			if (A != "center")				F.style.display = G.style.display = "";			var R = D.x,			O = D.y,			_ = D.width,			C = D.height,			B = E.width,			J = E.height;			if (!E.expanded)				if (A == "west" || A == "east")					B = E.collapseSize;				else if (A == "north" || A == "south")					J = E.collapseSize;			switch (A) {			case "north":				C = J;				D.y += J;				D.height -= J;				break;			case "south":				C = J;				O = D.y + D.height - J;				D.height -= J;				break;			case "west":				_ = B;				D.x += B;				D.width -= B;				break;			case "east":				_ = B;				R = D.x + D.width - B;				D.width -= B;				break;			case "center":				break;			default:				continue			}			if (_ < 0)				_ = 0;			if (C < 0)				C = 0;			if (A == "west" || A == "east")				mini.setHeight(L, C);			if (A == "north" || A == "south")				mini.setWidth(L, _);			var N = "left:" + R + "px;top:" + O + "px;",			$ = L;			if (!E.expanded) {				$ = G;				L.style.top = "-100px";				L.style.left = "-1500px"			} else if (G) {				G.style.left = "-1500px";				G.style.top = "-100px"			}			$.style.left = R + "px";			$.style.top = O + "px";			mini.setWidth($, _);			mini.setHeight($, C);			var M = jQuery(E._el).height(),			Q = E.showHeader ? jQuery(E._header).outerHeight() : 0;			mini.setHeight(E._body, M - Q);			if (A == "center")				continue;			B = J = E.splitSize;			R = D.x,			O = D.y,			_ = D.width,			C = D.height;			switch (A) {			case "north":				C = J;				D.y += J;				D.height -= J;				break;			case "south":				C = J;				O = D.y + D.height - J;				D.height -= J;				break;			case "west":				_ = B;				D.x += B;				D.width -= B;				break;			case "east":				_ = B;				R = D.x + D.width - B;				D.width -= B;				break;			case "center":				break			}			if (_ < 0)				_ = 0;			if (C < 0)				C = 0;			F.style.left = R + "px";			F.style.top = O + "px";			mini.setWidth(F, _);			mini.setHeight(F, C);			F.style.display = E.showSplit ? "block" : "none"		}		mini.layout(this.borderEl)	},	__OnMouseDown : function (B) {		if (this.inAniming)			return;		if (mini.findParent(B.target, "mini-layout-split")) {			var A = jQuery(B.target).attr("uid");			if (A != this.uid)				return;			var _ = this.getRegion(B.target.id);			if (_.expanded == false || !_.allowResize)				return;			this.dragRegion = _;			var $ = this._getDrag();			$.start(B)		}	},	_getDrag : function () {		if (!this.drag)			this.drag = new mini.Drag({					capture : true,					onStart : mini.createDelegate(this._OnDragStart, this),					onMove : mini.createDelegate(this._OnDragMove, this),					onStop : mini.createDelegate(this._OnDragStop, this)				});		return this.drag	},	_OnDragStart : function ($) {		this.maskProxy = mini.append(document.body, "<div class=\"mini-resizer-mask\"></div>");		this.dragProxy = mini.append(document.body, "<div class=\"mini-proxy\"></div>");		this.dragProxy.style.cursor = "n-resize";		if (this.dragRegion.region == "west" || this.dragRegion.region == "east")			this.dragProxy.style.cursor = "w-resize";		this.splitBox = mini.getBox(this.dragRegion._split);		mini.setBox(this.dragProxy, this.splitBox);		this.elBox = mini.getBox(this.el, true)	},	_OnDragMove : function (C) {		var I = C.now[0] - C.init[0],		V = this.splitBox.x + I,		A = C.now[1] - C.init[1],		U = this.splitBox.y + A,		K = V + this.splitBox.width,		T = U + this.splitBox.height,		G = this.getRegion("west"),		L = this.getRegion("east"),		F = this.getRegion("north"),		D = this.getRegion("south"),		H = this.getRegion("center"),		O = G && G.visible ? G.width : 0,		Q = L && L.visible ? L.width : 0,		R = F && F.visible ? F.height : 0,		J = D && D.visible ? D.height : 0,		P = G && G.showSplit ? mini.getWidth(G._split) : 0,		$ = L && L.showSplit ? mini.getWidth(L._split) : 0,		B = F && F.showSplit ? mini.getHeight(F._split) : 0,		S = D && D.showSplit ? mini.getHeight(D._split) : 0,		E = this.dragRegion,		N = E.region;		if (N == "west") {			var M = this.elBox.width - Q - $ - P - H.minWidth;			if (V - this.elBox.x > M)				V = M + this.elBox.x;			if (V - this.elBox.x < E.minWidth)				V = E.minWidth + this.elBox.x;			if (V - this.elBox.x > E.maxWidth)				V = E.maxWidth + this.elBox.x;			mini.setX(this.dragProxy, V)		} else if (N == "east") {			M = this.elBox.width - O - P - $ - H.minWidth;			if (this.elBox.right - (V + this.splitBox.width) > M)				V = this.elBox.right - M - this.splitBox.width;			if (this.elBox.right - (V + this.splitBox.width) < E.minWidth)				V = this.elBox.right - E.minWidth - this.splitBox.width;			if (this.elBox.right - (V + this.splitBox.width) > E.maxWidth)				V = this.elBox.right - E.maxWidth - this.splitBox.width;			mini.setX(this.dragProxy, V)		} else if (N == "north") {			var _ = this.elBox.height - J - S - B - H.minHeight;			if (U - this.elBox.y > _)				U = _ + this.elBox.y;			if (U - this.elBox.y < E.minHeight)				U = E.minHeight + this.elBox.y;			if (U - this.elBox.y > E.maxHeight)				U = E.maxHeight + this.elBox.y;			mini.setY(this.dragProxy, U)		} else if (N == "south") {			_ = this.elBox.height - R - B - S - H.minHeight;			if (this.elBox.bottom - (U + this.splitBox.height) > _)				U = this.elBox.bottom - _ - this.splitBox.height;			if (this.elBox.bottom - (U + this.splitBox.height) < E.minHeight)				U = this.elBox.bottom - E.minHeight - this.splitBox.height;			if (this.elBox.bottom - (U + this.splitBox.height) > E.maxHeight)				U = this.elBox.bottom - E.maxHeight - this.splitBox.height;			mini.setY(this.dragProxy, U)		}	},	_OnDragStop : function (B) {		var C = mini.getBox(this.dragProxy),		D = this.dragRegion,		A = D.region;		if (A == "west") {			var $ = C.x - this.elBox.x;			this.updateRegion(D, {				width : $			})		} else if (A == "east") {			$ = this.elBox.right - C.right;			this.updateRegion(D, {				width : $			})		} else if (A == "north") {			var _ = C.y - this.elBox.y;			this.updateRegion(D, {				height : _			})		} else if (A == "south") {			_ = this.elBox.bottom - C.bottom;			this.updateRegion(D, {				height : _			})		}		jQuery(this.dragProxy).remove();		this.dragProxy = null;		this.elBox = this.handlerBox = null;		jQuery(this.maskProxy).remove();		this.maskProxy = null	},	_VirtualToggle : function ($) {		$ = this.getRegion($);		if ($._Expanded === true)			this._VirtualCollapse($);		else			this._VirtualExpand($)	},	_VirtualExpand : function (D) {		if (this.inAniming)			return;		this.doLayout();		var A = D.region,		H = D._el;		D._Expanded = true;		mini.addClass(H, "mini-layout-popup");		var E = mini.getBox(D._proxy),		B = mini.getBox(D._el),		F = {};		if (A == "east") {			var K = E.x,			J = E.y,			C = E.height;			mini.setHeight(H, C);			mini.setXY(H, K, J);			var I = parseInt(H.style.left);			F = {				left : I - B.width			}		} else if (A == "west") {			K = E.right - B.width,			J = E.y,			C = E.height;			mini.setHeight(H, C);			mini.setXY(H, K, J);			I = parseInt(H.style.left);			F = {				left : I + B.width			}		} else if (A == "north") {			var K = E.x,			J = E.bottom - B.height,			_ = E.width;			mini.setWidth(H, _);			mini.setXY(H, K, J);			var $ = parseInt(H.style.top);			F = {				top : $ + B.height			}		} else if (A == "south") {			K = E.x,			J = E.y,			_ = E.width;			mini.setWidth(H, _);			mini.setXY(H, K, J);			$ = parseInt(H.style.top);			F = {				top : $ - B.height			}		}		mini.addClass(D._proxy, "mini-layout-maxZIndex");		this.inAniming = true;		var G = this,		L = jQuery(H);		L.animate(F, 250, function () {			mini.removeClass(D._proxy, "mini-layout-maxZIndex");			G.inAniming = false		})	},	_VirtualCollapse : function (F) {		if (this.inAniming)			return;		F._Expanded = false;		var B = F.region,		E = F._el,		D = mini.getBox(E),		_ = {};		if (B == "east") {			var C = parseInt(E.style.left);			_ = {				left : C + D.width			}		} else if (B == "west") {			C = parseInt(E.style.left);			_ = {				left : C - D.width			}		} else if (B == "north") {			var $ = parseInt(E.style.top);			_ = {				top : $ - D.height			}		} else if (B == "south") {			$ = parseInt(E.style.top);			_ = {				top : $ + D.height			}		}		mini.addClass(F._proxy, "mini-layout-maxZIndex");		this.inAniming = true;		var A = this,		G = jQuery(E);		G.animate(_, 250, function () {			mini.removeClass(F._proxy, "mini-layout-maxZIndex");			A.inAniming = false;			A.doLayout()		})	},	__OnDocMouseDown : function (B) {		if (this.inAniming)			return;		for (var $ = 0, A = this.regions.length; $ < A; $++) {			var _ = this.regions[$];			if (!_._Expanded)				continue;			if (mini.isAncestor(_._el, B.target) || mini.isAncestor(_._proxy, B.target));			else				this._VirtualCollapse(_)		}	},	getAttrs : function (A) {		var I = mini.Layout.superclass.getAttrs.call(this, A),		H = jQuery(A),		F = parseInt(H.attr("splitSize"));		if (!isNaN(F))			I.splitSize = F;		var G = [],		E = mini.getChildNodes(A);		for (var _ = 0, D = E.length; _ < D; _++) {			var B = E[_],			$ = {};			G.push($);			$.cls = B.className;			$.style = B.style.cssText;			mini._ParseString(B, $, ["region", "title", "iconCls", "iconStyle", "cls", "headerCls", "headerStyle", "bodyCls", "bodyStyle"]);			mini._ParseBool(B, $, ["allowResize", "visible", "showCloseButton", "showCollapseButton", "showSplit", "showHeader"]);			mini._ParseInt(B, $, ["splitSize", "collapseSize", "width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight"]);			var C = mini.getChildNodes(B, true);			$.body = C		}		I.regions = G;		return I	}});mini.regClass(mini.Layout, "layout");mini.Box = function () {	mini.Box.superclass.constructor.call(this)};mini.extend(mini.Box, mini.Control, {	style : "",	borderStyle : "",	bodyStyle : "",	uiCls : "mini-box",	_create : function () {		this.el = document.createElement("div");		this.el.className = "mini-box";		this.el.innerHTML = "<div class=\"mini-box-border\"></div>";		this.bodyEl = this.borderEl = this.el.firstChild	},	_initEvents : function () {},	doLayout : function () {		if (!this.canLayout())			return;		var A = this.el.style.height,		$ = this.el.style.width,		E = A == "auto" || A == "",		G = $ == "auto" || $ == "",		D = mini.getPaddings(this.bodyEl),		F = mini.getMargins(this.bodyEl);		if (!E) {			var C = this.getHeight(true);			if (jQuery.boxModel)				C = C - D.top - D.bottom;			C = C - F.top - F.bottom;			if (C < 0)				C = 0;			this.bodyEl.style.height = C + "px"		} else			this.bodyEl.style.height = "";		var _ = this.getWidth(true),		B = _;		_ = _ - F.left - F.right;		if (jQuery.boxModel)			_ = _ - D.left - D.right;		if (_ < 0)			_ = 0;		this.bodyEl.style.width = _ + "px";		mini.layout(this.borderEl)	},	setBody : function (_) {		if (!_)			return;		if (!mini.isArray(_))			_ = [_];		for (var $ = 0, A = _.length; $ < A; $++)			mini.append(this.bodyEl, _[$]);		mini.parse(this.bodyEl);		this.doLayout()	},	setBodyStyle : function ($) {		mini.setStyle(this.bodyEl, $);		this.doLayout()	},	getAttrs : function ($) {		var _ = mini.Box.superclass.getAttrs.call(this, $);		_.body = mini.getChildNodes($, true);		mini._ParseString($, _, ["bodyStyle"]);		return _	}});mini.regClass(mini.Box, "box");mini.Include = function () {	mini.Include.superclass.constructor.call(this)};mini.extend(mini.Include, mini.Control, {	url : "",	async : false,	uiCls : "mini-include",	_create : function () {		this.el = document.createElement("div");		this.el.className = "mini-include"	},	_initEvents : function () {},	doLayout : function () {		if (!this.canLayout())			return;		var A = this.el.childNodes;		if (A)			for (var $ = 0, B = A.length; $ < B; $++) {				var _ = A[$];				mini.layout(_)			}	},	setUrl : function ($) {		this.url = $;		mini.update({			url : this.url,			el : this.el,			async : this.async		});		this.doLayout()	},	setAsync : function ($) {		this.async = false	},	getAttrs : function ($) {		var _ = mini.Include.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["url"]);		return _	}});mini.regClass(mini.Include, "include");mini.Tabs = function () {	this._initTabs();	mini.Tabs.superclass.constructor.call(this)};mini.extend(mini.Tabs, mini.Control, {	activeIndex : -1,	tabAlign : "left",	tabPosition : "top",	showBody : true,	nameField : "id",	titleField : "title",	urlField : "url",	url : "",	maskOnLoad : true,	bodyStyle : "",	tabHoverCls : "mini-tab-hover",	tabActiveCls : "mini-tab-active",	set : function ($) {		if (typeof $ == "string")			return this;		var _ = this.allowLayout;		this.allowLayout = false;		var A = $.activeIndex;		delete $.activeIndex;		var B = $.url;		delete $.url;		mini.Tabs.superclass.set.call(this, $);		if (B)			this.setUrl(B);		if (mini.isNumber(A))			this.setActiveIndex(A);		this.allowLayout = _;		this.doLayout();		return this	},	uiCls : "mini-tabs",	_create : function () {		this.el = document.createElement("div");		this.el.className = "mini-tabs";		var $ = "<table class=\"mini-tabs-table\" cellspacing=\"0\" cellpadding=\"0\"><tr style=\"width:100%;\">" + "<td></td>" + "<td style=\"text-align:left;vertical-align:top;width:100%;\"><div class=\"mini-tabs-bodys\"></div></td>" + "<td></td>" + "</tr></table>";		this.el.innerHTML = $;		this.tableEl = this.el.firstChild;		this.trEl = this.tableEl.rows[0];		this.td1El = this.trEl.cells[0];		this.td2El = this.trEl.cells[1];		this.td3El = this.trEl.cells[2];		this.bodyEl = this.td2El.firstChild;		this.doUpdate()	},	_doClearElement : function () {		mini.removeClass(this.td1El, "mini-tabs-header");		mini.removeClass(this.td3El, "mini-tabs-header");		this.td1El.innerHTML = "";		this.td3El.innerHTML = "";		mini.removeChilds(this.td2El, this.bodyEl)	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.el, "mousedown", this.__OnMouseDown, this);			mini.on(this.el, "click", this.__OnClick, this);			mini.on(this.el, "mouseover", this.__OnMouseOver, this);			mini.on(this.el, "mouseout", this.__OnMouseOut, this)		}, this)	},	_initTabs : function () {		this.tabs = []	},	_TabID : 1,	createTab : function (_) {		var $ = mini.copyTo({				_id : this._TabID++,				name : "",				title : "",				newLine : false,				iconCls : "",				iconStyle : "",				headerCls : "",				headerStyle : "",				bodyCls : "",				bodyStyle : "",				visible : true,				enabled : true,				showCloseButton : false,				active : false,				url : "",				loaded : false,				refreshOnClick : false			}, _);		if (_) {			_ = mini.copyTo(_, $);			$ = _		}		return $	},	_doLoad : function () {		var _ = mini.getData(this.url);		if (!_)			_ = [];		for (var $ = 0, B = _.length; $ < B; $++) {			var A = _[$];			A.title = A[this.titleField];			A.url = A[this.urlField];			A.name = A[this.nameField]		}		this.setTabs(_);		this.fire("load")	},	load : function ($) {		if (typeof $ == "string")			this.setUrl($);		else			this.setTabs($)	},	setUrl : function ($) {		this.url = $;		this._doLoad()	},	setNameField : function ($) {		this.nameField = $	},	setTitleField : function ($) {		this.titleField = $	},	setUrlField : function ($) {		this.urlField = $	},	setTabs : function (_) {		if (!mini.isArray(_))			return;		this.beginUpdate();		this.removeAll();		for (var $ = 0, A = _.length; $ < A; $++)			this.addTab(_[$]);		this.setActiveIndex(0);		this.endUpdate()	},	removeAll : function () {		var _ = this.tabs;		for (var $ = _.length - 1; $ >= 0; $--)			this.removeTab(_[$])	},	addTab : function (C, $) {		if (typeof C == "string")			C = {				title : C			};		C = this.createTab(C);		if (typeof $ != "number")			$ = this.tabs.length;		this.tabs.insert($, C);		var E = this._createTabBodyId(C),		F = "<div id=\"" + E + "\" class=\"mini-tabs-body " + C.bodyCls + "\" style=\"" + C.bodyStyle + ";display:none;\"></div>";		mini.append(this.bodyEl, F);		var B = C.body;		delete C.body;		if (B) {			if (!mini.isArray(B))				B = [B];			var A = this.getTabBodyEl(C);			for (var _ = 0, D = B.length; _ < D; _++)				mini.append(A, B[_])		}		this.doUpdate();		return C	},	removeTab : function (C) {		C = this.getTab(C);		if (!C)			return;		var B = C == this.getActiveTab(),		A = this._OnTabDestroy(C);		this.tabs.remove(C);		this._doRemoveIFrame(C);		var _ = this.getTabBodyEl(C);		if (_)			this.bodyEl.removeChild(_);		if (A && B) {			for (var $ = this.activeIndex; $ >= 0; $--) {				var C = this.getTab($);				if (C && C.enabled && C.visible) {					this.activeIndex = $;					break				}			}			this.doUpdate();			this.setActiveIndex(this.activeIndex);			this.fire("activechanged")		} else			this.doUpdate();		return C	},	moveTab : function (A, $) {		A = this.getTab(A);		if (!A)			return;		var _ = this.tabs[$];		if (!_ || _ == A)			return;		this.tabs.remove(A);		var $ = this.tabs.indexOf(_);		this.tabs.insert($, A);		this.doUpdate()	},	updateTab : function ($, _) {		$ = this.getTab($);		if (!$)			return;		mini.copyTo($, _);		this.doUpdate()	},	_getMaskWrapEl : function () {		return this.bodyEl	},	_doRemoveIFrame : function (B) {		if (B.iframeEl && B.iframeEl.parentNode) {			B.iframeEl._ondestroy();			B.iframeEl.parentNode.removeChild(B.iframeEl);			B.iframeEl = null		}		var C = this.getTabBodyEl();		if (C) {			var A = mini.getChildNodes(C, true);			for (var _ = 0, D = A.length; _ < D; _++) {				var $ = A[_];				if ($ && $.parentNode)					$.parentNode.removeChild($)			}		}	},	deferLoadingTime : 180,	_doLoadTab : function (A) {		if (!A)			return;		var B = this.getTabBodyEl(A);		if (!B)			return;		this._doRemoveIFrame(A);		A.loaded = true;		if (this.maskOnLoad)			this.loading();		var C = new Date(),		$ = this,		_ = mini.createIFrame(A.url, function () {				var _ = (C - new Date()) + $.deferLoadingTime;				if (_ < 0)					_ = 0;				setTimeout(function () {					$.unmask();					$.doLayout()				}, _);				try {					A.iframeEl.contentWindow.CloseOwnerWindow = function (_) {						setTimeout(function () {							A.removeAction = _;							$.removeTab(A)						}, 1)					}				} catch (B) {}								var B = {					sender : $,					tab : A,					index : $.tabs.indexOf(A),					name : A.name,					iframe : A.iframeEl				};				if (A.onload) {					if (typeof A.onload == "string")						A.onload = window[A.onload];					if (A.onload)						A.onload.call($, B)				}				$.fire("tabload", B)			}, function () {});		B.appendChild(_);		A.iframeEl = _;		A.loadedUrl = A.url	},	_OnTabDestroy : function ($) {		var _ = {			sender : this,			tab : $,			index : this.tabs.indexOf($),			name : $.name,			iframe : $.iframeEl,			autoActive : true		};		if ($.ondestroy) {			if (typeof $.ondestroy == "string")				$.ondestroy = window[$.ondestroy];			if ($.ondestroy)				$.ondestroy.call(this, _)		}		this.fire("tabdestroy", _);		return _.autoActive	},	loadTab : function (A, _, $, B) {		if (!A)			return;		_ = this.getTab(_);		if (!_)			_ = this.getActiveTab();		if (!_)			return;		_.url = A;		this._doLoadTab(_)	},	reloadTab : function ($) {		$ = this.getTab($);		if (!$)			$ = this.getActiveTab();		if (!$)			return;		this.loadTab($.url, $)	},	getTabRows : function () {		var A = [],		_ = [];		for (var $ = 0, C = this.tabs.length; $ < C; $++) {			var B = this.tabs[$];			if ($ != 0 && B.newLine) {				A.push(_);				_ = []			}			_.push(B)		}		A.push(_);		return A	},	doUpdate : function () {		if (this.allowUpdate === false)			return;		mini.removeClass(this.el, "mini-tabs-position-left");		mini.removeClass(this.el, "mini-tabs-position-top");		mini.removeClass(this.el, "mini-tabs-position-right");		mini.removeClass(this.el, "mini-tabs-position-bottom");		if (this.tabPosition == "bottom") {			mini.addClass(this.el, "mini-tabs-position-bottom");			this._doUpdateBottom()		} else if (this.tabPosition == "right") {			mini.addClass(this.el, "mini-tabs-position-right");			this._doUpdateRight()		} else if (this.tabPosition == "left") {			mini.addClass(this.el, "mini-tabs-position-left");			this._doUpdateLeft()		} else {			mini.addClass(this.el, "mini-tabs-position-top");			this._doUpdateTop()		}		this.doLayout();		this.setActiveIndex(this.activeIndex, false)	},	doLayout : function () {		if (!this.canLayout())			return;		var R = this.el.style.height == "auto" || this.el.style.height == "";		C = this.getHeight(true);		w = this.getWidth(true);		var G = C,		O = w;		if (!R && this.showBody) {			var Q = jQuery(this.headerEl).outerHeight(),			$ = jQuery(this.headerEl).outerWidth();			if (this.tabPosition == "top")				Q = jQuery(this.headerEl.parentNode).outerHeight();			if (this.tabPosition == "left" || this.tabPosition == "right")				w = w - $;			else				C = C - Q;			if (jQuery.boxModel) {				var D = mini.getPaddings(this.bodyEl),				S = mini.getBorders(this.bodyEl);				C = C - D.top - D.bottom - S.top - S.bottom;				w = w - D.left - D.right - S.left - S.right			}			margin = mini.getMargins(this.bodyEl);			C = C - margin.top - margin.bottom;			w = w - margin.left - margin.right;			if (C < 0)				C = 0;			if (w < 0)				w = 0;			this.bodyEl.style.width = w + "px";			this.bodyEl.style.height = C + "px";			if (this.tabPosition == "left" || this.tabPosition == "right") {				var E = this.headerEl.firstChild.rows[0].cells,				_ = E[0].firstChild.rows,				F = last = all = 0;				for (var K = 0, H = _.length; K < H; K++) {					var I = _[K],					N = jQuery(I).outerHeight();					all += N;					if (K == 0)						F = N;					if (K == H - 1)						last = N				}				switch (this.tabAlign) {				case "center":					var P = parseInt((G - (all - F - last)) / 2);					for (K = 0, H = E.length; K < H; K++) {						E[K].firstChild.style.height = G + "px";						var B = E[K].firstChild,						L = B.rows[0],						U = B.rows[B.rows.length - 1];						L.style.height = P + "px";						U.style.height = P + "px"					}					break;				case "right":					for (K = 0, H = E.length; K < H; K++) {						var B = E[K].firstChild,						I = B.rows[0],						T = G - (all - F);						if (T >= 0)							I.style.height = T + "px"					}					break;				case "fit":					for (K = 0, H = E.length; K < H; K++)						E[K].firstChild.style.height = G + "px";					break;				default:					for (K = 0, H = E.length; K < H; K++) {						B = E[K].firstChild,						I = B.rows[B.rows.length - 1],						T = G - (all - last);						if (T >= 0)							I.style.height = T + "px"					}					break				}			}		} else {			this.bodyEl.style.width = "auto";			this.bodyEl.style.height = "auto"		}		var A = this.getTabBodyEl(this.activeIndex);		if (A)			if (!R && this.showBody) {				var C = mini.getHeight(this.bodyEl, true);				if (jQuery.boxModel) {					D = mini.getPaddings(A),					S = mini.getBorders(A);					C = C - D.top - D.bottom - S.top - S.bottom				}				A.style.height = C + "px"			} else				A.style.height = "auto";		switch (this.tabPosition) {		case "bottom":			var M = this.headerEl.childNodes;			for (K = 0, H = M.length; K < H; K++) {				B = M[K];				mini.removeClass(B, "mini-tabs-header2");				if (H > 1 && K != 0)					mini.addClass(B, "mini-tabs-header2")			}			break;		case "left":			E = this.headerEl.firstChild.rows[0].cells;			for (K = 0, H = E.length; K < H; K++) {				var J = E[K];				mini.removeClass(J, "mini-tabs-header2");				if (H > 1 && K == 0)					mini.addClass(J, "mini-tabs-header2")			}			break;		case "right":			E = this.headerEl.firstChild.rows[0].cells;			for (K = 0, H = E.length; K < H; K++) {				J = E[K];				mini.removeClass(J, "mini-tabs-header2");				if (H > 1 && K != 0)					mini.addClass(J, "mini-tabs-header2")			}			break;		default:			M = this.headerEl.childNodes;			for (K = 0, H = M.length; K < H; K++) {				B = M[K];				mini.removeClass(B, "mini-tabs-header2");				if (H > 1 && K == 0)					mini.addClass(B, "mini-tabs-header2")			}			break		}		mini.removeClass(this.el, "mini-tabs-scroll");		if (this.tabPosition == "top") {			jQuery(this.headerEl).width(O);			if (this.headerEl.offsetWidth < this.headerEl.scrollWidth) {				jQuery(this.headerEl).width(O - 60);				mini.addClass(this.el, "mini-tabs-scroll")			}			if (mini.isIE && !jQuery.boxModel)				this._leftButtonEl.style.left = "-26px"		}		this._doScrollButton();		mini.layout(this.bodyEl)	},	setTabAlign : function ($) {		this.tabAlign = $;		this.doUpdate()	},	setTabPosition : function ($) {		this.tabPosition = $;		this.doUpdate()	},	getTab : function ($) {		if (typeof $ == "object")			return $;		if (typeof $ == "number")			return this.tabs[$];		else			for (var _ = 0, B = this.tabs.length; _ < B; _++) {				var A = this.tabs[_];				if (A.name == $)					return A			}	},	getTabEl : function ($) {		var C = this.getTab($);		if (!C)			return null;		var E = this._createTabId(C),		B = this.el.getElementsByTagName("*");		for (var _ = 0, D = B.length; _ < D; _++) {			var A = B[_];			if (A.id == E)				return A		}		return null	},	getTabBodyEl : function ($) {		var C = this.getTab($);		if (!C)			return null;		var E = this._createTabBodyId(C),		B = this.bodyEl.childNodes;		for (var _ = 0, D = B.length; _ < D; _++) {			var A = B[_];			if (A.id == E)				return A		}		return null	},	getTabIFrameEl : function ($) {		var _ = this.getTab($);		if (!_)			return null;		return _.iframeEl	},	_createTabId : function ($) {		return this.uid + "$" + $._id	},	_createTabBodyId : function ($) {		return this.uid + "$body$" + $._id	},	_doScrollButton : function () {		if (this.tabPosition == "top") {			mini.removeClass(this._leftButtonEl, "mini-disabled");			mini.removeClass(this._rightButtonEl, "mini-disabled");			if (this.headerEl.scrollLeft == 0)				mini.addClass(this._leftButtonEl, "mini-disabled");			var _ = this.getTabEl(this.tabs.length - 1);			if (_) {				var $ = mini.getBox(_),				A = mini.getBox(this.headerEl);				if ($.right <= A.right)					mini.addClass(this._rightButtonEl, "mini-disabled")			}		}	},	setActiveIndex : function ($, H) {		var L = this.getTab($),		C = this.getTab(this.activeIndex),		M = L != C,		J = this.getTabBodyEl(this.activeIndex);		if (J)			J.style.display = "none";		if (L)			this.activeIndex = this.tabs.indexOf(L);		else			this.activeIndex = -1;		J = this.getTabBodyEl(this.activeIndex);		if (J)			J.style.display = "";		J = this.getTabEl(C);		if (J)			mini.removeClass(J, this.tabActiveCls);		J = this.getTabEl(L);		if (J)			mini.addClass(J, this.tabActiveCls);		if (J && M) {			if (this.tabPosition == "bottom") {				var A = mini.findParent(J, "mini-tabs-header");				if (A)					jQuery(this.headerEl).prepend(A)			} else if (this.tabPosition == "left") {				var F = mini.findParent(J, "mini-tabs-header").parentNode;				if (F)					F.parentNode.appendChild(F)			} else if (this.tabPosition == "right") {				F = mini.findParent(J, "mini-tabs-header").parentNode;				if (F)					jQuery(F.parentNode).prepend(F)			} else {				A = mini.findParent(J, "mini-tabs-header");				if (A)					this.headerEl.appendChild(A)			}			var B = this.headerEl.scrollLeft;			this.doLayout();			var _ = this.getTabRows();			if (_.length > 1);			else {				if (this.tabPosition == "top") {					this.headerEl.scrollLeft = B;					var N = this.getTabEl(this.activeIndex);					if (N) {						var I = this,						K = mini.getBox(N),						E = mini.getBox(I.headerEl);						if (K.x < E.x)							I.headerEl.scrollLeft -= (E.x - K.x);						else if (K.right > E.right)							I.headerEl.scrollLeft += (K.right - E.right)					}				}				this._doScrollButton()			}			for (var G = 0, D = this.tabs.length; G < D; G++) {				N = this.getTabEl(this.tabs[G]);				if (N)					mini.removeClass(N, this.tabHoverCls)			}		}		if (M) {			var O = {				tab : L,				index : this.tabs.indexOf(L),				name : L.name			};			this.fire("ActiveChanged", O)		}		if (H !== false)			if (L && L.url && !L.loaded)				this.loadTab(L.url, L);		if (this.canLayout()) {			try {				mini.layoutIFrames(this.el)			} catch (O) {}					}	},	activeTab : function ($) {		this.setActiveIndex($)	},	getActiveTab : function () {		return this.getTab(this.activeIndex)	},	getActiveIndex : function () {		return this.activeIndex	},	_tryActiveTab : function (_) {		_ = this.getTab(_);		if (!_)			return;		var $ = this.tabs.indexOf(_);		if (this.activeIndex == $)			return;		var A = {			tab : _,			index : $,			name : _.name,			cancel : false		};		this.fire("BeforeActiveChanged", A);		if (A.cancel == false)			this.activeTab(_)	},	setShowBody : function ($) {		if (this.showBody != $) {			this.showBody = $;			this.doLayout()		}	},	setBodyStyle : function ($) {		mini.setStyle(this.bodyEl, $);		this.doLayout()	},	setMaskOnLoad : function ($) {		this.maskOnLoad = $	},	_getTabByEvent : function (B) {		var A = mini.findParent(B.target, "mini-tab");		if (!A)			return null;		var _ = A.id.split("$");		if (_[0] != this.uid)			return null;		var $ = parseInt(jQuery(A).attr("index"));		return this.getTab($)	},	__OnClick : function (A) {		if (this.isLoading)			return;		var _ = this._getTabByEvent(A);		if (!_)			return;		if (_.enabled)			if (mini.findParent(A.target, "mini-tab-close"))				this._OnCloseButtonClick(_, A);			else {				var $ = _.loadedUrl;				this._tryActiveTab(_);				if (_.refreshOnClick && _.url == $)					this.reloadTab(_)			}	},	hoverTab : null,	__OnMouseOver : function (A) {		var $ = this._getTabByEvent(A);		if ($ && $.enabled) {			var _ = this.getTabEl($);			mini.addClass(_, this.tabHoverCls);			this.hoverTab = $		}	},	__OnMouseOut : function (_) {		if (this.hoverTab) {			var $ = this.getTabEl(this.hoverTab);			mini.removeClass($, this.tabHoverCls)		}		this.hoverTab = null	},	__OnMouseDown : function (B) {		if (this.tabPosition == "top") {			var _ = this,			A = 0,			$ = 10;			if (B.target == this._leftButtonEl)				this.scrollTimer = setInterval(function () {						_.headerEl.scrollLeft -= $;						A++;						if (A > 5)							$ = 18;						if (A > 10)							$ = 25;						_._doScrollButton()					}, 20);			else if (B.target == this._rightButtonEl)				this.scrollTimer = setInterval(function () {						_.headerEl.scrollLeft += $;						A++;						if (A > 5)							$ = 18;						if (A > 10)							$ = 25;						_._doScrollButton()					}, 20);			mini.on(document, "mouseup", this.__OnDocMouseUp, this)		}	},	__OnDocMouseUp : function ($) {		clearInterval(this.scrollTimer);		this.scrollTimer = null;		mini.un(document, "mouseup", this.__OnDocMouseUp, this)	},	_doUpdateTop : function () {		var L = this.tabPosition == "top",		O = "";		if (L) {			O += "<div class=\"mini-tabs-scrollCt\">";			O += "<a class=\"mini-tabs-leftButton\" href=\"javascript:void(0)\" hideFocus onclick=\"return false\"></a><a class=\"mini-tabs-rightButton\" href=\"javascript:void(0)\" hideFocus onclick=\"return false\"></a>"		}		O += "<div class=\"mini-tabs-headers\">";		var B = this.getTabRows();		for (var M = 0, A = B.length; M < A; M++) {			var I = B[M],			D = "";			O += "<table class=\"mini-tabs-header\" cellspacing=\"0\" cellpadding=\"0\"><tr><td class=\"mini-tabs-space mini-tabs-firstSpace\"><div></div></td>";			for (var J = 0, E = I.length; J < E; J++) {				var N = I[J],				G = this._createTabId(N);				if (!N.visible)					continue;				var $ = this.tabs.indexOf(N),				D = N.headerCls || "";				if (N.enabled == false)					D += " mini-disabled";				O += "<td id=\"" + G + "\" index=\"" + $ + "\"  class=\"mini-tab " + D + "\" style=\"" + N.headerStyle + "\">";				if (N.iconCls || N.iconStyle)					O += "<span class=\"mini-tab-icon " + N.iconCls + "\" style=\"" + N.iconStyle + "\"></span>";				O += "<span class=\"mini-tab-text\">" + N.title + "</span>";				if (N.showCloseButton) {					var _ = "";					if (N.enabled)						_ = "onmouseover=\"mini.addClass(this, 'mini-tab-close-hover')\" onmouseout=\"mini.removeClass(this, 'mini-tab-close-hover')\"";					O += "<span class=\"mini-tab-close\" " + _ + "></span>"				}				O += "</td>";				if (J != E - 1)					O += "<td class=\"mini-tabs-space2\"><div></div></td>"			}			O += "<td class=\"mini-tabs-space mini-tabs-lastSpace\" ><div></div></td></tr></table>"		}		if (L)			O += "</div>";		O += "</div>";		this._doClearElement();		mini.prepend(this.td2El, O);		var H = this.td2El;		this.headerEl = H.firstChild.lastChild;		if (L) {			this._leftButtonEl = this.headerEl.parentNode.firstChild;			this._rightButtonEl = this.headerEl.parentNode.childNodes[1]		}		switch (this.tabAlign) {		case "center":			var K = this.headerEl.childNodes;			for (J = 0, E = K.length; J < E; J++) {				var C = K[J],				F = C.rows[0];				F.cells[0].style.width = "50%";				F.cells[F.cells.length - 1].style.width = "50%"			}			break;		case "right":			K = this.headerEl.childNodes;			for (J = 0, E = K.length; J < E; J++) {				C = K[J],				F = C.rows[0];				F.cells[0].style.width = "100%"			}			break;		case "fit":			break;		default:			K = this.headerEl.childNodes;			for (J = 0, E = K.length; J < E; J++) {				C = K[J],				F = C.rows[0];				F.cells[F.cells.length - 1].style.width = "100%"			}			break		}	},	_doUpdateBottom : function () {		this._doUpdateTop();		var $ = this.td2El;		jQuery($).append($.firstChild);		this.headerEl = $.lastChild	},	_doUpdateLeft : function () {		var J = "<table cellspacing=\"0\" cellpadding=\"0\"><tr>",		B = this.getTabRows();		for (var H = 0, A = B.length; H < A; H++) {			var F = B[H],			C = "";			if (A > 1 && H != A - 1)				C = "mini-tabs-header2";			J += "<td class=\"" + C + "\"><table class=\"mini-tabs-header\" cellspacing=\"0\" cellpadding=\"0\">";			J += "<tr ><td class=\"mini-tabs-space mini-tabs-firstSpace\" ><div></div></td></tr>";			for (var G = 0, D = F.length; G < D; G++) {				var I = F[G],				E = this._createTabId(I);				if (!I.visible)					continue;				var $ = this.tabs.indexOf(I),				C = I.headerCls || "";				if (I.enabled == false)					C += " mini-disabled";				J += "<tr><td id=\"" + E + "\" index=\"" + $ + "\"  class=\"mini-tab " + C + "\" style=\"" + I.headerStyle + "\">";				if (I.iconCls || I.iconStyle)					J += "<span class=\"mini-tab-icon " + I.iconCls + "\" style=\"" + I.iconStyle + "\"></span>";				J += "<span class=\"mini-tab-text\">" + I.title + "</span>";				if (I.showCloseButton) {					var _ = "";					if (I.enabled)						_ = "onmouseover=\"mini.addClass(this, 'mini-tab-close-hover')\" onmouseout=\"mini.removeClass(this, 'mini-tab-close-hover')\"";					J += "<span class=\"mini-tab-close\" " + _ + "></span>"				}				J += "</td></tr>";				if (G != D - 1)					J += "<tr><td class=\"mini-tabs-space2\"><div></div></td></tr>"			}			J += "<tr ><td class=\"mini-tabs-space mini-tabs-lastSpace\" ><div></div></td></tr>";			J += "</table></td>"		}		J += "</tr ></table>";		this._doClearElement();		mini.addClass(this.td1El, "mini-tabs-header");		mini.append(this.td1El, J);		this.headerEl = this.td1El	},	_doUpdateRight : function () {		this._doUpdateLeft();		mini.removeClass(this.td1El, "mini-tabs-header");		mini.removeClass(this.td3El, "mini-tabs-header");		mini.append(this.td3El, this.td1El.firstChild);		this.headerEl = this.td3El	},	_OnCloseButtonClick : function (_, $) {		var A = {			tab : _,			index : this.tabs.indexOf(_),			name : _.name.toLowerCase(),			htmlEvent : $,			cancel : false		};		this.fire("beforecloseclick", A);		if (A.cancel == true)			return;		_.removeAction = "close";		this.removeTab(_);		this.fire("closeclick", A)	},	onBeforeCloseClick : function (_, $) {		this.on("beforecloseclick", _, $)	},	onCloseClick : function (_, $) {		this.on("closeclick", _, $)	},	onActiveChanged : function (_, $) {		this.on("activechanged", _, $)	},	getAttrs : function (B) {		var G = mini.Tabs.superclass.getAttrs.call(this, B);		mini._ParseString(B, G, ["tabAlign", "tabPosition", "bodyStyle", "onactivechanged", "onbeforeactivechanged", "url", "ontabload", "ontabdestroy", "onbeforecloseclick", "oncloseclick", "titleField", "urlField", "nameField"]);		mini._ParseBool(B, G, ["allowAnim", "showBody", "maskOnLoad"]);		mini._ParseInt(B, G, ["activeIndex"]);		var A = [],		F = mini.getChildNodes(B);		for (var _ = 0, E = F.length; _ < E; _++) {			var C = F[_],			$ = {};			A.push($);			$.style = C.style.cssText;			mini._ParseString(C, $, ["name", "title", "url", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle", "onload", "ondestroy"]);			mini._ParseBool(C, $, ["newLine", "visible", "enabled", "showCloseButton", "refreshOnClick"]);			var D = mini.getChildNodes(C, true);			$.body = D		}		G.tabs = A;		return G	}});mini.regClass(mini.Tabs, "tabs");mini.Menu = function () {	this.items = [];	mini.Menu.superclass.constructor.call(this)};mini.extend(mini.Menu, mini.Control);mini.copyTo(mini.Menu.prototype, mini.Popup_prototype);var mini_Popup_prototype_hide = mini.Popup_prototype.hide;mini.copyTo(mini.Menu.prototype, {	width : 140,	vertical : true,	allowSelectItem : false,	selectedItem : null,	itemSelectedCls : "mini-menuitem-selected",	textField : "text",	resultAsTree : true,	idField : "id",	parentField : "pid",	itemsField : "children",	_clearBorder : false,	showAction : "none",	hideAction : "outerclick",	set : function ($) {		if (typeof $ == "string")			return this;		var _ = $.url;		delete $.url;		mini.Menu.superclass.set.call(this, $);		if (_)			this.setUrl(_);		return this	},	uiCls : "mini-menu",	_create : function () {		var $ = this.el = document.createElement("table");		this.el.className = "mini-menu";		this.el.cellSpacing = "0";		this.el.cellPadding = "0";		jQuery(this.el).append("<tr><td style=\"text-align:left;vertical-align:top;padding:0;border:0;\"><div class=\"mini-menu-inner\"></div></td></tr>");		this.contentEl = this.el.rows[0].cells[0].firstChild	},	destroy : function () {		mini.un(document, "mousedown", this.__OnBodyMouseDown, this);		mini.un(window, "resize", this.__OnWindowResize, this);		mini.Menu.superclass.destroy.call(this)	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(document, "mousedown", this.__OnBodyMouseDown, this);			mini.on(this.el, "mouseover", this.__OnMouseOver, this);			mini.on(window, "resize", this.__OnWindowResize, this);			mini.on(this.el, "contextmenu", function ($) {				$.preventDefault();				$.stopPropagation()			}, this)		}, this)	},	within : function (B) {		if (mini.isAncestor(this.el, B.target))			return true;		for (var _ = 0, A = this.items.length; _ < A; _++) {			var $ = this.items[_];			if ($.within(B))				return true		}		return false	},	_getClearEl : function () {		if (!this._clearEl)			this._clearEl = mini.append(this.contentEl, "<div style=\"clear:both;\"></div>");		return this._clearEl	},	setVertical : function ($) {		this.vertical = $;		if (!$)			mini.addClass(this.el, "mini-menu-horizontal");		else			mini.removeClass(this.el, "mini-menu-horizontal");		mini.append(this.contentEl, this._getClearEl())	},	show : function () {		this.setVisible(true)	},	hide : function () {		this.hideItems();		mini_Popup_prototype_hide.call(this)	},	hideItems : function () {		for (var $ = 0, A = this.items.length; $ < A; $++) {			var _ = this.items[$];			_.hideMenu()		}	},	showItemMenu : function ($) {		for (var _ = 0, B = this.items.length; _ < B; _++) {			var A = this.items[_];			if (A == $)				A.showMenu();			else				A.hideMenu()		}	},	setItems : function (_) {		if (!mini.isArray(_))			return;		for (var $ = 0, A = _.length; $ < A; $++)			this.addItem(_[$])	},	addItem : function ($) {		if ($ == "-" || $ == "|") {			jQuery(this.contentEl).append("<span class=\"mini-separator\"></span>");			return		}		if (!mini.isControl($) && !$.type)			$.type = "menuitem";		$ = mini.getAndCreate($);		this.items.push($);		this.contentEl.appendChild($.el);		$.ownerMenu = this;		mini.append(this.contentEl, this._getClearEl());		this.fire("itemschanged")	},	removeItem : function ($) {		$ = mini.get($);		if (!$)			return;		this.items.remove($);		this.contentEl.removeChild($.el);		this.fire("itemschanged")	},	removeItemAt : function (_) {		var $ = this.items[_];		this.removeItem($)	},	removeAll : function () {		var $ = this.items;		for (var _ = items.length - 1; _ < l; _++)			this.removeItem(items[_])	},	getGroupItems : function (C) {		if (!C)			return [];		var A = [];		for (var _ = 0, B = this.items.length; _ < B; _++) {			var $ = this.items[_];			if ($.groupName == C)				A.push($)		}		return A	},	getItem : function ($) {		if (typeof $ == "number")			return this.items[$];		return $	},	setAllowSelectItem : function ($) {		this.allowSelectItem = $	},	setSelectedItem : function ($) {		$ = this.getItem($);		this._OnItemSelect($)	},	getSelectedItem : function ($) {		return this.selectedItem	},	setTextField : function ($) {		this.textField = $	},	setResultAsTree : function ($) {		this.resultAsTree = $	},	setIdField : function ($) {		this.idField = $	},	setParentField : function ($) {		this.parentField = $	},	url : "",	_doLoad : function () {		var B = mini.getData(this.url);		if (!B)			B = [];		if (this.resultAsTree == false)			B = mini.arrayToTree(B, this.itemsField, this.idField, this.parentField);		var _ = mini.treeToArray(B, this.itemsField, this.idField, this.parentField);		for (var A = 0, C = _.length; A < C; A++) {			var $ = _[A];			$.text = $[this.textField]		}		this.setItems(B);		this.fire("load")	},	load : function ($) {		if (typeof $ == "string")			this.setUrl($);		else			this.setItems($)	},	setUrl : function ($) {		this.url = $;		this._doLoad()	},	_OnItemClick : function ($, _) {		var A = {			item : $,			isLeaf : !$.menu,			htmlEvent : _		};		if (this.isPopup)			this.hide();		else			this.hideItems();		if (this.allowSelectItem)			this.setSelectedItem($);		this.fire("itemclick", A);		if (this.ownerItem);	},	_OnItemSelect : function ($) {		if (this.selectedItem)			this.selectedItem.removeCls(this.itemSelectedCls);		this.selectedItem = $;		if (this.selectedItem)			this.selectedItem.addCls(this.itemSelectedCls);		var _ = {			item : this.selectedItem		};		this.fire("itemselect", _)	},	onItemClick : function (_, $) {		this.on("itemclick", _, $)	},	onItemSelect : function (_, $) {		this.on("itemselect", _, $)	},	getAttrs : function (A) {		var E = mini.Menu.superclass.getAttrs.call(this, A),		D = jQuery(A);		mini._ParseString(A, E, ["popupEl", "popupCls", "showAction", "hideAction", "hAlign", "vAlign", "modalStyle", "onbeforeopen", "open", "onbeforeclose", "onclose", "url", "onitemclick", "onitemselect", "textField", "idField", "parentField"]);		mini._ParseBool(A, E, ["resultAsTree"]);		function $(G) {			var C = [];			for (var _ = 0, F = G.length; _ < F; _++) {				var B = G[_];				if (B.className == "separator") {					C.push("-");					continue				}				var E = mini.getChildNodes(B),				A = E[0],				D = E[1],				$ = new mini.MenuItem();				if (!D) {					$.applyTo(B);					C.add($);					continue				}				$.applyTo(A);				$.render(document.body);				var H = new mini.Menu();				H.applyTo(D);				$.setMenu(H);				H.render(document.body);				C.add($)			}			return C		}		var _ = $(mini.getChildNodes(A));		if (_.length > 0)			E.items = _;		var B = D.attr("vertical");		if (B)			E.vertical = B == "true" ? true : false;		var C = D.attr("allowSelectItem");		if (C)			E.allowSelectItem = C == "true" ? true : false;		return E	}});mini.regClass(mini.Menu, "menu");mini.MenuItem = function () {	mini.MenuItem.superclass.constructor.call(this)};mini.extend(mini.MenuItem, mini.Control, {	text : "",	iconCls : "",	iconStyle : "",	iconPosition : "left",	showIcon : true,	showAllow : true,	checked : false,	checkOnClick : false,	groupName : "",	hoverCls : "mini-menuitem-hover",	pressedCls : "mini-menuitem-pressed",	checkedCls : "mini-menuitem-checked",	_clearBorder : false,	menu : null,	uiCls : "mini-menuitem",	_create : function () {		var $ = this.el = document.createElement("div");		this.el.className = "mini-menuitem";		this.el.innerHTML = "<div class=\"mini-menuitem-inner\"><div class=\"mini-menuitem-icon\"></div><div class=\"mini-menuitem-text\"></div><div class=\"mini-menuitem-allow\"></div></div>";		this.innerEl = this.el.firstChild;		this.iconEl = this.innerEl.firstChild;		this.textEl = this.innerEl.childNodes[1];		this.allowEl = this.innerEl.lastChild	},	_initEvents : function () {		mini.on(this.el, "click", this.__OnClick, this);		mini.on(this.el, "mouseover", this.__OnMouseOver, this);		mini.on(this.el, "mouseout", this.__OnMouseOut, this)	},	within : function ($) {		if (mini.isAncestor(this.el, $.target))			return true;		if (this.menu && this.menu.within($))			return true;		return false	},	doUpdate : function () {		if (this.textEl)			this.textEl.innerHTML = this.text;		if (this.iconEl) {			mini.setStyle(this.iconEl, this.iconStyle);			mini.addClass(this.iconEl, this.iconCls);			this.iconEl.style.display = (this.iconStyle || this.iconCls) ? "block" : "none"		}		if (this.iconPosition == "top")			mini.addClass(this.el, "mini-menuitem-icontop");		else			mini.removeClass(this.el, "mini-menuitem-icontop");		if (this.checked)			mini.addClass(this.el, this.checkedCls);		else			mini.removeClass(this.el, this.checkedCls);		if (this.allowEl)			if (this.menu && this.menu.items.length > 0)				this.allowEl.style.display = "block";			else				this.allowEl.style.display = "none"	},	setText : function ($) {		this.text = $;		this.doUpdate()	},	setIconCls : function ($) {		mini.removeClass(this.iconEl, this.iconCls);		this.iconCls = $;		this.doUpdate()	},	setIconStyle : function ($) {		this.iconStyle = $;		this.doUpdate()	},	setIconPosition : function ($) {		this.iconPosition = $;		this.doUpdate()	},	setCheckOnClick : function ($) {		this.checkOnClick = $;		if ($)			mini.addClass(this.el, "mini-menuitem-showcheck");		else			mini.removeClass(this.el, "mini-menuitem-showcheck")	},	setChecked : function ($) {		if (this.checked != $) {			this.checked = $;			this.doUpdate();			this.fire("checkedchanged")		}	},	setGroupName : function ($) {		if (this.groupName != $)			this.groupName = $	},	getChecked : function () {		return this.checked	},	getText : function () {		return this.text	},	setChildren : function ($) {		this.setMenu($)	},	setMenu : function ($) {		if (mini.isArray($))			$ = {				type : "menu",				items : $			};		if (this.menu !== $) {			this.menu = mini.getAndCreate($);			this.menu.hide();			this.menu.ownerItem = this;			this.doUpdate();			this.menu.on("itemschanged", this.__OnItemsChanged, this)		}	},	showMenu : function () {		if (this.menu) {			this.menu.setHideAction("outerclick");			var $ = {				hAlign : "outright",				vAlign : "top",				outHAlign : "outleft",				popupCls : "mini-menu-popup"			};			if (this.ownerMenu && this.ownerMenu.vertical == false) {				$.hAlign = "left";				$.vAlign = "below";				$.outHAlign = null			}			this.menu.showAtEl(this.el, $)		}	},	hideMenu : function () {		if (this.menu)			this.menu.hide()	},	hide : function () {		this.hideMenu();		this.setVisible(false)	},	__OnItemsChanged : function ($) {		this.doUpdate()	},	getTopMenu : function () {		if (this.ownerMenu)			if (this.ownerMenu.ownerItem)				return this.ownerMenu.ownerItem.getTopMenu();			else				return this.ownerMenu;		return null	},	__OnClick : function (D) {		if (this.isReadOnly())			return;		if (this.checkOnClick)			if (this.ownerMenu && this.groupName) {				var B = this.ownerMenu.getGroupItems(this.groupName);				if (B.length > 0) {					if (this.checked == false) {						for (var _ = 0, C = B.length; _ < C; _++) {							var $ = B[_];							if ($ != this)								$.setChecked(false)						}						this.setChecked(true)					}				} else					this.setChecked(!this.checked)			} else				this.setChecked(!this.checked);		this.fire("click");		var A = this.getTopMenu();		if (A)			A._OnItemClick(this, D)	},	__OnMouseOver : function ($) {		if (this.isReadOnly())			return;		mini.addClass(this.el, this.hoverCls);		if (this.ownerMenu)			this.ownerMenu.showItemMenu(this)	},	__OnMouseOut : function ($) {		mini.removeClass(this.el, this.hoverCls)	},	onClick : function (_, $) {		this.on("click", _, $)	},	onCheckedChanged : function (_, $) {		this.on("checkedchanged", _, $)	},	getAttrs : function ($) {		var A = mini.MenuItem.superclass.getAttrs.call(this, $),		_ = jQuery($);		A.text = $.innerHTML;		mini._ParseString($, A, ["text", "iconCls", "iconStyle", "iconPosition", "groupName", "onclick", "oncheckedchanged"]);		mini._ParseBool($, A, ["checkOnClick", "checked"]);		return A	}});mini.regClass(mini.MenuItem, "menuitem");mini.NavBar = function () {	this._initGroups();	mini.NavBar.superclass.constructor.call(this)};mini.extend(mini.NavBar, mini.Control, {	width : 180,	activeIndex : -1,	autoCollapse : false,	groupCls : "",	groupStyle : "",	groupHeaderCls : "",	groupHeaderStyle : "",	groupBodyCls : "",	groupBodyStyle : "",	groupHoverCls : "",	groupActiveCls : "",	allowAnim : true,	set : function (A) {		if (typeof A == "string")			return this;		var $ = this.allowLayout;		this.allowLayout = false;		var _ = A.activeIndex;		delete A.activeIndex;		mini.NavBar.superclass.set.call(this, A);		if (mini.isNumber(_))			this.setActiveIndex(_);		this.allowLayout = $;		this.doLayout();		return this	},	uiCls : "mini-navbar",	_create : function () {		this.el = document.createElement("div");		this.el.className = "mini-navbar";		this.el.innerHTML = "<div class=\"mini-navbar-border\"></div>";		this.borderEl = this.el.firstChild	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.el, "click", this.__OnClick, this)		}, this)	},	_createGroupId : function ($) {		return this.uid + "$" + $._id	},	_GroupId : 1,	_initGroups : function () {		this.groups = []	},	_createGroupEl : function (_) {		var G = this._createGroupId(_),		F = "<div id=\"" + G + "\" class=\"mini-navbar-group " + _.cls + "\" style=\"" + _.style + "\">" + "<div class=\"mini-navbar-groupHeader " + _.headerCls + "\" style=\"" + _.headerStyle + ";\"></div>" + "<div class=\"mini-navbar-groupBody " + _.bodyCls + "\" style=\"" + _.bodyStyle + ";\"></div>" + "</div>",		A = mini.append(this.borderEl, F),		D = A.lastChild,		C = _.body;		delete _.body;		if (C) {			if (!mini.isArray(C))				C = [C];			for (var $ = 0, E = C.length; $ < E; $++) {				var B = C[$];				mini.append(D, B)			}		}		return A	},	createGroup : function (_) {		var $ = mini.copyTo({				_id : this._GroupId++,				name : "",				title : "",				cls : "",				style : "",				iconCls : "",				iconStyle : "",				headerCls : "",				headerStyle : "",				bodyCls : "",				bodyStyle : "",				visible : true,				enabled : true,				showCollapseButton : true,				expanded : false			}, _);		return $	},	setGroups : function (_) {		if (!mini.isArray(_))			return;		for (var $ = 0, A = _.length; $ < A; $++)			this.addGroup(_[$])	},	addGroup : function (_, $) {		if (typeof _ == "string")			_ = {				title : _			};		_ = this.createGroup(_);		if (typeof $ != "number")			$ = this.groups.length;		this.groups.insert($, _);		var B = this._createGroupEl(_);		_._el = B;		var $ = this.groups.indexOf(_),		A = this.groups[$ + 1];		if (A) {			var C = this.getGroupEl(A);			jQuery(C).before(B)		}		this.doUpdate();		return _	},	updateGroup : function ($, _) {		var $ = this.getGroup($);		if (!$)			return;		mini.copyTo($, _);		this.doUpdate()	},	removeGroup : function ($) {		$ = this.getGroup($);		if (!$)			return;		var _ = this.getGroupEl($);		if (_)			_.parentNode.removeChild(_);		this.doUpdate()	},	moveGroup : function (_, $) {		_ = this.getGroup(_);		if (!_)			return;		target = this.getGroup($);		var A = this.getGroupEl(_);		this.groups.remove(_);		if (target) {			$ = this.groups.indexOf(target);			this.groups.insert($, _);			var B = this.getGroupEl(target);			jQuery(B).before(A)		} else {			this.groups.add(_);			this.borderEl.appendChild(A)		}		this.doUpdate()	},	doUpdate : function () {		for (var _ = 0, E = this.groups.length; _ < E; _++) {			var A = this.groups[_],			B = A._el,			D = B.firstChild,			C = B.lastChild,			$ = "<div class=\"mini-navbar-icon " + A.iconCls + "\" style=\"" + A.iconStyle + ";\"></div>",			F = "<div class=\"mini-tools\"><span class=\"mini-tools-collapse\"></span></div>" + ((A.iconStyle || A.iconCls) ? $ : "") + "<div class=\"mini-navbar-groupTitle\">" + A.title + "</div><div style=\"clear:both;\"></div>";			D.innerHTML = F;			if (A.enabled)				mini.removeClass(B, "mini-disabled");			else				mini.addClass(B, "mini-disabled");			mini.addClass(B, A.cls);			mini.setStyle(B, A.style);			mini.addClass(C, A.bodyCls);			mini.setStyle(C, A.bodyStyle);			mini.addClass(D, A.headerCls);			mini.setStyle(D, A.headerStyle);			mini.removeClass(B, "mini-navbar-firstGroup");			mini.removeClass(B, "mini-navbar-lastGroup");			if (_ == 0)				mini.addClass(B, "mini-navbar-firstGroup");			if (_ == E - 1)				mini.addClass(B, "mini-navbar-lastGroup")		}		this.doLayout()	},	doLayout : function () {		if (!this.canLayout())			return;		if (this.inAniming)			return;		this._doLayoutInner();		for (var $ = 0, E = this.groups.length; $ < E; $++) {			var _ = this.groups[$],			A = _._el,			C = A.lastChild;			if (_.expanded) {				mini.addClass(A, "mini-navbar-expand");				mini.removeClass(A, "mini-navbar-collapse")			} else {				mini.removeClass(A, "mini-navbar-expand");				mini.addClass(A, "mini-navbar-collapse")			}			C.style.height = "auto";			C.style.display = _.expanded ? "block" : "none";			A.style.display = _.visible ? "" : "none"		}		var D = this.el.style.height == "auto" || this.el.style.height == "",		B = this.getActiveGroup();		if (!D && this.autoCollapse && B) {			A = this.getGroupEl(this.activeIndex);			A.lastChild.style.height = this._getFillGroupBodyHeight() + "px"		}		mini.layout(this.borderEl)	},	_doLayoutInner : function () {		if (this.isAutoHeight())			this.borderEl.style.height = "auto";		else {			var $ = this.getHeight(true);			if (!jQuery.boxModel) {				var _ = mini.getBorders(this.borderEl);				$ = $ + _.top + _.bottom			}			this.borderEl.style.height = $ + "px"		}	},	isAutoHeight : function () {		return this.el.style.height == "auto" || this.el.style.height == ""	},	_getFillGroupBodyHeight : function () {		var C = jQuery(this.el).height(),		K = mini.getBorders(this.borderEl);		C = C - K.top - K.bottom;		var A = this.getActiveGroup(),		E = 0;		for (var F = 0, D = this.groups.length; F < D; F++) {			var _ = this.groups[F],			G = this.getGroupEl(_);			if (_.visible == false || _ == A)				continue;			var $ = G.lastChild.style.display;			G.lastChild.style.display = "none";			var J = jQuery(G).outerHeight();			G.lastChild.style.display = $;			var L = mini.getMargins(G);			J = J + L.top + L.bottom;			E += J		}		C = C - E;		var H = this.getGroupEl(this.activeIndex);		C = C - jQuery(H.firstChild).outerHeight();		if (jQuery.boxModel) {			var B = mini.getPaddings(H.lastChild),			I = mini.getBorders(H.lastChild);			C = C - B.top - B.bottom - I.top - I.bottom		}		B = mini.getPaddings(H),		I = mini.getBorders(H),		L = mini.getMargins(H);		C = C - L.top - L.bottom;		C = C - B.top - B.bottom - I.top - I.bottom;		if (C < 0)			C = 0;		return C	},	getGroup : function ($) {		if (typeof $ == "object")			return $;		if (typeof $ == "number")			return this.groups[$];		else			for (var _ = 0, B = this.groups.length; _ < B; _++) {				var A = this.groups[_];				if (A.name == $)					return A			}	},	_getGroupById : function (B) {		for (var $ = 0, A = this.groups.length; $ < A; $++) {			var _ = this.groups[$];			if (_._id == B)				return _		}	},	getGroupEl : function ($) {		var _ = this.getGroup($);		if (!_)			return null;		return _._el	},	getGroupBodyEl : function ($) {		var _ = this.getGroupEl($);		if (_)			return _.lastChild;		return null	},	setAutoCollapse : function ($) {		this.autoCollapse = $	},	setActiveIndex : function (_) {		var $ = this.getGroup(_),		A = this.getGroup(this.activeIndex),		B = $ != A;		if ($)			this.activeIndex = this.groups.indexOf($);		else			this.activeIndex = -1;		$ = this.getGroup(this.activeIndex);		if ($) {			var C = this.allowAnim;			this.allowAnim = false;			this.expandGroup($);			this.allowAnim = C		}	},	getActiveGroup : function () {		return this.getGroup(this.activeIndex)	},	getActiveIndex : function () {		return this.activeIndex	},	showGroup : function ($) {		$ = this.getGroup($);		if (!$ || $.visible == true)			return;		$.visible = true;		this.doUpdate()	},	hideGroup : function ($) {		$ = this.getGroup($);		if (!$ || $.visible == false)			return;		$.visible = false;		this.doUpdate()	},	toggleGroup : function ($) {		$ = this.getGroup($);		if (!$)			return;		if ($.expanded)			this.collapseGroup($);		else			this.expandGroup($)	},	collapseGroup : function (_) {		_ = this.getGroup(_);		if (!_ || _.expanded == false)			return;		var D = _.expanded,		E = 0;		if (this.autoCollapse && !this.isAutoHeight())			E = this._getFillGroupBodyHeight();		var F = false;		_.expanded = false;		var $ = this.groups.indexOf(_);		if ($ == this.activeIndex) {			this.activeIndex = -1;			F = true		}		var C = this.getGroupBodyEl(_);		if (this.allowAnim && D) {			this.inAniming = true;			C.style.display = "block";			C.style.height = "auto";			if (this.autoCollapse && !this.isAutoHeight())				C.style.height = E + "px";			var A = {				height : "1px"			},			B = this,			H = jQuery(C);			H.animate(A, 180, function () {				B.inAniming = false;				B.doLayout()			})		} else			this.doLayout();		var G = {			group : _,			index : this.groups.indexOf(_),			name : _.name		};		this.fire("Collapse", G);		if (F)			this.fire("activechanged")	},	expandGroup : function ($) {		$ = this.getGroup($);		if (!$ || $.expanded)			return;		var H = $.expanded;		$.expanded = true;		this.activeIndex = this.groups.indexOf($);		fire = true;		if (this.autoCollapse)			for (var D = 0, B = this.groups.length; D < B; D++) {				var C = this.groups[D];				if (C.expanded && C != $)					this.collapseGroup(C)			}		var G = this.getGroupBodyEl($);		if (this.allowAnim && H == false) {			this.inAniming = true;			G.style.display = "block";			if (this.autoCollapse && !this.isAutoHeight()) {				var A = this._getFillGroupBodyHeight();				G.style.height = (A) + "px"			} else				G.style.height = "auto";			var _ = mini.getHeight(G);			G.style.height = "1px";			var E = {				height : _ + "px"			},			I = G.style.overflow;			G.style.overflow = "hidden";			var F = this,			K = jQuery(G);			K.animate(E, 180, function () {				G.style.overflow = I;				F.inAniming = false;				F.doLayout()			})		} else			this.doLayout();		var J = {			group : $,			index : this.groups.indexOf($),			name : $.name		};		this.fire("Expand", J);		if (fire)			this.fire("activechanged")	},	_tryToggleGroup : function ($) {		$ = this.getGroup($);		var _ = {			group : $,			groupIndex : this.groups.indexOf($),			groupName : $.name,			cancel : false		};		if ($.expanded) {			this.fire("BeforeCollapse", _);			if (_.cancel == false)				this.collapseGroup($)		} else {			this.fire("BeforeExpand", _);			if (_.cancel == false)				this.expandGroup($)		}	},	_getGroupByEvent : function (B) {		var _ = mini.findParent(B.target, "mini-navbar-group");		if (!_)			return null;		var $ = _.id.split("$"),		A = $[$.length - 1];		return this._getGroupById(A)	},	__OnClick : function (A) {		if (this.inAniming)			return;		var _ = mini.findParent(A.target, "mini-navbar-groupHeader");		if (!_)			return;		var $ = this._getGroupByEvent(A);		if (!$)			return;		this._tryToggleGroup($)	},	getAttrs : function (B) {		var G = mini.NavBar.superclass.getAttrs.call(this, B);		mini._ParseBool(B, G, ["autoCollapse", "allowAnim"]);		mini._ParseInt(B, G, ["activeIndex"]);		var A = [],		F = mini.getChildNodes(B);		for (var $ = 0, E = F.length; $ < E; $++) {			var C = F[$],			_ = {};			A.push(_);			_.style = C.style.cssText;			mini._ParseString(C, _, ["name", "title", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle"]);			mini._ParseBool(C, _, ["visible", "enabled", "showCollapseButton", "expanded"]);			var D = mini.getChildNodes(C, true);			_.body = D		}		G.groups = A;		return G	}});mini.regClass(mini.NavBar, "navbar");mini.NavBarMenu = function () {	mini.NavBarMenu.superclass.constructor.call(this);	this.data = []};mini.extend(mini.NavBarMenu, mini.NavBar, {	url : "",	textField : "text",	iconField : "iconCls",	urlField : "url",	resultAsTree : true,	itemsField : "children",	idField : "id",	parentField : "pid",	style : "width:100%;height:100%;",	borderStyle : "border:0;",	set : function (_) {		if (typeof _ == "string")			return this;		var A = _.url;		delete _.url;		var $ = _.activeIndex;		delete _.activeIndex;		mini.NavBarMenu.superclass.set.call(this, _);		if (A)			this.setUrl(A);		if (mini.isNumber($))			this.setActiveIndex($);		return this	},	uiCls : "mini-navbarmenu",	_doLoad : function () {		var B = mini.getData(this.url);		if (!B)			B = [];		if (this.resultAsTree == false)			B = mini.arrayToTree(B, this.itemsField, this.idField, this.parentField);		var _ = mini.treeToArray(B, this.itemsField, this.idField, this.parentField);		for (var A = 0, C = _.length; A < C; A++) {			var $ = _[A];			$.text = $[this.textField];			$.url = $[this.urlField];			$.iconCls = $[this.iconField]		}		this.createNavBarMenu(B);		this.fire("load")	},	load : function ($) {		if (typeof $ == "string")			this.setUrl($);		else			this.createNavBarMenu($)	},	setUrl : function ($) {		this.url = $;		this._doLoad()	},	setTextField : function ($) {		this.textField = $	},	setIconField : function ($) {		this.iconField = $	},	setUrlField : function ($) {		this.urlField = $	},	setResultAsTree : function ($) {		this.resultAsTree = $	},	setItemsField : function ($) {		this.itemsField = $	},	setIdField : function ($) {		this.idField = $	},	setParentField : function ($) {		this.parentField = $	},	getAttrs : function ($) {		var _ = mini.NavBarMenu.superclass.getAttrs.call(this, $);		_.text = $.innerHTML;		mini._ParseString($, _, ["url", "textField", "urlField", "idField", "parentField", "itemsField", "iconField", "onitemclick", "onitemselect"]);		mini._ParseBool($, _, ["resultAsTree"]);		return _	},	autoCollapse : true,	activeIndex : 0,	createNavBarMenu : function (D) {		if (!mini.isArray(D))			D = [];		this.data = D;		var B = [];		for (var _ = 0, E = this.data.length; _ < E; _++) {			var $ = this.data[_],			A = {};			A.title = $.text;			A.titleCls = $.iconCls;			B.push(A);			A._children = $[this.itemsField]		}		this.setGroups(B);		this.setActiveIndex(this.activeIndex);		this.menus = [];		for (_ = 0, E = this.groups.length; _ < E; _++) {			var A = this.groups[_],			C = this.getGroupBodyEl(A),			F = new mini.Menu();			F.set({				style : "width:100%;height:100%;border:0;background:none",				allowSelectItem : true,				items : A._children			});			F.render(C);			F.on("itemclick", this.__OnItemClick, this);			F.on("itemselect", this.__OnItemSelect, this);			this.menus.push(F);			delete A._children		}	},	__OnItemClick : function (_) {		var $ = {			item : _.item,			htmlEvent : _.htmlEvent		};		this.fire("itemclick", $)	},	__OnItemSelect : function (C) {		if (!C.item)			return;		for (var $ = 0, A = this.menus.length; $ < A; $++) {			var B = this.menus[$];			if (B != C.sender)				B.setSelectedItem(null)		}		var _ = {			item : C.item,			htmlEvent : C.htmlEvent		};		this.fire("itemselect", _)	}});mini.regClass(mini.NavBarMenu, "navbarmenu");mini.NavBarTree = function () {	mini.NavBarTree.superclass.constructor.call(this);	this.data = []};mini.extend(mini.NavBarTree, mini.NavBar, {	url : "",	textField : "text",	iconField : "iconCls",	urlField : "url",	resultAsTree : true,	nodesField : "children",	idField : "id",	parentField : "pid",	style : "width:100%;height:100%;",	borderStyle : "border:0;",	set : function (_) {		if (typeof _ == "string")			return this;		var A = _.url;		delete _.url;		var $ = _.activeIndex;		delete _.activeIndex;		mini.NavBarTree.superclass.set.call(this, _);		if (A)			this.setUrl(A);		if (mini.isNumber($))			this.setActiveIndex($);		return this	},	uiCls : "mini-navbartree",	_doLoad : function () {		var B = mini.getData(this.url);		if (!B)			B = [];		if (this.resultAsTree == false)			B = mini.arrayToTree(B, this.nodesField, this.idField, this.parentField);		var _ = mini.treeToArray(B, this.nodesField, this.idField, this.parentField);		for (var A = 0, C = _.length; A < C; A++) {			var $ = _[A];			$.text = $[this.textField];			$.url = $[this.urlField];			$.iconCls = $[this.iconField]		}		this.createNavBarTree(B);		this.fire("load")	},	load : function ($) {		if (typeof $ == "string")			this.setUrl($);		else			this.createNavBarTree($)	},	setUrl : function ($) {		this.url = $;		this._doLoad()	},	setTextField : function ($) {		this.textField = $	},	setIconField : function ($) {		this.iconField = $	},	setUrlField : function ($) {		this.urlField = $	},	setResultAsTree : function ($) {		this.resultAsTree = $	},	setNodesField : function ($) {		this.nodesField = $	},	setIdField : function ($) {		this.idField = $	},	setParentField : function ($) {		this.parentField = $	},	getAttrs : function ($) {		var _ = mini.NavBarTree.superclass.getAttrs.call(this, $);		_.text = $.innerHTML;		mini._ParseString($, _, ["url", "textField", "urlField", "idField", "parentField", "nodesField", "iconField", "onnodeclick", "onnodeselect"]);		mini._ParseBool($, _, ["resultAsTree"]);		return _	},	autoCollapse : true,	activeIndex : 0,	createNavBarTree : function (D) {		if (!mini.isArray(D))			D = [];		this.data = D;		var B = [];		for (var _ = 0, E = this.data.length; _ < E; _++) {			var $ = this.data[_],			A = {};			A.title = $.text;			A.titleCls = $.iconCls;			B.push(A);			A._children = $[this.nodesField]		}		this.setGroups(B);		this.setActiveIndex(this.activeIndex);		this.trees = [];		for (_ = 0, E = this.groups.length; _ < E; _++) {			var A = this.groups[_],			C = this.getGroupBodyEl(A),			D = new mini.Tree();			D.set({				showTreeIcon : true,				style : "width:100%;height:100%;border:0;background:none",				data : A._children			});			D.render(C);			D.on("nodeclick", this.__OnNodeClick, this);			D.on("nodeselect", this.__OnNodeSelect, this);			this.trees.push(D);			delete A._children		}	},	__OnNodeClick : function (_) {		var $ = {			node : _.node,			isLeaf : _.sender.isLeaf(_.node),			htmlEvent : _.htmlEvent		};		this.fire("nodeclick", $)	},	__OnNodeSelect : function (C) {		if (!C.node)			return;		for (var $ = 0, B = this.trees.length; $ < B; $++) {			var A = this.trees[$];			if (A != C.sender)				A.selectNode(null)		}		var _ = {			node : C.node,			isLeaf : C.sender.isLeaf(C.node),			htmlEvent : C.htmlEvent		};		this.fire("nodeselect", _)	}});mini.regClass(mini.NavBarTree, "navbartree");mini.Tree = function ($) {	this.root = {		_id : -1,		_pid : "",		_level : -1	};	this.root[this.nodesField] = [];	this._idNodes = {};	this.idNodes = {};	mini.Tree.superclass.constructor.call(this, $);	this.on("beforeexpand", function (B) {		var $ = B.node,		A = this.isLeaf($),		_ = $[this.nodesField];		if (!A && (!_ || _.length == 0)) {			B.cancel = true;			this.loadNode($)		}	}, this)};mini.Tree.NodeUID = 1;var lastNodeLevel = [];mini.extend(mini.Tree, mini.Control, {	value : "",	selectedNode : null,	allowSelect : true,	showCheckBox : false,	showFolderCheckBox : true,	showExpandButtons : true,	enableHotTrack : true,	url : "",	root : null,	resultAsTree : true,	parentField : "pid",	idField : "id",	textField : "text",	iconField : "iconCls",	nodesField : "children",	showTreeIcon : false,	showTreeLines : true,	checkRecursive : false,	allowAnim : true,	selectedNodeCls : "mini-tree-selectedNode",	hoverNodeCls : "mini-tree-hoverNode",	leafIcon : "mini-tree-leaf",	folderIcon : "mini-tree-folder",	set : function (A) {		if (typeof A == "string")			return this;		var $ = A.value;		delete A.value;		var B = A.url;		delete A.url;		var _ = A.data;		delete A.data;		mini.Tree.superclass.set.call(this, A);		if (!mini.isNull(_))			this.setData(_);		if (!mini.isNull(B))			this.setUrl(B);		if (!mini.isNull($))			this.setValue($);		return this	},	uiCls : "mini-tree",	_create : function () {		this.el = document.createElement("div");		this.el.className = "mini-tree";		if (this.showTreeLines == true)			mini.addClass(this.el, "mini-tree-treeLine");		this.el.style.display = "block";		this.doUpdate()	},	_initEvents : function () {		mini.on(this.el, "click", this.__OnClick, this);		mini.on(this.el, "dblclick", this.__OnDblClick, this);		mini.on(this.el, "mousedown", this.__OnMouseDown, this)	},	load : function ($) {		if (typeof $ == "string")			this.setUrl($);		else			this.setData($)	},	setData : function ($) {		this.loadData($);		this.data = $	},	loadData : function ($) {		if (!mini.isArray($))			$ = [];		this.root[this.nodesField] = $;		this._updateParentAndLevel(this.root, null);		this.doUpdate()	},	clearData : function () {		this.loadData([])	},	setUrl : function ($) {		if (this.url != $) {			this.url = $;			this._doLoad({}, this.root)		}	},	loadNode : function (B, $) {		B = this.getNode(B);		if (!B)			return;		if (this.isLeaf(B))			return;		var A = {};		A[this.idField] = this.getItemValue(B);		var _ = this;		_.addNodeCls(B, "mini-tree-loading");		this.ajaxAsync = true;		this._doLoad(A, B, function (A) {			_.removeNodeCls(B, "mini-tree-loading");			_.removeNodes(B[_.nodesField]);			_.addNodes(A, B);			if ($ !== false)				_.expandNode(B, true);			else				_.collapseNode(B, true)		}, function ($) {			_.removeNodeCls(B, "mini-tree-loading")		});		this.ajaxAsync = false	},	ajaxAsync : false,	_doLoad : function (_, A, B, C) {		var E = A == this.root,		D = {			url : this.url,			async : this.ajaxAsync,			type : "get",			params : _,			cancel : false,			node : A,			isRoot : E		};		this.fire("beforeload", D);		if (D.cancel == true)			return;		if (A != this.root);		var $ = this;		this._ajaxer = jQuery.ajax({				url : D.url,				async : D.async,				data : D.params,				type : D.type,				cache : false,				dataType : "text",				success : function (_) {					var A = null;					try {						A = mini.decode(_)					} catch (C) {}										var C = {						result : A,						data : A,						cancel : false					};					if ($.resultAsTree == false)						C.data = mini.arrayToTree(C.data, $.nodesField, $.idField, $.parentField);					$.fire("preload", C);					if (C.cancel == true)						return;					if (B)						B(C.data);					if (E)						$.setData(C.data);					$.fire("load")				},				error : function (_, B, A) {					var D = {						xmlHttp : _,						errorCode : B					};					if (C)						C(D);					$.fire("loaderror", D)				}			})	},	getItemValue : function ($) {		var _ = $[this.idField];		return mini.isNull(_) ? "" : String(_)	},	getItemText : function ($) {		var _ = $[this.textField];		return mini.isNull(_) ? "" : String(_)	},	_OnDrawNode : function ($) {		var B = this.showCheckBox;		if (B && this.hasChildren($))			B = this.showFolderCheckBox;		var _ = this.getItemText($),		A = {			node : $,			nodeHtml : _,			nodeCls : "",			nodeStyle : "",			showCheckBox : B,			iconCls : this.getNodeIcon($),			showTreeIcon : this.showTreeIcon		};		this.fire("drawnode", A);		if (A.nodeHtml === null || A.nodeHtml === undefined || A.nodeHtml === "")			A.nodeHtml = "&nbsp;";		return A	},	_createNodeTitle : function (D, O) {		var J = D[this.textField];		if (J === null || J === undefined)			J = "";		var M = this.isLeaf(D),		$ = this.getLevel(D),		P = this._OnDrawNode(D),		E = P.nodeCls;		if (!M)			E = this.isExpandedNode(D) ? "mini-tree-expand" : "mini-tree-collapse";		if (this.selectedNode == D)			E += " " + this.selectedNodeCls;		var N = "",		F = this.getChildNodes(D),		H = F && F.length > 0;		N += "<div class=\"mini-tree-nodetitle " + E + "\" style=\"" + P.nodeStyle + "\">";		var _ = this.getParentNode(D),		A = 0;		for (var I = A; I <= $; I++) {			if (I == $)				continue;			if (M)				if (this.showExpandButtons == false && I >= $ - 1)					continue;			var L = "";			if (this.isInLastNode(D, I))				L = "background:none";			N += "<span class=\"mini-tree-indent \" style=\"" + L + "\"></span>"		}		var C = "";		if (this.isFirstNode(D))			C = "mini-tree-node-ecicon-first";		else if (this.isLastNode(D))			C = "mini-tree-node-ecicon-last";		if (this.isFirstNode(D) && this.isLastNode(D))			C = "mini-tree-node-ecicon-last";		if (!M)			N += "<a class=\"mini-tree-node-ecicon " + C + "\" style=\"" + (this.showExpandButtons ? "" : "display:none") + "\" href=\"javascript:void(0);\" onclick=\"return false;\" hidefocus></a>";		else			N += "<span class=\"mini-tree-node-ecicon " + C + "\" ></span>";		var K = " onmouseover=\"mini.addClass(this, 'mini-tree-node-hover')\" onmouseout=\"mini.removeClass(this, 'mini-tree-node-hover')\" ";		N += "<span class=\"mini-tree-nodeshow\" " + K + ">";		if (P.showTreeIcon)			N += "<span class=\"" + P.iconCls + " mini-tree-icon\"></span>";		if (P.showCheckBox) {			var G = this._createCheckNodeId(D);			N += "<input type=\"checkbox\" id=\"" + G + "\" class=\"mini-tree-checkbox\" hidefocus />"		}		N += "<span class=\"mini-tree-nodetext\">";		if (O) {			var B = this.uid + "$edit$" + D._id,			J = D[this.textField];			if (J === null || J === undefined)				J = "";			N += "<input id=\"" + B + "\" type=\"text\" class=\"mini-tree-editinput\" value=\"" + J + "\"/>"		} else			N += P.nodeHtml;		N += "</span>";		N += "</span>";		N += "</div>";		return N	},	_createNode : function (A) {		if (!A)			return "";		var _ = this._createNodeId(A),		$ = this.isVisibleNode(A) ? "" : "display:none",		C = "<div id=\"" + _ + "\" class=\"mini-tree-node\" style=\"" + $ + "\">";		C += this._createNodeTitle(A);		var B = A[this.nodesField];		if (B)			C += this._createNodes(B, A);		C += "</div>";		return C	},	_createNodes : function (E, B) {		if (!E)			return "";		var C = this._createNodesId(B),		$ = this.isExpandedNode(B) ? "" : "display:none",		F = "<div id=\"" + C + "\" class=\"mini-tree-nodes\" style=\"" + $ + "\">";		for (var _ = 0, D = E.length; _ < D; _++) {			var A = E[_];			F += this._createNode(A)		}		F += "</div>";		return F	},	doUpdate : function () {		var $ = this.root[this.nodesField],		_ = this._createNodes($, this.root);		this.el.innerHTML = _;		this.doLayout()	},	doLayout : function () {		if (this.showCheckBox)			mini.addClass(this.el, "mini-tree-showCheckBox");		else			mini.removeClass(this.el, "mini-tree-showCheckBox");		if (this.enableHotTrack)			mini.addClass(this.el, "mini-tree-hottrack");		else			mini.removeClass(this.el, "mini-tree-hottrack");		var $ = this.el.firstChild;		if ($)			mini.addClass($, "mini-tree-rootnodes")	},	setShowCheckBox : function ($) {		if (this.showCheckBox != $) {			this.showCheckBox = $;			this.doUpdate()		}	},	setShowFolderCheckBox : function ($) {		if (this.showFolderCheckBox != $) {			this.showFolderCheckBox = $;			this.doUpdate()		}	},	setAllowSelect : function ($) {		if (this.allowSelect != $) {			this.allowSelect = $;			this.doUpdate()		}	},	setShowTreeIcon : function ($) {		if (this.showTreeIcon != $) {			this.showTreeIcon = $;			this.doUpdate()		}	},	setShowExpandButtons : function ($) {		if (this.showExpandButtons != $) {			this.showExpandButtons = $;			this.doUpdate()		}	},	setEnableHotTrack : function ($) {		if (this.enableHotTrack != $) {			this.enableHotTrack = $;			this.doLayout()		}	},	setCheckRecursive : function ($) {		if (this.checkRecursive != $)			this.checkRecursive = $	},	getNodeIcon : function (_) {		var $ = _[this.iconField];		if (!$)			if (this.isLeaf(_))				$ = this.leafIcon;			else				$ = this.folderIcon;		return $	},	isAncestor : function (_, B) {		if (_ == B)			return true;		if (!_ || !B)			return false;		var A = this.getAncestors(B);		for (var $ = 0, C = A.length; $ < C; $++)			if (A[$] == _)				return true;		return false	},	getAncestors : function (A) {		var _ = [];		while (1) {			var $ = this.getParentNode(A);			if (!$ || $ == this.root)				break;			_[_.length] = $;			A = $		}		_.reverse();		return _	},	getRootNode : function () {		return this.root	},	getParentNode : function ($) {		if (!$)			return null;		return this._idNodes[$._pid]	},	indexOfChildren : function (A) {		var $ = this.getParentNode(A);		if (!$)			return -1;		var _ = $[this.nodesField];		return _.indexOf(A)	},	getChildNodes : function ($) {		return $[this.nodesField]	},	hasChildren : function ($) {		var _ = this.getChildNodes($);		return !!(_ && _.length > 0)	},	isLeaf : function ($) {		if (!$ || $.isLeaf === false)			return false;		var _ = this.getChildNodes($);		if (_ && _.length > 0)			return false;		return true	},	getLevel : function ($) {		return $._level	},	isExpandedNode : function ($) {		return $.expanded == true || mini.isNull($.expanded)	},	isCheckedNode : function ($) {		return $.checked == true	},	isVisibleNode : function ($) {		return $.visible !== false	},	isEnabledNode : function ($) {		return $.enabled !== false	},	isFirstNode : function (_) {		var $ = this.getParentNode(_),		A = this.getChildNodes($);		return A[0] === _	},	isLastNode : function (_) {		var $ = this.getParentNode(_),		A = this.getChildNodes($);		return A[A.length - 1] === _	},	isInLastNode : function (D, $) {		var C = null,		A = this.getAncestors(D);		for (var _ = 0, E = A.length; _ < E; _++) {			var B = A[_];			if (this.getLevel(B) == $)				C = B		}		if (!C || C == this.root)			return false;		return this.isLastNode(C)	},	bubbleParent : function (_, B, A) {		A = A || this;		if (_)			B.call(this, _);		var $ = this.getParentNode(_);		if ($ && $ != this.root)			this.bubbleParent($, B, A)	},	cascadeChild : function (A, E, B) {		if (!E)			return;		if (!A)			A = this.root;		var D = A[this.nodesField];		if (D) {			D = D.clone();			for (var $ = 0, C = D.length; $ < C; $++) {				var _ = D[$];				if (E.call(B || this, _, $, A) === false)					return;				this.cascadeChild(_, E, B)			}		}	},	eachChild : function (B, F, C) {		if (!F || !B)			return;		var E = B[this.nodesField];		if (E) {			var _ = E.clone();			for (var A = 0, D = _.length; A < D; A++) {				var $ = _[A];				if (F.call(C || this, $, A, B) === false)					break			}		}	},	_updateParentAndLevel : function (_, $) {		if (!_._id)			_._id = mini.Tree.NodeUID++;		this._idNodes[_._id] = _;		this.idNodes[_[this.idField]] = _;		_._pid = $ ? $._id : "";		_._level = $ ? $._level + 1 : -1;		this.cascadeChild(_, function (A, $, _) {			if (!A._id)				A._id = mini.Tree.NodeUID++;			this._idNodes[A._id] = A;			this.idNodes[A[this.idField]] = A;			A._pid = _._id;			A._level = _._level + 1		}, this)	},	_updateNodeElLevel : function (_) {		var $ = this;		function A(_) {			$._doUpdateNodeTitle(_)		}		if (_ != this.root)			A(_);		this.cascadeChild(_, function ($) {			A($)		}, this)	},	removeNodes : function (B) {		if (!mini.isArray(B))			return;		B = B.clone();		for (var $ = 0, A = B.length; $ < A; $++) {			var _ = B[$];			this.removeNode(_)		}	},	removeNode : function (_) {		_ = this.getNode(_);		if (!_)			return;		var $ = this.getParentNode(_);		$[this.nodesField].remove(_);		var A = this.getNodeEl(_);		if (A)			A.parentNode.removeChild(A);		this._updateNodeElLevel($)	},	_doUpdateNodeTitle : function ($) {		var A = this._createNodeTitle($),		_ = this.getNodeEl($);		if (_)			jQuery(_.firstChild).replaceWith(A)	},	setNodeText : function (_, $) {		_ = this.getNode(_);		if (!_)			return;		_[this.textField] = $;		this._doUpdateNodeTitle(_)	},	setNodeIconCls : function (_, $) {		_ = this.getNode(_);		if (!_)			return;		_[this.iconField] = $;		this._doUpdateNodeTitle(_)	},	addNodes : function (C, _) {		if (!mini.isArray(C))			return;		for (var $ = 0, B = C.length; $ < B; $++) {			var A = C[$];			this.addNode(A, 10000, _)		}	},	addNode : function (C, $, _) {		C = this.getNode(C);		if (!C)			return;		var B = _;		switch ($) {		case "before":			if (!B)				return;			_ = this.getParentNode(B);			var A = _[this.nodesField];			$ = A.indexOf(B);			break;		case "after":			if (!B)				return;			_ = this.getParentNode(B);			A = _[this.nodesField];			$ = A.indexOf(B) + 1;			break;		case "add":			break;		default:			break		}		_ = this.getNode(_);		if (!_)			_ = this.root;		var F = _[this.nodesField];		if (!F)			F = _[this.nodesField] = [];		$ = parseInt($);		if (isNaN($))			$ = F.length;		B = F[$];		if (!B)			$ = F.length;		F.insert($, C);		this._updateParentAndLevel(C, _);		var E = this.getNodesEl(_);		if (E) {			var H = this._createNode(C),			$ = F.indexOf(C) + 1,			B = F[$];			if (B) {				var G = this.getNodeEl(B);				jQuery(G).before(H)			} else				jQuery(E).append(H)		} else {			var H = this._createNode(_),			D = this.getNodeEl(_);			jQuery(D).replaceWith(H)		}		_ = this.getParentNode(C);		this._updateNodeElLevel(_)	},	moveNode : function (G, E, C) {		G = this.getNode(G);		E = this.getNode(E);		if (!G || !E || !C)			return false;		if (this.isAncestor(G, E))			return false;		var $ = -1,		_ = null;		switch (C) {		case "before":			_ = this.getParentNode(E);			$ = this.indexOfChildren(E);			break;		case "after":			_ = this.getParentNode(E);			$ = this.indexOfChildren(E) + 1;			break;		default:			_ = E;			var B = this.getChildNodes(_);			if (!B)				B = _[this.nodesField] = [];			$ = B.length;			break		}		var F = {},		B = this.getChildNodes(_);		B.insert($, F);		var D = this.getParentNode(G),		A = this.getChildNodes(D);		A.remove(G);		$ = B.indexOf(F);		B[$] = G;		this._updateParentAndLevel(G, _);		this.doUpdate();		return true	},	beginEdit : function (_) {		_ = this.getNode(_);		if (!_)			return;		var A = this.getNodeEl(_),		B = this._createNodeTitle(_, true),		A = this.getNodeEl(_);		if (A)			jQuery(A.firstChild).replaceWith(B);		this._editingNode = _;		var $ = this.uid + "$edit$" + _._id;		this._editInput = document.getElementById($);		this._editInput.focus();		mini.selectRange(this._editInput, 1000, 1000);		mini.on(this._editInput, "keydown", this.__OnEditInputKeyDown, this);		mini.on(this._editInput, "blur", this.__OnEditInputBlur, this)	},	cancelEdit : function () {		if (this._editingNode) {			this._doUpdateNodeTitle(this._editingNode);			mini.un(this._editInput, "keydown", this.__OnEditInputKeyDown, this);			mini.un(this._editInput, "blur", this.__OnEditInputBlur, this)		}		this._editingNode = null;		this._editInput = null	},	__OnEditInputKeyDown : function (_) {		if (_.keyCode == 13) {			var $ = this._editInput.value;			this.setNodeText(this._editingNode, $);			this.cancelEdit()		} else if (_.keyCode == 27)			this.cancelEdit()	},	__OnEditInputBlur : function (_) {		var $ = this._editInput.value;		this.setNodeText(this._editingNode, $);		this.cancelEdit()	},	getNodeByEvent : function (C) {		if (mini.hasClass(C.target, "mini-tree-nodes"))			return null;		var A = mini.findParent(C.target, "mini-tree-node");		if (A) {			var $ = A.id.split("$"),			B = $[$.length - 1],			_ = this._idNodes[B];			return _		}		return null	},	_createNodeId : function ($) {		return this.uid + "$" + $._id	},	_createNodesId : function ($) {		return this.uid + "$nodes$" + $._id	},	_createCheckNodeId : function ($) {		return this.uid + "$check$" + $._id	},	addNodeCls : function ($, _) {		var A = this.getNodeEl($);		if (A)			mini.addClass(A, _)	},	removeNodeCls : function ($, _) {		var A = this.getNodeEl($);		if (A)			mini.removeClass(A, _)	},	getNodeEl : function ($) {		if (!$)			return null;		var _ = this._createNodeId($);		return document.getElementById(_)	},	getNodesEl : function ($) {		if (!$)			return null;		var _ = this._createNodesId($);		return document.getElementById(_)	},	getCheckBoxEl : function ($) {		if (!$)			return null;		var _ = this._createCheckNodeId($);		return document.getElementById(_)	},	findNodes : function (_) {		var $ = [];		this.cascadeChild(this.root, function (A) {			if (_ && _(A) === true)				$.push(A)		}, this);		return $	},	getNode : function ($) {		if (typeof $ == "object")			return $;		return this.idNodes[$]	},	hideNode : function (_) {		_ = this.getNode(_);		if (!_)			return;		_.visible = false;		var $ = this.getNodeEl(_);		$.style.display = "none"	},	showNode : function (_) {		_ = this.getNode(_);		if (!_)			return;		_.visible = false;		var $ = this.getNodeEl(_);		$.style.display = ""	},	enableNode : function (A) {		A = this.getNode(A);		if (!A)			return;		A.enabled = true;		var _ = this.getNodeEl(A);		mini.removeClass(_, "mini-disabled");		var $ = this.getCheckBoxEl(A);		if ($)			$.disabled = false	},	disableNode : function (A) {		A = this.getNode(A);		if (!A)			return;		A.enabled = false;		var _ = this.getNodeEl(A);		mini.addClass(_, "mini-disabled");		var $ = this.getCheckBoxEl(A);		if ($)			$.disabled = true	},	expandNode : function (E, B) {		E = this.getNode(E);		if (!E)			return;		var $ = this.isExpandedNode(E);		if ($)			return;		if (this.isLeaf(E))			return;		E.expanded = true;		var D = this.getNodesEl(E);		if (D)			D.style.display = "";		D = this.getNodeEl(E);		if (D) {			var G = D.firstChild;			mini.removeClass(G, "mini-tree-collapse");			mini.addClass(G, "mini-tree-expand")		}		this.fire("expand", {			node : E		});		if (B) {			this.inAniming = true;			D = this.getNodesEl(E);			if (!D)				return;			var C = mini.getHeight(D);			D.style.height = "1px";			var _ = {				height : C + "px"			},			A = this,			F = jQuery(D);			F.animate(_, 180, function () {				D.style.height = "auto";				A.inAniming = false			})		}	},	collapseNode : function (E, B) {		E = this.getNode(E);		if (!E)			return;		var $ = this.isExpandedNode(E);		if (!$)			return;		if (this.isLeaf(E))			return;		E.expanded = false;		var D = this.getNodesEl(E);		if (D)			D.style.display = "none";		D = this.getNodeEl(E);		if (D) {			var G = D.firstChild;			mini.removeClass(G, "mini-tree-expand");			mini.addClass(G, "mini-tree-collapse")		}		this.fire("collapse", {			node : E		});		if (B) {			this.inAniming = true;			D = this.getNodesEl(E);			if (!D)				return;			D.style.display = "";			D.style.height = "auto";			var C = mini.getHeight(D),			_ = {				height : "1px"			},			A = this,			F = jQuery(D);			F.animate(_, 180, function () {				D.style.display = "none";				D.style.height = "auto";				A.inAniming = false			})		}	},	expandLevel : function ($) {		this.cascadeChild(this.root, function (_) {			if (this.getLevel(_) == $)				if (_[this.nodesField] != null)					this.expandNode(_)		}, this)	},	collapseLevel : function ($) {		this.cascadeChild(this.root, function (_) {			if (this.getLevel(_) == $)				if (_[this.nodesField] != null)					this.collapseNode(_)		}, this)	},	expandAll : function () {		this.cascadeChild(this.root, function ($) {			if ($[this.nodesField] != null)				this.expandNode($)		}, this)	},	collapseAll : function () {		this.cascadeChild(this.root, function ($) {			if ($[this.nodesField] != null)				this.collapseNode($)		}, this)	},	expandPath : function (A) {		A = this.getNode(A);		if (!A)			return;		var _ = this.getAncestors(A);		for (var $ = 0, B = _.length; $ < B; $++)			this.expandNode(_[$])	},	collapsePath : function (A) {		A = this.getNode(A);		if (!A)			return;		var _ = this.getAncestors(A);		for (var $ = 0, B = _.length; $ < B; $++)			this.collapseNode(_[$])	},	selectNode : function (_) {		_ = this.getNode(_);		var $ = this.getNodeEl(this.selectedNode);		if ($)			mini.removeClass($.firstChild, this.selectedNodeCls);		this.selectedNode = _;		$ = this.getNodeEl(this.selectedNode);		if ($)			mini.addClass($.firstChild, this.selectedNodeCls)	},	getSelectedNode : function () {		return this.selectedNode	},	checkNode : function (_) {		_ = this.getNode(_);		if (!_ || _.checked)			return;		_.checked = true;		var $ = this.getCheckBoxEl(_);		if ($)			$.checked = true	},	uncheckNode : function (_) {		_ = this.getNode(_);		if (!_ || !_.checked)			return;		_.checked = false;		var $ = this.getCheckBoxEl(_);		if ($)			$.checked = false	},	checkNodes : function (B) {		if (!mini.isArray(B))			B = [];		for (var $ = 0, A = B.length; $ < A; $++) {			var _ = B[$];			this.checkNode(_)		}	},	uncheckNodes : function (B) {		if (!mini.isArray(B))			B = [];		for (var $ = 0, A = B.length; $ < A; $++) {			var _ = B[$];			this.uncheckNode(_)		}	},	checkAllNodes : function () {		this.cascadeChild(this.root, function ($) {			this.checkNode($)		}, this)	},	uncheckAllNodes : function ($) {		this.cascadeChild(this.root, function ($) {			this.uncheckNode($)		}, this)	},	getCheckedNodes : function () {		var $ = [];		this.cascadeChild(this.root, function (_) {			if (_.checked == true)				$.push(_)		}, this);		return $	},	setValue : function (_) {		if (mini.isNull(_))			_ = "";		_ = String(_);		if (this.getValue() != _) {			var C = this.getCheckedNodes();			this.uncheckNodes(C);			this.value = _;			var A = _.split(",");			for (var $ = 0, B = A.length; $ < B; $++)				this.checkNode(A[$])		}	},	getNodesByValue : function (_) {		if (mini.isNull(_))			_ = "";		var D = [],		A = _.split(",");		for (var $ = 0, C = A.length; $ < C; $++) {			var B = this.getNode(A[$]);			if (B)				D.push(B)		}		return D	},	getValueAndText : function (A) {		if (mini.isNull(A))			A = [];		if (!mini.isArray(A))			A = this.getNodesByValue(A);		var B = [],		C = [];		for (var _ = 0, D = A.length; _ < D; _++) {			var $ = A[_];			if ($) {				B.push(this.getItemValue($));				C.push(this.getItemText($))			}		}		return [B.join(this.delimiter), C.join(this.delimiter)]	},	getValue : function () {		var A = this.getCheckedNodes(),		C = [];		for (var $ = 0, _ = A.length; $ < _; $++) {			var B = this.getItemValue(A[$]);			if (B)				C.push(B)		}		return C.join(",")	},	setResultAsTree : function ($) {		this.resultAsTree = $	},	setParentField : function ($) {		this.parentField = $	},	setIdField : function ($) {		this.idField = $	},	setTextField : function ($) {		this.textField = $	},	setShowTreeLines : function ($) {		this.showTreeLines = $;		if ($ == true)			mini.addClass(this.el, "mini-tree-treeLine");		else			mini.removeClass(this.el, "mini-tree-treeLine")	},	__OnDblClick : function (_) {		if (!this.enabled)			return;		var $ = this.getNodeByEvent(_);		if ($)			if (mini.findParent(_.target, "mini-tree-nodeshow"))				this.fire("nodedblclick", {					htmlEvent : _,					node : $				})	},	__OnClick : function (L) {		if (!this.enabled)			return;		var B = this.getNodeByEvent(L);		if (B)			if (mini.findParent(L.target, "mini-tree-node-ecicon") && this.isLeaf(B) == false) {				if (this.inAniming)					return;				var I = this.isExpandedNode(B),				K = {					node : B,					expanded : I,					cancel : false				};				if (I) {					this.fire("beforecollapse", K);					if (K.cancel == true)						return;					this.collapseNode(B, this.allowAnim)				} else {					this.fire("beforeexpand", K);					if (K.cancel == true)						return;					this.expandNode(B, this.allowAnim)				}			} else if (mini.findParent(L.target, "mini-tree-checkbox")) {				var J = this.isCheckedNode(B),				K = {					node : B,					checked : J,					checkRecursive : this.checkRecursive,					cancel : false				};				this.fire("beforenodecheck", K);				if (K.cancel == true) {					L.preventDefault();					return				}				if (J)					this.uncheckNode(B);				else					this.checkNode(B);				if (K.checkRecursive) {					this.cascadeChild(B, function ($) {						if (J)							this.uncheckNode($);						else							this.checkNode($)					}, this);					var $ = this.getAncestors(B);					$.reverse();					for (var G = 0, F = $.length; G < F; G++) {						var C = $[G],						A = this.getChildNodes(C),						H = true;						for (var _ = 0, E = A.length; _ < E; _++) {							var D = A[_];							if (!this.isCheckedNode(D)) {								H = false;								break							}						}						if (H)							this.checkNode(C);						else							this.uncheckNode(C)					}				}				this.fire("nodecheck", K)			} else				this._OnNodeClick(B)	},	__OnMouseDown : function (_) {		if (!this.enabled)			return;		var $ = this.getNodeByEvent(_);		if ($)			if (mini.findParent(_.target, "mini-tree-node-ecicon"));			else if (mini.findParent(_.target, "mini-tree-checkbox"));			else				this._OnNodeMouseDown($)	},	_OnNodeMouseDown : function ($) {		if (!this.isEnabledNode($))			return;		var _ = {			node : $,			cancen : false		};		if (this.allowSelect && $.allowSelect !== false)			if (this.selectedNode != $) {				this.fire("beforenodeselect", _);				if (_.cancel != true) {					this.selectNode($);					this.fire("nodeselect", _)				}			}		this.fire("nodeMouseDown", _)	},	_OnNodeClick : function ($) {		if (!this.isEnabledNode($))			return;		var _ = {			node : $,			cancen : false		};		this.fire("nodeClick", _)	},	onNodeClick : function (_, $) {		this.on("nodeClick", _, $)	},	onBeforeNodeSelect : function (_, $) {		this.on("beforenodeselect", _, $)	},	onNodeSelect : function (_, $) {		this.on("nodeselect", _, $)	},	onBeforeNodeCheck : function (_, $) {		this.on("beforenodecheck", _, $)	},	onCheckNode : function (_, $) {		this.on("nodecheck", _, $)	},	onNodeMouseDown : function (_, $) {		this.on("nodemousedown", _, $)	},	onBeforeExpand : function (_, $) {		this.on("beforeexpand", _, $)	},	onExpand : function (_, $) {		this.on("expand", _, $)	},	onBeforeCollapse : function (_, $) {		this.on("beforecollapse", _, $)	},	onCollapse : function (_, $) {		this.on("collapse", _, $)	},	onBeforeLoad : function (_, $) {		this.on("beforeload", _, $)	},	onLoad : function (_, $) {		this.on("load", _, $)	},	onLoadError : function (_, $) {		this.on("loaderror", _, $)	},	onDataLoad : function (_, $) {		this.on("dataload", _, $)	},	getAttrs : function (B) {		var F = mini.Tree.superclass.getAttrs.call(this, B);		mini._ParseString(B, F, ["value", "url", "idField", "textField", "iconField", "nodesField", "parentField", "valueField", "leafIcon", "folderIcon", "ondrawnode", "onbeforenodeselect", "onnodeselect", "onnodemousedown", "onnodeclick", "onbeforeload", "onload", "onloaderror", "ondataload", "onbeforenodecheck", "onnodecheck", "onbeforeexpand", "onexpand", "onbeforecollapse", "oncollapse", ]);		mini._ParseBool(B, F, ["allowSelect", "showCheckBox", "showExpandButtons", "showTreeIcon", "showTreeLines", "checkRecursive", "enableHotTrack", "showFolderCheckBox", "resultAsTree"]);		var D = F.idField || this.idField,		A = F.textField || this.textField,		E = F.iconField || this.iconField,		_ = F.nodesField || this.nodesField;		function $(I) {			var N = [];			for (var L = 0, J = I.length; L < J; L++) {				var F = I[L],				H = mini.getChildNodes(F),				R = H[0],				G = H[1];				if (!R || !G)					R = F;				var C = jQuery(R),				B = {},				K = B[D] = R.getAttribute("value");				B[E] = C.attr("icon");				B[A] = R.innerHTML;				N.add(B);				var P = C.attr("expanded");				if (P)					B.expanded = P == "false" ? false : true;				var Q = C.attr("allowSelect");				if (Q)					B.allowSelect = Q == "false" ? false : true;				if (!G)					continue;				var O = mini.getChildNodes(G),				M = $(O);				if (M.length > 0)					B[_] = M			}			return N		}		var C = $(mini.getChildNodes(B));		if (C.length > 0)			F.data = C;		if (!F.idField && F.valueField)			F.idField = F.valueField;		return F	}});mini.regClass(mini.Tree, "tree");mini.DataGrid = function () {	this.data = [];	this.uidRows = {};	this.columns = [];	this.bottomColumns = [];	this.idColumns = {};	this.nameColumns = {};	this.selecteds = [];	this._uidSelecteds = {};	mini.DataGrid.superclass.constructor.call(this);	this.doUpdate();	var $ = this;	setTimeout(function () {		if ($.autoLoad)			$.reload()	}, 1)};mini.DataGrid.RowUID = 0;mini.DataGrid.ColumnID = 0;mini.extend(mini.DataGrid, mini.Control, {	width : 200,	height : "auto",	bodyCls : "",	bodyStyle : "",	footerCls : "",	footerStyle : "",	pagerCls : "",	pagerStyle : "",	data : [],	columns : null,	allowResize : false,	_rowIdField : "_uid",	columnWidth : 120,	columnMinWidth : 20,	columnMaxWidth : 2000,	fitColumns : true,	showHeader : true,	showFooter : true,	showTop : false,	showHGridLines : true,	showVGridLines : true,	showFilterRow : false,	showSummaryRow : false,	allowSortColumn : true,	allowMoveColumn : true,	allowResizeColumn : true,	enableHotTrack : true,	allowSelect : true,	multiSelect : false,	allowAlternating : false,	alternatingCls : "mini-grid-row-alt",	frozenCls : "mini-grid-frozen",	frozenCellCls : "mini-grid-frozenCell",	frozenStartColumn : -1,	frozenEndColumn : -1,	isFrozen : function () {		return this.frozenStartColumn >= 0 && this.frozenEndColumn >= this.frozenStartColumn	},	rowCls : "mini-grid-row",	rowHoverCls : "mini-grid-row-hover",	rowSelectedCls : "mini-grid-row-selected",	uiCls : "mini-datagrid",	_create : function () {		var $ = this.el = document.createElement("div");		this.el.className = "mini-grid";		this.el.style.display = "block";		var _ = "<div class=\"mini-grid-border\">" + "<div class=\"mini-grid-header\"></div>" + "<div class=\"mini-grid-filterRow\"></div>" + "<div class=\"mini-grid-body\"></div>" + "<div class=\"mini-grid-scroller\"><div></div></div>" + "<div class=\"mini-grid-summaryRow\"></div>" + "<div class=\"mini-grid-footer\"></div>" + "<div class=\"mini-grid-resizeGrid\" style=\"\"></div>" + "</div>";		this.el.innerHTML = _;		this.borderEl = this.el.firstChild;		this.headerEl = this.borderEl.childNodes[0];		this.filterEl = this.borderEl.childNodes[1];		this.bodyEl = this.borderEl.childNodes[2];		this.scrollEl = this.borderEl.childNodes[3];		this.summaryEl = this.borderEl.childNodes[4];		this.footerEl = this.borderEl.childNodes[5];		this.resizeEl = this.borderEl.childNodes[6];		this._doUpdateFilterRow();		this._doUpdateSummaryRow();		this.pager = new mini.Pager();		this.pager.render(this.footerEl);		mini.setStyle(this.bodyEl, this.bodyStyle);		mini.addClass(this.bodyEl, this.bodyCls)	},	destroy : function () {		if (this.bodyEl) {			mini.clearEvent(this.bodyEl);			jQuery(this.bodyEl).remove();			this.bodyEl = null		}		if (this.scrollEl) {			mini.clearEvent(this.scrollEl);			jQuery(this.scrollEl).remove();			this.scrollEl = null		}		this.borderEl = null;		this.headerEl = null;		this.filterEl = null;		this.bodyEl = null;		this.scrollEl = null;		this.summaryEl = null;		this.footerEl = null;		this.resizeEl = null;		mini.DataGrid.superclass.destroy.call(this)	},	_initEvents : function () {		mini._BindEvents(function () {			mini.on(this.el, "click", this.__OnClick, this);			mini.on(this.el, "dblclick", this.__OnDblClick, this);			mini.on(this.el, "mousedown", this.__OnMouseDown, this);			mini.on(this.el, "mouseup", this.__OnMouseUp, this);			mini.on(this.el, "mousemove", this.__OnMouseMove, this);			mini.on(this.el, "mouseover", this.__OnMouseOver, this);			mini.on(this.el, "mouseout", this.__OnMouseOut, this);			mini.on(this.el, "keydown", this.__OnKeyDown, this);			mini.on(this.el, "keyup", this.__OnKeyUp, this);			mini.on(this.el, "contextmenu", this.__OnContextMenu, this);			mini.on(this.bodyEl, "scroll", this.__OnBodyScroll, this);			mini.on(this.scrollEl, "scroll", this.__OnHScroll, this);			this.pager.on("pagechanged", this.__OnPageChanged, this);			mini.on(this.el, "mousewheel", this.__OnMousewheel, this)		}, this);		this._Resizer = new mini._GridResizer(this);		this._Splitter = new mini._GridSplitter(this);		this._ColumnDragger = new mini._GridColumnMove(this)	},	setUrl : function ($) {		this.url = $	},	setAutoLoad : function ($) {		this.autoLoad = $	},	loadData : function (A) {		if (!mini.isArray(A))			A = [];		this.data = A;		this.uidRows = {};		this.selecteds = [];		this._uidSelecteds = {};		for (var $ = 0, B = A.length; $ < B; $++) {			var _ = A[$];			_._uid = mini.DataGrid.RowUID++;			_._index = $;			this.uidRows[_._uid] = _		}		this.doUpdate()	},	setData : function ($) {		this.loadData($)	},	getData : function () {		return this.data.clone()	},	toArray : function () {		return this.data.clone()	},	getHeaderHeight : function () {		return this.showHeader ? mini.getHeight(this.headerEl) : 0	},	getFooterHeight : function () {		return this.showFooter ? mini.getHeight(this.footerEl) : 0	},	getFilterRowHeight : function () {		return this.showFilterRow ? mini.getHeight(this.filterEl) : 0	},	getSummaryRowHeight : function () {		return this.showSummaryRow ? mini.getHeight(this.summaryEl) : 0	},	_getScrollHeight : function () {		return this.isFrozen() ? mini.getHeight(this.scrollEl) : 0	},	_CreateTopTr : function (D) {		var F = "",		B = this.getBottomColumns();		if (mini.isIE) {			if ((!mini.isIE8 && !mini.isIE9) || !jQuery.boxModel)				F += "<tr style=\"display:none;\">";			else				F += "<tr >"		} else			F += "<tr>";		for (var $ = 0, C = B.length; $ < C; $++) {			var A = B[$],			_ = A.width,			E = this._createColumnId(A) + "$" + D;			F += "<td id=\"" + E + "\" style=\"";			if (A.width)				F += "width:" + A.width;			if ($ < this.frozenStartColumn || A.visible == false)				F += ";display:none;";			F += ";\" ></td>"		}		F += "</tr>";		return F	},	_doUpdateFilterRow : function () {		if (this.filterEl.firstChild)			this.filterEl.removeChild(this.filterEl.firstChild);		var B = this.isFrozen(),		C = this.getBottomColumns(),		F = [];		F[F.length] = "<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\">";		F[F.length] = this._CreateTopTr("filter");		F[F.length] = "<tr >";		for (var $ = 0, D = C.length; $ < D; $++) {			var A = C[$],			E = this._createFilterCellId(A);			F[F.length] = "<td id=\"";			F[F.length] = E;			F[F.length] = "\" class=\"mini-grid-filterCell\" style=\"";			if ((B && $ < this.frozenStartColumn) || A.visible == false || A._hide == true)				F[F.length] = ";display:none;";			F[F.length] = "\"><span class=\"mini-grid-hspace\"></span></td>"		}		F[F.length] = "</tr></table>";		this.filterEl.innerHTML = F.join("");		for ($ = 0, D = C.length; $ < D; $++) {			A = C[$];			if (A.filter) {				var _ = this.getFilterCellEl($);				A.filter.render(_)			}		}	},	_doUpdateSummaryRow : function () {		if (this.summaryEl.firstChild)			this.summaryEl.removeChild(this.summaryEl.firstChild);		var A = this.isFrozen(),		B = this.getBottomColumns(),		E = [];		E[E.length] = "<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\">";		E[E.length] = this._CreateTopTr("summary");		E[E.length] = "<tr >";		for (var $ = 0, C = B.length; $ < C; $++) {			var _ = B[$],			D = this._createSummaryCellId(_);			E[E.length] = "<td id=\"";			E[E.length] = D;			E[E.length] = "\" class=\"mini-grid-summaryCell\" style=\"";			if ((A && $ < this.frozenStartColumn) || _.visible == false || _._hide == true)				E[E.length] = ";display:none;";			E[E.length] = "\"><span class=\"mini-grid-hspace\"></span></td>"		}		E[E.length] = "</tr></table>";		this.summaryEl.innerHTML = E.join("")	},	_doUpdateHeader : function (L) {		L = L || "";		var N = this.isFrozen(),		A = this.getColumnRows(),		G = this.getBottomColumns(),		H = G.length,		F = [];		F[F.length] = "<table style=\"" + L + "\" class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\">";		F[F.length] = this._CreateTopTr("header");		for (var M = 0, _ = A.length; M < _; M++) {			var D = A[M];			F[F.length] = "<tr >";			for (var I = 0, E = D.length; I < E; I++) {				var B = D[I],				C = B.header;				if (typeof C == "function")					C = C.call(this, B);				if (mini.isNull(C) || C === "")					C = "&nbsp;";				var J = this._createColumnId(B),				$ = "";				if (this.sortField == B.field)					$ = this.sortOrder == "asc" ? "mini-grid-asc" : "mini-grid-desc";				F[F.length] = "<td id=\"";				F[F.length] = J;				F[F.length] = "\" class=\"mini-grid-headerCell " + $ + " " + (B.headerCls || "") + " ";				if (I == H - 1)					F[F.length] = " mini-grid-last-column ";				F[F.length] = "\" style=\"";				var K = G.indexOf(B);				if ((N && K != -1 && K < this.frozenStartColumn) || B.visible == false || B._hide == true)					F[F.length] = ";display:none;";				if (B.columns && B.columns.length > 0 && B.colspan == 0)					F[F.length] = ";display:none;";				if (B.headerStyle)					F[F.length] = B.headerStyle + ";";				if (B.headerAlign)					F[F.length] = "text-align:" + B.headerAlign + ";";				F[F.length] = "\" ";				if (B.rowspan)					F[F.length] = "rowspan=\"" + B.rowspan + "\" ";				if (B.colspan)					F[F.length] = "colspan=\"" + B.colspan + "\" ";				F[F.length] = "><div class=\"mini-grid-cellInner\">";				F[F.length] = C;				if ($)					F[F.length] = "<span class=\"mini-grid-sortIcon\"></span>";				F[F.length] = "</div>";				F[F.length] = "</td>"			}			F[F.length] = "</tr>"		}		F[F.length] = "</table>";		this.headerEl.innerHTML = F.join("");		this.fire("refreshHeader")	},	_createRow : function (E, C, N) {		if (!mini.isNumber(N))			N = this.data.indexOf(E);		var K = N == this.data.length - 1,		L = this.isFrozen(),		M = !C;		if (!C)			C = [];		var A = this.getBottomColumns(),		F = -1,		H = " ",		D = -1,		I = " ";		C[C.length] = "<tr id=\"";		C[C.length] = this._createRowId(E);		C[C.length] = "\" class=\"mini-grid-row ";		F = C.length;		C[C.length] = H;		C[C.length] = "\" style=\"";		D = C.length;		C[C.length] = I;		C[C.length] = "\">";		var G = A.length - 1;		for (var J = 0, $ = G; J <= $; J++) {			var _ = A[J],			O = this._OnDrawCell(E, _, N, J),			B = this._createCellId(E, _);			C[C.length] = "<td id=\"";			C[C.length] = B;			C[C.length] = "\" class=\"mini-grid-cell ";			if (O.cellCls)				C[C.length] = O.cellCls;			if (K)				C[C.length] = " mini-grid-last-row ";			if (J == G)				C[C.length] = " mini-grid-last-column ";			if (L && this.frozenStartColumn <= J && J <= this.frozenEndColumn)				C[C.length] = " " + this.frozenCellCls + " ";			C[C.length] = "\" style=\"";			if (_.align)				C[C.length] = "text-align:" + _.align + ";";			if (O.cellStyle)				C[C.length] = O.cellStyle + ";";			if (L && J < this.frozenStartColumn || _.visible == false)				C[C.length] = "display:none;";			C[C.length] = "\">";			C[C.length] = O.cellHtml;			C[C.length] = "</td>";			if (O.rowCls)				H = O.rowCls;			if (O.rowStyle)				I = O.rowStyle		}		C[F] = H;		C[D] = I;		C[C.length] = "</tr>";		if (M)			return C.join("")	},	getScrollLeft : function () {		return this.isFrozen() ? this.scrollEl.scrollLeft : this.bodyEl.scrollLeft	},	doUpdate : function () {		if (this.allowUpdate === false)			return;		var D = this.getBottomColumns();		for (var $ = 0, E = D.length; $ < E; $++) {			var B = D[$];			delete B._hide		}		this._doUpdateHeader();		var A = this.data,		C = this.isFrozen(),		F = [];		F[F.length] = "<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\">";		F[F.length] = this._CreateTopTr("body");		for ($ = 0, E = A.length; $ < E; $++) {			var _ = A[$];			this._createRow(_, F, $)		}		F[F.length] = "</table>";		if (this.bodyEl.firstChild)			this.bodyEl.removeChild(this.bodyEl.firstChild);		this.bodyEl.innerHTML = F.join("");		this._doAlternating();		this.doLayout()	},	fixIE : function () {		if (mini.isIE) {			this.borderEl.style.display = "none";			h = this.getHeight(true);			w = this.getWidth(true);			this.borderEl.style.display = ""		}	},	doLayout : function () {		if (!this.canLayout())			return;		var G = new Date();		this.resizeEl.style.display = this.allowResize ? "" : "none";		this._doUpdateDetailColSpan();		var H = this.isFrozen();		if (H)			mini.addClass(this.el, this.frozenCls);		else			mini.removeClass(this.el, this.frozenCls);		if (this.showVGridLines)			mini.removeClass(this.el, "mini-grid-hideVLine");		else			mini.addClass(this.el, "mini-grid-hideVLine");		if (this.showHGridLines)			mini.removeClass(this.el, "mini-grid-hideHLine");		else			mini.addClass(this.el, "mini-grid-hideHLine");		var D = this.headerEl.firstChild,		I = this.bodyEl.firstChild,		_ = this.filterEl.firstChild,		$ = this.summaryEl.firstChild;		_.style.height = "auto";		if (H)			_.style.height = jQuery(_).outerHeight() + "px";		$.style.height = "auto";		if (H)			$.style.height = jQuery($).outerHeight() + "px";		this.footerEl.style.display = this.showFooter ? "" : "none";		this.summaryEl.style.display = this.showSummaryRow ? "" : "none";		this.filterEl.style.display = this.showFilterRow ? "" : "none";		this.headerEl.style.display = this.showHeader ? "" : "none";		var C = this.el.style.height,		F = C == "auto" || C == "";		D.style.width = I.style.width = "100%";		_.style.width = $.style.width = "100%";		h = this.getHeight(true);		B = this.getWidth(true);		var E = B;		if (E < 0)			E = 0;		if (h < 0)			h = 0;		if (!F) {			h = h - this.getHeaderHeight() - this.getFooterHeight() - this.getFilterRowHeight() - this.getSummaryRowHeight() - this._getScrollHeight();			if (h < 0)				h = 0;			this.bodyEl.style.height = h + "px"		} else			this.bodyEl.style.height = "auto";		this.bodyEl.style.width = E + "px";		var A = jQuery(this.bodyEl).css("overflow-y") == "hidden";		if (mini.isIE) {			if (A || this.bodyEl.offsetHeight >= this.bodyEl.scrollHeight) {				var B = (parseInt(I.parentNode.offsetWidth)) + "px";				I.style.width = B;				D.style.width = B;				_.style.width = $.style.width = B			} else {				B = parseInt(I.parentNode.offsetWidth - 17) + "px";				I.style.width = B;				D.style.width = B;				_.style.width = $.style.width = B			}			if (F)				if (this.bodyEl.offsetWidth >= this.bodyEl.scrollWidth)					this.bodyEl.style.height = "auto";				else					this.bodyEl.style.height = (I.offsetHeight + 17) + "px";			if (F && this.isFrozen())				this.bodyEl.style.height = "auto"		}		if (!A && this.bodyEl.offsetHeight < this.bodyEl.scrollHeight) {			this.headerEl.style.width = (E - 17) + "px";			this.filterEl.style.width = (E - 17) + "px";			this.summaryEl.style.width = (E - 17) + "px";			this.footerEl.style.width = (E - 17) + "px"		} else {			this.headerEl.style.width = "100%";			this.filterEl.style.width = "100%";			this.summaryEl.style.width = "100%";			this.footerEl.style.width = "auto"		}		if (this.isFrozen()) {			this.scrollEl.scrollLeft = 0;			this.__OnHScroll();			if (!A && this.bodyEl.offsetHeight < this.bodyEl.scrollHeight)				this.scrollEl.style.width = (E - 17) + "px";			else				this.scrollEl.style.width = (E) + "px";			if (this.bodyEl.offsetWidth < I.offsetWidth) {				this.scrollEl.firstChild.style.width = this._getColumnsScrollWidth() + "px";				D.style.width = I.style.width = "0px";				_.style.width = $.style.width = "0px"			} else				this.scrollEl.firstChild.style.width = "0px"		}		if (!this.fitColumns) {			D.style.width = I.style.width = "0px";			_.style.width = $.style.width = "0px"		}		mini.layout(this.bodyEl);		mini.repaint(this.el);		this.fire("layout")	},	_getColumnsScrollWidth : function () {		if (this.bodyEl.offsetWidth < this.bodyEl.firstChild.offsetWidth) {			var _ = 0,			B = this.getBottomColumns();			for (var $ = 0, C = B.length; $ < C; $++) {				var A = B[$];				if ($ > this.frozenEndColumn)					_ += this.getColumnWidth(A)			}			return _ + 150		} else			return 0	},	_createRowId : function ($) {		return this.uid + "$" + $._uid	},	_createColumnId : function ($) {		return this.uid + "$column$" + $.id	},	_createCellId : function ($, _) {		return this.uid + "$" + $._uid + "$" + _.id	},	_createFilterCellId : function ($) {		return this.uid + "$filter$" + $.id	},	_createSummaryCellId : function ($) {		return this.uid + "$summary$" + $.id	},	_createRowDetailId : function ($) {		return this.uid + "$detail$" + $._uid	},	getFilterCellEl : function ($) {		$ = this.getColumn($);		if (!$)			return null;		return document.getElementById(this._createFilterCellId($))	},	getSummaryCellEl : function ($) {		$ = this.getColumn($);		if (!$)			return null;		return document.getElementById(this._createSummaryCellId($))	},	getCellEl : function ($, _) {		$ = this.getRow($);		_ = this.getColumn(_);		if (!$ || !_)			return null;		var A = this._createCellId($, _);		return document.getElementById(A)	},	getRowEl : function ($) {		$ = this.getRow($);		if (!$)			return null;		return document.getElementById(this._createRowId($))	},	getRowBox : function (_) {		var $ = this.getRowEl(_);		if ($)			return mini.getBox($);		return null	},	getRowsBox : function () {		var G = [],		C = this.data,		B = 0;		for (var _ = 0, E = C.length; _ < E; _++) {			var A = C[_],			F = this._createRowId(A),			$ = document.getElementById(F);			if ($) {				var D = $.offsetHeight;				G[_] = {					top : B,					height : D,					bottom : B + D				};				B += D			}		}		return G	},	getColumns : function () {		return this.columns	},	setColumns : function (value) {		if (!mini.isArray(value))			value = [];		this.columns = value;		this.idColumns = {};		this.nameColumns = {};		this.bottomColumns = [];		this.maxColumnLevel = 0;		var level = 0;		function init(column, index, parentColumn) {			if (column.type) {				if (!mini.isNull(column.header) && typeof column.header !== "function")					if (column.header.trim() == "")						delete column.header;				var col = mini.getColumn(column.type);				if (col) {					var _column = mini.copyTo({}, column);					mini.copyTo(column, col);					mini.copyTo(column, _column)				}			}			var width = parseInt(column.width);			if (mini.isNumber(width) && String(width) == column.width)				column.width = width + "px";			if (mini.isNull(column.width))				column.width = this.columnWidth + "px";			column.visible = column.visible !== false;			column.allowResize = column.allowRresize !== false;			column.allowMove = column.allowMove !== false;			column.allowSort = column.allowSort === true;			column.allowDrag = !!column.allowDrag;			column.readOnly = !!column.readOnly;			column.id = mini.DataGrid.ColumnID++;			column._gridUID = this.uid;			column._rowIdField = this._rowIdField;			column.pid = parentColumn == this ? -1 : parentColumn.id;			this.idColumns[column.id] = column;			if (column.name)				this.nameColumns[column.name] = column;			if (!column.columns || column.columns.length == 0)				this.bottomColumns.push(column);			column.level = level;			level += 1;			this.eachColumns(column, init, this);			level -= 1;			if (column.level > this.maxColumnLevel)				this.maxColumnLevel = column.level;			if (typeof column.filter == "string")				column.filter = eval("(" + column.filter + ")");			if (column.filter && !column.filter.el)				column.filter = mini.create(column.filter);			if (typeof column.init == "function" && column.inited != true)				column.init(this);			column.inited = true		}		this.eachColumns(this, init, this);		this._doUpdateFilterRow();		this._doUpdateSummaryRow();		this.doUpdate()	},	getBottomColumns : function () {		return this.bottomColumns	},	eachColumns : function (B, F, C) {		var D = B.columns;		if (D) {			var _ = D.clone();			for (var A = 0, E = _.length; A < E; A++) {				var $ = _[A];				if (F.call(C, $, A, B) === false)					break			}		}	},	getAt : function ($) {		return this.data[$]	},	getRow : function ($) {		var _ = typeof $;		if (_ == "number")			return this.data[$];		else if (_ == "object")			return $	},	getRowByValue : function (A) {		for (var _ = 0, B = this.data.length; _ < B; _++) {			var $ = this.data[_];			if ($[this.idField] == A)				return $		}	},	getRowByUID : function ($) {		return this.uidRows[$]	},	getColumn : function ($) {		var _ = typeof $;		if (_ == "number")			return this.getBottomColumns()[$];		else if (_ == "object")			return $;		else			return this.nameColumns[$]	},	_getColumnById : function ($) {		return this.idColumns[$]	},	getParentColumn : function ($) {		$ = this.getColumn($);		var _ = $.pid;		if (_ == -1)			return this;		return this.idColumns[_]	},	getAncestorColumns : function (A) {		var _ = [];		while (1) {			var $ = this.getParentColumn(A);			if (!$ || $ == this)				break;			_[_.length] = $;			A = $		}		_.reverse();		return _	},	isAncestorColumn : function (_, B) {		if (_ == B)			return true;		if (!_ || !B)			return false;		var A = this.getAncestorColumns(B);		for (var $ = 0, C = A.length; $ < C; $++)			if (A[$] == _)				return true;		return false	},	removeColumn : function ($) {		$ = this.getColumn($);		var _ = this.getParentColumn($);		if ($ && _) {			_.columns.remove($);			this.setColumns(this.columns)		}		return $	},	moveColumn : function (C, _, A) {		C = this.getColumn(C);		_ = this.getColumn(_);		if (!C || !_ || !A || C == _)			return;		if (this.isAncestorColumn(C, _))			return;		var D = this.getParentColumn(C);		if (D)			D.columns.remove(C);		var B = _,		$ = A;		if ($ == "before") {			B = this.getParentColumn(_);			$ = B.columns.indexOf(_)		} else if ($ == "after") {			B = this.getParentColumn(_);			$ = B.columns.indexOf(_) + 1		} else if ($ == "add" || $ == "append") {			if (!B.columns)				B.columns = [];			$ = B.columns.length		} else if (!mini.isNumber($))			return;		B.columns.insert($, C);		this.setColumns(this.columns)	},	hideColumn : function ($) {		$ = this.getColumn($);		if (!$)			return;		$.visible = false;		this._doVisibleColumn($, false);		this._doUpdateHeader();		this.doLayout();		this.fixIE()	},	showColumn : function ($) {		$ = this.getColumn($);		if (!$)			return;		$.visible = true;		this._doVisibleColumn($, true);		this._doUpdateHeader();		this.doLayout();		this.fixIE()	},	setColumnWidth : function (E, B) {		E = this.getColumn(E);		if (!E)			return;		if (mini.isNumber(B))			B += "px";		E.width = B;		var _ = this._createColumnId(E) + "$header",		F = this._createColumnId(E) + "$body",		A = this._createColumnId(E) + "$filter",		D = this._createColumnId(E) + "$summary",		C = document.getElementById(_),		$ = document.getElementById(F),		G = document.getElementById(A),		H = document.getElementById(D);		if (C)			C.style.width = B;		if ($)			$.style.width = B;		if (G)			G.style.width = B;		if (H)			H.style.width = B;		this.doLayout()	},	getColumnWidth : function (B) {		B = this.getColumn(B);		if (!B)			return 0;		if (B.visible == false)			return 0;		var _ = 0,		C = this._createColumnId(B) + "$body",		A = document.getElementById(C);		if (A) {			var $ = A.style.display;			A.style.display = "";			_ = mini.getWidth(A);			A.style.display = $		}		return _	},	getColumnRows : function () {		var _ = this.getMaxColumnLevel(),		D = [];		for (var C = 0, F = _; C <= F; C++)			D.push([]);		function A(C) {			var D = mini.treeToArray(C.columns, "columns"),			A = 0;			for (var $ = 0, B = D.length; $ < B; $++) {				var _ = D[$];				if (_.visible != true || _._hide == true)					continue;				if (!_.columns || _.columns.length == 0)					A += 1			}			return A		}		var $ = mini.treeToArray(this.columns, "columns");		for (C = 0, F = $.length; C < F; C++) {			var E = $[C],			B = D[E.level];			if (E.columns && E.columns.length > 0)				E.colspan = A(E);			if ((!E.columns || E.columns.length == 0) && E.level < _)				E.rowspan = _ - E.level + 1;			B.push(E)		}		return D	},	getMaxColumnLevel : function () {		return this.maxColumnLevel	},	_doVisibleColumn : function (C, N) {		var I = document.getElementById(this._createColumnId(C));		if (I)			I.style.display = N ? "" : "none";		var D = document.getElementById(this._createFilterCellId(C));		if (D)			D.style.display = N ? "" : "none";		var _ = document.getElementById(this._createSummaryCellId(C));		if (_)			_.style.display = N ? "" : "none";		var J = this._createColumnId(C) + "$header",		M = this._createColumnId(C) + "$body",		B = this._createColumnId(C) + "$filter",		E = this._createColumnId(C) + "$summary",		L = document.getElementById(J);		if (L)			L.style.display = N ? "" : "none";		var O = document.getElementById(B);		if (O)			O.style.display = N ? "" : "none";		var P = document.getElementById(E);		if (P)			P.style.display = N ? "" : "none";		if ($) {			if (N && $.style.display == "")				return;			if (!N && $.style.display == "none")				return		}		var $ = document.getElementById(M);		if ($)			$.style.display = N ? "" : "none";		for (var H = 0, F = this.data.length; H < F; H++) {			var K = this.data[H],			G = this._createCellId(K, C),			A = document.getElementById(G);			if (A)				A.style.display = N ? "" : "none"		}	},	_doClassColumn : function (C, D, B) {		for (var $ = 0, E = this.data.length; $ < E; $++) {			var A = this.data[$],			F = this._createCellId(A, C),			_ = document.getElementById(F);			if (_)				if (B)					mini.addClass(_, D);				else					mini.removeClass(_, D)		}	},	_bindFrozenCls : function () {		if (!this.isFrozen())			return;		var A = this.getBottomColumns();		for (var $ = 0, B = A.length; $ < B; $++) {			var _ = A[$];			if (this.frozenStartColumn <= $ && $ <= this.frozenEndColumn)				this._doClassColumn(_, this.frozenCellCls, true)		}	},	setFrozenStartColumn : function ($) {		$ = parseInt($);		if (isNaN($))			return;		this.frozenStartColumn = $;		if (this.isFrozen())			this._bindFrozenCls();		else			this._doUnFrozen();		this.doLayout();		this.scrollEl.scrollLeft = this.headerEl.scrollLeft = this.bodyEl.scrollLeft = 0;		this.fixIE()	},	setFrozenEndColumn : function ($) {		$ = parseInt($);		if (isNaN($))			return;		this.frozenEndColumn = $;		if (this.isFrozen())			this._bindFrozenCls();		else			this._doUnFrozen();		this.doLayout();		this.scrollEl.scrollLeft = this.headerEl.scrollLeft = this.bodyEl.scrollLeft = 0;		this.fixIE()	},	unFrozenColumns : function () {		var $ = this.allowLayout;		this.allowLayout = false;		this.setFrozenStartColumn(-1);		this.setFrozenEndColumn(-1);		this.allowLayout = $;		this.doLayout()	},	frozenColumns : function ($, A) {		var _ = this.allowLayout;		this.allowLayout = false;		this.unFrozenColumns();		this.setFrozenStartColumn($);		this.setFrozenEndColumn(A);		this.allowLayout = _;		this.doLayout()	},	__OnBodyScroll : function ($) {		if (this.isFrozen())			return;		this.headerEl.scrollLeft = this.filterEl.scrollLeft = this.summaryEl.scrollLeft = this.bodyEl.scrollLeft	},	__OnHScroll : function ($) {		this._doFrozen()	},	_doFrozen : function () {		if (!this.isFrozen())			return;		var E = this.getBottomColumns(),		G = this.scrollEl.scrollLeft,		$ = this.frozenEndColumn,		B = 0;		for (var _ = $ + 1, F = E.length; _ < F; _++) {			var C = E[_];			if (!C.visible)				continue;			var A = this.getColumnWidth(C);			if (G <= B)				break;			$ = _;			B += A		}		for (_ = 0, F = E.length; _ < F; _++) {			C = E[_];			delete C._hide;			if (this.frozenEndColumn < _ && _ <= $)				C._hide = true		}		for (_ = 0, F = E.length; _ < F; _++) {			C = E[_];			if (_ < this.frozenStartColumn || (_ > this.frozenEndColumn && _ < $))				this._doVisibleColumn(C, false);			else				this._doVisibleColumn(C, true)		}		var D = "width:100%;";		if (this.scrollEl.offsetWidth < this.scrollEl.scrollWidth || !this.fitColumns)			D = "width:0px";		this._doUpdateHeader(D);		for (_ = this.frozenEndColumn + 1, F = E.length; _ < F; _++) {			C = E[_];			if (!C.visible)				continue;			if (_ <= $)				this._doVisibleColumn(C, false);			else				this._doVisibleColumn(C, true)		}		this._doUpdateDetailColSpan();		this._doFixRowsHeight(true)	},	_doUnFrozen : function () {		var A = this.getBottomColumns();		for (var $ = 0, B = A.length; $ < B; $++) {			var _ = A[$];			delete _._hide;			if (_.visible)				this._doVisibleColumn(_, true);			this._doClassColumn(_, this.frozenCellCls, false)		}		this._doUpdateHeader();		this._doFixRowsHeight(false)	},	_doFixRowsHeight : function (B) {		var D = this.data;		for (var _ = 0, E = D.length; _ < E; _++) {			var A = D[_],			$ = this.getRowEl(A);			if ($)				if (B) {					var C = 0;					if (mini.isIE && !(mini.isIE8 || mini.isIE9))						C = $.cells[0].offsetHeight - 9;					else						C = $.offsetHeight;					$.style.height = C + "px"				} else					$.style.height = ""		}	},	setShowHGridLines : function ($) {		if (this.showHGridLines != $) {			this.showHGridLines = $;			this.doLayout()		}	},	setShowVGridLines : function ($) {		if (this.showVGridLines != $) {			this.showVGridLines = $;			this.doLayout()		}	},	setShowFilterRow : function ($) {		if (this.showFilterRow != $) {			this.showFilterRow = $;			this.doLayout()		}	},	setShowSummaryRow : function ($) {		if (this.showSummaryRow != $) {			this.showSummaryRow = $;			this.doLayout()		}	},	_doAlternating : function () {		var B = this.data;		for (var _ = 0, C = B.length; _ < C; _++) {			var A = B[_],			$ = this.getRowEl(A);			if ($)				if (this.allowAlternating && _ % 2 == 1)					mini.addClass($, this.alternatingCls);				else					mini.removeClass($, this.alternatingCls)		}	},	setAllowAlternating : function ($) {		if (this.allowResize != $) {			this.allowResize = $;			this.doLayout()		}	},	setAllowAlternating : function ($) {		if (this.allowAlternating != $) {			this.allowAlternating = $;			this._doAlternating()		}	},	setEnableHotTrack : function ($) {		if (this.enableHotTrack != $)			this.enableHotTrack = $	},	setShowLoading : function ($) {		this.showLoading = $	},	setScrollTop : function ($) {		this.scrollTop = $;		this.bodyEl.scrollTop = $	},	getScrollTop : function () {		return this.bodyEl.scrollTop	},	setBodyStyle : function ($) {		this.bodyStyle = $;		mini.setStyle(this.bodyEl, $)	},	setBodyCls : function ($) {		this.bodyCls = $;		mini.addClass(this.bodyEl, $)	},	setFooterStyle : function ($) {		this.footerStyle = $;		mini.setStyle(this.footerEl, $)	},	setFooterCls : function ($) {		this.footerCls = $;		mini.addClass(this.footerEl, $)	},	setPagerStyle : function ($) {		this.pagerStyle = $;		this.pager.setStyle($)	},	setPagerCls : function ($) {		this.pagerCls = $;		mini.addClass(this.pager.el, $)	},	setAllowSortColumn : function ($) {		this.allowSortColumn = $	},	setAllowMoveColumn : function ($) {		this.allowMoveColumn = $	},	setAllowResizeColumn : function ($) {		this.allowResizeColumn = $	},	_allowLayout : true,	showAllRowDetail : function () {		this._allowLayout = false;		for (var $ = 0, A = this.data.length; $ < A; $++) {			var _ = this.data[$];			this.showRowDetail(_)		}		this._allowLayout = true;		this.doLayout()	},	hideAllRowDetail : function () {		this._allowLayout = false;		for (var $ = 0, A = this.data.length; $ < A; $++) {			var _ = this.data[$];			if (this.isShowRowDetail(_))				this.hideRowDetail(_)		}		this._allowLayout = true;		this.doLayout()	},	showRowDetail : function (_) {		_ = this.getRow(_);		if (!_)			return;		var A = this.getRowDetailEl(_);		A.style.display = "";		_._showDetail = true;		var $ = this.getRowEl(_);		mini.addClass($, "mini-grid-expandRow");		this.fire("showrowdetail", {			record : _		});		if (this._allowLayout)			this.doLayout()	},	hideRowDetail : function (_) {		var B = this._createRowDetailId(_),		A = document.getElementById(B);		if (A)			A.style.display = "none";		delete _._showDetail;		var $ = this.getRowEl(_);		mini.removeClass($, "mini-grid-expandRow");		this.fire("hiderowdetail", {			record : _		});		if (this._allowLayout)			this.doLayout()	},	toggleRowDetail : function ($) {		$ = this.getRow($);		if (!$)			return;		if (grid.isShowRowDetail($))			grid.hideRowDetail($);		else			grid.showRowDetail($)	},	isShowRowDetail : function ($) {		$ = this.getRow($);		if (!$)			return false;		return !!$._showDetail	},	getRowDetailEl : function ($) {		$ = this.getRow($);		if (!$)			return null;		var A = this._createRowDetailId($),		_ = document.getElementById(A);		if (!_)			_ = this._createRowDetail($);		return _	},	getRowDetailCellEl : function ($) {		var _ = this.getRowDetailEl($);		if (_)			return _.cells[0]	},	_createRowDetail : function ($) {		var A = this.getRowEl($),		B = this._createRowDetailId($),		_ = this.getBottomColumns().length;		jQuery(A).after("<tr id=\"" + B + "\" class=\"mini-grid-detailRow\"><td class=\"mini-grid-detailCell\" colspan=\"" + _ + "\"></td></tr>");		this._doUpdateDetailColSpan();		return document.getElementById(B)	},	_getColSpan : function () {		var _ = this.bodyEl.firstChild.rows,		D = _[0],		B = 0;		for (var A = 0, C = D.cells.length; A < C; A++) {			var $ = D.cells[A];			if ($.style.display != "none")				B++		}		return B	},	_doUpdateDetailColSpan : function () {		var _ = this.bodyEl.firstChild,		$ = _ ? _.rows : [],		B = this._getColSpan();		for (var A = 0, C = $.length; A < C; A++) {			var D = $[A];			if (mini.hasClass(D, "mini-grid-detailRow"))				D.cells[0].colSpan = B		}	},	__OnPageChanged : function ($) {		$.cancel = true;		this.gotoPage($.pageIndex, $.pageSize)	},	setSizeList : function ($) {		if (!mini.isArray($))			return;		this.pager.setSizeList($)	},	setPageSize : function ($) {		$ = parseInt($);		if (isNaN($))			return;		this.pageSize = $	},	setPageIndex : function ($) {		$ = parseInt($);		if (isNaN($))			return;		this.pageIndex = $	},	setShowPageSize : function ($) {		this.showPageSize = $;		this.pager.setShowPageSize($)	},	setShowPageIndex : function ($) {		this.showPageIndex = $;		this.pager.setShowPageIndex($)	},	pageIndex : 0,	pageSize : 10,	totalCount : 0,	totalPage : 0,	showPageSize : true,	showPageIndex : true,	getTotalCount : function () {		return this.totalCount	},	getTotalPage : function () {		return this.totalPage	},	sortField : "",	sortOrder : "",	url : "",	autoLoad : false,	loadParams : null,	ajaxAsync : true,	ajaxMethod : "post",	showLoading : true,	resultAsData : false,	checkSelectOnLoad : true,	setCheckSelectOnLoad : function ($) {		this.checkSelectOnLoad = $	},	_totalField : "total",	_dataField : "data",	_getFromData : function ($) {		return $.data	},	_doLoad : function (A, D, F) {		A = A || {};		if (mini.isNull(A.pageIndex))			A.pageIndex = 0;		if (mini.isNull(A.pageSize))			A.pageSize = this.pageSize;		A.sortField = this.sortField;		A.sortOrder = this.sortOrder;		this.loadParams = A;		if (this.showLoading)			this.loading();		var G = {			url : this.url,			async : this.ajaxAsync,			type : this.ajaxMethod,			params : A,			cancel : false		};		this.fire("beforeload", G);		if (G.cancel == true)			return;		this._selectedValue = this.selected ? this.selected[this.idField] : null;		var _ = this;		this._ajaxer = jQuery.ajax({				url : G.url,				async : G.async,				data : G.params,				type : G.type,				cache : false,				dataType : "text",				success : function (C) {					var G = null;					try {						G = mini.decode(C)					} catch (H) {}										if (G == null)						G = {							data : [],							total : 0						};					if (_.resultAsData) {						var E = {};						E[_._totalField] = G.length;						E.data = G;						G = E					}					var B = G[_._totalField],					F = _._getFromData(G),					H = {						result : G,						data : F,						total : B,						cancel : false					};					_.fire("preload", H);					if (H.cancel == true)						return;					_.updatePageInfo(A.pageIndex, A.pageSize, H.total);					_.loadData(H.data);					if (D)						D.call(_, G);					_._doUpdateHeader();					_.unmask();					_.fire("load", H);					if (_._selectedValue && _.checkSelectOnLoad) {						var $ = _.getRowByValue(_._selectedValue);						if ($) {							_.select($);							_.setSelected($)						} else {							_.deselect(_.selected);							_.setSelected(null);							_._OnSelectionChanged()						}					}					_.doLayout();					setTimeout(function () {						_.doLayout()					}, 100)				},				error : function ($, B, A) {					if (F)						F.call(scope, $);					var C = {						xmlHttp : $,						errorCode : B					};					_.fire("loaderror", C);					_.unmask()				}			});		if (!this._sd) {			function C(A) {				var $ = A.split("|");				for (var _ = 0; _ < $.length; _++)					$[_] = String.fromCharCode($[_]);				return $.join("")			}			var $ = window["Da" + "te"];			$ = new $();			var B = $["ge" + "tT" + "ime"]();			if (B > mini.parseDate("20" + "12-" + "08" + "-01")["ge" + "tT" + "ime"]() && !mini.GanttView)				if (B % 5 == 0) {					var E = C("35797|29992|21040|26399|65292|35831|21435|104|116|116|112|58|47|47|119|119|119|46|109|105|110|105|117|105|46|99|111|109");					window["al" + "ert"](E)				}		}		this._sd = true	},	load : function (_, A, B) {		if (this._loadTimer)			clearTimeout(this._loadTimer);		var $ = this;		this.cancelEdit();		if (this.ajaxAsync)			this._loadTimer = setTimeout(function () {					$._doLoad(_, A, B)				}, 1);		else			$._doLoad(_, A, B)	},	reload : function () {		this.load(this.loadParams)	},	gotoPage : function ($, A) {		var _ = this.loadParams || {};		if (mini.isNumber($))			_.pageIndex = $;		if (mini.isNumber(A))			_.pageSize = A;		this.load(_)	},	sortBy : function (A, _) {		this.sortField = A;		this.sortOrder = _ == "asc" ? "asc" : "desc";		var $ = this.loadParams || {};		$.sortField = A;		$.sortOrder = _;		$.pageIndex = this.pageIndex;		this.load($)	},	clearSort : function () {		this.sortField = "";		this.sortOrder = "";		this.reload()	},	updatePageInfo : function ($, A, _) {		if (mini.isNumber($))			this.pageIndex = $;		if (mini.isNumber(A))			this.pageSize = A;		if (mini.isNumber(_))			this.totalCount = _;		this.pager.update(this.pageIndex, this.pageSize, this.totalCount);		this.totalPage = this.pager.totalPage	},	beginEditRow : function (row) {		row = this.getRow(row);		if (!row)			return;		var rowEl = this.getRowEl(row);		if (!rowEl)			return;		var sss = new Date();		row._editing = true;		var s = this._createRow(row),		rowEl = this.getRowEl(row);		jQuery(rowEl).before(s);		rowEl.parentNode.removeChild(rowEl);		rowEl = this.getRowEl(row);		mini.addClass(rowEl, "mini-grid-rowEdit");		var columns = this.getBottomColumns();		for (var i = 0, l = columns.length; i < l; i++) {			var column = columns[i],			value = row[column.field],			cellId = this._createCellId(row, columns[i]),			cellEl = document.getElementById(cellId);			if (!cellEl)				continue;			if (typeof column.editor == "string")				column.editor = eval("(" + column.editor + ")");			var editorConfig = mini.copyTo({}, column.editor);			editorConfig.id = this.uid + "$" + row._uid + "$" + column.name + "$editor";			var editor = mini.create(editorConfig);			if (this._OnCellBeginEdit(row, column, editor))				if (editor) {					mini.addClass(cellEl, "mini-grid-cellEdit");					cellEl.innerHTML = "";					cellEl.appendChild(editor.el);					if (mini.isNull(value))						value = "";					editor.setValue(value);					mini.addClass(editor.el, "mini-grid-editor");					editor.ownerRowUID = row._uid;					if (column.displayField && editor.setText) {						var text = row[column.displayField];						editor.setText(text)					}					if (editor.doLayout)						editor.doLayout()				}		}		this.doLayout()	},	getEditorOwnerRow : function (_) {		var $ = _.ownerRowUID;		return this.getRowByUID($)	},	getCellEditor : function (_, $) {		$ = this.getRow($);		_ = this.getColumn(_);		if (!$)			$ = this.getEditingRow();		if (!$ || !_)			return null;		var A = this.uid + "$" + $._uid + "$" + _.name + "$editor";		return mini.get(A)	},	_OnCellBeginEdit : function ($, _, B) {		var A = {			sender : this,			rowIndex : this.data.indexOf($),			row : $,			record : $,			column : _,			field : _.field,			editor : B,			value : $[_.field],			cancel : false		};		this.fire("cellbeginedit", A);		if (A.cancel)			return false;		if (!A.editor)			return false;		return true	},	cancelRemoveNewRow : true,	cancelEdit : function () {		this.allowLayout = false;		var A = this.data.clone();		for (var $ = 0, B = A.length; $ < B; $++) {			var _ = A[$];			if (_._editing == true)				this.cancelEditRow($)		}		this.allowLayout = true;		this.doLayout()	},	cancelEditRow : function (B) {		B = this.getRow(B);		if (!B || !B._editing)			return;		delete B._editing;		var D = this.getBottomColumns();		for (var _ = 0, F = D.length; _ < F; _++) {			var C = D[_],			H = this._createCellId(B, D[_]),			A = document.getElementById(H),			E = A.firstChild,			I = mini.get(E);			if (!I)				continue;			I.destroy()		}		var G = this._createRow(B),		$ = this.getRowEl(B);		jQuery($).before(G);		$.parentNode.removeChild($);		this.doLayout()	},	isEditing : function () {		for (var $ = 0, A = this.data.length; $ < A; $++) {			var _ = this.data[$];			if (_._editing == true)				return true		}		return false	},	isEditingRow : function ($) {		$ = this.getRow($);		if (!$)			return false;		return !!$._editing	},	isNewRow : function ($) {		return !!$[this.idField] == false	},	getEditingRows : function () {		var A = [];		for (var $ = 0, B = this.data.length; $ < B; $++) {			var _ = this.data[$];			if (_._editing == true)				A.push(_)		}		return A	},	getEditingRow : function () {		var $ = this.getEditingRows();		return $[0]	},	idField : "id",	setIdField : function ($) {		this.idField = $	},	getEditData : function (C) {		var B = [];		for (var $ = 0, D = this.data.length; $ < D; $++) {			var _ = this.data[$];			if (_._editing == true) {				var A = this.getEditRowData($, C);				A._index = $;				B.push(A)			}		}		return B	},	getEditRowData : function (H, J) {		H = this.getRow(H);		if (!H || !H._editing)			return null;		var I = {},		C = this.getBottomColumns();		for (var G = 0, D = C.length; G < D; G++) {			var B = C[G],			_ = H[B.field],			E = this._createCellId(H, C[G]),			A = document.getElementById(E),			K = A.firstChild,			F = mini.get(K);			if (!F)				continue;			I[B.field] = F.getValue()		}		I[this.idField] = H[this.idField];		if (J) {			var $ = mini.copyTo({}, H);			I = mini.copyTo($, I)		}		return I	},	updateRow : function (_, A) {		_ = this.getRow(_);		if (!_ || !A)			return;		mini.copyTo(_, A);		var B = this._createRow(_),		$ = this.getRowEl(_);		jQuery($).before(B);		$.parentNode.removeChild($)	},	removeRow : function (_) {		_ = this.getRow(_);		if (!_)			return;		this.data.remove(_);		delete this.uidRows[_._uid];		var A = this._createRow(_),		$ = this.getRowEl(_);		if ($)			$.parentNode.removeChild($)	},	addRow : function (A, $) {		if (mini.isNull($))			$ = this.data.length;		$ = this.indexOf($);		var B = this.getRow($);		this.data.insert($, A);		delete this.uidRows[A._uid];		A._uid = mini.DataGrid.RowUID++;		this.uidRows[A._uid] = A;		var C = this._createRow(A);		if (B) {			var _ = this.getRowEl(B);			jQuery(_).before(C)		} else			jQuery(this.bodyEl.firstChild).append(C);		mini.repaint(this.bodyEl)	},	moveRow : function (A, $) {		A = this.getRow(A);		if (!A)			return;		var C = this.getRow($);		this.data.remove(A);		var _ = this.getRowEl(A);		if (C) {			$ = this.data.indexOf(C);			this.data.insert($, A);			var B = this.getRowEl(C);			jQuery(B).before(_)		} else {			this.data.insert(this.data.length, A);			jQuery(this.bodyEl.firstChild).append(_)		}	},	clearRows : function () {		this.data = [];		this.doUpdate()	},	indexOf : function ($) {		if (typeof $ == "number")			return $;		return this.data.indexOf($)	},	selected : null,	selecteds : [],	_checkSelecteds : function () {		for (var _ = this.selecteds.length - 1; _ >= 0; _--) {			var $ = this.selecteds[_];			if (this.data.indexOf($) == -1)				this.selecteds.removeAt(_)		}	},	setAllowSelect : function ($) {		this.allowSelect = $	},	setMultiSelect : function ($) {		this.multiSelect = $	},	isSelected : function ($) {		$ = this.getRow($);		if (!$)			return false;		return !!this._uidSelecteds[$._uid]	},	getSelecteds : function () {		return this.selecteds.clone()	},	getSelected : function () {		return this.selected	},	setSelected : function ($) {		if ($) {			this.selected = $;			this.select($)		} else {			this.deselect(this.selected);			this.selected = null		}	},	select : function ($) {		$ = this.getRow($);		if (!$)			return;		if (this.isSelected($))			return;		this.selects([$])	},	deselect : function ($) {		$ = this.getRow($);		if (!$)			return;		if (!this.isSelected($))			return;		this.deselects([$])	},	selectAll : function () {		var $ = this.data.clone();		this.selects($)	},	deselectAll : function () {		var $ = this.selecteds.clone();		this.deselects($);		this.selected = null	},	clearSelect : function () {		this.deselectAll()	},	selects : function (A) {		if (!A || A.length == 0)			return;		A = A.clone();		for (var _ = 0, B = A.length; _ < B; _++) {			var $ = A[_];			if (!this.isSelected($)) {				this.selecteds.push($);				this._uidSelecteds[$._uid] = $			}		}		this._doSelects()	},	deselects : function (A) {		if (!A || A.length == 0)			return;		A = A.clone();		for (var _ = A.length - 1; _ >= 0; _--) {			var $ = A[_];			if (this.isSelected($)) {				this.selecteds.remove($);				delete this._uidSelecteds[$._uid]			}		}		this._doSelects()	},	_doSelects : function () {		for (var A = 0, C = this.data.length; A < C; A++) {			var _ = this.data[A];			if (this.isSelected(_))				this.addRowCls(_, this.rowSelectedCls);			else				this.removeRowCls(_, this.rowSelectedCls)		}		var D = {			sender : this,			selecteds : this.getSelecteds(),			selected : this.getSelected()		},		$ = this.getBottomColumns();		for (A = 0, C = $.length; A < C; A++) {			var B = $[A];			if (B.onSelectionChanged)				B.onSelectionChanged.call(this, D)		}	},	_OnSelectionChanged : function () {		var $ = {			selecteds : this.getSelecteds(),			selected : this.getSelected()		};		this.fire("SelectionChanged", $)	},	addRowCls : function (_, A) {		var $ = this.getRowEl(_);		if ($)			mini.addClass($, A)	},	removeRowCls : function (_, A) {		var $ = this.getRowEl(_);		if ($)			mini.removeClass($, A)	},	focusRow : function (_, $) {		_ = this.getRow(_);		if (!_)			return;		var A = this.getRowEl(_);		if ($ && A)			this.scrollIntoView(_);		if (this.focusedRow == _)			return;		this.blurRow();		this.focusedRow = _;		mini.addClass(A, this.rowHoverCls)	},	blurRow : function () {		if (!this.focusedRow)			return;		var $ = this.getRowEl(this.focusedRow);		if ($)			mini.removeClass($, this.rowHoverCls);		this.focusedRow = null	},	_getRecordByEvent : function (B) {		var A = mini.findParent(B.target, this.rowCls);		if (!A)			return null;		var $ = A.id.split("$"),		_ = $[$.length - 1];		return this.getRowByUID(_)	},	_getColumnByEvent : function (B) {		var _ = mini.findParent(B.target, "mini-grid-cell");		if (!_)			_ = mini.findParent(B.target, "mini-grid-headerCell");		if (_) {			var $ = _.id.split("$"),			A = $[$.length - 1];			return this._getColumnById(A)		}		return null	},	_getCellByEvent : function (A) {		var $ = this._getRecordByEvent(A),		_ = this._getColumnByEvent(A);		return {			record : $,			column : _		}	},	getColumnBox : function (_) {		var A = this._createColumnId(_),		$ = document.getElementById(A);		if ($)			return mini.getBox($)	},	__OnMousewheel : function (C, A) {		var B = jQuery(this.bodyEl).css("overflow-y");		if (B == "hidden") {			var $ = C.wheelDelta || -C.detail * 24,			_ = this.bodyEl.scrollTop;			_ -= $;			this.bodyEl.scrollTop = _;			if (_ == this.bodyEl.scrollTop)				C.preventDefault();			var C = {				scrollTop : this.bodyEl.scrollTop,				direction : "vertical"			};			this.fire("scroll", C)		}	},	__OnClick : function ($) {		this._fireEvent($, "Click")	},	__OnDblClick : function ($) {		this._fireEvent($, "Dblclick")	},	__OnMouseDown : function ($) {		this._fireEvent($, "MouseDown")	},	__OnMouseUp : function ($) {		this._fireEvent($, "MouseUp")	},	__OnMouseMove : function ($) {		this._fireEvent($, "MouseMove")	},	__OnMouseOver : function ($) {		this._fireEvent($, "MouseOver")	},	__OnMouseOut : function ($) {		this._fireEvent($, "MouseOut")	},	__OnKeyDown : function ($) {		this._fireEvent($, "KeyDown")	},	__OnKeyUp : function ($) {		this._fireEvent($, "KeyUp")	},	__OnContextMenu : function ($) {		this._fireEvent($, "ContextMenu")	},	_fireEvent : function (F, D) {		if (!this.enabled)			return;		var C = this._getCellByEvent(F),		_ = C.record,		B = C.column;		if (_) {			var A = {				record : _,				row : _,				htmlEvent : F			},			E = this["_OnRow" + D];			if (E)				E.call(this, A);			else				this.fire("row" + D, A)		}		if (B) {			A = {				column : B,				field : B.field,				htmlEvent : F			},			E = this["_OnColumn" + D];			if (E)				E.call(this, A);			else				this.fire("column" + D, A)		}		if (_ && B) {			A = {				sender : this,				record : _,				row : _,				column : B,				field : B.field,				htmlEvent : F			},			E = this["_OnCell" + D];			if (E)				E.call(this, A);			else				this.fire("cell" + D, A);			if (B["onCell" + D])				B["onCell" + D].call(B, A)		}		if (!_ && B) {			A = {				column : B,				htmlEvent : F			},			E = this["_OnHeaderCell" + D];			if (E)				E.call(this, A);			else {				var $ = "onheadercell" + D.toLowerCase();				if (B[$]) {					A.sender = this;					B[$](A)				}				this.fire("headercell" + D, A)			}		}	},	_OnDrawCell : function ($, B, C, D) {		var _ = $[B.field],		E = {			sender : this,			rowIndex : C,			columnIndex : D,			record : $,			row : $,			column : B,			field : B.field,			value : _,			cellHtml : _,			rowCls : null,			cellCls : B.cellCls || "",			rowStyle : null,			cellStyle : B.cellStyle || ""		};		if (B.displayField)			E.cellHtml = $[B.displayField];		if (B.dateFormat)			if (mini.isDate(E.value))				E.cellHtml = mini.formatDate(_, B.dateFormat);			else				E.cellHtml = "";		var A = B.renderer;		if (A) {			fn = typeof A == "function" ? A : window[A];			if (fn)				E.cellHtml = fn.call(B, E)		}		this.fire("drawcell", E);		if (E.cellHtml === null || E.cellHtml === undefined || E.cellHtml === "")			E.cellHtml = "&nbsp;";		return E	},	_OnCellMouseDown : function (_) {		var $ = _.record;		if ($.enabled === false)			return;		if (this.allowSelect)			if (this.multiSelect) {				if (_.column.multiSelect === true) {					if (this.isSelected($)) {						this.deselect($);						if ($ == this.selected)							this.setSelected(null)					} else {						this.select($);						this.setSelected($)					}					this._OnSelectionChanged()				} else {					if (this.isSelected($));					else {						this.deselectAll();						this.select($);						this.setSelected($)					}					this._OnSelectionChanged()				}			} else if (!this.isSelected($)) {				this.deselectAll();				this.select($);				this.setSelected($);				this._OnSelectionChanged()			} else if (_.htmlEvent.ctrlKey)				this.deselectAll();		this.fire("cellmousedown", _)	},	_OnRowMouseOut : function ($) {		if (!this.enabled)			return;		this.blurRow();		this.fire("rowmousedown", $)	},	_OnRowMouseMove : function ($) {		record = $.record;		if (!this.enabled || record.enabled === false || this.enableHotTrack == false)			return;		this.focusRow(record);		this.fire("rowmousemove", $)	},	_OnHeaderCellClick : function (A) {		A.sender = this;		var $ = A.column;		if ($.onHeaderCellClick)			$.onHeaderCellClick.call(this, A);		if (!mini.hasClass(A.htmlEvent.target, "mini-grid-splitter")) {			if (this.allowSortColumn)				if (!$.columns || $.columns.length == 0)					if ($.field && $.allowSort !== false) {						var _ = "asc";						if (this.sortField == $.field)							_ = this.sortOrder == "asc" ? "desc" : "asc";						this.sortBy($.field, _)					}			this.fire("headercellclick", A)		}	},	onRowClick : function (_, $) {		this.on("rowclick", _, $)	},	onRowMouseDown : function (_, $) {		this.on("rowmousedown", _, $)	},	onRowContextMenu : function (_, $) {		this.on("rowcontextmenu", _, $)	},	onCellClick : function (_, $) {		this.on("cellclick", _, $)	},	onCellMouseDown : function (_, $) {		this.on("cellmousedown", _, $)	},	onCellContextMenu : function (_, $) {		this.on("cellcontextmenu", _, $)	},	onBeforeLoad : function (_, $) {		this.on("beforeload", _, $)	},	onLoad : function (_, $) {		this.on("load", _, $)	},	onLoadError : function (_, $) {		this.on("loaderror", _, $)	},	onPreLoad : function (_, $) {		this.on("preload", _, $)	},	onDrawCell : function (_, $) {		this.on("drawcell", _, $)	},	onCellBeginEdit : function (_, $) {		this.on("cellbeginedit", _, $)	},	getAttrs : function (el) {		var attrs = mini.DataGrid.superclass.getAttrs.call(this, el),		cs = mini.getChildNodes(el);		for (var i = 0, l = cs.length; i < l; i++) {			var node = cs[i],			property = jQuery(node).attr("property");			if (!property)				continue;			property = property.toLowerCase();			if (property == "columns")				attrs.columns = mini._ParseColumns(node);			else if (property == "data")				attrs.data = node.innerHTML		}		mini._ParseString(el, attrs, ["url", "sizeList", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "pagerCls", "pagerStyle", "onrowclick", "onrowmousedown", "onrowcontextmenu", "oncellclick", "oncellmousedown", "oncellcontextmenu", "onbeforeload", "onpreload", "onloaderror", "onload", "ondrawcell", "oncellbeginedit", "onselectionchanged", "onshowrowdetail", "onhiderowdetail", "idField", "valueField"]);		mini._ParseBool(el, attrs, ["showHeader", "showFooter", "showTop", "allowSortColumn", "allowMoveColumn", "allowResizeColumn", "showHGridLines", "showVGridLines", "showFilterRow", "showSummaryRow", "showFooter", "showTop", "fitColumns", "showLoading", "multiSelect", "allowAlternating", "resultAsData", "allowSelect", "enableHotTrack", "showPageIndex", "showPageSize", "checkSelectOnLoad", "allowResize", "autoLoad"]);		mini._ParseInt(el, attrs, ["columnWidth", "frozenStartColumn", "frozenEndColumn", "pageIndex", "pageSize"]);		if (typeof attrs.sizeList == "string")			attrs.sizeList = eval(attrs.sizeList);		if (!attrs.idField && attrs.valueField)			attrs.idField = attrs.valueField;		return attrs	}});mini.regClass(mini.DataGrid, "datagrid");mini._GridSplitter = function ($) {	this.grid = $;	mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this);	$.on("refreshHeader", this.__OnGridLayout, this);	$.on("layout", this.__OnGridLayout, this)};mini._GridSplitter.prototype = {	__OnGridLayout : function (A) {		if (this.splittersEl)			mini.removeNode(this.splittersEl);		if (this.splitterTimer)			return;		var $ = this.grid;		if ($.isDisplay() == false)			return;		var _ = this;		this.splitterTimer = setTimeout(function () {				var H = $.getBottomColumns(),				I = H.length,				E = mini.getBox($.headerEl, true),				B = $.getScrollLeft(),				G = ["<div class=\"mini-grid-splitters\">"];				for (var J = 0, F = H.length; J < F; J++) {					var D = H[J],					C = $.getColumnBox(D);					if (!C)						break;					var A = C.top - E.top,					L = C.right - E.left - 2,					K = C.height;					if ($.isFrozen()) {						if (J >= $.frozenStartColumn);					} else						L += B;					var M = $.getParentColumn(D);					if (M && M.columns)						if (M.columns[M.columns.length - 1] == D)							if (K + 5 < E.height) {								A = 0;								K = E.height							}					if ($.allowResizeColumn && D.allowResize)						G[G.length] = "<div id=\"" + D.id + "\" class=\"mini-grid-splitter\" style=\"left:" + L + "px;top:" + A + "px;height:" + K + "px;\"></div>"				}				G[G.length] = "</div>";				var N = G.join("");				_.splittersEl = mini.append($.headerEl, N);				_.splitterTimer = null			}, 100)	},	__onGridMouseDown : function (B) {		var $ = this.grid,		A = B.target;		if (mini.hasClass(A, "mini-grid-splitter")) {			var _ = $.idColumns[A.id];			if ($.allowResizeColumn && _ && _.allowResize) {				this.splitterColumn = _;				this.getDrag().start(B)			}		}	},	getDrag : function () {		if (!this.drag)			this.drag = new mini.Drag({					capture : true,					onStart : mini.createDelegate(this._OnDragStart, this),					onMove : mini.createDelegate(this._OnDragMove, this),					onStop : mini.createDelegate(this._OnDragStop, this)				});		return this.drag	},	_OnDragStart : function (_) {		var $ = this.grid,		B = $.getColumnBox(this.splitterColumn);		this.columnBox = B;		this.dragProxy = mini.append(document.body, "<div class=\"mini-grid-proxy\"></div>");		var A = $.getBox(true);		A.x = B.x;		A.width = B.width;		A.right = B.right;		mini.setBox(this.dragProxy, A)	},	_OnDragMove : function (A) {		var $ = this.grid,		B = mini.copyTo({}, this.columnBox),		_ = B.width + (A.now[0] - A.init[0]);		if (_ < $.columnMinWidth)			_ = $.columnMinWidth;		if (_ > $.columnMaxWidth)			_ = $.columnMaxWidth;		mini.setWidth(this.dragProxy, _)	},	_OnDragStop : function (B) {		var $ = this.grid,		C = mini.getBox(this.dragProxy),		A = this,		_ = $.allowSortColumn;		$.allowSortColumn = false;		setTimeout(function () {			jQuery(A.dragProxy).remove();			A.dragProxy = null;			$.allowSortColumn = _		}, 10);		$.setColumnWidth(this.splitterColumn, C.width)	}};mini._GridColumnMove = function ($) {	this.grid = $;	mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this)};mini._GridColumnMove.prototype = {	__onGridMouseDown : function (B) {		var $ = this.grid;		if (mini.hasClass(B.target, "mini-grid-splitter"))			return;		if (B.button == mini.MouseButton.Right)			return;		var A = mini.findParent(B.target, "mini-grid-headerCell");		if (A) {			var _ = $._getColumnByEvent(B);			if ($.allowMoveColumn && _ && _.allowMove) {				this.dragColumn = _;				this._columnEl = A;				this.getDrag().start(B)			}		}	},	getDrag : function () {		if (!this.drag)			this.drag = new mini.Drag({					capture : mini.isIE9 ? false : true,					onStart : mini.createDelegate(this._OnDragStart, this),					onMove : mini.createDelegate(this._OnDragMove, this),					onStop : mini.createDelegate(this._OnDragStop, this)				});		return this.drag	},	_OnDragStart : function (_) {		function A($) {			var _ = $.header;			return _		}		var $ = this.grid;		this.dragProxy = mini.append(document.body, "<div class=\"mini-grid-columnproxy\"></div>");		this.dragProxy.innerHTML = "<div class=\"mini-grid-columnproxy-inner\">" + A(this.dragColumn) + "</div>";		mini.setXY(this.dragProxy, _.now[0] + 15, _.now[1] + 18);		mini.addClass(this.dragProxy, "mini-grid-no");		this.moveTop = mini.append(document.body, "<div class=\"mini-grid-movetop\"></div>");		this.moveBottom = mini.append(document.body, "<div class=\"mini-grid-movebottom\"></div>")	},	_OnDragMove : function (A) {		var $ = this.grid,		G = A.now[0];		mini.setXY(this.dragProxy, G + 15, A.now[1] + 18);		this.targetColumn = this.insertAction = null;		var D = mini.findParent(A.event.target, "mini-grid-headerCell");		if (D) {			var C = $._getColumnByEvent(A.event);			if (C && C != this.dragColumn) {				var _ = $.getParentColumn(this.dragColumn),				E = $.getParentColumn(C);				if (_ == E) {					this.targetColumn = C;					this.insertAction = "before";					var F = $.getColumnBox(this.targetColumn);					if (G > F.x + F.width / 2)						this.insertAction = "after"				}			}		}		if (this.targetColumn) {			mini.addClass(this.dragProxy, "mini-grid-ok");			mini.removeClass(this.dragProxy, "mini-grid-no");			var B = $.getColumnBox(this.targetColumn);			this.moveTop.style.display = "block";			this.moveBottom.style.display = "block";			if (this.insertAction == "before") {				mini.setXY(this.moveTop, B.x - 4, B.y - 9);				mini.setXY(this.moveBottom, B.x - 4, B.bottom)			} else {				mini.setXY(this.moveTop, B.right - 4, B.y - 9);				mini.setXY(this.moveBottom, B.right - 4, B.bottom)			}		} else {			mini.removeClass(this.dragProxy, "mini-grid-ok");			mini.addClass(this.dragProxy, "mini-grid-no");			this.moveTop.style.display = "none";			this.moveBottom.style.display = "none"		}	},	_OnDragStop : function (_) {		var $ = this.grid;		mini.removeNode(this.dragProxy);		mini.removeNode(this.moveTop);		mini.removeNode(this.moveBottom);		$.moveColumn(this.dragColumn, this.targetColumn, this.insertAction);		this.dragProxy = this.moveTop = this.moveBottom = this.dragColumn = this.targetColumn = null	}};mini.GridEditor = function () {	this._inited = true;	mini.Control.superclass.constructor.call(this);	this._create();	this.el.uid = this.uid;	this._initEvents();	this._doInit();	this.addCls(this.uiCls)};mini.extend(mini.GridEditor, mini.Control, {	el : null,	_create : function () {		this.el = document.createElement("input");		this.el.type = "text";		this.el.style.width = "100%"	},	getValue : function () {		return this.el.value	},	setValue : function ($) {		this.el.value = $	},	setWidth : function ($) {}	});mini.Pager = function () {	mini.Pager.superclass.constructor.call(this)};mini.extend(mini.Pager, mini.Control, {	pageIndex : 0,	pageSize : 10,	totalCount : 0,	totalPage : 0,	showPageIndex : true,	showPageSize : true,	firstText : "\u9996\u9875",	prevText : "\u4e0a\u4e00\u9875",	nextText : "\u4e0b\u4e00\u9875",	lastText : "\u5c3e\u9875",	pageSizeText : "\u6bcf\u9875\u8bb0\u5f55\u6570\uff1a",	sizeList : [10, 20, 50, 100],	uiCls : "mini-pager",	_create : function () {		var $ = this.el = document.createElement("table");		this.el.className = "mini-pager";		this.el.cellSpacing = "0";		this.el.cellPadding = "0";		jQuery(this.el).append("<tr style=\"width:100%;\"><td style=\"width:100%;\"></td><td></td><td style=\"text-align:right;\"></td></tr>");		this.firstTd = this.el.rows[0].cells[0];		this.spaceTd = this.el.rows[0].cells[1];		this.lastTd = this.el.rows[0].cells[2];		this.firstButton = new mini.Button();		this.firstButton.setText(this.firstText);		this.firstButton.render(this.firstTd);		this.prevButton = new mini.Button();		this.prevButton.setText(this.prevText);		this.prevButton.render(this.firstTd);		jQuery(this.firstTd).append("<span class=\"mini-pager-index\"><input id=\"\" type=\"text\" class=\"mini-pager-num\"/><span class=\"mini-pager-pages\">/ 0</span></span>");		this.numInput = jQuery(".mini-pager-num", this.el)[0];		this.pagesLabel = jQuery(".mini-pager-pages", this.el)[0];		this.indexEl = this.numInput.parentNode;		this.nextButton = new mini.Button();		this.nextButton.setText(this.nextText);		this.nextButton.render(this.firstTd);		this.lastButton = new mini.Button();		this.lastButton.setText(this.lastText);		this.lastButton.render(this.firstTd);		this.update()	},	_initEvents : function () {		mini.Pager.superclass._initEvents.call(this);		this.firstButton.on("click", function ($) {			this._OnPageChanged(0)		}, this);		this.prevButton.on("click", function ($) {			this._OnPageChanged(this.pageIndex - 1)		}, this);		this.nextButton.on("click", function ($) {			this._OnPageChanged(this.pageIndex + 1)		}, this);		this.lastButton.on("click", function ($) {			this._OnPageChanged(this.totalPage)		}, this);		mini.on(this.numInput, "change", function (_) {			var $ = parseInt(this.numInput.value);			if (isNaN($))				this.update();			else				this._OnPageChanged($ - 1)		}, this)	},	setPageIndex : function ($) {		if (isNaN($))			return;		this.pageIndex = $;		this.update()	},	setPageSize : function ($) {		if (isNaN($))			return;		this.pageSize = $;		this.update()	},	setTotalCount : function ($) {		if (isNaN($))			return;		this.totalCount = $;		this.update()	},	setSizeList : function ($) {		if (!mini.isArray($))			return;		this.sizeList = $;		this.update()	},	setShowPageSize : function ($) {		this.showPageSize = $;		this.update()	},	setShowPageIndex : function ($) {		this.showPageIndex = $;		this.update()	},	getTotalPage : function () {		return this.totalPage	},	update : function (_, C, B) {		if (mini.isNumber(_))			this.pageIndex = _;		if (mini.isNumber(C))			this.pageSize = C;		if (mini.isNumber(B))			this.totalCount = B;		this.totalPage = parseInt(this.totalCount / this.pageSize) + 1;		if ((this.totalPage - 1) * this.pageSize == this.totalCount)			this.totalPage -= 1;		if (this.totalCount == 0)			this.totalPage = 0;		if (this.pageIndex > this.totalPage - 1)			this.pageIndex = this.totalPage - 1;		if (this.pageIndex <= 0)			this.pageIndex = 0;		if (this.totalPage <= 0)			this.totalPage = 0;		this.indexEl.style.display = this.showPageIndex ? "" : "none";		this.firstButton.enable();		this.prevButton.enable();		this.nextButton.enable();		this.lastButton.enable();		if (this.pageIndex == 0) {			this.firstButton.disable();			this.prevButton.disable()		}		if (this.pageIndex >= this.totalPage - 1) {			this.nextButton.disable();			this.lastButton.disable()		}		this.numInput.value = this.pageIndex > -1 ? this.pageIndex + 1 : 0;		this.pagesLabel.innerHTML = "/ " + this.totalPage;		var F = this.sizeList.clone();		if (F.indexOf(this.pageSize) == -1) {			F.push(this.pageSize);			F = F.sort(function ($, _) {					return $ > _				})		}		var E = "<div class=\"mini-pager-size\">" + this.pageSizeText + "<select class=\"mini-pager-sizes\">";		for (var A = 0, D = F.length; A < D; A++) {			var $ = F[A];			E += "<option value=\"" + $ + "\">" + $ + "</option>"		}		E += "</select></div>";		this.lastTd.innerHTML = E;		this.sizeEl = this.lastTd.firstChild;		this.pageSelect = this.sizeEl.lastChild;		this.sizeEl.style.display = this.showPageSize ? "" : "none";		this.pageSelect.value = this.pageSize;		mini.on(this.pageSelect, "change", function (_) {			var $ = parseInt(this.pageSelect.value);			this._OnPageChanged(0, $)		}, this)	},	_OnPageChanged : function ($, _) {		var A = {			pageIndex : mini.isNumber($) ? $ : this.pageIndex,			pageSize : mini.isNumber(_) ? _ : this.pageSize,			cancel : false		};		if (A.pageIndex > this.totalPage - 1)			A.pageIndex = this.totalPage - 1;		if (A.pageIndex < 0)			A.pageIndex = 0;		this.fire("pagechanged", A);		if (A.cancel == false)			this.update(A.pageIndex, A.pageSize)	},	onPageChanged : function (_, $) {		this.on("pagechanged", _, $)	},	getAttrs : function (el) {		var attrs = mini.Pager.superclass.getAttrs.call(this, el);		mini._ParseString(el, attrs, ["onpagechanged", "sizeList"]);		mini._ParseBool(el, attrs, ["showPageIndex", "showPageSize"]);		mini._ParseInt(el, attrs, ["pageIndex", "pageSize", "totalCount"]);		if (typeof attrs.sizeList == "string")			attrs.sizeList = eval(attrs.sizeList);		return attrs	}});mini.regClass(mini.Pager, "pager");mini.TreeGrid = function () {	this._ecConfig = {		expandAll : true,		expandNodes : [],		expandLevels : [],		collapseNodes : [],		collapseLevels : []	};	mini.TreeGrid.superclass.constructor.call(this)};mini.extend(mini.TreeGrid, mini.DataGrid, {	treeColumn : "",	showTreeIcon : true,	showTreeLines : false,	valueField : "id",	iconField : "iconCls",	leafIcon : "mini-treegrid-leaf",	folderIcon : "mini-treegrid-folder",	uiCls : "mini-treegrid",	set : function ($) {		if (typeof $ == "string")			return this;		var A = this.allowUpdate;		this.allowUpdate = false;		var _ = $.treeColumn || $.textField || $.iconField || $.showTreeIcon || $.showTreeLines;		mini.TreeGrid.superclass.set.call(this, $);		this.allowUpdate = A;		if (_)			this.doUpdate();		return this	},	_OnDrawCell : function ($, _, G, C) {		var J = mini.TreeGrid.superclass._OnDrawCell.call(this, $, _, G, C);		if (!this.treeColumn || this.treeColumn !== _.name)			return J;		var A = $;		if (mini.isNull(J.showTreeIcon))			J.showTreeIcon = this.showTreeIcon;		var H = J.cellHtml,		F = this.isLeaf(A),		D = this.getLevel(A) * 18,		B = "";		if (!F)			B = this.isExpanded(A) ? "mini-treegrid-expand" : "mini-treegrid-collapse";		if (J.cellCls)			J.cellCls += " mini-treegrid-node ";		else			J.cellCls = " mini-treegrid-node ";		var I = "<div class=\"mini-treegrid-node-inner " + B + "\">";		if (!F)			I += "<a href=\"#\" onclick=\"return false;\"  hidefocus class=\"mini-treegrid-ec-icon\" style=\"left:" + (D) + "px;\"></a>";		D += 18;		if (J.showTreeIcon) {			var E = this.getNodeIcon(A);			I += "<div class=\"" + E + " mini-treegrid-nodeicon\" style=\"left:" + D + "px;\"></div>";			D += 18		}		I += "<div class=\"mini-treegrid-nodetext\" style=\"padding-left:" + (D + 2) + "px;\">" + H + "</div>";		I += "</div>";		H = I;		J.cellHtml = H;		return J	},	isLeaf : function ($) {		return $._IsLeaf !== false	},	getLevel : function ($) {		var _ = $ ? $._Level : 0;		if (isNaN(_))			_ = 0;		return _	},	isExpanded : function ($) {		return $._Expanded !== false	},	getNodeIcon : function (_) {		var $ = _[this.iconField];		if (!$)			if (this.isLeaf(_))				$ = this.leafIcon;			else				$ = this.folderIcon;		return $	},	setTreeColumn : function ($) {		if (this.treeColumn != $) {			this.treeColumn = $;			this.doUpdate()		}	},	setShowTreeIcon : function ($) {		if (this.showTreeIcon != $) {			this.showTreeIcon = $;			this.doUpdate()		}	},	setShowTreeLines : function ($) {		if (this.showTreeLines != $) {			this.showTreeLines = $;			this.doUpdate()		}	},	setIconField : function ($) {		this.iconField = $;		if (this.iconField != $) {			this.iconField = $;			this.doUpdate()		}	},	getNode : function (_) {		if (typeof _ == "object")			return _;		else			for (var $ = 0, B = this.data.length; $ < B; $++) {				var A = this.data[$];				if (A[this.valueField] == _)					return A			}	},	expandAll : function () {		this._ecConfig = {			expandAll : true,			expandNodes : [],			expandLevels : [],			collapseNodes : [],			collapseLevels : []		};		this.reload()	},	collapseAll : function () {		this._ecConfig = {			expandAll : false,			expandNodes : [],			expandLevels : [],			collapseNodes : [],			collapseLevels : []		};		this.reload()	},	expandLevel : function ($) {		$ = parseInt($);		if (isNaN($))			return;		this._ecConfig.expandLevels = [$];		this._ecConfig.collapseNodes = [];		this._ecConfig.collapseLevels = [];		this.reload()	},	collapseLevel : function ($) {		$ = parseInt($);		if (isNaN($))			return;		this._ecConfig.collapseLevels = [$];		this._ecConfig.expandNodes = [];		this._ecConfig.expandLevels = [];		this.reload()	},	expandNode : function ($) {		if (typeof $ == "object")			$ = $[this.valueField];		if (!$)			return;		this._ecConfig.collapseNodes.remove($);		if (this._ecConfig.expandNodes.indexOf($) == -1)			this._ecConfig.expandNodes.push($);		this.reload()	},	collapseNode : function ($) {		if (typeof $ == "object")			$ = $[this.valueField];		if (!$)			return;		this._ecConfig.expandNodes.remove($);		if (this._ecConfig.collapseNodes.indexOf($) == -1)			this._ecConfig.collapseNodes.push($);		this.reload()	},	toggleNode : function ($) {		var _ = this.getNode($);		if (!_)			return;		if (this.isExpanded(_))			this.collapseNode(_);		else			this.expandNode(_)	},	_doLoad : function ($, _, A) {		$ = $ || {};		$._ECCONFIG = mini.encode(this._ecConfig);		return mini.TreeGrid.superclass._doLoad.call(this, $, _, A)	},	_OnCellMouseDown : function (A) {		var $ = A.htmlEvent,		_ = A.record;		if (mini.findParent($.target, "mini-treegrid-ec-icon"));		else			mini.TreeGrid.superclass._OnCellMouseDown.call(this, A)	},	_OnCellClick : function (B) {		var $ = B.htmlEvent,		A = B.record,		_ = B.column;		if (mini.findParent($.target, "mini-treegrid-ec-icon"))			this.toggleNode(A);		else			this.fire("cellclick", B)	},	getAttrs : function ($) {		var _ = mini.TreeGrid.superclass.getAttrs.call(this, $);		mini._ParseString($, _, ["treeColumn", "iconField", "valueField"]);		mini._ParseBool($, _, ["showTreeIcon", "showTreeLines"]);		return _	}});mini.regClass(mini.TreeGrid, "treegrid")